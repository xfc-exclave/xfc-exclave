{
    "version": "https://jsonfeed.org/version/1",
    "title": "チンモクのブログ",
    "subtitle": "露の世は　露の世ながら　さりながら",
    "icon": "https://www.chinmoku.cc/images/favicon.ico",
    "description": "本站主要以Java开发总结文章为主，也会向技术周边进行适当的扩展。此外，偶尔会更新部分其他学习或感兴趣的内容，如语言学习、文本翻译、文艺创作等。",
    "home_page_url": "https://www.chinmoku.cc",
    "items": [
        {
            "id": "https://www.chinmoku.cc/computer-science/web/react-tutorial/",
            "url": "https://www.chinmoku.cc/computer-science/web/react-tutorial/",
            "title": "React 通关指南",
            "date_published": "2022-05-26T11:37:53.000Z",
            "content_html": "<div class=\"note info\">\n<p>最近一段时间特别喜欢前端，这些天在 B 站上找到一个感觉特别良好的视频教程，自我感觉还算是比较用心地跟着学习了一下，但在学习过程中不太方便做笔记，为了避免即学即忘，所以在学完之后，赶紧详细整理一下 React 相关笔记。</p>\n</div>\n<p>在开篇之前有一些<mark>题外话</mark>需要说明，当然，既然是题外话，就与学习 React 本身无关，是本篇文章维护相关但内容，您也完全<mark>可以先行忽略</mark>。</p>\n<ol>\n<li>\n<p>本博客的主题对某些大人来说或许略显花哨（历史原因），这里提供本文的<a href=\"https://note.youdao.com/s/YUgbX7G\"><strong> React 通关指南（有道笔记版）</strong></a>，但是无法保证该版本更新的及时性和链接长期有效。</p>\n</li>\n<li>\n<p>本博客暂不愿接受任何形式的转载（可以引用），个人觉得 “转载” 机制不利于营造良好的学习氛围（仅个人观点，不参与争论）。</p>\n</li>\n<li>\n<p>xxx</p>\n</li>\n</ol>\n<h3 id=\"react-入门\"><a class=\"anchor\" href=\"#react-入门\">#</a> React 入门</h3>\n<div class=\"note success\">\n<p>尊敬的旅者，欢迎来到 React 的世界，我是您此段行程的向导（也被称为 “稀里糊涂的 NPC”），刚刚度过了煎熬的五大天，终于从 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXd5NHkxRDdKVA==\">NPC 培训中心</span>（指 B 站）顺利毕业，为了不辜负师长的期望（假设有），我决定努力做一个优秀的 NPC，因此有了这篇文章。</p>\n<p>这篇文章严重参考了该培训中心的相关资料，也有少部分掺杂了微不足道的我的小小见解，希望旅者大人们不要见怪。为了改善大人们的旅途体验，微不足道的我使用了  <code>CodePen</code>  和  <code>Codesandbox</code>  为文中的部分代码编写了在线运行实例，如果一不小心弄巧成拙，也请大人们原谅微不足道的我的过失。</p>\n<p>当然了，旅途总是<strong>漫长</strong>的，希望旅者大人们合理安排时间。</p>\n</div>\n<h4 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h4>\n<p>一提到 Web 前端开发，我们很容易就能想到前端的三大主流框架：Vue、React、Angular。个人觉得 Web 前端开发首选推荐肯定是 Vue，React 可以作为在掌握 Vue 知识基础上的扩展，当然，Vue 语言在设计之初就对 React 进行了借鉴，所以二者之间存在诸多联系和相似点，至于 Angular 暂时还不在笔者对学习考虑范围内，不作相关扩展。</p>\n<p>另外，从 Vue 和 React 两者官网的描述也可看出两者本质上的差异。</p>\n<blockquote>\n<p><code>React</code>  是一个用于构建用户界面的 JavaScript 库。</p>\n<p><code>Vue</code>  是一套用于构建用户界面的渐进式框架。</p>\n</blockquote>\n<p>因此，对于学习而言，Vue 封装了更多的 API，对于学习前期有更多的帮助，而 React 则更加适合在掌握 Vue 的基础上对前端知识进行深化，它更容易帮助学习者从简单的框架使用之中脱离出来，逐渐理解框架运行的底层实现。</p>\n<p><strong>React 官网</strong></p>\n<ol>\n<li>\n<p>英文官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmVhY3Rqcy5vcmc=\">https://www.reactjs.org</span></p>\n</li>\n<li>\n<p>中文官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWFjdC5kb2NzY2hpbmEub3Jn\">https://react.docschina.org</span></p>\n</li>\n</ol>\n<p><strong>介绍描述</strong></p>\n<p><strong>特点</strong></p>\n<ol>\n<li>\n<p>声明式编码。</p>\n</li>\n<li>\n<p>组件化编码。</p>\n</li>\n<li>\n<p>React Native 可编写原生应用。</p>\n</li>\n<li>\n<p>高效（使用优秀的 Diffing 算法）。</p>\n</li>\n</ol>\n<p>🍎 React 高效的原因？</p>\n<ol>\n<li>\n<p>使用虚拟 DOM，并非总是直接操作页面的真实 DOM。</p>\n</li>\n<li>\n<p>DOM 采用 Diffing 算法，使页面最小程度地进行重新渲染。</p>\n</li>\n</ol>\n<h4 id=\"基本使用\"><a class=\"anchor\" href=\"#基本使用\">#</a> 基本使用</h4>\n<blockquote>\n<p>为了方便在学习过程中能够更加直观地展示页面效果，您可以通过 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3hmYy1leGNsYXZlL3Blbi9Qb1F6SmR2\">Codepen</span> 等工具进行在线编程。</p>\n</blockquote>\n<p><strong>Hello World</strong></p>\n<p>以下是一个最基础的 React 示例，您可以借此对 React 拥有一个基本的认知：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Hello React<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 准备好用于渲染 DOM 的容器 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react@16/umd/react.development.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react-dom@16/umd/react-dom.development.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/babel-standalone@6/babel.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/babel<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 创建虚拟 DOM</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token constant\">VDOM</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Hello<span class=\"token punctuation\">,</span> React<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 将虚拟 DOM 渲染到页面的指定节点中</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token constant\">VDOM</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"app\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>为了方便查看运行效果，您可以<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3hmYy1leGNsYXZlL3Blbi9Qb1F6SmR2\">点击此处</span>进行在线预览，当然，您也可以亲自尝试一下。</p>\n<p>如代码所示，通过 CDN 方式引入 React，你需要引入如下三个文件：</p>\n<ol>\n<li>\n<p>react.development.js - React 核心库。</p>\n</li>\n<li>\n<p>react-dom.development.js - 提供操作 DOM 的 React 扩展库。</p>\n</li>\n<li>\n<p>babel.min.js - 用于解析 JSX 的库。</p>\n</li>\n</ol>\n<p>并且，与普通的 JavaScript 代码不同的是，React 脚本的类型需要声明为  <code>text/babel</code> ，其作用在于解析 JSX 语法代码并将其转换为浏览器识别的 JS 代码。</p>\n<p>在学习过 Web 基础之后，我们知道可以通过  <code>document.createElement()</code>  来创建 DOM 元素，但在 React 中采用了 JSX 语法来替代原生 JavaScript 创建 DOM 的方式。</p>\n<p><strong>虚拟 DOM 与真实 DOM</strong></p>\n<p>虚拟 DOM 是 React 的亮点之一，所谓虚拟 DOM，即非真实的 DOM。其实虚拟 DOM 本质上是一个一般对象，它相较于真实 DOM 而言拥有更少的属性，且无法在浏览器中直接显示。虚拟 DOM 去除了很多真实 DOM 中存在但程序编码无需关注的属性。</p>\n<p>虚拟 DOM 的引入使页面更新效率得到了极大的提升，由于真实 DOM 直接作用于页面，对于任何一次更新，真实 DOM 都会重新进行渲染，即便该更新内容只适应于极小的范围，这就造成了浏览器性能的极大浪费。而虚拟 DOM 则充当了用户与真实 DOM 之间的过滤助手，它通过 Diffing 算法，识别出需要更新的数据节点，并将其转换为真实 DOM，而对于未做变更的数据节点，则无需进行 DOM 转换，这样就极大程度地将数据变更控制在了最小的元素单元内。</p>\n<p>对此，React 提供了用于创建虚拟 DOM 的 API，其声明示例如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ================ 使用 javascript 创建虚拟 DOM</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// React.createElement(node, attributes, content)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">VDOM</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>id<span class=\"token operator\">:</span> <span class=\"token string\">'title'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello, React~'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// ================ 使用 jsx 创建虚拟 DOM // 注意：使用 jsx 需要指定 javascript 类型为 text/babel</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token constant\">VDOM</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">&lt;</span>h1 id<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>Hello<span class=\"token punctuation\">,</span> React<span class=\"token operator\">~</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token constant\">VDOM</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>从这个示例中，相信您很容易可以看出 JSX 语法的优势所在。</p>\n<h4 id=\"react-jsx\"><a class=\"anchor\" href=\"#react-jsx\">#</a> React JSX</h4>\n<p>通过前文的了解，我们可以看出 JSX 的基本语法与 JavaScript 语法十分相似，而其虚拟 DOM 创建的语法又与 html 语法如出一辙。但是，JSX 与这二者之间仍存在诸多不同之处，观察下面这段代码清单，您或许会有更加深刻的感受：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">VDOM</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token operator\">&lt;</span>h2 className<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span> id<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>myId<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token operator\">&lt;</span>span style<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">>></span><span class=\"token punctuation\">&#123;</span>myData<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token operator\">&lt;</span>h2 className<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span> id<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>myId<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token operator\">&lt;</span>span style<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">>></span><span class=\"token punctuation\">&#123;</span>myData<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token constant\">VDOM</span><span class=\"token punctuation\">,</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>从这段代码清单中可以看出，相比于 JavaScript 和 html，JSX 还需要遵循一些额外的规则，这里总结 JSX 的语法规则如下：</p>\n<ol>\n<li>\n<p>JSX 在定义虚拟 DOM 时，不应当加引号，否则虚拟 DOM 内容会被识别为普通字符串。</p>\n</li>\n<li>\n<p>JSX 标签中混入 JavaScript 语法时，应当使用符号  <code>&#123;&#125;</code>  包裹。</p>\n</li>\n<li>\n<p>虚拟 DOM 节点的类属性应当使用  <code>className</code>  而非  <code>class</code> 。</p>\n</li>\n<li>\n<p>虚拟 DOM 中的内联样式需要使用  <code>style=&#123;&#123;key: value&#125;&#125;</code>  进行书写，且其内的 CSS 属性名也需要使用驼峰命名方式。</p>\n<blockquote>\n<p>可以理解为 style 中传入的是一个表示样式内容的 JS 对象。</p>\n</blockquote>\n</li>\n<li>\n<p>虚拟 DOM 只能有一个根标签。</p>\n</li>\n<li>\n<p>所有虚拟 DOM 的标签都必须闭合。</p>\n</li>\n<li>\n<p>虚拟 DOM 标签首字母小写时，转换真实 DOM 则会匹配同名的 html 元素，首写字母大写时，React 则会渲染对应的组件，若对应组件不存在，则会抛出异常。</p>\n</li>\n</ol>\n<p><strong>JS 表达式 / JS 语句</strong></p>\n<p>值得注意的是，在 JSX 中允许书写 JS 表达式，但不允许书写 JS 语句。</p>\n<p>表达式和语句的区别在于，前者可以产生一个值，可以放在任何需要值的地方，且能够被其他变量接收，它们通常会占用一定的内存空间，而后者则更多地偏向于进行代码的控制。</p>\n<p>JS 表达式示例：</p>\n<ol>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>a + b</p>\n</li>\n<li>\n<p>handler(20)</p>\n</li>\n<li>\n<p>arr.map()</p>\n</li>\n<li>\n<p>function handler(params) {}</p>\n</li>\n</ol>\n<p>JS 代码示例：</p>\n<ol>\n<li>\n<p>if(condition) {}</p>\n</li>\n<li>\n<p>for(var item in arr) {}</p>\n</li>\n<li case:=\"\" xxx=\"\">\n<p>switch(condition)</p>\n</li>\n</ol>\n<p><strong>虚拟 DOM 渲染</strong></p>\n<p>语法： <code>ReactDOM.render(virtualDOM, containerDOM)</code> 。</p>\n<h4 id=\"模块-组件-模块化-组件化\"><a class=\"anchor\" href=\"#模块-组件-模块化-组件化\">#</a> 模块、组件、模块化、组件化</h4>\n<ol>\n<li>\n<p>模块</p>\n<p>所谓模块，通常是一个向外提供特定功能的 JavaScript 程序，一般就是一个 JS 文件。</p>\n<p>模块的拆分，有利于代码解耦，使代码逻辑更清晰，更容易维护。此外，拆分模块还可以方便 JS 复用，简化 JS 编写，提高 JS 运行效率。</p>\n</li>\n<li>\n<p>组件</p>\n<p>组件通常是用来实现局部功能效果的代码和资源的集合，该集合中包含所有实现该组件的相关资源。</p>\n<p>随着页面功能的增加，使用组件对不同功能进行代码聚合，能够很方便地做到即取即用。当不再需要该组件时，能够轻松进行卸载，而不会引起代码的异常连锁。</p>\n<p>总之，组件化是前端发展的趋势，甚至，相同的思想在其他各种语言、各种类型的程序中都已进行了广泛的应用。其典型特点就是：可插拔，易扩展，低耦合，高性能。当然，与之相应的，也会存在一定的学习成本。</p>\n</li>\n<li>\n<p>模块化</p>\n</li>\n<li>\n<p>组件化</p>\n</li>\n</ol>\n<blockquote>\n<p>编程过程中难免会碰到很多  <code>~ ~ 化</code>  的概念，其实无非是加上了  <code>-ization</code>  的区别。如果你能够正确地区分【商业】和【商业化】、【工业】和【工业化】，理解这些概念就不是什么难事了。其实这些只是语文上的区别，所谓的 “某某化”，其实就是将这个 “某某” 进行大范围、大规模地应用，并形成一定的规范而已。</p>\n</blockquote>\n<h3 id=\"react-面向组件编程\"><a class=\"anchor\" href=\"#react-面向组件编程\">#</a> React 面向组件编程</h3>\n<h4 id=\"基本理解和使用\"><a class=\"anchor\" href=\"#基本理解和使用\">#</a> 基本理解和使用</h4>\n<p><strong>React 开发者工具</strong></p>\n<p>如使用 Chrome 浏览器进行开发，可在 Chrome 商店安装  <code>React Developer Tools</code>  来帮助开发和调试。</p>\n<p>chrome 应用商店：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9jYXRlZ29yeS9leHRlbnNpb25z\">https://chrome.google.com/webstore/category/extensions</span></p>\n<p><img data-src=\"https://img.xfc-exclave.com/2022/05/ceb9e52b1bc5edfc74b2a6e1e97527ec1652881005.png\" alt=\"ChromeReactdevelopertools\" /></p>\n<p>将其添加至 Chrome，当访问 React 开发的网页时，即可打开控制台进行调试。</p>\n<p>您也可以在添加该插件后，开启该插件并借助<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWVpdHVhbi5jb20=\">美团官网</span>体验一下该插件的相关功能。</p>\n<p><strong>React 组件声明方式</strong></p>\n<p>React 中组件有两种声明方式：</p>\n<ol>\n<li>\n<p>函数式组件</p>\n<p>声明方式：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/babel<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 由于 babel 编译之后开启了严格模式，因此 this 将指向 undefined</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>函数式组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>MyComponent<span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>执行流程说明：</p>\n<p>babel 在解析 JSX 的过程中，读取到  <code>ReactDOM.render()</code> ，发现其组件标签为  <code>&lt;MyComponent/&gt;</code>  是通过函数进行定义的，因此就会执行该函数并得到其返回值，然后将返回值作为虚拟 DOM，最终转换为真实 DOM 并渲染到页面。</p>\n</li>\n<li>\n<p>类式组件</p>\n<p>声明方式：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/babel<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">// 类式组件可声明构造器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token comment\">//render 存在于当前组件的原型对象上，供该组件的实例使用</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//this 指向当前组件的实例对象</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>类式组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>MyComponent<span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>执行流程说明：</p>\n<p>babel 在解析 JSX 的过程中，读取到  <code>ReactDOM.render()</code> ，发现其组件标签为  <code>&lt;MyComponent/&gt;</code>  是通过类进行定义的，于是其内部就会通过关键字  <code>new</code>  实例化出该类的实例，并通过该实例调用到原型上的 render 方法，然后将 render 的返回值作为虚拟 DOM，最终转换为真实 DOM 并渲染到页面。</p>\n<p>构造器：</p>\n<p>构造器也被称为构造函数，它存在于 C、Java、Python 等诸多语言中，其作用主要是在创建对象时进行初始化，其执行时机通常是在使用  <code>new</code>  关键字（显式或隐式）创建对象时执行，并且在该对象的生命周期中只执行一次。构造函数通常是默认存在的，并且允许被覆盖重写。</p>\n</li>\n</ol>\n<blockquote>\n<p>在新版本的 React 中已经推荐使用函数式组件，但由于类式组件更易于理解，因此，本文将先着重从类式组件来解述组件相关知识，最后在归纳在函数式组件中的用法差异。</p>\n</blockquote>\n<p><strong>React 组件实例三大属性</strong></p>\n<p>React 组件实例拥有三大属性，它们共同丰富了组件的功能。</p>\n<ol>\n<li>\n<p>state</p>\n</li>\n<li>\n<p>props</p>\n</li>\n<li>\n<p>refs</p>\n</li>\n</ol>\n<p>在后面的组件内容中，将对 React 组件三大属性进行逐一说明。</p>\n<h4 id=\"三大核心属性state\"><a class=\"anchor\" href=\"#三大核心属性state\">#</a> 三大核心属性：state</h4>\n<p>state 是 React 组件最重要的属性，其对应的值被声明为对象类型。从字面解读，该属性被称为 “状态机”，（个人认为）也可以理解为一个数据集，其作用是用来存储核心数据，相当于 Vue 中的 data。</p>\n<p><strong>state 的基本使用</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginStatus</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'constructor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>isLogin<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> username<span class=\"token operator\">:</span> <span class=\"token string\">'路易斯'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 通过 .bind (this) 可以将 this 对象传递到 switchLogin () 函数中（强制绑定，不推荐）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>switchLogin <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">switchLogin</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//state = &#123;isLogin: false, username: ' 路易斯 '&#125; // 构造器中的初始化内容可以声明在外侧，但需要注意 this 指向</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'render'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>isLogin<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">></span>早上好！<span class=\"token operator\">&lt;</span>span style<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">3</span><span class=\"token operator\">--</span><span class=\"token operator\">>></span><span class=\"token punctuation\">&#123;</span>username<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>，<span class=\"token punctuation\">&#123;</span>isLogin <span class=\"token operator\">?</span> <span class=\"token string\">'欢迎访问XXX系统！'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'请点击下方按钮进行登录~'</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>switchLogin<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>isLogin <span class=\"token operator\">?</span> <span class=\"token string\">'注销'</span><span class=\"token operator\">:</span> <span class=\"token string\">'登录'</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">switchLogin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'switchLogin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">const</span> isLogin <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isLogin</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>isLogin<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>isLogin<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>LoginStatus<span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>您可以<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3hmYy1leGNsYXZlL3Blbi9hYnFKT0d6\">点击此处</span>进行在线预览执行效果，浏览时推荐打开浏览器控制台查看相关的输出内容。</p>\n<p>在这个示例中，请着重注意以下几个问题：</p>\n<p>🍎 state 内的数据是通过什么方式进行变更的？</p>\n<p>state 维护的数据只能通过 React 组件对象示例的  <code>setState()</code>  方法进行调用。</p>\n<p>扩展资料：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzQ0MDkxNjI5NC9hbnN3ZXIvMTc0ODU1ODU3Mg==\">知乎：React 为什么不能直接修改 state？</span></p>\n<p>🍎 构造器和 render 函数分别在什么时候执行，以及它们各自会被调用多少次？</p>\n<p>构造器在实例声明的时候调用，且只调用一次。render 函数则在除了在 state 渲染到页面时调用外，还会在每次 setState 函数执行时调用，即 render 被调用次数为 setState 函数调用次数加一。</p>\n<p>🍎 可以不声明构造器吗？构造器中的  <code>super()</code>  的位置有什么要求？以及它的作用是什么？</p>\n<p>React 类式组件可以不显示声明构造器，但  <code>React.Component</code>  中是默认存在的。如显式声明构造器，则必须指定  <code>super()</code>  函数，且应当保证其在构造器内所有的有效代码中第一位执行，这是因为 super 函数会继承父类的 this 对象并对其进行加工。</p>\n<p>🍎 构造器及其 super 函数的  <code>props</code>  参数是否必须？</p>\n<p>不是必须，视需要而定，如需要在构造器中使用 props 对象，则必须传递。</p>\n<p><strong>代码改造</strong></p>\n<p>事实上，在 React 类式组件中，通过  <code>function</code>  关键字声明的函数，在函数体中是无法直接获取到 this 对象的，但通过箭头函数声明却可以轻易地获取到 this 对象，基于上面的示例进行改造如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginStatus</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    state <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> isLogin<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> username<span class=\"token operator\">:</span> <span class=\"token string\">'路易斯'</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> isLogin<span class=\"token punctuation\">,</span> username <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">></span>早上好！<span class=\"token operator\">&lt;</span>span style<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">4</span><span class=\"token operator\">--</span><span class=\"token operator\">>></span><span class=\"token punctuation\">&#123;</span>username<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>，<span class=\"token punctuation\">&#123;</span>isLogin <span class=\"token operator\">?</span> <span class=\"token string\">'欢迎访问XXX系统！'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'请点击下方按钮进行登录~'</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>switchLogin<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>isLogin <span class=\"token operator\">?</span> <span class=\"token string\">'注销'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'登录'</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function-variable function\">switchLogin</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">const</span> isLogin <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isLogin</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> isLogin<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>isLogin <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>LoginStatus <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在这个示例中，箭头函数中的 this 指向不会丢失，这是因为箭头函数不会创建其自身的执行上下文，因此箭头函数中的 this 会向其作用域外层逐层查找，直到找到 this 的定义。</p>\n<h4 id=\"三大核心属性props\"><a class=\"anchor\" href=\"#三大核心属性props\">#</a> 三大核心属性：props</h4>\n<p>React 中的每个组件都会有其自身的  <code>props</code>  属性，该属性值来源于组件标签中的传递的属性，其作用即是通过标签属性从组件外部向组件内部传递变化的数据。</p>\n<p><strong>props 的基本使用</strong></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>node01<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>node02<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>node03<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/babel<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> gender <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>姓名：<span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>性别：<span class=\"token punctuation\">&#123;</span>gender<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>年龄：<span class=\"token punctuation\">&#123;</span>age<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Person name<span class=\"token operator\">=</span><span class=\"token string\">\"Tom\"</span> age<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">19</span><span class=\"token punctuation\">&#125;</span> gender<span class=\"token operator\">=</span><span class=\"token string\">\"男\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node01'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Person name<span class=\"token operator\">=</span><span class=\"token string\">\"Jerry\"</span> age<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span> gender<span class=\"token operator\">=</span><span class=\"token string\">\"女\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node02'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Spike'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> gender<span class=\"token operator\">:</span> <span class=\"token string\">'男'</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 使用扩展运算符（展开运算符）</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Person <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span>p<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node03'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>您可以<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3hmYy1leGNsYXZlL3Blbi9xQnhyYWJL\">点击此处</span>在线预览该代码片段的执行效果，浏览时推荐打开浏览器控制台查看相关的输出内容。</p>\n<blockquote>\n<p>JavaScript 扩展运算符是 ES6 中的语法糖，如不熟悉的，可百度自行了解。</p>\n</blockquote>\n<p><strong>props 参数限制与默认值</strong></p>\n<p>此外，props 在接收参数时，也可以对参数类型等进行一系列限制及指定默认值，使其符合组件预期的规范，例如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">static</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 指定默认值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        gender<span class=\"token operator\">:</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        age<span class=\"token operator\">:</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 类型限制及默认类型，既可以通过 static 关键字在类内部声明，也可以在类外部声明</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> gender <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>姓名：<span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>性别：<span class=\"token punctuation\">&#123;</span>gender<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>年龄：<span class=\"token punctuation\">&#123;</span>age<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Person<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    name<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 必须传递限制</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    gender<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span><span class=\"token comment\">// 字符串类型限制</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    age<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span><span class=\"token comment\">// 数值类型限制</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    speak<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">,</span><span class=\"token comment\">// 函数类型限制</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Person name<span class=\"token operator\">=</span><span class=\"token string\">\"Tom\"</span> age<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">19</span><span class=\"token punctuation\">&#125;</span> speak<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>speak<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node01'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Person name<span class=\"token operator\">=</span><span class=\"token string\">\"Jerry\"</span> gender<span class=\"token operator\">=</span><span class=\"token string\">\"女\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node02'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Spike'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> gender<span class=\"token operator\">:</span> <span class=\"token string\">'男'</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Person <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span>p<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node03'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"speak()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但值得注意的是，类型限制需要引入一个  <code>prop-types.js</code>  作为支撑，你可以参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcHJvcC10eXBlcw==\">npmjs.com</span> 选择合适的 CDN 库，也可以参考我为您编写的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3hmYy1leGNsYXZlL3Blbi9CYVlXTGVR\">在线代码片段</span>，并尝试触发类型校验。</p>\n<p><strong>props 在函数式组件中的使用</strong></p>\n<p>与 state 不同，props 参数在 React 函数式组件中是可以直接获取到的，它主要是通过函数的参数进行传递的：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> gender <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> props</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>姓名：<span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>性别：<span class=\"token punctuation\">&#123;</span>gender<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>年龄：<span class=\"token punctuation\">&#123;</span>age<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Person<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 指定默认值</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    gender<span class=\"token operator\">:</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    age<span class=\"token operator\">:</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Person<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    name<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 必须传递限制</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    gender<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span><span class=\"token comment\">// 字符串类型限制</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    age<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span><span class=\"token comment\">// 数值类型限制</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Person name<span class=\"token operator\">=</span><span class=\"token string\">\"Tom\"</span> age<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">19</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node01'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"三大核心属性refs\"><a class=\"anchor\" href=\"#三大核心属性refs\">#</a> 三大核心属性：ref (s)</h4>\n<p>组件内的标签可以通过  <code>ref</code>  属性来标识自己，通过该属性，可以很方便地获取到当前的节点信息。</p>\n<p><strong>ref 的基本使用</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Form</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function-variable function\">search</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> query <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>refs</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'捕获的节点信息：'</span><span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'搜索关键字：'</span><span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function-variable function\">showName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> username <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'输入的用户名为'</span><span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    myRef <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function-variable function\">showAddress</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'输入的地址为'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>普通形式的 ref<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token string\">\"query\"</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"请输入搜索内容\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>搜索<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>回调函数形式的 ref<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> c<span class=\"token punctuation\">&#125;</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"请输入用户姓名\"</span> onBlur<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>showName<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>左侧输入框离焦取值<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>createRef 的使用<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myRef<span class=\"token punctuation\">&#125;</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"请输入用户地址\"</span> onBlur<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>showAddress<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>左侧输入框离焦取值<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Form <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>您可以<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3hmYy1leGNsYXZlL3Blbi9keWR2TnB6\">点击此处</span>在线预览该代码片段的执行效果，浏览时推荐打开浏览器控制台查看相关的输出内容。</p>\n<p><strong>事件处理</strong></p>\n<p>React 组件中的事件是通过类似  <code>onClick</code>  这种驼峰命名的属性来指定事件处理函数的，在 React 使用事件处理时，您应当注意如下几点：</p>\n<ol>\n<li>\n<p>React 使用的是自定义事件，而不是使用的原生 DOM 事件，其目的是为了更好的兼容性。</p>\n</li>\n<li>\n<p>React 中的事件是通过事件委托方式处理的（委托给组件最外层的元素），其目的是为了的高效。</p>\n</li>\n<li>\n<p>官方明确提出，不应当过渡使用  <code>ref</code>  属性。在许多常规情形中，我们可以通过  <code>event.target</code>  来获取当前的 DOM 对象，用于替代 ref。</p>\n</li>\n</ol>\n<h4 id=\"表单处理\"><a class=\"anchor\" href=\"#表单处理\">#</a> 表单处理</h4>\n<p>React 中有两种形式来处理表单输入：</p>\n<ol>\n<li>\n<p>受控组件</p>\n<p>简单理解，如果一个表单元素的值是交由 React 组件进行维护（控制），那么我们就称其为受控组件，例如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Login</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> username<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> password<span class=\"token operator\">:</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function-variable function\">saveUsername</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> username<span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function-variable function\">savePassword</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> password<span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function-variable function\">handleSubmit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 阻止表单提交</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> username<span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">你输入的用户名是：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>username<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">,你输入的密码是：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>password<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>         用户名：<span class=\"token operator\">&lt;</span>input onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>saveUsername<span class=\"token punctuation\">&#125;</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>         密码：<span class=\"token operator\">&lt;</span>input onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>savePassword<span class=\"token punctuation\">&#125;</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         <span class=\"token operator\">&lt;</span>button<span class=\"token operator\">></span>登录<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Login <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>非受控组件</p>\n<p>与受控组件相反，如果一个表单元素的值不是交由 React 组件进行维护，那么我们就称其为非受控组件，例如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Login</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function-variable function\">handleSubmit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 阻止表单提交</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> username<span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">你输入的用户名是：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>username<span class=\"token punctuation\">.</span>value<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">,你输入的密码是：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>password<span class=\"token punctuation\">.</span>value<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         用户名：<span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> c<span class=\"token punctuation\">&#125;</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         密码：<span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> c<span class=\"token punctuation\">&#125;</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         <span class=\"token operator\">&lt;</span>button<span class=\"token operator\">></span>登录<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Login <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"组件的生命周期\"><a class=\"anchor\" href=\"#组件的生命周期\">#</a> 组件的生命周期</h4>\n<p><img data-src=\"https://img.xfc-exclave.com/2022/05/4b9b8a1c7eac3d7b59a9eac39564aa411652881119.png\" alt=\"React组件的生命周期\" /></p>\n<p>所谓的生命周期，其实就是对象从创建到销毁的整个过程。React 组件中包含了一系列钩子函数（生命周期函数），能够在其生命周期的不同阶段调用执行。通过这些钩子函数，使我们可以很方便地在 React 组件生命的各个阶段监控其状态或执行一些特定的代码。</p>\n<p>总体而言，React 组件的生命周期可分为三个阶段：</p>\n<blockquote>\n<p>下面的徽标表示对应的重要程度，后文会进行详细说明。</p>\n</blockquote>\n<ol>\n<li>\n<p>挂载阶段（Mounting）</p>\n<p>当组件实例被创建并插入 DOM 中时，其生命周期调用顺序如下：</p>\n<ul>\n<li>\n<p>constructor - <span class=\"label primary\">普通</span></p>\n</li>\n<li>\n<p>static getDerivedStateFromProps - <span class=\"label\">忽略</span></p>\n</li>\n<li>\n<p>render - <span class=\"label danger\">重要</span></p>\n</li>\n<li>\n<p>componentDidMount - <span class=\"label danger\">重要</span></p>\n</li>\n</ul>\n</li>\n<li>\n<p>更新阶段（Updating）</p>\n<p>当组件的 props 或 state 发生变化时会触发更新。组件更新的生命周期调用顺序如下：</p>\n<ul>\n<li>\n<p>static getDerivedStateFromProps - <span class=\"label\">忽略</span></p>\n</li>\n<li>\n<p>shouldComponentUpdate - <span class=\"label\">忽略</span></p>\n</li>\n<li>\n<p>render - <span class=\"label danger\">重要</span></p>\n</li>\n<li>\n<p>getSnapshotBeforeUpdate - <span class=\"label\">忽略</span></p>\n</li>\n<li>\n<p>componentDidUpdate - <span class=\"label primary\">普通</span></p>\n</li>\n</ul>\n</li>\n<li>\n<p>卸载阶段（Unmounting）</p>\n<p>当组件从 DOM 中移除时会调用如下方法：</p>\n<ul>\n<li>componentWillUnmount - <span class=\"label danger\">重要</span></li>\n</ul>\n</li>\n</ol>\n<p>如上，在 React 生命周期中，共计有 8 个生命周期函数，这里分别使用了不同的徽标来表示它们的重要性。其中真正重要的只有 3 个（必须熟知），标记普通的有 2 个（了解或掌握），标记忽略的有 3 个（不常用可忽略）。这些重要性标签是出于常规角度考虑，如果您出于面试等知识点考察的需要，推荐直接阅读<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC1oYW5zLnJlYWN0anMub3JnL2RvY3MvcmVhY3QtY29tcG9uZW50Lmh0bWw=\">官方文档：React 组件的生命周期</span>。</p>\n<p>另外，您也可以借助 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9wcm9qZWN0cy53b2p0ZWttYWoucGwvcmVhY3QtbGlmZWN5Y2xlLW1ldGhvZHMtZGlhZ3JhbS8=\">React 组件生命周期图谱</span>来获得更加直观的认知，该图谱很有对于理解 React 生命周期很有益处，请务必看一看。</p>\n<p><strong>三个重要的生命周期函数：</strong></p>\n<ol>\n<li>\n<p>render</p>\n<p>render 是类式组件中唯一必须实现的方法，它在初始化渲染或更新渲染时调用。当 render 被调用时，它会检查  <code>this.props</code>  和  <code>this.state</code>  的变化并返回以下类型之一：</p>\n<ul>\n<li>\n<p>React 元素</p>\n</li>\n<li>\n<p>数组或 fragments</p>\n</li>\n<li>\n<p>Portals</p>\n</li>\n<li>\n<p>字符串或数值类型</p>\n</li>\n<li>\n<p>布尔或 null</p>\n</li>\n</ul>\n</li>\n<li>\n<p>componentDidMount</p>\n<p>componentDidMount 会在组件挂载后立即调用，它适用于一些依赖于 DOM 节点的初始化操作。</p>\n</li>\n<li>\n<p>componentWillUnmount</p>\n<p>componentWillUnmount 会在组件卸载及销毁之前调用，它适用于进行一些必要的收尾操作，例如断开通讯连接、清除定时器等。</p>\n</li>\n</ol>\n<p><strong>两个普通程度的生命周期函数</strong></p>\n<ol>\n<li>\n<p>constructor</p>\n<p>从前文中，我们已经获知 constructor 的作用在于对组件实例对象进行初始化。但在实际应用中，对于实现同样的功能，constructor 通常可以被其他方式等效替代，因此其重要程度相对较低。</p>\n</li>\n<li>\n<p>componentDidUpdate</p>\n<p>componentDidUpdate 会在 state 或 props 更新后立即调用，但当组件首次渲染，则不会执行该方法。此外，它还可以记录前一次变更的参数信息，基于这个特性，我们可以有效地监控数据的变更，对于一些特定的需求有较大帮助。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">componentDidUpdate</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">preProps<span class=\"token punctuation\">,</span> preState<span class=\"token punctuation\">,</span> snapshotValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>preProps<span class=\"token punctuation\">,</span> preState<span class=\"token punctuation\">,</span> snapshotValue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>需要注意的是，由于该函数本身是监控数据变更状态的，因此，当需要在该函数中修改数据时，请务必注意避免导致死循环。</p>\n</li>\n</ol>\n<p><strong>三个标记忽略的生命周期函数</strong></p>\n<p>剩下三个标记忽略的生命周期函数，在官方文档中已明确为<strong>不常用的生命周期方法</strong>，此处不做扩展，如需要了解请直接阅读官方文档。</p>\n<p>关于组件的生命周期，您可以尝试执行一下我为您编写的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3hmYy1leGNsYXZlL3Blbi9HUlFXVnlW\">小案例</span>。</p>\n<blockquote>\n<p>注：React 旧版本中的生命周期略有不同，但个人觉得没必要了解，毕竟技术这东西总是学新不学旧。如感兴趣，可以自行百度一下。</p>\n</blockquote>\n<h4 id=\"虚拟-dom-与-diffing-算法\"><a class=\"anchor\" href=\"#虚拟-dom-与-diffing-算法\">#</a> 虚拟 DOM 与 Diffing 算法</h4>\n<p><img data-src=\"https://s3.51cto.com/images/blog/202108/01/f1c6e6b8bdf6574152421717ac9518b6.png\" alt=\"Diffing算法\" /></p>\n<p>上图源于网络（侵删），有助于理解 Diffing 算法，您可以带着对该图的印象继续阅读下文。</p>\n<p><strong>虚拟 DOM 中 key 的作用</strong></p>\n<p>key 是虚拟 DOM 对象的标识，用于帮助 React 识别哪些元素被改变了。</p>\n<p>当状态中的数据发生变化时，React 会根据新数据生成新的虚拟 DOM，然后将新虚拟 DOM 和旧虚拟 DOM 进行 diff 比较，其比较规则如下：</p>\n<ol>\n<li>\n<p>如果旧的虚拟 DOM 中存在与新的虚拟 DOM 相同的 key：</p>\n<p>则判断虚拟 DOM 中的内容是否变更，如果没变更，则直接使用真实 DOM，如果有变更，则生成新的真实 DOM 并替换掉页面上旧的真实 DOM。</p>\n</li>\n<li>\n<p>反之，如果旧的虚拟 DOM 中不存在与新的虚拟 DOM 相同的 key：</p>\n<p>则直接根据数据创建新的真实 DOM 并渲染到页面。</p>\n</li>\n</ol>\n<p>🍎 <strong>可以使用 index 作为虚拟 DOM 的 key 吗？</strong></p>\n<p>可以，但极不推荐。当使用索引作为虚拟 DOM 的 key 时：</p>\n<ul>\n<li>若对数据进行：逆序添加、逆序删除等破坏顺序的操作，会产生没必要的真实 DOM 更新，相当于任何一次修改都会对列表中的数据进行全量更新，效率低。</li>\n<li>如果列表结构中包含有输入类的 DOM，则会出现错误的 DOM 更新。</li>\n</ul>\n<p>因此，如果不存在对数据的逆序添加、逆序删除等破坏顺序的操作，仅用于列表渲染展示，那么使用索引作为 key 是不会引发异常的。</p>\n<p>关于这一部分，您也可以通过<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3hmYy1leGNsYXZlL3Blbi92WWR4UU9K\">点击此处</span>查看为您编写的示例，以便获得更加直观的认知。</p>\n<p>扩展资料：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZWRpdW0uY29tL0Byb2JpbnBva29ybnkvaW5kZXgtYXMtYS1rZXktaXMtYW4tYW50aS1wYXR0ZXJuLWUwMzQ5YWVjZTMxOA==\">深度解析使用索引作为 key 的负面影响</span>。</p>\n<div class=\"note success\">\n<p>呼～，到此为止，恭喜旅者大人终于具备了开启 React 之旅的基本素质和能力，接下来我将指导您注册身份、打造装备，然后开启您专属的新手村。</p>\n</div>\n<h3 id=\"react-脚手架\"><a class=\"anchor\" href=\"#react-脚手架\">#</a> React 脚手架</h3>\n<p>所谓的某某脚手架，其实本质上也是一个项目，只是这个项目的作用在于帮助我们初始化一个新的项目，并创建一个简单的模板，即所谓的抛砖引玉。</p>\n<h4 id=\"脚手架安装与项目初始化\"><a class=\"anchor\" href=\"#脚手架安装与项目初始化\">#</a> 脚手架安装与项目初始化</h4>\n<p>React 为我们提供了一个名为  <code>create-react-app</code>  的脚手架，如您已经安装有 npm 环境，只需执行如下命令，即可完成 React 脚手架的安装：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i create-react-app -g</pre></td></tr></table></figure><blockquote>\n<p>如果您的 npm 在安装脚手架时存在网络问题，可以选择前往<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2NyZWF0ZS1yZWFjdC1hcHA=\">源码地址</span>进行下载安装。</p>\n</blockquote>\n<p>安装完成后，即可通过简单的命令初始化一个 React 项目了：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>create-react-app myproject</pre></td></tr></table></figure><p>项目初始化完成后，您可以通过如下命令尝试启动它：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> myproject</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> start</pre></td></tr></table></figure><p>启动成功后，访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDozMDAw\">http://localhost:3000</span>，您将看到如下界面：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2022/05/feba9d75af02ba899f62aeda67b5e8ef1652881832.png\" alt=\"Reactapp预览\" /></p>\n<p>接下来请了解一下我们初始化的项目目录结构，以及不同文件、文件夹的作用：</p>\n<pre><code>myproject\n├── README.md    ====&gt; 项目导览说明\n├── node_modules    ====&gt; 项目依赖包\n├── package.json    ====&gt; 项目依赖包及脚本配置\n├── .gitignore    ====&gt; GIT代码忽略配置文件\n├── public    ====&gt; 静态资源文件夹\n│   ├── favicon.ico    ====&gt; 网站页签图标\n│   ├── index.html    ====&gt; 【主页面】\n│   ├── manifest.json    ====&gt; 应用加壳配置文件\n│   └── robots.txt    ====&gt; 爬虫协议文件\n└── src    ====&gt; 源码文件夹\n    ├── App.css    ====&gt; App组件样式文件\n    ├── App.js    ====&gt; App组件\n    ├── App.test.js    ====&gt; 测试文件\n    ├── index.css    ====&gt; 主页样式文件\n    ├── index.js    ====&gt; 主页脚本文件\n    ├── logo.svg    ====&gt; LOGO图片\n    ├── reportWebVitals.js    ====&gt; 页面性能分析文件\n    └── setupTests.js    ====&gt; 组件单元测试支持文件\n</code></pre>\n<p>阅读到这里，如果您还未进行任何编码，那么我在这里郑重地提醒您，请务必亲自尝试一下，并梳理初始项目的运行逻辑，后续的学习路线将会逐渐陡峭，不好好实践是走不出新手村的哦（当然啦，也不必太过担心，微不足道的我还是会很尽心地为各位旅者大人考虑的，但无论怎么看实践都是必须的吧，请大人们不要怠惰）。</p>\n<p>🍎 在脚手架创建的项目中，各种文件之间是如何进行相互引用的？</p>\n<p>基于模块化思想，模块之间的引用需要使用  <code>export</code>  和  <code>import</code>  关键字进行的，被引入的模块需要使用  <code>export</code>  进行暴露，引用方则通过  <code>import Xxx from 'xxx'</code>  的方式进行引入。如果被引用内容是静态资源，则不需要声明 export。</p>\n<h4 id=\"项目案例\"><a class=\"anchor\" href=\"#项目案例\">#</a> 项目案例</h4>\n<div class=\"note success\">\n<p>各位大人见谅，由于 codepen 只适用于单文件在线编辑，后续示例将转到 codesandbox 进行。</p>\n</div>\n<p><strong>项目标题</strong>：我的任务清单</p>\n<p><strong>功能简述</strong>：</p>\n<p>本项目用于管理个人任务，支持任务列表显示、任务动态插入、单条任务移除、任务全选、已完成任务清空、任务完成度显示，以及移除按钮悬停展示等功能。</p>\n<p><strong>项目预览</strong>：</p>\n<ol>\n<li>\n<p>在线预览：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xcXNqeDAuY3NiLmFwcA==\">https://qqsjx0.csb.app</span>（加载可能会有点慢）</p>\n</li>\n<li>\n<p>截图预览：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2022%2F05%2F71f8a7a25b9f59570c448619d3b6767a1652880520.gif\" alt=\"我的任务清单演示GIF\" /></p>\n</li>\n</ol>\n<p><strong>项目地址</strong>：</p>\n<blockquote>\n<p>提示：代码是这一小结的经验点数最多的内容，烦请各位大人移驾，下方两个传送通道可择一而入。</p>\n</blockquote>\n<ol>\n<li>\n<p>代码沙箱：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9zL2pvdmlhbC1jb2xkZW4tcXFzangw\">CodeSandbox - 我的任务清单</span></p>\n</li>\n<li>\n<p>代码仓库：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3hmYy1leGNsYXZlL3JlYWN0LWxlYXJuaW5n\">https://github.com/xfc-exclave/react-learning</span> - myproject</p>\n</li>\n</ol>\n<p><strong>重要知识点</strong>：</p>\n<ol>\n<li>\n<p>关于 UI</p>\n<p>本项目中使用了第三方 UI 框架 ——Material UI，目前值得推荐的 React UI 框架主推如下几个：</p>\n<ul>\n<li>\n<p>Ant Design - <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbnQuZGVzaWdu\">官网地址</span></p>\n</li>\n<li>\n<p>Material UI - <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tdWkuY29t\">官网地址</span></p>\n</li>\n<li>\n<p>Semantic UI - <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aWppZWtlLmNvbS9zZW1hbnRpYy11aS8=\">官网地址</span></p>\n<p>另外，熟悉 Vue 的小伙伴也可以尝试一下 ElementUI 的 React 版本，奉上<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbGVtZWZlLmdpdGh1Yi5pby9lbGVtZW50LXJlYWN0\">链接地址</span>。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>组件的拆分方式</p>\n<p>组件拆分方式并没有一定的规定，不同项目，不同业务逻辑，不同开发者，都会有不一样的组件拆分方式。通常情况下较为合理的是以组件功能作为单元进行拆分，尽量避免大量相似代码重复编写，冗余且难以维护。</p>\n<p>总之，组件拆分方式人各不同，您完全可以借鉴一些<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzM1MDEyOTg3Nw==\">讨论贴（知乎）</span>，来形成您自己的组件拆分风格，但只有一条不变的准则是：<mark>代码的设计应当尽量保持优雅、高效、易维护</mark>。</p>\n</li>\n<li>\n<p>如何确定 state 声明的位置</p>\n<p>要确定 state 声明的位置，需要先行明确 state 数据被使用的位置，通常来说，state 最佳的声明位置是所有使用该 state 数据的子组件的共有父组件中，因为这样可以使组件之间传递数据的代价最小化。但这也不是绝对的，对于一些复杂的场景，往往需要还更加细致、具体的考虑。</p>\n</li>\n<li>\n<p>组件之间的通信方式</p>\n<p>在组件化的项目中，经常需要跨越不同组件使用或处理数据，因此，不同组件之间的数据传递方式则尤为重要。我们可以形象地将组件之间的关系分为兄弟、父子、祖孙、宗亲几类。</p>\n<p>父子组件通信：</p>\n<p>父子组件之间进行传递数据，最直接的方式是通过 props 属性实现。注意，这里所说的数据既可以是普通类型的数据，也可以是一个预定义的函数。</p>\n<blockquote>\n<p>父组件向子组件传递数据直接使用 props 即可完成，在前文 React 组件的三大属性部分已有充分讲解，这里不再赘述。</p>\n</blockquote>\n<p>子组件向父组件传递数据，则可以通过 props 属性迂回实现，一种最常用的实现方式如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">changeName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span><span class=\"token function\">updateName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>changeName<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>Send<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">updateHandler</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Child updateName<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>updateHandler <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>兄弟组件通信：</p>\n<p>兄弟组件之间是无法轻易进行直接通信的，它们需要借助共同的父组件实现通信。简单来说，父组件传入函数给子组件 A，子组件 A 通过函数改变父组件状态，同级子组件 B 可以接收到父组件变更后的状态。</p>\n<blockquote>\n<p>以上方式适用于 “血缘” 相近的组件关系，“祖孙” 组件或 “宗亲” 组件之间的通信虽然也可通过这种方式进行，但代价相对更大。对于 “血缘” 关系较远的组件之间进行通信，可以使用如发布订阅、Redux 等方式实现，此处不做扩展，在后文会有专门的章节详细阐述。</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"react-ajax\"><a class=\"anchor\" href=\"#react-ajax\">#</a> React Ajax</h3>\n<p>AJAX 是一种在无需重新加载整个网页的情况下，就能够更新部分网页的技术。</p>\n<blockquote>\n<p>实在惭愧，在此之前本人一直觉得 ajax 就是指  <code>$.ajax(&#123;&#125;)</code> ，在学习 Vue 的时候也没有仔细思考 ajax 和 axois 的关系，这里再次强调一下，axios 是通过 Promise 对 ajax 的一种封装（大人们不要笑话我）。</p>\n</blockquote>\n<p>而 React 本身只关注于界面，它并不包含 ajax 网络请求部分，因此，要在 React 中实现网络交互，就需要集成第三方 ajax 库（或者自行封装实现）。</p>\n<p>你当然可以选择将 jQuery 集成到 React 项目中，但这就违背了 React 尽量减少真实 DOM 操作的初衷。因此，使用 axios 进行网络通信是 React 的更优选择。或许您在学习 Vue 的过程中已经对 axios 有了相当程度的了解，那么这一小节对您而言将会相当轻松。</p>\n<h4 id=\"axios\"><a class=\"anchor\" href=\"#axios\">#</a> axios</h4>\n<p>开源地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9z\">https://github.com/axios/axios</span></p>\n<p>中文网：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5heGlvcy1qcy5jb20=\">http://www.axios-js.com</span></p>\n<p>axios 使用示例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://chinmoku.usemock.com/user/1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> data<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> data<span class=\"token operator\">:</span> <span class=\"token string\">\"获取数据失败\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>您可以<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3hmYy1leGNsYXZlL3Blbi96WVJ6UE12\">点击这里</span>运行在线示例并查看效果。</p>\n<h4 id=\"前端代理\"><a class=\"anchor\" href=\"#前端代理\">#</a> 前端代理</h4>\n<p>基于上面的 axios 示例，相信您已经能够成功发送网络请求并得到返回的数据。但在实际开发过程中，网络环境相对更加复杂，因此也会引发一些问题，跨域问题就是最常见的问题之一。</p>\n<p>🍎 什么是跨域？为什么会有跨域？</p>\n<p>当一个请求 url 的协议、域名、端口三者之间任意一个与当前页面 url 不同，即为跨域。其出现是出于浏览器同源策略的限制，而同源策略的目的又是为了保障浏览器的基本安全。在开发过程中，我们也有诸多方式解决来解决浏览器同源策略引发的跨域问题，其中，使用代理就是一种最为常用的方式。</p>\n<p>扩展资料：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOTAlOEMlRTYlQkElOTAlRTclQUQlOTYlRTclOTUlQTUvMzkyNzg3NQ==\">同源策略_百度百科</span></p>\n<p>🍎 什么是代理？为什么要用代理？</p>\n<p>代理，即替代他人负责某一件事，在网络通信中，所谓代理即指代替其他网络端负责处理网络通信。例如通过 VPN 连接一些特定的网络就是一种常见的代理。而在 React 中，使用代理的直接目的，就是为了解决网络通信的跨域问题。</p>\n<p><strong>React 中配置代理的方式</strong></p>\n<p>在 React 中有两种配置代理的方式：</p>\n<ol>\n<li>\n<p>在  <code>package.json</code>  文件中进行配置</p>\n<p>直接在  <code>package.json</code>  文件中追加内容即可，示例如下：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">\"browserslist\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token property\">\"proxy\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://chinmoku.usemock.com\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这种方式有点在于配置简单方便，使用时直接指定接口地址即可，无需添加额外前缀：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//... 省略部分内容</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>使用代理配置文件</p>\n<p>使用代理配置文件则更加灵活，其配置方式如下：</p>\n<p>执行命令  <code>npm i http-proxy-middleware</code>  安装依赖包，然后在 src 目录下创建文件  <code>setupProxy.js</code>  文件</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>createProxyMiddleware<span class=\"token operator\">:</span> proxy<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http-proxy-middleware'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">app</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token function\">proxy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/dev'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          target<span class=\"token operator\">:</span> <span class=\"token string\">'http://localhost:8080'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          changeOrigin<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          pathRewrite<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">'^/dev'</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 重写请求路径 (必须)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token function\">proxy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/prod'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          target<span class=\"token operator\">:</span> <span class=\"token string\">'https://chinmoku.usemock.com'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          changeOrigin<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          pathRewrite<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">'^/prod'</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这样就允许同时配置多个代理地址，使用时只需要加上对应的前缀即可：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//... 省略部分内容</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/prod/user/1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"项目案例-2\"><a class=\"anchor\" href=\"#项目案例-2\">#</a> 项目案例</h4>\n<p><strong>项目标题</strong>：Github 用户检索</p>\n<p><strong>功能简述</strong>：</p>\n<p>本项目用于对 Github 用户进行检索，并将检索结果动态显示到列表中，同时，为提升用户体验，对加载中及无数据的状态进行友好展示。</p>\n<p><strong>项目预览</strong>：</p>\n<ol>\n<li>\n<p>在线预览：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWtzcWcuY3NiLmFwcA==\">https://quksqg.csb.app</span>（加载可能会有点慢）</p>\n</li>\n<li>\n<p>截图预览：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2022/05/0aff1fc6abb9074fc5681ca2810fb9d41653138211.gif\" alt=\"githubusersearch\" /></p>\n</li>\n</ol>\n<p><strong>项目地址</strong>：</p>\n<ol>\n<li>\n<p>代码沙箱：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9zL3doaXRlLW1vcm5pbmctcXVrc3Fn\">CodeSandbox - Github 用户检索</span></p>\n</li>\n<li>\n<p>代码仓库：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3hmYy1leGNsYXZlL3JlYWN0LWxlYXJuaW5n\">https://github.com/xfc-exclave/react-learning</span> - react-github-search</p>\n</li>\n</ol>\n<p><strong>重要知识点</strong>：</p>\n<ol>\n<li>\n<p>关于 UI：此案例中使用了 Ant Design。</p>\n</li>\n<li>\n<p>消息发布与订阅机制</p>\n<p>在前文中我们曾使用借助组件的 props 来实现父子组件之间的通信，但其实除了借助 props 之外，我们还可以使用消息发布和订阅机制来实现通信。与 props 相比，消息发布订阅机制并不注重组件之间的关系，即消息发布订阅机制的效率与组件之间的层级关系无关，它可以用于所有的组件关系之间。</p>\n<p>首先，使用消息发布订阅之前，你需要先执行命令  <code>npm i pubsub-js</code>  安装依赖，并在数据的发送方使用如下方式发送消息：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> PubSub <span class=\"token keyword\">from</span> <span class=\"token string\">\"pubsub-js\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//... 省略无关代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>PubSub<span class=\"token punctuation\">.</span><span class=\"token function\">publish</span><span class=\"token punctuation\">(</span><span class=\"token string\">'channelNameHere'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>消息接收方则通过如下方式接收数据并处理后续逻辑：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PubSub<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'channelNameHere'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">//... 自定义 data 方式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>但需要保证的是，消息发送方与消息接收方的消息通道名称必须保持一致。</p>\n</li>\n<li>\n<p>React.useEffect</p>\n<p>通常，消息发布方发布消息时通常会有一定的触发时机，而消息接收方为了及时接收到消息，通常会在组件挂载时即开启订阅，在组件卸载时取消订阅，这就依赖于 React 组件的生命周期。</p>\n<p>在类式组件中，由于其父组件 Component 为其暴露了一系列生命周期函数，因此它的生命周期是明确的，能够轻易地在不同的触发时机执行不同的逻辑。而函数式组件由于没有集成 Component，因此也就没有生命周期函数，它只能通过 Hook 函数  <code>React.useEffect()</code>  来获取监控组件的生命状态，但该函数却是不可靠的（如有必须通过生命周期函数实现的逻辑，个人觉得还是使用类式组件更好）。</p>\n<blockquote>\n<p>对于 useEffect 这个钩子函数，官方的说法是 “在函数组件主体内改变 DOM、添加订阅、设置定时器、记录日志以及执行其他包含副作用的操作都是不被允许的，因为这可能会产生莫名其妙的 bug 并破坏 UI 的一致性”，官方似乎并没有给出明确的原因，也没有给出明确的方案（也或许是我目前没了解到，如果哪位大人知道，烦请在文末留言告知）。</p>\n</blockquote>\n</li>\n<li>\n<p>使用 fetch 发送网络请求</p>\n<p>fetch 也是一种发送网络请求的方式，其基本使用方式如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//fetch 发送 GET 请求</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://chinmoku.usemock.com/user/1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">handleData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//fetch 发送 POST 请求</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 或其他</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">handleData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"react-路由\"><a class=\"anchor\" href=\"#react-路由\">#</a> React 路由</h3>\n<p>路由的概念来源于服务端，在服务端，路由描述的是 URL 与处理函数之间的映射关系，例如 Java 中的  <code>Controller</code> ，Python 中的  <code>urls.py</code> 。</p>\n<p>在 Web 前端的单页面应用中，路由描述的这是 URL 与 UI 之间的映射关系，这种映射关系是单向的，即 URL 的变化可以引起 UI 的更新，并且这种更新不会引起页面的整体刷新。</p>\n<h4 id=\"spa\"><a class=\"anchor\" href=\"#spa\">#</a> SPA</h4>\n<blockquote>\n<p>单页 Web 应用（single page web application，SPA），就是只有一张 Web 页面的应用。单页应用程序（SPA）是加载单个 HTML 页面并在用户与应用程序交互时动态更新该页面的 Web 应用程序。浏览器一开始会加载必需的 HTML、CSS 和 JavaScript，所有的操作都在这张页面上完成，都由 JavaScript 来控制。因此，对单页应用来说模块化的开发和设计显得相当重要。</p>\n<p>quote from <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9TUEEvMTc1MzYzMTM=\">SPA（单页应用程序）_百度百科</span></p>\n</blockquote>\n<p>在 React 或 Vue 中，项目通常会被设计为这种单页面应用程序，这种设计的好处在于用户体验较好，网页内容的改变不需要整个页面进行刷新，避免了不必要的页面跳转和重新渲染。</p>\n<p>总体来说，SPA 具有以下特点：</p>\n<ol>\n<li>\n<p>整个应用只需要一个完整的页面。</p>\n</li>\n<li>\n<p>页面中链接的跳转只是对页面的局部内容进行更新，而不会引起网页的整体刷新。</p>\n</li>\n<li>\n<p>页面数据需要通过 ajax 获取，并且在页面异步进行展现。</p>\n</li>\n</ol>\n<h4 id=\"react-中的路由\"><a class=\"anchor\" href=\"#react-中的路由\">#</a> React 中的路由</h4>\n<p><strong>react-router-dom</strong></p>\n<p><code>react-router-dom</code>  是 React 中的一个路由插件库，它专门用来实现一个 SPA 应用中的路由跳转功能。react-router-dom 基于 react-router，并且加入了一些浏览器环境下的功能，它封装了更多的 API，更适合在 Web 开发中进行应用。</p>\n<p>要使用 react-router-dom，您需要执行如下命令安装依赖：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i react-router-dom</pre></td></tr></table></figure><h4 id=\"项目案例-3\"><a class=\"anchor\" href=\"#项目案例-3\">#</a> 项目案例</h4>\n<p><strong>项目标题</strong>：React 路由案例</p>\n<p><strong>功能简述</strong>：</p>\n<p>本项目用于集中演示 React 路由相关功能。</p>\n<p><strong>项目预览</strong>：</p>\n<ol>\n<li>\n<p>在线预览：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xejRkNDQuY3NiLmFwcA==\">https://qz4d44.csb.app</span>（加载可能会有点慢）</p>\n</li>\n<li>\n<p>截图预览：</p>\n</li>\n</ol>\n<p><strong>项目地址</strong>：</p>\n<ol>\n<li>\n<p>代码沙箱：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9zL21hZ2ljYWwtZ2F1c3MtcXo0ZDQ0\">CodeSandbox - React 路由案例</span></p>\n</li>\n<li>\n<p>代码仓库：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3hmYy1leGNsYXZlL3JlYWN0LWxlYXJuaW5n\">https://github.com/xfc-exclave/react-learning</span> - react-router-demo</p>\n</li>\n</ol>\n<p><strong>重要知识点</strong>：</p>\n<ol>\n<li>\n<p>关于 UI：此案例中使用了 Ant Design。</p>\n</li>\n<li>\n<p>关于  <code>react-router-dom</code>  的版本差异。</p>\n<p>注：本人的学习一向注重新版本，对于旧版本通常是简单带过，本文示例使用的 react-router-dom 为  <code>v6+</code>  版本，如果您在学习时或工作中使用的是旧版本，那么我再此处列出版本之间的差异，以便您能够快速掌握。</p>\n<p>在 V5 中，路由的常规使用方式大体如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> BrowserRouter<span class=\"token punctuation\">,</span> Switch<span class=\"token punctuation\">,</span> Route<span class=\"token punctuation\">,</span> Redirect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Product</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span>ul className<span class=\"token operator\">=</span><span class=\"token string\">\"nav nav-tabs\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">\"/product/list\"</span><span class=\"token operator\">></span>Product List<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">&lt;</span>NavLink to<span class=\"token operator\">=</span><span class=\"token string\">\"/product/detail\"</span> activeClassName<span class=\"token operator\">=</span><span class=\"token string\">\"my-active\"</span><span class=\"token operator\">></span>Product Detail<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>NavLink<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token operator\">&lt;</span>Switch<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/product/list\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>ProductList<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/product/detail\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>ProductDetail<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token operator\">&lt;</span>Redirect to<span class=\"token operator\">=</span><span class=\"token string\">\"/product/list\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Switch<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token operator\">&lt;</span>BrowserRouter<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"menu-list\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token operator\">&lt;</span>Link className<span class=\"token operator\">=</span><span class=\"token string\">\"list-group-item\"</span> to<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">></span>Home<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token operator\">&lt;</span>NavLink activeClassName<span class=\"token operator\">=</span><span class=\"token string\">\"my-active\"</span> to<span class=\"token operator\">=</span><span class=\"token string\">\"/products\"</span><span class=\"token operator\">></span>Products<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>NavLink<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"panel-body\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 注册路由 */</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token operator\">&lt;</span>Switch<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token operator\">&lt;</span>Route key<span class=\"token operator\">=</span><span class=\"token string\">\"keyxxx1\"</span> exact path<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>Home<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token operator\">&lt;</span>Route key<span class=\"token operator\">=</span><span class=\"token string\">\"keyxxx2\"</span> exact path<span class=\"token operator\">=</span><span class=\"token string\">\"/home\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>Home<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token operator\">&lt;</span>Route key<span class=\"token operator\">=</span><span class=\"token string\">\"keyxxx3\"</span> path<span class=\"token operator\">=</span><span class=\"token string\">\"/product\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>Product<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token operator\">&lt;</span>Redirect to<span class=\"token operator\">=</span><span class=\"token string\">\"/about\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 当路由匹配不到时，执行重定向 */</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Switch<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>BrowserRouter<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"app\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 V6 版本中，对路由组件名称及用法略有改变，请参考示例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> BrowserRouter<span class=\"token punctuation\">,</span> Routes<span class=\"token punctuation\">,</span> Route<span class=\"token punctuation\">,</span> Navigate <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token operator\">&lt;</span>BrowserRouter<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"menu-list\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token operator\">&lt;</span>Link className<span class=\"token operator\">=</span><span class=\"token string\">\"list-group-item\"</span> to<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">></span>Home<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token operator\">&lt;</span>NavLink to<span class=\"token operator\">=</span><span class=\"token string\">\"/products\"</span><span class=\"token operator\">></span>Products<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>NavLink<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"panel-body\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 注册路由 */</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token operator\">&lt;</span>Routes<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token operator\">&lt;</span>Route exact path<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> element<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token operator\">&lt;</span>Home <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token operator\">&lt;</span>Route exact path<span class=\"token operator\">=</span><span class=\"token string\">\"/home\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token operator\">&lt;</span>Home <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/product\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token operator\">&lt;</span>Product <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">'*'</span> element<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token operator\">&lt;</span>Navigate to<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 当路由匹配不到时，执行重定向 */</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Routes<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>BrowserRouter<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"app\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>此外，在编程式路由中，V6 使用  <code>useNavigate()</code>  替代了 V5 中的  <code>withRouter()</code> 。总体来说变化不大，就 API 层面来看，只是对名称和使用方式进行了优化。当然，使用示例中的这种硬式编码（将路由写死在组件中）的方式并不值得推荐，为了项目的可维护性，您可以尝试将路由相关信息提取出来，作为路由表进行使用，这样的路由才会更加灵活（此处未编写提取路由表的示例，请大人们亲自动手试试）。</p>\n</li>\n<li>\n<p>HashRouter 与 BrowserRouter</p>\n<p><strong>HashRouter</strong></p>\n<p><code>HashRouter</code>  是一种基于  <code>window.location.hash</code>  进行路由的方式，当 HashRouter 工作时，它会获取到自身的  <code>pathname</code>  属性，并将该属性与其内部的诸多  <code>Route</code>  的  <code>path</code>  属性进行匹配，如匹配成功，则渲染对应的组件。</p>\n<p>而 Link 和 NavLink 等组件的内部，其实是通过  <code>this.props.history.push(path)</code>  改变 HashRouter 中的 pathname 属性来驱动 Route 进行不同组件渲染的，从而实现路由切换效果。</p>\n<p>HashRouter 进行路由的地址通常会携带一个锚点符号  <code>#</code> ，例如：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDozMDAwLyMvaG9tZQ==\">http://localhost:3000/#/home</span></p>\n<p>此外，HashRouter 本身是不支持  <code>location.state</code>  和  <code>loation.key</code>  的。</p>\n<p>扩展资料：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxNDMxMzQyOA==\">https://segmentfault.com/a/1190000014313428</span></p>\n<p><strong>BrowserRouter</strong></p>\n<p>相比于 HashRouter，BrowserRouter 在 Web 中的应用更为广泛。与 HashRouter 不同的是，BrowserRouter 是基于 THML5 History API 来实现路由的。它可以通过  <code>pushState</code>  和  <code>replaceState</code>  来修改浏览器历史记录，也可以在路由跳转时传递任意参数实现组件之间的通信（HashRouter 则只能通过拼接 URL 字符串实现），因此，BrowserRouter 也常常与 Redux 配合使用来实现组件之间的数据通信。</p>\n<p>BrowserRouter 的表现形式与常规的网页地址一致，例如：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2F0aW9uOjMwMDAvaG9tZSVFMyU4MCU4Mg==\">http://location:3000/home。</span></p>\n<p><strong>补充</strong></p>\n<p>前面其实已经大体上说明了 HashRouter 与 BrowserRouter 的区别，相较于 HashRouter，BrowserRouter 似乎更有优势，同时也被官方推荐使用。但在使用 BrowserRouter 时也有一点需要特别注意：</p>\n<p>由于 BrowserRouter 模式下的请求形式表现为  <code>http://host:port/path</code> ，这就相当于每一个前端路由变更都会向服务端 API 发出请求。如果该请求不处于服务端 API 覆盖范围内，则会返回 404 异常，此外，前端路由与服务端 API 在实际业务中往往是完全不同的概念，因此，在实际开发中应当进行区分，注意避免前端路由与服务端 API 之间的冲突。</p>\n</li>\n<li>\n<p>路由参数的传递方式在 react-router-dom 中，有三种不同的方式实现路由参数的传递：</p>\n<p>(a) params 参数的传递</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 路由链接声明</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>Link to<span class=\"token punctuation\">&#123;</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/product/&#123;categoryId&#125;/&#123;itemId&#125;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>Click Here<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 2. 注册路由</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/product/:cateId/:itemId\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token operator\">&lt;</span>Detail <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 3. 参数接收</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> cateId<span class=\"token punctuation\">,</span> itemId <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">.</span>params</pre></td></tr></table></figure><p>(b) search 参数的传递</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 路由链接声明</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>Link to<span class=\"token punctuation\">&#123;</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/product/detail/?cateId=&#123;categoryId&#125;&amp;itemId=&#123;itemId&#125;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>Click Here<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 2. 注册路由</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/product/detail\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token operator\">&lt;</span>Detail <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 3. 参数接收</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> queryString <span class=\"token keyword\">from</span> <span class=\"token string\">'query-string'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> search <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>location</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> cateId<span class=\"token punctuation\">,</span> itemId <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> queryString<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>search<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>(c) state 参数的传递</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 路由链接声明</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>Link to<span class=\"token punctuation\">&#123;</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/product/detail</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> state<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> cateId<span class=\"token operator\">:</span> categoryId<span class=\"token punctuation\">,</span> itemId<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>Click Here<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 2. 注册路由</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/product/detail\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token operator\">&lt;</span>Detail <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 3. 参数接收</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> cateId<span class=\"token punctuation\">,</span> itemId <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>state</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//state 接收的参数不会受到浏览器页面刷新的影响</span></pre></td></tr></table></figure><p>相信示例中的路由参数的传递方式已经足够明确，就不再做额外的解释了。</p>\n</li>\n<li>\n<p>编程式路由导航</p>\n<p>在前端开发中，需要进行路由跳转的场景多种多样，在部分场景下（例如定时跳转），声明式路由方式存在一定的局限性，这就需要通过编程式路由来实现。编程式路是借助于  <code>props.history</code>  对象上的 API 来对路由进行操作的。主要 API 如下：</p>\n<p>(a) props.history.push () 跳转，并向历史记录中推入一条新的记录</p>\n<p>(b) props.history.replace () 跳转，并替换历史记录列表中的最新记录</p>\n<p>(c) props.history.goBack () 后退一条记录</p>\n<p>(d) props.history.goForward () 前进一条记录</p>\n<p>(e) props.history.go (n) 前进或后退指定条记录</p>\n<p>相信各位大人在学习 JavaScript 基础时已充分了解过 HTML5 History API，这里列出的目的在于帮助您快速回顾知识点，相关知识点如有疑问，请务必点击<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcy9qcy13aW5kb3ctaGlzdG9yeS5odG1s\">快速通道</span>进行 JavaScript 基础补习。</p>\n</li>\n<li>\n<p>useNavigate 基本使用</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useNavigate <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> navigate <span class=\"token operator\">=</span> <span class=\"token function\">useNavigate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">detailHandler</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">params</span> <span class=\"token operator\">=></span> <span class=\"token function\">navigate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/detail'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> state<span class=\"token operator\">:</span> params <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>V6 新增的钩子函数</p>\n<p>在 react-router-dom V5 中，我们可以使用  <code>withRouter()</code>  函数将普通组件转换为路由组件，使其具有路由组件相关属性，但在 V6 版本中，该方法已被移除，作为替代，V6 版本中新增了新的钩子函数，可以更加方便地获取路由参数：</p>\n<ul>\n<li>\n<p>useParams</p>\n</li>\n<li>\n<p>useLocation</p>\n</li>\n<li>\n<p>useSearchParams</p>\n</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>反省：在路由这一小节中，由于想把案例尽量做得精细，所以在一些不太紧要的知识点上耗费了太多时间（也或许终究还是会累的吧，突然间觉得有些莫名的沮丧，接触编程的这几年，渐渐地有些认不清自己了）。</p>\n<p>(⊙o⊙)… 呃，上面的话是昨天晚上写下的，感觉好丧气的样子，但还是不删掉算了，就当是本文的一点小痕迹，本人既然决心做一个成熟的 NPC，不成熟的想法还是让它漏出来比较好。</p>\n</blockquote>\n<h3 id=\"redux\"><a class=\"anchor\" href=\"#redux\">#</a> Redux</h3>\n<ul>\n<li>\n<p>Redux 中文官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbi5yZWR1eC5qcy5vcmc=\">https://cn.redux.js.org</span></p>\n</li>\n<li>\n<p>Redux 英文官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWFjdC1yZWR1eC5qcy5vcmc=\">https://react-redux.js.org</span></p>\n</li>\n<li>\n<p>Redux 中文文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmVkdXgub3JnLmNu\">https://www.redux.org.cn</span></p>\n</li>\n</ul>\n<h4 id=\"redux-简介\"><a class=\"anchor\" href=\"#redux-简介\">#</a> Redux 简介</h4>\n<p>Redux 是 JavaScript 应用的状态容器，提供可预测的状态管理，它除了与 React 一起使用外，还支持一些其他的界面库。</p>\n<blockquote>\n<p>旅者大人们请注意如下几点：</p>\n<ol>\n<li>\n<p>Redux 是一个专门用于做状态管理的 JavaScript 库（非 React 插件）。</p>\n</li>\n<li>\n<p>它常常会与 React 配合使用，但也可以集成在 Vue, Angular 等项目中。</p>\n</li>\n<li>\n<p>其作用在于集中式管理 React 应用中多个组件之间共享等状态。</p>\n</li>\n</ol>\n</blockquote>\n<p>要在 React 中使用 Redux，您首先需要使用如下命令安装相关依赖：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i redux</pre></td></tr></table></figure><p>依赖安装完成后，您可以通过官网给出的基础示例来对 Redux 有一个简单印象：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> value<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">counterReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token string\">'calculator/increment'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> value<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> action<span class=\"token punctuation\">.</span>data <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token string\">'calculator/decrement'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> value<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>value <span class=\"token operator\">-</span> action<span class=\"token punctuation\">.</span>data <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">return</span> state</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>counterReducer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 监听 store 中状态的变更</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>store<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 使用</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'calculator/increment'</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在这个示例中，我们可以通过  <code>store.dispatch()</code>  的方式实现一个简单的对数据的自增和自减计算。</p>\n<h4 id=\"redux-核心概念及工作原理\"><a class=\"anchor\" href=\"#redux-核心概念及工作原理\">#</a> Redux 核心概念及工作原理</h4>\n<p>参考上文中的简单示例，再来理解下面这张 Redux 原理图：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2022/05/e0a5d8103a115c20aa14f05715fdff021653401722.png\" alt=\"Redux 核心架构图\" /></p>\n<p>在这个核心架构图中重点声明了四个主体对象，其中 Views 可以代表 React 中的视图组件，除 Views 外，其他三个组件都是 Redux 的核心概念，下面将对这些概念进行逐一叙述：</p>\n<ol>\n<li>\n<p>Action</p>\n<p>action 是一个具有  <code>type</code>  字段的普通 JavaScript 对象。你可以将 action 视为描述应用程序中发生了什么的事件。</p>\n<p>其中，type 字段是一个用字符串表示，可以理解为当前 action 的名称，其规范化的声明方式应当是  <code>域/事件名称</code> ，例如： <code>calculator/increment</code> 。</p>\n<p>action 中除了 type 外，还可以声明其他该事件执行的相关参数，简单的 action 声明如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> incrementAction <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  type<span class=\"token operator\">:</span> <span class=\"token string\">'calculation/increment'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  data<span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>Store</p>\n<p>在同一个 Redux 应用中，尤其只有一个 store，它充当着 action 与 reducers 之间的协调者，负责将 action 中的事件及参数交给 reducers 执行，获取到执行结果后，再交由 Views 视图组件进行应用或渲染。</p>\n</li>\n<li>\n<p>Reducers</p>\n<p>Reducers 是 Redux 中事件的的核心处理者，它被声明为函数类型，接收 state 和一个 action 对象。</p>\n<p>Reducer 必须遵循一定的规则：</p>\n<ul>\n<li>\n<p>仅使用 state 和 action 参数计算新的状态值。</p>\n</li>\n<li>\n<p>禁止直接修改 state。必须通过复制现有的 state 并对复制的值进行更改的方式来做不可变更新。</p>\n</li>\n<li>\n<p>禁止任何异步逻辑、依赖随机值或导致其他 “副作用” 的代码。</p>\n</li>\n</ul>\n<p>即要求 Reducer 是一个纯函数。</p>\n<p>扩展资料：</p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9mMTMyZDc1OWNjZWM=\">什么是纯函数</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWNvZGVjYW1wLm9yZy9uZXdzL3doeS1yZWR1eC1uZWVkcy1yZWR1Y2Vycy10by1iZS1wdXJlLWZ1bmN0aW9ucy1kNDM4YzU4YWU0Njg=\">Why Redux need reducers to be &quot;pure functions&quot;</span></p>\n</li>\n</ol>\n<h4 id=\"redux-核心-api\"><a class=\"anchor\" href=\"#redux-核心-api\">#</a> Redux 核心 API</h4>\n<ol>\n<li>\n<p>createStore()</p>\n<p>在上文中，我们已经使用过该函数，其使用方式如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>counterReducer<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>store 对象相关函数</p>\n<ul>\n<li>\n<p>store.getState()</p>\n<p>获取 reducer 执行后返回的 state。</p>\n</li>\n<li>\n<p>store.dispatch(action)</p>\n<p>它是更新 redux state 的唯一方法，并且需要传递一个 action 对象。</p>\n</li>\n<li>\n<p>store.subscribe(listener)</p>\n<p>向 store 中添加一个监听器，该监听器会在每次 dispatch action 时执行。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>applyMiddleware()</p>\n<p>其作用在于允许使用基于 redux 的中间件（插件库），例如后文中将要讲解的  <code>redux-thunk</code> ，下面列出它的基本使用方式，您可以先忽略它，或者做一个前瞻性的了解：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createStore<span class=\"token punctuation\">,</span> applyMiddleware <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> countReducer <span class=\"token keyword\">from</span> <span class=\"token string\">'./count_reducer'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> thunk <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-thunk'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>countReducer<span class=\"token punctuation\">,</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>thunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>combineReducers()</p>\n<p>该函数用于将多个 Reducer 函数进行合并，例如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> combineReducers <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> reducers <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  myCounter<span class=\"token operator\">:</span> counterReducer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  myFormater<span class=\"token operator\">:</span> formaterReducer</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"redux-异步编程\"><a class=\"anchor\" href=\"#redux-异步编程\">#</a> Redux 异步编程</h4>\n<p>Redux 本身是不支持进行异步编程的，如果需要在 Redux 中进行异步编程，则需要执行如下命令安装插件库：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i redux-thunk</pre></td></tr></table></figure><p>其简易的使用示例如下：</p>\n<ol>\n<li>\n<p>创建 store</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createStore<span class=\"token punctuation\">,</span> applyMiddleware <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> countReducer <span class=\"token keyword\">from</span> <span class=\"token string\">'./count_reducer'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> thunk <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-thunk'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>countReducer<span class=\"token punctuation\">,</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>thunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>异步使用</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createIncrementAsyncAction</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token parameter\">dispatch</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'increment'</span><span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"react-redux\"><a class=\"anchor\" href=\"#react-redux\">#</a> react-redux</h4>\n<p>与 redux 不同，react-redux 是一个基于 Redux 的 React 插件库。使用 react-redux，可以更加方便地读取 store 中的数据，以及向 store 中分发 action 来更新数据。</p>\n<p>使用 react-redux 需要执行如下命令安装必要的依赖：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i redux react-redux</pre></td></tr></table></figure><ol>\n<li>\n<p>UI 组件与容器组件</p>\n<p>在 React-Redux 中，所有组件被拆分为 UI 组件和容器组件两大类。</p>\n<p>UI 组件，用于组织页面框架及以及负责 UI 的呈现，它通过 props 来接收数据并进行渲染，其内部通常不会执行任何 Redux API 相关操作，UI 组件一般保存在 components 文件夹下。</p>\n<p>容器组件，主要负责数据管理和业务逻辑的处理，通常保存在 containers 文件夹下。</p>\n<blockquote>\n<p>看网上有把前者称为傻瓜组件，把后者称为聪明组件，那这么说来前端就是傻瓜开发，后端就是聪明开发咯（虽然没有较真的必要，但还是感觉没啥道理）。</p>\n</blockquote>\n</li>\n<li>\n<p>相关 API 的使用</p>\n<ul>\n<li>\n<p>connect</p>\n<p>React-Redux 提供  <code>connect()</code>  方法，用于从 UI 组件生成容器组件。connect 即将这两种组件连起来。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> connect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> CountContainer <span class=\"token operator\">=</span>  <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  mapStateToProps<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  mapDispatchToProps</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CountUI<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>其中，CountUI 即为 UI 组件，CountContainer 即为容器组件，并且，connect 函数接收两个参数，相关定义请继续阅读后续小点。</p>\n</li>\n<li>\n<p>mapStateToProps</p>\n<p><code>mapStateToProps()</code>  函数负责输入逻辑，将外部数据（即 state 对象）映射为 UI 组件的标签属性。</p>\n<p>该函数返回一个对象，其声明示例如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> count<span class=\"token operator\">:</span> state <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>此外，该函数还会订阅 Store，每当 state 更新时，该函数就会自动执行，并重新计算 UI 组件的参数，从而触发 UI 组件的重新渲染。</p>\n</li>\n<li>\n<p>mapDispatchToProps</p>\n<p><code>mapDispatchToProps</code>  负责输出逻辑，即分发 action 的函数转换为 UI 组件的标签属性，该属性既可以是一个对象，也可以是一个函数。</p>\n<p>mapDispatchToProps 作为函数声明方式：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapDispatchToProps</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">dispatch</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token function-variable function\">increment</span><span class=\"token operator\">:</span> <span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">createIncrementAction</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>mapDispatchToProps 作为对象声明方式：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> mapDispatchToProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function-variable function\">onClick</span><span class=\"token operator\">:</span> <span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> <span class=\"token function\">createIncrementAction</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但值得注意的是，当 mapDispatchToProps 使用对象声明时，该对象的键名必须是 UI 组件的同名参数，对应的键值则应当是一个可执行的函数。</p>\n</li>\n<li>\n<p>Provider 组件</p>\n<p>在使用 connect 函数生成容器组件后，容器组件需要获取到 state 参数，才能将其传递到对应的 UI 组件中。您当然可以选择将 state 对象作为桉树传入到容器组件中，但当容器组件层级较深时，这种传递方式将会相当麻烦。</p>\n<p>为此，React-Redux 提供一个 Provider 组件，可以让容器组件获取到 state，使用该组件也相当简单，只需要用该组件作为外层组件，将声明和使用 React-Redux 相关属性的组件包括在内即可，通常我们会直接作用在根组件上：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> store <span class=\"token keyword\">from</span> <span class=\"token string\">'./redux/store'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>Provider<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token operator\">&lt;</span>Provider store<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>store<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token operator\">&lt;</span>App<span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>浏览器调试工具</p>\n<blockquote>\n<p>个人觉得是一个既鸡肋，又麻烦的插件，但聊胜于无，这里简单带过，各位大人如有兴趣可自行探索。</p>\n</blockquote>\n<p>步骤一：chrome 商店搜索  <code>Redux DevTools</code>  并添加到浏览器。</p>\n<p>chrome 应用商店：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9jYXRlZ29yeS9leHRlbnNpb25z\">https://chrome.google.com/webstore/category/extensions</span>)</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2022/05/05722a6d2735cbbdae47b82c8a5e47a01653402007.jpg\" alt=\"chrome Redux DevTools\" /></p>\n<p>步骤二：在项目中安装依赖包。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i redux-devtools-extension</pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"项目案例-4\"><a class=\"anchor\" href=\"#项目案例-4\">#</a> 项目案例</h4>\n<blockquote>\n<p>此小结对于如何组织 redux，相关的使用规范，以及如何进行合理的结构划分并没有做相关叙述，这些非硬性知识点的内容在代码中将会有更加直观的表现。</p>\n</blockquote>\n<p><strong>项目标题</strong>：Redux 实践案例</p>\n<p><strong>功能简述</strong>：</p>\n<p>本项目用于集中演示 React 路由相关功能，集中展示商品和收获人列表，商品发生变化时，收货人列表可以即时获得反馈，收货人列表发生变化时，商品列表也能即时获得反馈，商品添加使用异步方式执行。</p>\n<p><strong>项目预览</strong>：</p>\n<ol>\n<li>\n<p>在线预览：<span class=\"exturl\" data-url=\"aHR0cHM6Ly84am5ncXcuY3NiLmFwcA==\">https://8jngqw.csb.app</span>（加载可能会有点慢）</p>\n</li>\n<li>\n<p>截图预览：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2022/05/39a891c441d7992fb31f8f7fbccca4631653494349.gif\" alt=\"redux 实践案例\" /></p>\n</li>\n</ol>\n<p><strong>项目地址</strong>：</p>\n<ol>\n<li>\n<p>代码沙箱：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9zL3JlZHV4LXNoaS1qaWFuLWFuLWxpLThqbmdxdw==\">CodeSandbox - Redux 实践案例</span></p>\n</li>\n<li>\n<p>代码仓库：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3hmYy1leGNsYXZlL3JlYWN0LWxlYXJuaW5n\">https://github.com/xfc-exclave/react-learning</span> - react-redux-demo</p>\n</li>\n</ol>\n<p><strong>重要知识点</strong>：</p>\n<ol>\n<li>\n<p>关于 UI：此案例中使用了 Ant Design。</p>\n</li>\n<li>\n<p>关于 React-Redux 拆分思想</p>\n<p>不知道各位大人对 Redux 的核心概念及工作原理中流程图是否还有印象，React-Redix 在 Redux 流程的基础上，将 Views 拆分为容器组件和 UI 组件。实际上是对 Redux 进行了更加细粒度的拆分和控制。这种将视图和逻辑进行分治管理的思想并非某一种语言特有，相信你一定听说过 MVC、MVP、MVVM 等概念，其实 React-Redux 的拆分方式就是这类思想的一种应用。</p>\n</li>\n<li>\n<p>此案例模块拆分得比较细，各位大人在梳理关系时，可以选择从 App 组件开始，也可以从 UI 组件开始。另外，运行案例时，可以打开浏览器控制台，观察输出顺序。</p>\n</li>\n</ol>\n<div class=\"note success\">\n<p>到此为止，恭喜你坚持不懈走完了这条新手村的慢慢长路，也很荣幸能够作为你在新手阶段的 NPC，前途山高路远，万不敢奢望您能够在此稍作停留，只希望您能够在闲暇之余，看一眼天空中凝而不散的那几个字 ——“苟富贵，勿相忘”（哈哈，手动开心）。</p>\n</div>\n<h3 id=\"react-扩展\"><a class=\"anchor\" href=\"#react-扩展\">#</a> React 扩展</h3>\n<p>本文正式内容在 Redux 之后就已经告一段落了，这一小节仅仅是额外补充一些小扩展，其重要级别相对较低，各位大人们可以选择性阅读。</p>\n<h3 id=\"项目实战\"><a class=\"anchor\" href=\"#项目实战\">#</a> 项目实战</h3>\n<p>学习了前面诸多章节的知识点，不知道大人们的感受如何，接下来就到了本 NPC 的工作尾声了，所谓的 “项目实战” 其实还处于  <code>will have done</code>  状态，这将是本 NPC 的个人进修课程，其目的是对已掌握知识点进行巩固，以及将这些知识点与实际项目进行衔接。以下仅仅是本 NPC 的个人计划，各位大人可以参考，可以笑笑，也可以自行离场。</p>\n<p>本文附属项目实战计划细则：</p>\n<ol>\n<li>\n<p>选择对公司内 Vue 开发的项目使用 React 进行重新实现，或者对一些开源框架进行 React 前端实现（例如做一个 RuoYi-React 之类的），二选一。</p>\n</li>\n<li>\n<p>项目的编写和设计需要尽量规范化，并且必须保持代码规范。</p>\n</li>\n<li>\n<p>UI 可以优先考虑 antd（antd 对管理系统类应该更为实用）。</p>\n</li>\n<li>\n<p>不一定要求很完善，但一定要看起来像那么回事，尽可能广泛地涵盖本文相关知识点。</p>\n</li>\n<li>\n<p>后端接口没必要亲自再写，使用 Mock 就好，或者使用其他项目的接口。</p>\n</li>\n<li>\n<p>项目大概成型后，补充在文末，并记录时间以便衡量成本（当前时间：2022-05-26）。</p>\n</li>\n<li>\n<p>如果有余力，以及条件允许，则部署该项目，并提供演示域名，其意义在于公开成果，有助于接受旁人的学习监督。</p>\n</li>\n<li>\n<p>如在实战过程中，发现本文知识点有遗漏、含糊不清，甚至偏差甚大的地方，务必即时补充和更正。</p>\n</li>\n<li>\n<p>考虑到还有工作、其他学习计划、其他个人项目，以及一些生活琐事，本项目预期时间为三个月（感觉有些太短了，六个月又太长了……，算了，就先这样计划吧）。</p>\n</li>\n</ol>\n<blockquote>\n<p>接下来大概又有的忙了，希望我千万不要打自己的脸啊。</p>\n</blockquote>\n<h3 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC1oYW5zLnJlYWN0anMub3Jn\">https://zh-hans.reactjs.org</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXd5NHkxRDdKVA==\">https://www.bilibili.com/video/BV1wy4y1D7JT</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9yZWFjdC9yZWFjdC1jb21wb25lbnQtbGlmZS1jeWNsZS5odG1s\">https://www.runoob.com/react/react-component-life-cycle.html</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGd1b3cvcC8xMDkyMTU2NC5odG1s\">https://www.cnblogs.com/lguow/p/10921564.html</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81MTExNzUzNDc=\">https://zhuanlan.zhihu.com/p/511175347</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxNDMxMzQyOA==\">https://segmentfault.com/a/1190000014313428</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTYvMDkvcmVkdXhfdHV0b3JpYWxfcGFydF90aHJlZV9yZWFjdC1yZWR1eC5odG1s\">http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html</span></li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "WEB前端",
                "React 教程",
                "前端",
                "react"
            ]
        },
        {
            "id": "https://www.chinmoku.cc/computer-science/others/react/",
            "url": "https://www.chinmoku.cc/computer-science/others/react/",
            "title": "",
            "date_published": "2022-05-21T15:43:03.116Z",
            "content_html": "<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> React 教程</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2021-08-24 19:37:53</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">updated</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2021-08-24 19:37:53</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">categories</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>计算机科学<span class=\"token punctuation\">,</span> JAVA学习路线<span class=\"token punctuation\">,</span> 基础篇<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>web<span class=\"token punctuation\">,</span> react<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>最近一段时间特别喜欢前端，这些天在 B 站上找到一个感觉特别良好的视频教程，自我感觉还算是比较用心地跟着学习了一下，但在学习过程中不太方便做笔记，为了避免即学即忘，所以在学完之后，赶紧详细整理一下 React 相关笔记。</p>\n</div>\n<h3 id=\"react-入门\"><a class=\"anchor\" href=\"#react-入门\">#</a> React 入门</h3>\n<div class=\"note success\">\n<p>尊敬的旅者，欢迎来到 React 的世界，我是您此段行程的向导（也被称为 “稀里糊涂的 NPC”），刚刚度过了煎熬的五大天，终于从 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXd5NHkxRDdKVA==\">NPC 培训中心</span>（B 站）顺利毕业，为了不辜负师长的期望（假设有），我决定努力做一个优秀的 NPC，因此有了这篇文章。</p>\n<p>这篇文章严重参考了该培训中心的相关资料，也有少部分掺杂了微不足道的我的小小见解，希望旅者大人们不要见怪。为了改善大人们的旅途体验，微不足道的我使用 <code>CodePen</code>  为文中的部分代码编写了在线运行实例，如果一不小心弄巧成拙，也请大人们原谅微不足道的我的果实。</p>\n<p>当然了，旅途总是<strong>漫长</strong>的，希望旅者大人们合理安排时间。</p>\n</div>\n<h4 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h4>\n<p>一提到 Web 前端开发，我们很容易就能想到前端的三大主流框架：Vue、React、Angular。个人觉得 Web 前端开发首选推荐肯定是 Vue，React 可以作为在掌握 Vue 知识基础上的扩展，当然，Vue 语言在设计之初就对 React 进行了借鉴，所以二者之间存在诸多联系和相似点，至于 Angular 暂时还不在笔者对学习考虑范围内，不作相关扩展。</p>\n<p>另外，从 Vue 和 React 两者官网的描述也可看出两者本质上的差异。</p>\n<blockquote>\n<p><code>React</code>  是一个用于构建用户界面的 JavaScript 库。</p>\n<p><code>Vue</code>  是一套用于构建用户界面的渐进式框架。</p>\n</blockquote>\n<p>因此，对于学习而言，Vue 封装了更多的 API，对于学习前期有更多的帮助，而 React 则更加适合在掌握 Vue 的基础上对前端知识进行深化，它更容易帮助学习者从简单的框架使用之中脱离出来，逐渐理解框架运行的底层实现。</p>\n<p><strong>React 官网</strong></p>\n<ol>\n<li>\n<p>英文官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmVhY3Rqcy5vcmc=\">https://www.reactjs.org</span></p>\n</li>\n<li>\n<p>中文官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWFjdC5kb2NzY2hpbmEub3Jn\">https://react.docschina.org</span></p>\n</li>\n</ol>\n<p><strong>介绍描述</strong></p>\n<p><strong>特点</strong></p>\n<ol>\n<li>\n<p>声明式编码。</p>\n</li>\n<li>\n<p>组件化编码。</p>\n</li>\n<li>\n<p>React Native 可编写原生应用。</p>\n</li>\n<li>\n<p>高效（使用优秀的 Diffing 算法）。</p>\n</li>\n</ol>\n<p>🍎 React 高效的原因？</p>\n<ol>\n<li>\n<p>使用虚拟 DOM，并非总是直接操作页面的真实 DOM。</p>\n</li>\n<li>\n<p>DOM 采用 Diffing 算法，使页面最小程度地进行重新渲染。</p>\n</li>\n</ol>\n<h4 id=\"基本使用\"><a class=\"anchor\" href=\"#基本使用\">#</a> 基本使用</h4>\n<blockquote>\n<p>为了方便在学习过程中能够更加直观地展示页面效果，您可以通过 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3hmYy1leGNsYXZlL3Blbi9Qb1F6SmR2\">Codepen</span> 等工具进行在线编程。</p>\n</blockquote>\n<p><strong>Hello World</strong></p>\n<p>以下是一个最基础的 React 示例，您可以借此对 React 拥有一个基本的认知：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Hello React<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 准备好用于渲染 DOM 的容器 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react@16/umd/react.development.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react-dom@16/umd/react-dom.development.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/babel-standalone@6/babel.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/babel<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 创建虚拟 DOM</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token constant\">VDOM</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Hello<span class=\"token punctuation\">,</span> React<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 将虚拟 DOM 渲染到页面的指定节点中</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token constant\">VDOM</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"app\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>为了方便查看运行效果，您可以<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3hmYy1leGNsYXZlL3Blbi9Qb1F6SmR2\">点击此处</span>进行在线预览，当然，您也可以亲自尝试一下。</p>\n<p>如代码所示，通过 CDN 方式引入 React，你需要引入如下三个文件：</p>\n<ol>\n<li>\n<p>react.development.js - React 核心库。</p>\n</li>\n<li>\n<p>react-dom.development.js - 提供操作 DOM 的 React 扩展库。</p>\n</li>\n<li>\n<p>babel.min.js - 用于解析 JSX 的库。</p>\n</li>\n</ol>\n<p>并且，与普通的 JavaScript 代码不同的是，React 脚本的类型需要声明为  <code>text/babel</code> ，其作用在于解析 JSX 语法代码并将其转换为浏览器识别的 JS 代码。</p>\n<p>在学习过 Web 基础之后，我们知道可以通过  <code>document.createElement()</code>  来创建 DOM 元素，但在 React 中采用了 JSX 语法来替代原生 JavaScript 创建 DOM 的方式。</p>\n<p><strong>虚拟 DOM 与真实 DOM</strong></p>\n<p>虚拟 DOM 是 React 的亮点之一，所谓虚拟 DOM，即非真实的 DOM。其实虚拟 DOM 本质上是一个一般对象，它相较于真实 DOM 而言拥有更少的属性，且无法在浏览器中直接显示。虚拟 DOM 去除了很多真实 DOM 中存在但程序编码无需关注的属性。</p>\n<p>虚拟 DOM 的引入使页面更新效率得到了极大的提升，由于真实 DOM 直接作用于页面，对于任何一次更新，真实 DOM 都会重新进行渲染，即便该更新内容只适应于极小的范围，这就造成了浏览器性能的极大浪费。而虚拟 DOM 则充当了用户与真实 DOM 之间的过滤助手，它通过 Diffing 算法，识别出需要更新的数据节点，并将其转换为真实 DOM，而对于未做变更的数据节点，则无需进行 DOM 转换，这样就极大程度地将数据变更控制在了最小的元素单元内。</p>\n<p>对此，React 提供了用于创建虚拟 DOM 的 API，其声明示例如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ================ 使用 javascript 创建虚拟 DOM</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// React.createElement(node, attributes, content)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">VDOM</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>id<span class=\"token operator\">:</span> <span class=\"token string\">'title'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello, React~'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// ================ 使用 jsx 创建虚拟 DOM // 注意：使用 jsx 需要指定 javascript 类型为 text/babel</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token constant\">VDOM</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">&lt;</span>h1 id<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>Hello<span class=\"token punctuation\">,</span> React<span class=\"token operator\">~</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token constant\">VDOM</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>从这个示例中，相信您很容易可以看出 JSX 语法的优势所在。</p>\n<h4 id=\"react-jsx\"><a class=\"anchor\" href=\"#react-jsx\">#</a> React JSX</h4>\n<p>通过前文的了解，我们可以看出 JSX 的基本语法与 JavaScript 语法十分相似，而其虚拟 DOM 创建的语法又与 html 语法如出一辙。但是，JSX 与这二者之间仍存在诸多不同之处，观察下面这段代码清单，您或许会有更加深刻的感受：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">VDOM</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token operator\">&lt;</span>h2 className<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span> id<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>myId<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token operator\">&lt;</span>span style<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">>></span><span class=\"token punctuation\">&#123;</span>myData<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token operator\">&lt;</span>h2 className<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span> id<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>myId<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token operator\">&lt;</span>span style<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">>></span><span class=\"token punctuation\">&#123;</span>myData<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token constant\">VDOM</span><span class=\"token punctuation\">,</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>从这段代码清单中可以看出，相比于 JavaScript 和 html，JSX 还需要遵循一些额外的规则，这里总结 JSX 的语法规则如下：</p>\n<ol>\n<li>\n<p>JSX 在定义虚拟 DOM 时，不应当加引号，否则虚拟 DOM 内容会被识别为普通字符串。</p>\n</li>\n<li>\n<p>JSX 标签中混入 JavaScript 语法时，应当使用符号  <code>&#123;&#125;</code>  包裹。</p>\n</li>\n<li>\n<p>虚拟 DOM 节点的类属性应当使用  <code>className</code>  而非  <code>class</code> 。</p>\n</li>\n<li>\n<p>虚拟 DOM 中的内联样式需要使用  <code>style=&#123;&#123;key: value&#125;&#125;</code>  进行书写，且其内的 CSS 属性名也需要使用驼峰命名方式。</p>\n<blockquote>\n<p>可以理解为 style 中传入的是一个表示样式内容的 JS 对象。</p>\n</blockquote>\n</li>\n<li>\n<p>虚拟 DOM 只能有一个根标签。</p>\n</li>\n<li>\n<p>所有虚拟 DOM 的标签都必须闭合。</p>\n</li>\n<li>\n<p>虚拟 DOM 标签首字母小写时，转换真实 DOM 则会匹配同名的 html 元素，首写字母大写时，React 则会渲染对应的组件，若对应组件不存在，则会抛出异常。</p>\n</li>\n</ol>\n<p><strong>JS 表达式 / JS 语句</strong></p>\n<p>值得注意的是，在 JSX 中允许书写 JS 表达式，但不允许书写 JS 语句。</p>\n<p>表达式和语句的区别在于，前者可以产生一个值，可以放在任何需要值的地方，且能够被其他变量接收，它们通常会占用一定的内存空间，而后者则更多地偏向于进行代码的控制。</p>\n<p>JS 表达式示例：</p>\n<ol>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>a + b</p>\n</li>\n<li>\n<p>handler(20)</p>\n</li>\n<li>\n<p>arr.map()</p>\n</li>\n<li>\n<p>function handler(params) {}</p>\n</li>\n</ol>\n<p>JS 代码示例：</p>\n<ol>\n<li>\n<p>if(condition) {}</p>\n</li>\n<li>\n<p>for(var item in arr) {}</p>\n</li>\n<li case:=\"\" xxx=\"\">\n<p>switch(condition)</p>\n</li>\n</ol>\n<p><strong>虚拟 DOM 渲染</strong></p>\n<p>语法： <code>ReactDOM.render(virtualDOM, containerDOM)</code> 。</p>\n<h4 id=\"模块-组件-模块化-组件化\"><a class=\"anchor\" href=\"#模块-组件-模块化-组件化\">#</a> 模块、组件、模块化、组件化</h4>\n<ol>\n<li>\n<p>模块</p>\n<p>所谓模块，通常是一个向外提供特定功能的 JavaScript 程序，一般就是一个 JS 文件。</p>\n<p>模块的拆分，有利于代码解耦，使代码逻辑更清晰，更容易维护。此外，拆分模块还可以方便 JS 复用，简化 JS 编写，提高 JS 运行效率。</p>\n</li>\n<li>\n<p>组件</p>\n<p>组件通常是用来实现局部功能效果的代码和资源的集合，该集合中包含所有实现该组件的相关资源。</p>\n<p>随着页面功能的增加，使用组件对不同功能进行代码聚合，能够很方便地做到即取即用。当不再需要该组件时，能够轻松进行卸载，而不会引起代码的异常连锁。</p>\n<p>总之，组件化是前端发展的趋势，甚至，相同的思想在其他各种语言、各种类型的程序中都已进行了广泛的应用。其典型特点就是：可插拔，易扩展，低耦合，高性能。当然，与之相应的，也会存在一定的学习成本。</p>\n</li>\n<li>\n<p>模块化</p>\n</li>\n<li>\n<p>组件化</p>\n</li>\n</ol>\n<blockquote>\n<p>编程过程中难免会碰到很多  <code>~ ~ 化</code>  的概念，其实无非是加上了  <code>-ization</code>  的区别。如果你能够正确地区分【商业】和【商业化】、【工业】和【工业化】，理解这些概念就不是什么难事了。其实这些只是语文上的区别，所谓的 “某某化”，其实就是将这个 “某某” 进行大范围、大规模地应用，并形成一定的规范而已。</p>\n</blockquote>\n<h3 id=\"react-面向组件编程\"><a class=\"anchor\" href=\"#react-面向组件编程\">#</a> React 面向组件编程</h3>\n<h4 id=\"基本理解和使用\"><a class=\"anchor\" href=\"#基本理解和使用\">#</a> 基本理解和使用</h4>\n<p><strong>React 开发者工具</strong></p>\n<p>如使用 Chrome 浏览器进行开发，可在 Chrome 商店安装  <code>React Developer Tools</code>  来帮助开发和调试。</p>\n<p>chrome 应用商店：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9jYXRlZ29yeS9leHRlbnNpb25z\">https://chrome.google.com/webstore/category/extensions</span></p>\n<p><img data-src=\"https://img.xfc-exclave.com/2022/05/ceb9e52b1bc5edfc74b2a6e1e97527ec1652881005.png\" alt=\"ChromeReactdevelopertools\" /></p>\n<p>将其添加至 Chrome，当访问 React 开发的网页时，即可打开控制台进行调试。</p>\n<p>您也可以在添加该插件后，开启该插件并借助<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWVpdHVhbi5jb20=\">美团官网</span>体验一下该插件的相关功能。</p>\n<p><strong>React 组件声明方式</strong></p>\n<p>React 中组件有两种声明方式：</p>\n<ol>\n<li>\n<p>函数式组件</p>\n<p>声明方式：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/babel<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 由于 babel 编译之后开启了严格模式，因此 this 将指向 undefined</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>函数式组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>MyComponent<span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>执行流程说明：</p>\n<p>babel 在解析 JSX 的过程中，读取到  <code>ReactDOM.render()</code> ，发现其组件标签为  <code>&lt;MyComponent/&gt;</code>  是通过函数进行定义的，因此就会执行该函数并得到其返回值，然后将返回值作为虚拟 DOM，最终转换为真实 DOM 并渲染到页面。</p>\n</li>\n<li>\n<p>类式组件</p>\n<p>声明方式：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/babel<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// 类式组件可声明构造器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token comment\">//render 存在于当前组件的原型对象上，供该组件的实例使用</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//this 指向当前组件的实例对象</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>类式组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>MyComponent<span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>执行流程说明：</p>\n<p>babel 在解析 JSX 的过程中，读取到  <code>ReactDOM.render()</code> ，发现其组件标签为  <code>&lt;MyComponent/&gt;</code>  是通过类进行定义的，于是其内部就会通过关键字  <code>new</code>  实例化出该类的实例，并通过该实例调用到原型上的 render 方法，然后将 render 的返回值作为虚拟 DOM，最终转换为真实 DOM 并渲染到页面。</p>\n<p>构造器：</p>\n<p>构造器也被称为构造函数，它存在于 C、Java、Python 等诸多语言中，其作用主要是在创建对象时进行初始化，其执行时机通常是在使用  <code>new</code>  关键字（显式或隐式）创建对象时执行，并且在该对象的生命周期中只执行一次。构造函数通常是默认存在的，并且允许被覆盖重写。</p>\n</li>\n</ol>\n<blockquote>\n<p>在新版本的 React 中已经推荐使用函数式组件，但由于类式组件更易于理解，因此，本文将先着重从类式组件来解述组件相关知识，最后在归纳在函数式组件中的用法差异。</p>\n</blockquote>\n<p><strong>React 组件实例三大属性</strong></p>\n<p>React 组件实例拥有三大属性，它们共同丰富了组件的功能。</p>\n<ol>\n<li>\n<p>state</p>\n</li>\n<li>\n<p>props</p>\n</li>\n<li>\n<p>refs</p>\n</li>\n</ol>\n<p>在后面的组件内容中，将对 React 组件三大属性进行逐一说明。</p>\n<h4 id=\"三大核心属性state\"><a class=\"anchor\" href=\"#三大核心属性state\">#</a> 三大核心属性：state</h4>\n<p>state 是 React 组件最重要的属性，其对应的值被声明为对象类型。从字面解读，该属性被称为 “状态机”，（个人认为）也可以理解为一个数据集，其作用是用来存储核心数据，相当于 Vue 中的 data。</p>\n<p><strong>state 的基本使用</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginStatus</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'constructor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>isLogin<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> username<span class=\"token operator\">:</span> <span class=\"token string\">'路易斯'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 通过 .bind (this) 可以将 this 对象传递到 switchLogin () 函数中（强制绑定，不推荐）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>switchLogin <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">switchLogin</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//state = &#123;isLogin: false, username: ' 路易斯 '&#125; // 构造器中的初始化内容可以声明在外侧，但需要注意 this 指向</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'render'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>isLogin<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">></span>早上好！<span class=\"token operator\">&lt;</span>span style<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">3</span><span class=\"token operator\">--</span><span class=\"token operator\">>></span><span class=\"token punctuation\">&#123;</span>username<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>，<span class=\"token punctuation\">&#123;</span>isLogin <span class=\"token operator\">?</span> <span class=\"token string\">'欢迎访问XXX系统！'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'请点击下方按钮进行登录~'</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>switchLogin<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>isLogin <span class=\"token operator\">?</span> <span class=\"token string\">'注销'</span><span class=\"token operator\">:</span> <span class=\"token string\">'登录'</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">switchLogin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'switchLogin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">const</span> isLogin <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isLogin</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>isLogin<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>isLogin<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>LoginStatus<span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>您可以<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3hmYy1leGNsYXZlL3Blbi9hYnFKT0d6\">点击此处</span>进行在线预览执行效果，浏览时推荐打开浏览器控制台查看相关的输出内容。</p>\n<p>在这个示例中，请着重注意以下几个问题：</p>\n<p>🍎 state 内的数据是通过什么方式进行变更的？</p>\n<p>state 维护的数据只能通过 React 组件对象示例的  <code>setState()</code>  方法进行调用。</p>\n<p>扩展资料：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzQ0MDkxNjI5NC9hbnN3ZXIvMTc0ODU1ODU3Mg==\">知乎：React 为什么不能直接修改 state？</span></p>\n<p>🍎 构造器和 render 函数分别在什么时候执行，以及它们各自会被调用多少次？</p>\n<p>构造器在实例声明的时候调用，且只调用一次。render 函数则在除了在 state 渲染到页面时调用外，还会在每次 setState 函数执行时调用，即 render 被调用次数为 setState 函数调用次数加一。</p>\n<p>🍎 可以不声明构造器吗？构造器中的  <code>super()</code>  的位置有什么要求？以及它的作用是什么？</p>\n<p>React 类式组件可以不显示声明构造器，但  <code>React.Component</code>  中是默认存在的。如显式声明构造器，则必须指定  <code>super()</code>  函数，且应当保证其在构造器内所有的有效代码中第一位执行，这是因为 super 函数会继承父类的 this 对象并对其进行加工。</p>\n<p>🍎 构造器及其 super 函数的  <code>props</code>  参数是否必须？</p>\n<p>不是必须，视需要而定，如需要在构造器中使用 props 对象，则必须传递。</p>\n<p><strong>代码改造</strong></p>\n<p>事实上，在 React 类式组件中，通过  <code>function</code>  关键字声明的函数，在函数体中是无法直接获取到 this 对象的，但通过箭头函数声明却可以轻易地获取到 this 对象，基于上面的示例进行改造如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginStatus</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    state <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> isLogin<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> username<span class=\"token operator\">:</span> <span class=\"token string\">'路易斯'</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> isLogin<span class=\"token punctuation\">,</span> username <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">></span>早上好！<span class=\"token operator\">&lt;</span>span style<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">4</span><span class=\"token operator\">--</span><span class=\"token operator\">>></span><span class=\"token punctuation\">&#123;</span>username<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>，<span class=\"token punctuation\">&#123;</span>isLogin <span class=\"token operator\">?</span> <span class=\"token string\">'欢迎访问XXX系统！'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'请点击下方按钮进行登录~'</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>switchLogin<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>isLogin <span class=\"token operator\">?</span> <span class=\"token string\">'注销'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'登录'</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function-variable function\">switchLogin</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">const</span> isLogin <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isLogin</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> isLogin<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>isLogin <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>LoginStatus <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在这个示例中，箭头函数中的 this 指向不会丢失，这是因为箭头函数不会创建其自身的执行上下文，因此箭头函数中的 this 会向其作用域外层逐层查找，直到找到 this 的定义。</p>\n<h4 id=\"三大核心属性props\"><a class=\"anchor\" href=\"#三大核心属性props\">#</a> 三大核心属性：props</h4>\n<p>React 中的每个组件都会有其自身的  <code>props</code>  属性，该属性值来源于组件标签中的传递的属性，其作用即是通过标签属性从组件外部向组件内部传递变化的数据。</p>\n<p><strong>props 的基本使用</strong></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>node01<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>node02<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>node03<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/babel<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> gender <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>姓名：<span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>性别：<span class=\"token punctuation\">&#123;</span>gender<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>年龄：<span class=\"token punctuation\">&#123;</span>age<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Person name<span class=\"token operator\">=</span><span class=\"token string\">\"Tom\"</span> age<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">19</span><span class=\"token punctuation\">&#125;</span> gender<span class=\"token operator\">=</span><span class=\"token string\">\"男\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node01'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Person name<span class=\"token operator\">=</span><span class=\"token string\">\"Jerry\"</span> age<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span> gender<span class=\"token operator\">=</span><span class=\"token string\">\"女\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node02'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Spike'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> gender<span class=\"token operator\">:</span> <span class=\"token string\">'男'</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 使用扩展运算符（展开运算符）</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Person <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span>p<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node03'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>您可以<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3hmYy1leGNsYXZlL3Blbi9xQnhyYWJL\">点击此处</span>在线预览该代码片段的执行效果，浏览时推荐打开浏览器控制台查看相关的输出内容。</p>\n<blockquote>\n<p>JavaScript 扩展运算符是 ES6 中的语法糖，如不熟悉的，可百度自行了解。</p>\n</blockquote>\n<p><strong>props 参数限制与默认值</strong></p>\n<p>此外，props 在接收参数时，也可以对参数类型等进行一系列限制及指定默认值，使其符合组件预期的规范，例如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">static</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 指定默认值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        gender<span class=\"token operator\">:</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        age<span class=\"token operator\">:</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 类型限制及默认类型，既可以通过 static 关键字在类内部声明，也可以在类外部声明</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> gender <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>姓名：<span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>性别：<span class=\"token punctuation\">&#123;</span>gender<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>年龄：<span class=\"token punctuation\">&#123;</span>age<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Person<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    name<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 必须传递限制</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    gender<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span><span class=\"token comment\">// 字符串类型限制</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    age<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span><span class=\"token comment\">// 数值类型限制</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    speak<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">,</span><span class=\"token comment\">// 函数类型限制</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Person name<span class=\"token operator\">=</span><span class=\"token string\">\"Tom\"</span> age<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">19</span><span class=\"token punctuation\">&#125;</span> speak<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>speak<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node01'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Person name<span class=\"token operator\">=</span><span class=\"token string\">\"Jerry\"</span> gender<span class=\"token operator\">=</span><span class=\"token string\">\"女\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node02'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Spike'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> gender<span class=\"token operator\">:</span> <span class=\"token string\">'男'</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Person <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span>p<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node03'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"speak()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但值得注意的是，类型限制需要引入一个  <code>prop-types.js</code>  作为支撑，你可以参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcHJvcC10eXBlcw==\">npmjs.com</span> 选择合适的 CDN 库，也可以参考我为您编写的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3hmYy1leGNsYXZlL3Blbi9CYVlXTGVR\">在线代码片段</span>，并尝试触发类型校验。</p>\n<p><strong>props 在函数式组件中的使用</strong></p>\n<p>与 state 不同，props 参数在 React 函数式组件中是可以直接获取到的，它主要是通过函数的参数进行传递的：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> gender <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> props</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>姓名：<span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>性别：<span class=\"token punctuation\">&#123;</span>gender<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>年龄：<span class=\"token punctuation\">&#123;</span>age<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Person<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 指定默认值</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    gender<span class=\"token operator\">:</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    age<span class=\"token operator\">:</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Person<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    name<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 必须传递限制</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    gender<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span><span class=\"token comment\">// 字符串类型限制</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    age<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span><span class=\"token comment\">// 数值类型限制</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Person name<span class=\"token operator\">=</span><span class=\"token string\">\"Tom\"</span> age<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">19</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node01'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"三大核心属性refs\"><a class=\"anchor\" href=\"#三大核心属性refs\">#</a> 三大核心属性：ref (s)</h4>\n<p>组件内的标签可以通过  <code>ref</code>  属性来标识自己，通过该属性，可以很方便地获取到当前的节点信息。</p>\n<p><strong>ref 的基本使用</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Form</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function-variable function\">search</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> query <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>refs</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'捕获的节点信息：'</span><span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'搜索关键字：'</span><span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function-variable function\">showName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> username <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'输入的用户名为'</span><span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    myRef <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function-variable function\">showAddress</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'输入的地址为'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>普通形式的 ref<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token string\">\"query\"</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"请输入搜索内容\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>搜索<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>回调函数形式的 ref<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> c<span class=\"token punctuation\">&#125;</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"请输入用户姓名\"</span> onBlur<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>showName<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>左侧输入框离焦取值<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>createRef 的使用<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myRef<span class=\"token punctuation\">&#125;</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"请输入用户地址\"</span> onBlur<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>showAddress<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>左侧输入框离焦取值<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Form <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>您可以<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3hmYy1leGNsYXZlL3Blbi9keWR2TnB6\">点击此处</span>在线预览该代码片段的执行效果，浏览时推荐打开浏览器控制台查看相关的输出内容。</p>\n<p><strong>事件处理</strong></p>\n<p>React 组件中的事件是通过类似  <code>onClick</code>  这种驼峰命名的属性来指定事件处理函数的，在 React 使用事件处理时，您应当注意如下几点：</p>\n<ol>\n<li>\n<p>React 使用的是自定义事件，而不是使用的原生 DOM 事件，其目的是为了更好的兼容性。</p>\n</li>\n<li>\n<p>React 中的事件是通过事件委托方式处理的（委托给组件最外层的元素），其目的是为了的高效。</p>\n</li>\n<li>\n<p>官方明确提出，不应当过渡使用  <code>ref</code>  属性。在许多常规情形中，我们可以通过  <code>event.target</code>  来获取当前的 DOM 对象，用于替代 ref。</p>\n</li>\n</ol>\n<h4 id=\"表单处理\"><a class=\"anchor\" href=\"#表单处理\">#</a> 表单处理</h4>\n<p>React 中有两种形式来处理表单输入：</p>\n<ol>\n<li>\n<p>受控组件</p>\n<p>简单理解，如果一个表单元素的值是交由 React 组件进行维护（控制），那么我们就称其为受控组件，例如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Login</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   username<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   password<span class=\"token operator\">:</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function-variable function\">saveUsername</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> username<span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function-variable function\">savePassword</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> password<span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function-variable function\">handleSubmit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 阻止表单提交</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> username<span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">你输入的用户名是：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>username<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">,你输入的密码是：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>password<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>       <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>           用户名：<span class=\"token operator\">&lt;</span>input onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>saveUsername<span class=\"token punctuation\">&#125;</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>           密码：<span class=\"token operator\">&lt;</span>input onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>savePassword<span class=\"token punctuation\">&#125;</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>           <span class=\"token operator\">&lt;</span>button<span class=\"token operator\">></span>登录<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>       <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Login <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>非受控组件</p>\n<p>与受控组件相反，如果一个表单元素的值不是交由 React 组件进行维护，那么我们就称其为非受控组件，例如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Login</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function-variable function\">handleSubmit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 阻止表单提交</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> username<span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">你输入的用户名是：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>username<span class=\"token punctuation\">.</span>value<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">,你输入的密码是：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>password<span class=\"token punctuation\">.</span>value<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>           用户名：<span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> c<span class=\"token punctuation\">&#125;</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>           密码：<span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> c<span class=\"token punctuation\">&#125;</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>           <span class=\"token operator\">&lt;</span>button<span class=\"token operator\">></span>登录<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Login <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"组件的生命周期\"><a class=\"anchor\" href=\"#组件的生命周期\">#</a> 组件的生命周期</h4>\n<p><img data-src=\"https://img.xfc-exclave.com/2022/05/4b9b8a1c7eac3d7b59a9eac39564aa411652881119.png\" alt=\"React组件的生命周期\" /></p>\n<p>所谓的生命周期，其实就是对象从创建到销毁的整个过程。React 组件中包含了一系列钩子函数（生命周期函数），能够在其生命周期的不同阶段调用执行。通过这些钩子函数，使我们可以很方便地在 React 组件生命的各个阶段监控其状态或执行一些特定的代码。</p>\n<p>总体而言，React 组件的生命周期可分为三个阶段：</p>\n<blockquote>\n<p>下面的徽标表示对应的重要程度，后文会进行详细说明。</p>\n</blockquote>\n<ol>\n<li>\n<p>挂载阶段（Mounting）</p>\n<p>当组件实例被创建并插入 DOM 中时，其生命周期调用顺序如下：</p>\n<ul>\n<li>\n<p>constructor - <span class=\"label primary\">普通</span></p>\n</li>\n<li>\n<p>static getDerivedStateFromProps - <span class=\"label\">忽略</span></p>\n</li>\n<li>\n<p>render - <span class=\"label danger\">重要</span></p>\n</li>\n<li>\n<p>componentDidMount - <span class=\"label danger\">重要</span></p>\n</li>\n</ul>\n</li>\n<li>\n<p>更新阶段（Updating）</p>\n<p>当组件的 props 或 state 发生变化时会触发更新。组件更新的生命周期调用顺序如下：</p>\n<ul>\n<li>\n<p>static getDerivedStateFromProps - <span class=\"label\">忽略</span></p>\n</li>\n<li>\n<p>shouldComponentUpdate - <span class=\"label\">忽略</span></p>\n</li>\n<li>\n<p>render - <span class=\"label danger\">重要</span></p>\n</li>\n<li>\n<p>getSnapshotBeforeUpdate - <span class=\"label\">忽略</span></p>\n</li>\n<li>\n<p>componentDidUpdate - <span class=\"label primary\">普通</span></p>\n</li>\n</ul>\n</li>\n<li>\n<p>卸载阶段（Unmounting）</p>\n<p>当组件从 DOM 中移除时会调用如下方法：</p>\n<ul>\n<li>componentWillUnmount - <span class=\"label danger\">重要</span></li>\n</ul>\n</li>\n</ol>\n<p>如上，在 React 生命周期中，共计有 8 个生命周期函数，这里分别使用了不同的徽标来表示它们的重要性。其中真正重要的只有 3 个（必须熟知），标记普通的有 2 个（了解或掌握），标记忽略的有 3 个（不常用可忽略）。这些重要性标签是出于常规角度考虑，如果您出于面试等知识点考察的需要，推荐直接阅读<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC1oYW5zLnJlYWN0anMub3JnL2RvY3MvcmVhY3QtY29tcG9uZW50Lmh0bWw=\">官方文档：React 组件的生命周期</span>。</p>\n<p>另外，您也可以借助 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9wcm9qZWN0cy53b2p0ZWttYWoucGwvcmVhY3QtbGlmZWN5Y2xlLW1ldGhvZHMtZGlhZ3JhbS8=\">React 组件生命周期图谱</span>来获得更加直观的认知，该图谱很有对于理解 React 生命周期很有益处，请务必看一看。</p>\n<p><strong>三个重要的生命周期函数：</strong></p>\n<ol>\n<li>\n<p>render</p>\n<p>render 是类式组件中唯一必须实现的方法，它在初始化渲染或更新渲染时调用。当 render 被调用时，它会检查  <code>this.props</code>  和  <code>this.state</code>  的变化并返回以下类型之一：</p>\n<ul>\n<li>\n<p>React 元素</p>\n</li>\n<li>\n<p>数组或 fragments</p>\n</li>\n<li>\n<p>Portals</p>\n</li>\n<li>\n<p>字符串或数值类型</p>\n</li>\n<li>\n<p>布尔或 null</p>\n</li>\n</ul>\n</li>\n<li>\n<p>componentDidMount</p>\n<p>componentDidMount 会在组件挂载后立即调用，它适用于一些依赖于 DOM 节点的初始化操作。</p>\n</li>\n<li>\n<p>componentWillUnmount</p>\n<p>componentWillUnmount 会在组件卸载及销毁之前调用，它适用于进行一些必要的收尾操作，例如断开通讯连接、清除定时器等。</p>\n</li>\n</ol>\n<p><strong>两个普通程度的生命周期函数</strong></p>\n<ol>\n<li>\n<p>constructor</p>\n<p>从前文中，我们已经获知 constructor 的作用在于对组件实例对象进行初始化。但在实际应用中，对于实现同样的功能，constructor 通常可以被其他方式等效替代，因此其重要程度相对较低。</p>\n</li>\n<li>\n<p>componentDidUpdate</p>\n<p>componentDidUpdate 会在 state 或 props 更新后立即调用，但当组件首次渲染，则不会执行该方法。此外，它还可以记录前一次变更的参数信息，基于这个特性，我们可以有效地监控数据的变更，对于一些特定的需求有较大帮助。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">componentDidUpdate</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">preProps<span class=\"token punctuation\">,</span> preState<span class=\"token punctuation\">,</span> snapshotValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>preProps<span class=\"token punctuation\">,</span> preState<span class=\"token punctuation\">,</span> snapshotValue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>需要注意的是，由于该函数本身是监控数据变更状态的，因此，当需要在该函数中修改数据时，请务必注意避免导致死循环。</p>\n</li>\n</ol>\n<p><strong>三个标记忽略的生命周期函数</strong></p>\n<p>剩下三个标记忽略的生命周期函数，在官方文档中已明确为<strong>不常用的生命周期方法</strong>，此处不做扩展，如需要了解请直接阅读官方文档。</p>\n<p>关于组件的生命周期，您可以尝试执行一下我为您编写的 [小案例](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3hmYy1leGNsYXZlL3Blbi9HUlFXVnlW\">React cpn lifecycle</span>)。</p>\n<blockquote>\n<p>注：React 旧版本中的生命周期略有不同，但个人觉得没必要了解，毕竟技术这东西总是学新不学旧。如感兴趣，可以自行百度一下。</p>\n</blockquote>\n<h4 id=\"虚拟-dom-与-diffing-算法\"><a class=\"anchor\" href=\"#虚拟-dom-与-diffing-算法\">#</a> 虚拟 DOM 与 Diffing 算法</h4>\n<p><img data-src=\"https://s3.51cto.com/images/blog/202108/01/f1c6e6b8bdf6574152421717ac9518b6.png\" alt=\"Diffing算法\" /></p>\n<p>上图源于网络（侵删），有助于理解 Diffing 算法，您可以带着对该图的印象继续阅读下文。</p>\n<p><strong>虚拟 DOM 中 key 的作用</strong></p>\n<p>key 是虚拟 DOM 对象的标识，用于帮助 React 识别哪些元素被改变了。</p>\n<p>当状态中的数据发生变化时，React 会根据新数据生成新的虚拟 DOM，然后将新虚拟 DOM 和旧虚拟 DOM 进行 diff 比较，其比较规则如下：</p>\n<ol>\n<li>\n<p>如果旧的虚拟 DOM 中存在与新的虚拟 DOM 相同的 key：</p>\n<p>则判断虚拟 DOM 中的内容是否变更，如果没变更，则直接使用真实 DOM，如果有变更，则生成新的真实 DOM 并替换掉页面上旧的真实 DOM。</p>\n</li>\n<li>\n<p>反之，如果旧的虚拟 DOM 中不存在与新的虚拟 DOM 相同的 key：</p>\n<p>则直接根据数据创建新的真实 DOM 并渲染到页面。</p>\n</li>\n</ol>\n<p>🍎 <strong>可以使用 index 作为虚拟 DOM 的 key 吗？</strong></p>\n<p>可以，但极不推荐。当使用索引作为虚拟 DOM 的 key 时：</p>\n<ul>\n<li>若对数据进行：逆序添加、逆序删除等破坏顺序的操作，会产生没必要的真实 DOM 更新，相当于任何一次修改都会对列表中的数据进行全量更新，效率低。</li>\n<li>如果列表结构中包含有输入类的 DOM，则会出现错误的 DOM 更新。</li>\n</ul>\n<p>因此，如果不存在对数据的逆序添加、逆序删除等破坏顺序的操作，仅用于列表渲染展示，那么使用索引作为 key 是不会引发异常的。</p>\n<p>关于这一部分，您也可以通过<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3hmYy1leGNsYXZlL3Blbi92WWR4UU9K\">点击此处</span>查看为您编写的示例，以便获得更加直观的认知。</p>\n<p>扩展资料：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZWRpdW0uY29tL0Byb2JpbnBva29ybnkvaW5kZXgtYXMtYS1rZXktaXMtYW4tYW50aS1wYXR0ZXJuLWUwMzQ5YWVjZTMxOA==\">深度解析使用索引作为 key 的负面影响</span>。</p>\n<div class=\"note success\">\n<p>呼～，到此为止，恭喜旅者大人终于具备了开启 React 之旅的基本素质和能力，接下来我将指导您注册身份、打造装备，然后开启您专属的新手村。</p>\n</div>\n<h3 id=\"react-脚手架\"><a class=\"anchor\" href=\"#react-脚手架\">#</a> React 脚手架</h3>\n<p>所谓的某某脚手架，其实本质上也是一个项目，只是这个项目的作用在于帮助我们初始化一个新的项目，并创建一个简单的模板，即所谓的抛砖引玉。</p>\n<h4 id=\"脚手架安装与项目初始化\"><a class=\"anchor\" href=\"#脚手架安装与项目初始化\">#</a> 脚手架安装与项目初始化</h4>\n<p>React 为我们提供了一个名为  <code>create-react-app</code>  的脚手架，如您已经安装有 npm 环境，只需执行如下命令，即可完成 React 脚手架的安装：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i create-react-app -g</pre></td></tr></table></figure><blockquote>\n<p>如果您的 npm 在安装脚手架时存在网络问题，可以选择前往<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2NyZWF0ZS1yZWFjdC1hcHA=\">源码地址</span>进行下载安装。</p>\n</blockquote>\n<p>安装完成后，即可通过简单的命令初始化一个 React 项目了：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>create-react-app myproject</pre></td></tr></table></figure><p>项目初始化完成后，您可以通过如下命令尝试启动它：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> myproject</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> start</pre></td></tr></table></figure><p>启动成功后，访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDozMDAw\">http://localhost:3000</span>，您将看到如下界面：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2022/05/feba9d75af02ba899f62aeda67b5e8ef1652881832.png\" alt=\"Reactapp预览\" /></p>\n<p>接下来请了解一下我们初始化的项目目录结构，以及不同文件、文件夹的作用：</p>\n<pre><code>myproject\n├── README.md    ====&gt; 项目导览说明\n├── node_modules    ====&gt; 项目依赖包\n├── package.json    ====&gt; 项目依赖包及脚本配置\n├── .gitignore    ====&gt; GIT代码忽略配置文件\n├── public    ====&gt; 静态资源文件夹\n│   ├── favicon.ico    ====&gt; 网站页签图标\n│   ├── index.html    ====&gt; 【主页面】\n│   ├── manifest.json    ====&gt; 应用加壳配置文件\n│   └── robots.txt    ====&gt; 爬虫协议文件\n└── src    ====&gt; 源码文件夹\n    ├── App.css    ====&gt; App组件样式文件\n    ├── App.js    ====&gt; App组件\n    ├── App.test.js    ====&gt; 测试文件\n    ├── index.css    ====&gt; 主页样式文件\n    ├── index.js    ====&gt; 主页脚本文件\n    ├── logo.svg    ====&gt; LOGO图片\n    ├── reportWebVitals.js    ====&gt; 页面性能分析文件\n    └── setupTests.js    ====&gt; 组件单元测试支持文件\n</code></pre>\n<p>阅读到这里，如果您还未进行任何编码，那么我在这里郑重地提醒您，请务必亲自尝试一下，并梳理初始项目的运行逻辑，后续的学习路线将会逐渐陡峭，不好好实践是走不出新手村的哦（当然啦，也不必太过担心，微不足道的我还是会很尽心地为各位旅者大人考虑的，但无论怎么看实践都是必须的吧，请大人们不要怠惰）。</p>\n<p>🍎 在脚手架创建的项目中，各种文件之间是如何进行相互引用的？</p>\n<p>基于模块化思想，模块之间的引用需要使用  <code>export</code>  和  <code>import</code>  关键字进行的，被引入的模块需要使用  <code>export</code>  进行暴露，引用方则通过  <code>import Xxx from 'xxx'</code>  的方式进行引入。如果被引用内容是静态资源，则不需要声明 export。</p>\n<h4 id=\"项目案例\"><a class=\"anchor\" href=\"#项目案例\">#</a> 项目案例</h4>\n<div class=\"note success\">\n<p>各位大人见谅，由于 codepen 只适用于单文件在线编辑，后续示例将转到 codesandbox 进行。</p>\n</div>\n<p><strong>项目标题</strong>：我的任务清单</p>\n<p><strong>功能简述</strong>：</p>\n<p>本项目用于管理个人任务，支持任务列表显示、任务动态插入、单条任务移除、任务全选、已完成任务清空、任务完成度显示，以及移除按钮悬停展示等功能。</p>\n<p><strong>项目预览</strong>：</p>\n<ol>\n<li>\n<p>在线预览：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xcXNqeDAuY3NiLmFwcA==\">https://qqsjx0.csb.app</span>（加载可能会有点慢）</p>\n</li>\n<li>\n<p>截图预览：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2022%2F05%2F71f8a7a25b9f59570c448619d3b6767a1652880520.gif\" alt=\"我的任务清单演示GIF\" /></p>\n</li>\n</ol>\n<p><strong>项目地址</strong>：</p>\n<blockquote>\n<p>提示：代码是这一小结的经验点数最多的内容，烦请各位大人移驾，下方两个传送通道可择一而入。</p>\n</blockquote>\n<ol>\n<li>\n<p>代码沙箱：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9zL2pvdmlhbC1jb2xkZW4tcXFzangw\">CodeSandbox - 我的任务清单</span></p>\n</li>\n<li>\n<p>代码仓库：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3hmYy1leGNsYXZlL3JlYWN0LWxlYXJuaW5n\">https://github.com/xfc-exclave/react-learning</span> - myproject</p>\n</li>\n</ol>\n<p><strong>重要知识点</strong>：</p>\n<ol>\n<li>\n<p>关于 UI</p>\n<p>本项目中使用了第三方 UI 框架 ——Material UI，目前值得推荐的 React UI 框架主推如下几个：</p>\n<ul>\n<li>\n<p>Ant Design - <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbnQuZGVzaWdu\">官网地址</span></p>\n</li>\n<li>\n<p>Material UI - <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tdWkuY29t\">官网地址</span></p>\n</li>\n<li>\n<p>Semantic UI - <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aWppZWtlLmNvbS9zZW1hbnRpYy11aS8=\">官网地址</span></p>\n<p>另外，熟悉 Vue 的小伙伴也可以尝试一下 ElementUI 的 React 版本，奉上<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbGVtZWZlLmdpdGh1Yi5pby9lbGVtZW50LXJlYWN0\">链接地址</span>。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>组件的拆分方式</p>\n<p>组件拆分方式并没有一定的规定，不同项目，不同业务逻辑，不同开发者，都会有不一样的组件拆分方式。通常情况下较为合理的是以组件功能作为单元进行拆分，尽量避免大量相似代码重复编写，冗余且难以维护。</p>\n<p>总之，组件拆分方式人各不同，您完全可以借鉴一些<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzM1MDEyOTg3Nw==\">讨论贴（知乎）</span>，来形成您自己的组件拆分风格，但只有一条不变的准则是：<mark>代码的设计应当尽量保持优雅、高效、易维护</mark>。</p>\n</li>\n<li>\n<p>如何确定 state 声明的位置</p>\n<p>要确定 state 声明的位置，需要先行明确 state 数据被使用的位置，通常来说，state 最佳的声明位置是所有使用该 state 数据的子组件的共有父组件中，因为这样可以使组件之间传递数据的代价最小化。但这也不是绝对的，对于一些复杂的场景，往往需要还更加细致、具体的考虑。</p>\n</li>\n<li>\n<p>组件之间的通信方式</p>\n<p>在组件化的项目中，经常需要跨越不同组件使用或处理数据，因此，不同组件之间的数据传递方式则尤为重要。我们可以形象地将组件之间的关系分为兄弟、父子、祖孙、宗亲几类。</p>\n<p>父子组件通信：</p>\n<p>父子组件之间进行传递数据，最直接的方式是通过 props 属性实现。注意，这里所说的数据既可以是普通类型的数据，也可以是一个预定义的函数。</p>\n<blockquote>\n<p>父组件向子组件传递数据直接使用 props 即可完成，在前文 React 组件的三大属性部分已有充分讲解，这里不再赘述。</p>\n</blockquote>\n<p>子组件向父组件传递数据，则可以通过 props 属性迂回实现，一种最常用的实现方式如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">changeName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span><span class=\"token function\">updateName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>changeName<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>Send<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">updateHandler</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Child updateName<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>updateHandler <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>兄弟组件通信：</p>\n<p>兄弟组件之间是无法轻易进行直接通信的，它们需要借助共同的父组件实现通信。简单来说，父组件传入函数给子组件 A，子组件 A 通过函数改变父组件状态，同级子组件 B 可以接收到父组件变更后的状态。</p>\n<blockquote>\n<p>以上方式适用于 “血缘” 相近的组件关系，“祖孙” 组件或 “宗亲” 组件之间的通信虽然也可通过这种方式进行，但代价相对更大。对于 “血缘” 关系较远的组件之间进行通信，可以使用如发布订阅、Redux 等方式实现，此处不做扩展，在后文会有专门的章节详细阐述。</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"react-ajax\"><a class=\"anchor\" href=\"#react-ajax\">#</a> React Ajax</h3>\n<p>AJAX 是一种在无需重新加载整个网页的情况下，就能够更新部分网页的技术。</p>\n<blockquote>\n<p>实在惭愧，在此之前本人一直觉得 ajax 就是指  <code>$.ajax(&#123;&#125;)</code> ，在学习 Vue 的时候也没有仔细思考 ajax 和 axois 的关系，这里再次强调一下，axios 是通过 Promise 对 ajax 的一种封装（大人们不要笑话我）。</p>\n</blockquote>\n<p>而 React 本身只关注于界面，它并不包含 ajax 网络请求部分，因此，要在 React 中实现网络交互，就需要集成第三方 ajax 库（或者自行封装实现）。</p>\n<p>你当然可以选择将 jQuery 集成到 React 项目中，但这就违背了 React 尽量减少真实 DOM 操作的初衷。因此，使用 axios 进行网络通信是 React 的更优选择。或许您在学习 Vue 的过程中已经对 axios 有了相当程度的了解，那么这一小节对您而言将会相当轻松。</p>\n<h4 id=\"axios\"><a class=\"anchor\" href=\"#axios\">#</a> axios</h4>\n<p>开源地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9z\">https://github.com/axios/axios</span></p>\n<p>中文网：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5heGlvcy1qcy5jb20=\">http://www.axios-js.com</span></p>\n<p>axios 使用示例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://chinmoku.usemock.com/user/1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> data<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> data<span class=\"token operator\">:</span> <span class=\"token string\">\"获取数据失败\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>您可以<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3hmYy1leGNsYXZlL3Blbi96WVJ6UE12\">点击这里</span>运行在线示例并查看效果。</p>\n<h4 id=\"前端代理\"><a class=\"anchor\" href=\"#前端代理\">#</a> 前端代理</h4>\n<p>基于上面的 axios 示例，相信您已经能够成功发送网络请求并得到返回的数据。但在实际开发过程中，网络环境相对更加复杂，因此也会引发一些问题，跨域问题就是最常见的问题之一。</p>\n<p>🍎 什么是跨域？为什么会有跨域？</p>\n<p>当一个请求 url 的协议、域名、端口三者之间任意一个与当前页面 url 不同，即为跨域。其出现是出于浏览器同源策略的限制，而同源策略的目的又是为了保障浏览器的基本安全。在开发过程中，我们也有诸多方式解决来解决浏览器同源策略引发的跨域问题，其中，使用代理就是一种最为常用的方式。</p>\n<p>扩展资料：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOTAlOEMlRTYlQkElOTAlRTclQUQlOTYlRTclOTUlQTUvMzkyNzg3NQ==\">同源策略_百度百科</span></p>\n<p>🍎 什么是代理？为什么要用代理？</p>\n<p>代理，即替代他人负责某一件事，在网络通信中，所谓代理即指代替其他网络端负责处理网络通信。例如通过 VPN 连接一些特定的网络就是一种常见的代理。而在 React 中，使用代理的直接目的，就是为了解决网络通信的跨域问题。</p>\n<p><strong>React 中配置代理的方式</strong></p>\n<p>在 React 中有两种配置代理的方式：</p>\n<ol>\n<li>\n<p>在  <code>package.json</code>  文件中进行配置</p>\n<p>直接在  <code>package.json</code>  文件中追加内容即可，示例如下：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"browserslist\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"proxy\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://chinmoku.usemock.com\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这种方式有点在于配置简单方便，使用时直接指定接口地址即可，无需添加额外前缀：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//... 省略部分内容</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>使用代理配置文件</p>\n<p>使用代理配置文件则更加灵活，其配置方式如下：</p>\n<p>执行命令  <code>npm i http-proxy-middleware</code>  安装依赖包，然后在 src 目录下创建文件  <code>setupProxy.js</code>  文件</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>createProxyMiddleware<span class=\"token operator\">:</span> proxy<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http-proxy-middleware'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">app</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tapp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token function\">proxy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/dev'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\ttarget<span class=\"token operator\">:</span> <span class=\"token string\">'http://localhost:8080'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\tchangeOrigin<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\tpathRewrite<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">'^/dev'</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 重写请求路径 (必须)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token function\">proxy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/prod'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\ttarget<span class=\"token operator\">:</span> <span class=\"token string\">'https://chinmoku.usemock.com'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\tchangeOrigin<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\tpathRewrite<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">'^/prod'</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这样就允许同时配置多个代理地址，使用时只需要加上对应的前缀即可：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//... 省略部分内容</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/prod/user/1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"项目案例-2\"><a class=\"anchor\" href=\"#项目案例-2\">#</a> 项目案例</h4>\n<p><strong>项目标题</strong>：Github 用户检索</p>\n<p><strong>功能简述</strong>：</p>\n<p>本项目用于对 Github 用户进行检索，并将检索结果动态显示到列表中，同时，为提升用户体验，对加载中及无数据的状态进行友好展示。</p>\n<p><strong>项目预览</strong>：</p>\n<ol>\n<li>\n<p>在线预览：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xdWtzcWcuY3NiLmFwcA==\">https://quksqg.csb.app</span>（加载可能会有点慢）</p>\n</li>\n<li>\n<p>截图预览：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2022/05/0aff1fc6abb9074fc5681ca2810fb9d41653138211.gif\" alt=\"githubusersearch\" /></p>\n</li>\n</ol>\n<p><strong>项目地址</strong>：</p>\n<ol>\n<li>\n<p>代码沙箱：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9zL3doaXRlLW1vcm5pbmctcXVrc3Fn\">CodeSandbox - Github 用户检索</span></p>\n</li>\n<li>\n<p>代码仓库：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3hmYy1leGNsYXZlL3JlYWN0LWxlYXJuaW5n\">https://github.com/xfc-exclave/react-learning</span> - react-github-search</p>\n</li>\n</ol>\n<p><strong>重要知识点</strong>：</p>\n<ol>\n<li>\n<p>关于 UI：此案例中使用了 Ant Design。</p>\n</li>\n<li>\n<p>消息发布与订阅机制</p>\n<p>在前文中我们曾使用借助组件的 props 来实现父子组件之间的通信，但其实除了借助 props 之外，我们还可以使用消息发布和订阅机制来实现通信。与 props 相比，消息发布订阅机制并不注重组件之间的关系，即消息发布订阅机制的效率与组件之间的层级关系无关，它可以用于所有的组件关系之间。</p>\n<p>首先，使用消息发布订阅之前，你需要先执行命令  <code>npm i pubsub-js</code>  安装依赖，并在数据的发送方使用如下方式发送消息：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> PubSub <span class=\"token keyword\">from</span> <span class=\"token string\">\"pubsub-js\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//... 省略无关代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>PubSub<span class=\"token punctuation\">.</span><span class=\"token function\">publish</span><span class=\"token punctuation\">(</span><span class=\"token string\">'channelNameHere'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>消息接收方则通过如下方式接收数据并处理后续逻辑：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PubSub<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'channelNameHere'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//... 自定义 data 方式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>但需要保证的是，消息发送方与消息接收方的消息通道名称必须保持一致。</p>\n</li>\n<li>\n<p>React.useEffect</p>\n<p>通常，消息发布方发布消息时通常会有一定的触发时机，而消息接收方为了及时接收到消息，通常会在组件挂载时即开启订阅，在组件卸载时取消订阅，这就依赖于 React 组件的生命周期。</p>\n<p>在类式组件中，由于其父组件 Component 为其暴露了一系列生命周期函数，因此它的生命周期是明确的，能够轻易地在不同的触发时机执行不同的逻辑。而函数式组件由于没有集成 Component，因此也就没有生命周期函数，它只能通过 Hook 函数  <code>React.useEffect()</code>  来获取监控组件的生命状态，但该函数却是不可靠的（如有必须通过生命周期函数实现的逻辑，个人觉得还是使用类式组件更好）。</p>\n<blockquote>\n<p>对于 useEffect 这个钩子函数，官方的说法是 “在函数组件主体内改变 DOM、添加订阅、设置定时器、记录日志以及执行其他包含副作用的操作都是不被允许的，因为这可能会产生莫名其妙的 bug 并破坏 UI 的一致性”，官方似乎并没有给出明确的原因，也没有给出明确的方案（也或许是我目前没了解到，如果哪位大人知道，烦请在文末留言告知）。</p>\n</blockquote>\n</li>\n<li>\n<p>使用 fetch 发送网络请求</p>\n<p>fetch 也是一种发送网络请求的方式，其基本使用方式如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//fetch 发送 GET 请求</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://chinmoku.usemock.com/user/1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">handleData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//fetch 发送 POST 请求</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 或其他</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">handleData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"react-路由\"><a class=\"anchor\" href=\"#react-路由\">#</a> React 路由</h3>\n<h4 id=\"spa\"><a class=\"anchor\" href=\"#spa\">#</a> SPA</h4>\n<h4 id=\"路由的使用方式\"><a class=\"anchor\" href=\"#路由的使用方式\">#</a> 路由的使用方式</h4>\n<h4 id=\"项目案例-3\"><a class=\"anchor\" href=\"#项目案例-3\">#</a> 项目案例</h4>\n<h3 id=\"redux\"><a class=\"anchor\" href=\"#redux\">#</a> Redux</h3>\n<h3 id=\"react-扩展\"><a class=\"anchor\" href=\"#react-扩展\">#</a> React 扩展</h3>\n<div class=\"note success\">\n<p>恭喜你坚持不懈走完了这条新手村的慢慢长路，也很荣幸能够作为你在新手阶段的 NPC，前途山高路远，万不敢奢望您能够在此稍作停留，只希望您能够在闲暇之余，看一眼天空中凝而不散的那几个字 ——“苟富贵，勿相忘”（哈哈，手动开心）。</p>\n</div>\n<h3 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC1oYW5zLnJlYWN0anMub3Jn\">https://zh-hans.reactjs.org</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXd5NHkxRDdKVA==\">https://www.bilibili.com/video/BV1wy4y1D7JT</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9yZWFjdC9yZWFjdC1jb21wb25lbnQtbGlmZS1jeWNsZS5odG1s\">https://www.runoob.com/react/react-component-life-cycle.html</span></li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://www.chinmoku.cc/computer-science/java-learning-path/3-advanced/redis-tutorial/",
            "url": "https://www.chinmoku.cc/computer-science/java-learning-path/3-advanced/redis-tutorial/",
            "title": "Redis 如何保证高性能",
            "date_published": "2022-02-14T04:08:17.000Z",
            "content_html": "<div class=\"note info no-icon\">\n<p>最近是真的是太懒了😥，都快忘记要写博客这一回事了。之前还可以借口说工作太忙，现在就只能坦率地承认了。意识到这点，赶紧狠狠地呼了自己一耳光，继续学习，😡Fighting！！！。</p>\n</div>\n<h3 id=\"redis-简介\"><a class=\"anchor\" href=\"#redis-简介\">#</a> Redis 简介</h3>\n<blockquote>\n<p>关于 NoSQL 的优缺点，及其与关系型数据库的对比，此前已在 <a href=\"/computer-science/java-learning-path/3-advanced/mongodb-tutorial/\">MongoDB 基础教程</a>一文中已有描述，可自行前往查看。</p>\n</blockquote>\n<p>Redis 诞生于 2009 年，其全称是 Remote Dictionary Server，远程词典服务器，是一个基于内存的键值型 NoSQL 数据库。</p>\n<p>Redis 特征：</p>\n<ul>\n<li>键值型，value 支持多种不同数据结构，功能丰富。</li>\n<li>单线程，每个命令具备原子性。</li>\n<li>低延迟，速度快（基于内存，IO 多路复用，良好的编码）。</li>\n<li>支持数据持久化。</li>\n<li>支持主从集群、分片集群。</li>\n<li>支持多语言客户端。</li>\n</ul>\n<h3 id=\"卸载安装\"><a class=\"anchor\" href=\"#卸载安装\">#</a> 卸载安装</h3>\n<h4 id=\"redis-卸载\"><a class=\"anchor\" href=\"#redis-卸载\">#</a> Redis 卸载</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ps</span> aux <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> redis <span class=\"token comment\"># 查看是否启动 redis，如已启动则停止</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">whereis</span> redis <span class=\"token comment\"># 搜索 redis，核对并删除对应文件及目录</span></pre></td></tr></table></figure><h4 id=\"redis-安装\"><a class=\"anchor\" href=\"#redis-安装\">#</a> Redis 安装</h4>\n<ol>\n<li>\n<p>Redis 安装启动</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /usr/local</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mkdir</span> redis</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">cd</span> redis/</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">wget</span> https://download.redis.io/releases/redis-6.2.6.tar.gz</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">tar</span> xzf redis-6.2.6.tar.gz</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">cd</span> redis-6.2.6</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 检查安装</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /usr/local/bin</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 任意位置运行 redis</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token builtin class-name\">cd</span> ~</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>redis-server <span class=\"token comment\"># 前台启动</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 后台启动</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /usr/local/redis/redis-6.2.6</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">cp</span> redis.conf redis.conf.backup <span class=\"token comment\"># backup</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">vi</span> redis.conf <span class=\"token comment\"># 根据需要修改配置</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>redis-server redis.conf</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">ps</span> aux <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> redis</pre></td></tr></table></figure><p>redis.conf 配置项示例：</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 监听地址，学习时可以放开允许所有 IP</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token attr-name\">bind</span> <span class=\"token attr-value\">0.0.0.0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 后台运行，默认为前台运行</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token attr-name\">daemonize</span> <span class=\"token attr-value\">yes</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 设置 redis 密码</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token attr-name\">requirepass</span> <span class=\"token attr-value\">foobared</span></pre></td></tr></table></figure></li>\n<li>\n<p>Redis 开机自启</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 编辑启动脚本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">vi</span> /etc/systemd/system/redis.service</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>systemctl daemon-reload <span class=\"token comment\"># 重载系统服务</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>systemctl start redis <span class=\"token comment\"># 启动 redis</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>systemctl status redis <span class=\"token comment\"># 查看 redis 状态</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>systemctl stop redis <span class=\"token comment\"># 停止 redis</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>systemctl <span class=\"token builtin class-name\">enable</span> redis <span class=\"token comment\"># 允许 redis 开机自启</span></pre></td></tr></table></figure><p>redis.service 启动脚本内容示例如下：</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[Unit]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token attr-name\">Description</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">redis-server</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token attr-name\">After</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">network.target</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>[Service]</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token attr-name\">Type</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">forking</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token attr-name\">ExecStart</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">/usr/local/bin/redis-server /usr/local/redis/redis-6.2.6/redis.conf</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token attr-name\">PrivateTmp</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>[Install]</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token attr-name\">WantedBy</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">multi-user.target</span></pre></td></tr></table></figure><p>注：</p>\n<ul>\n<li>如启动不成功，尝试检查配置文件内容是否正确，端口是否被占用。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"redis-连接\"><a class=\"anchor\" href=\"#redis-连接\">#</a> Redis 连接</h4>\n<ol>\n<li>\n<p>命令行客户端：redis-cli</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> ~ <span class=\"token comment\"># 任意位置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>redis-cli -h <span class=\"token number\">127.0</span>.0.1 -p <span class=\"token number\">6379</span> <span class=\"token comment\"># 语法：redis-cli [options] [commonds]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>AUTH foobared <span class=\"token comment\"># 语法：AUTH [username] password</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">set</span> name chinmoku</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>get name</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">exit</span> <span class=\"token comment\"># 退出</span></pre></td></tr></table></figure></li>\n<li>\n<p>图形化客户端：RedisDesktopManager</p>\n<p>源码地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3VnbGlkZS9SZWRpc0Rlc2t0b3BNYW5hZ2VyL3JlbGVhc2Vz\">https://github.com/uglide/RedisDesktopManager/releases</span></p>\n<p>源码下载后需要手动编译，也可以<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xld29yay9SZWRpc0Rlc2t0b3BNYW5hZ2VyLVdpbmRvd3MvcmVsZWFzZXM=\">点击此处</span>下载对应的编译版本。</p>\n<p>注：</p>\n<ul>\n<li>\n<p>通过 windows 连接服务器的 redis 服务，需要注意对应的防火墙、安全组等是否开放。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 添加防火墙指定端口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>firewall-cmd --add-port<span class=\"token operator\">=</span><span class=\"token number\">6379</span>/tcp --permanent</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>firewall-cmd --reload <span class=\"token comment\"># 重载生效</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"redis-命令\"><a class=\"anchor\" href=\"#redis-命令\">#</a> Redis 命令</h3>\n<h4 id=\"数据结构\"><a class=\"anchor\" href=\"#数据结构\">#</a> 数据结构</h4>\n<p>Redis 是一个以  <code>key-value</code>  形式存储数据的数据库，key 一般是 String 类型，但 value 类型则存在多种：</p>\n<p>基本数据类型：</p>\n<ul>\n<li>\n<p>String - 存储字符串，例如： <code>hello world</code> 。</p>\n</li>\n<li>\n<p>Hash - 存储较为复杂的数据结构，例如： <code>&#123;name: &quot;Chinmoku&quot;, age: 20&#125;</code> 。</p>\n</li>\n<li>\n<p>List - 存储数组列表，例如： <code>[A, B, C, C]</code> 。</p>\n</li>\n<li>\n<p>Set - 存储元素不可重复的数组，例如： <code>&#123;A, B, C&#125;</code> 。</p>\n</li>\n<li>\n<p>SortedSet - 存储有序的，且元素不可重复的数组，例如： <code>&#123;A: 1, B: 2, C: 3&#125;</code> 。</p>\n</li>\n</ul>\n<p>特殊类型：</p>\n<ul>\n<li>GEO</li>\n<li>BitMap</li>\n<li>HyperLog</li>\n</ul>\n<h4 id=\"通用命令\"><a class=\"anchor\" href=\"#通用命令\">#</a> 通用命令</h4>\n<div class=\"note danger no-icon\">\n<p>Redis 命令参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcw==\">https://redis.io/commands</span></p>\n<p>或者通过  <code>help [commands]</code>  即可查看相关命令用法。</p>\n</div>\n<p>Redis 通用命令示例：</p>\n<ol>\n<li>\n<p>KEYS pattern 查询以字母 a 开头的 key。</p>\n<blockquote>\n<p>由于 redis 是单线程执行，当数据量较大时，会导致业务阻塞，不建议在生产环境下使用。</p>\n</blockquote>\n</li>\n<li>\n<p>DEL key [key ...] 删除指定的一个或多个 key。</p>\n</li>\n<li>\n<p>EXISTS key [key ...] 判断指定的 key 是否存在。</p>\n</li>\n<li>\n<p>EXPIRE key seconds 设置 key 的有效期。</p>\n</li>\n<li>\n<p>TTL key 获取 key 的有效期。</p>\n<blockquote>\n<p>如不指定，则默认为 -1 表示永久有效。如果 key 不存在，查询其有效期则会返回  <code>-2</code> 。</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"string-类型\"><a class=\"anchor\" href=\"#string-类型\">#</a> String 类型</h4>\n<p>String 类型是 redis 中最简单的数据类型，但其 value 根据字符串的不同格式，又可以分为三类：</p>\n<ul>\n<li>string 普通字符串。</li>\n<li>int 整数类型，可以进行自增、自减等操作。</li>\n<li>float 浮点类型，可以进行自增、自减等操作。</li>\n</ul>\n<blockquote>\n<p>不论是哪种格式的字符串类型，其底层都是使用字节数组进行存储的，只是采用的编码方式不同而已。字符串类型的最大空间不能超过 512m。</p>\n</blockquote>\n<p>String 类型常见命令：</p>\n<ol>\n<li>SET key value</li>\n<li>GET key</li>\n<li>MSET key value [key value ...] 批量插入。</li>\n<li>MGET key [key ...] 批量获取。</li>\n<li>INCR key 设置某个 key 自增。</li>\n<li>INCRBY key increment 自增幅度。</li>\n<li>INCRBYFLOAT key increment 设置浮点数自增。</li>\n<li>SETNX key value 当 key 不存在时，才进行插入。</li>\n<li>SETEX key seconds value 设置指定 key 的有效期。</li>\n</ol>\n<blockquote>\n<p>PS. Redis 中 key 的层级格式：</p>\n<p>在业务使用过程中，我们定义的 key 要求全局唯一，往往是以对象的 ID 来表示，但当 redis 中存在不同类型的对象时，key 重复的几率会相应地增加，并且难以对不同的 key 进行区分。因此，在 redis 使用过程中，我们通常会对 redis 的 key 格式做出一定的限制，但这种限制并不是强制的，企业或开发者可以自行设计，例如： <code>项目名:业务名:id</code> 。</p>\n<p>此外，这种 key 的设计方式，在部分 redis 客户端中，也可以形成不同的层级显示。</p>\n</blockquote>\n<h4 id=\"hash-类型\"><a class=\"anchor\" href=\"#hash-类型\">#</a> Hash 类型</h4>\n<p>Hash 类型，也叫散列，其 value 是一个无序字典，类似于 java 中的 HashMap 结构。</p>\n<p>Hash 类型常见命令：</p>\n<ol>\n<li>HSET key field value [field value ...]</li>\n<li>HGET key field</li>\n<li>HMSET key field value [field value ...] 设置多个 Hash 字段。</li>\n<li>HMGET key field [field ...] 获取多个 Hash 字段。</li>\n<li>HGETALL key 获取 key 对应的所有 Hash 键值对。</li>\n<li>HKEYS key 获取 key 对应的所有 Hash 键。</li>\n<li>HVALS key 获取 key 对应的所有 Hash 值。</li>\n<li>HINCRBY key field increment 设置 Hash 中某一字段按步长自增。</li>\n<li>HSETNX key field value 当某一 key 对应 Hash 的字段不存在时，才进行赋值。</li>\n</ol>\n<p>🎈 <strong>为什么 redis 中推荐使用 Hash 而非 String 来存储 JSON 的数据结构？</strong></p>\n<p>在 Redis 中使用 String 的数据结构来存储 JSON，其实是将 JSON 字符串序列化之后再进行存储的，当需要获取 JSON 内部的某个字段时，必须获取整个字符串内容，而使用 Hash 结构存储 JSON 数据时，则会将 JSON 中的每个字段独立存储，它更加方便对 JSON 中的单个字段做 CRUD 操作。</p>\n<h4 id=\"list-类型\"><a class=\"anchor\" href=\"#list-类型\">#</a> List 类型</h4>\n<p>Redis 中的 List 可以看做是一个双向链表，既可以支持正向检索，也支持反向检索。与 Java 中的 LinkedList 相似，它也具有如下特征：</p>\n<ul>\n<li>有序。</li>\n<li>可重复。</li>\n<li>插入和删除效率高。</li>\n<li>查询效率较低。</li>\n</ul>\n<p>List 类型常见命令：</p>\n<ol>\n<li>LPUSH key element [element ...] 向数组左侧追加元素。</li>\n</ol>\n<blockquote>\n<p>使用 LPUSH 后，其放入和取出元素的顺序是相反的，与之对应的这是 RPUSH。</p>\n</blockquote>\n<ol start=\"2\">\n<li>\n<p>LPOP key [count] 从左侧开始获取并移除数组中的元素。</p>\n</li>\n<li>\n<p>LRANGE key start stop 获取数组中指定下标范围内的元素。</p>\n</li>\n<li>\n<p>BLPOP key [key ...] timeout 从左侧开始阻塞式地获取并移除数组中的元素。</p>\n<blockquote>\n<p>当 BLPOP 无法获取到元素时，会等待指定的时间，若等待期间可以获取到元素，则直接取出并返回；如等待时间过期仍未获取到元素，则返回  <code>nil</code> 。</p>\n</blockquote>\n</li>\n</ol>\n<p>🎈 <strong>如何利用 Redis 的 List 数据结构来模拟栈、队列及阻塞队列？</strong></p>\n<p>使用 LPUSH 和 LPOP，或 RPUSH 和 RPOP，都从左侧或都从右侧存入和取出元素，则可以模拟栈的数据结构；相反地，左侧存入右侧取出，或右侧存入左侧取出，则可以模拟队列的数据结构。而对于阻塞队列，则是在队列特征基础上，取出元素时，使用 BLOPO 或 BRPOP 即可。</p>\n<h4 id=\"set-类型\"><a class=\"anchor\" href=\"#set-类型\">#</a> Set 类型</h4>\n<p>Redis 中的 Set 结构与 Java 中的 HashSet 相似，它也具备与 HashSet 类似的特征：</p>\n<ul>\n<li>无序。</li>\n<li>不可重复。</li>\n<li>查询效率高。</li>\n<li>支持交集、并集、差集等。</li>\n</ul>\n<p>Set 类型常见命令：</p>\n<ol>\n<li>SADD key member [member ...] 向 Set 中插入元素。</li>\n<li>SREM key member [member ...] 移除 Set 中的元素。</li>\n<li>SCARD key 查询 Set 中元素数量。</li>\n<li>SISMEMBER key member 判断 Set 中是否存在某元素。</li>\n<li>SMEMBERS key 获取 Set 中所有元素。</li>\n<li>SINTER key [key ...] 交集。</li>\n<li>SDIFF key [key ...] 差集。</li>\n<li>SUNION key [key ...] 并集。</li>\n</ol>\n<h4 id=\"sortedset-类型\"><a class=\"anchor\" href=\"#sortedset-类型\">#</a> SortedSet 类型</h4>\n<p>Redis 中的 SortedSet 是一个可排序的 Set 集合。SortedSet 中每一个元素都带有一个 score 属性，可以基于 score 属性对元素进行排序，其底层实现是一个跳表（SkipList）加 Hash 表。SortedSet 具备如下特征：</p>\n<ul>\n<li>可排序。</li>\n<li>不重复。</li>\n<li>查询效率高。</li>\n</ul>\n<p>SortedSet 类型常见命令：</p>\n<ol>\n<li>ZADD key</li>\n<li>ZREM key member [member ...]</li>\n<li>ZSCORE key member 获取某元素的 score 值。</li>\n<li>ZRANK key member 获取某元素在该集合中的排名。</li>\n<li>ZCARD key</li>\n<li>ZCOUNT key min max 统计指定 score 范围内的元素个数。</li>\n<li>ZINCRBY key increment member 使集合中指定元素按步长自增。</li>\n<li>ZRANGE key min max 获取指定排名范围的元素。</li>\n<li>ZRANGEBYSCORE key min max 获取指定 score 范围的元素。</li>\n<li>ZINTER numkeys key [key ...] 交集。</li>\n<li>ZDIFF numkeys key [key ...] 差集。</li>\n<li>ZUNION numkeys key [key ...] 并集。</li>\n</ol>\n<blockquote>\n<p>SortedSet 查询排序默认采用升序，如需使用降序，只需在字母 Z 之后添加 REV 即可，如 ZREVRANGE。</p>\n</blockquote>\n<h3 id=\"java-客户端\"><a class=\"anchor\" href=\"#java-客户端\">#</a> Java 客户端</h3>\n<p>Redis 官方推荐如下三款客户端产品：</p>\n<ol>\n<li>Jedis，其特点是学习成本低，基本使用 redis 命令作为 API 方法名。但基于 Jedis 的连接无法保证线程安全，在多线程环境下需要基于连接池来使用。</li>\n<li>Lettuce，基于 Netty 实现，支持同步、异步和响应式编程，并且是线程安全的，支持 Redis 哨兵模式、集群模式和管道模式。</li>\n<li>Redisson，是一个基于 Redis 实现的分布式、可伸缩的 Java 数据结构集合，包含了诸如 Map、Queue、Lock、Semaphere、AtomicLong 等强大功能。</li>\n</ol>\n<blockquote>\n<p>出于对本文篇幅的考虑，此处仅对 Jedis 做扩展介绍，如对其他客户端产品感兴趣，可自行了解。</p>\n<p>PS. 综合各种 Redis 客户端的优缺点，也可以考虑使用 Spring 集成的工具包  <code>Spring Data Redis</code> 。</p>\n</blockquote>\n<h4 id=\"jedis\"><a class=\"anchor\" href=\"#jedis\">#</a> Jedis</h4>\n<p>项目地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3JlZGlzL2plZGlz\">https://github.com/redis/jedis</span></p>\n<p><strong>基本使用方式：</strong></p>\n<ol>\n<li>\n<p>添加依赖： <code>redis.clients.jedis:4.1.1</code>  。</p>\n</li>\n<li>\n<p>建立连接：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Jedis</span> jedis<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@BeforeEach</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 建立连接</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    jedis<span class=\"token punctuation\">.</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 密码</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    jedis<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 选择库</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>测试使用：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Chinmoku\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result = \"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name = \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>类似地，其他 redis 相关操作调用的方法名称，也基本与 redis 命令相同。</p>\n</blockquote>\n</li>\n<li>\n<p>释放资源：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@AfterEach</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>jedis <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>Jedis 连接池：</strong></p>\n<p>Jedis 本身是线程不安全的，并且频繁地创建和销毁连接会产生极大的性能消耗，因此在使用 Jedis 的过程中，不推荐使用 Jedis 直连，而建议实现连接池。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JedisConnectionFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">JedisPool</span> jedisPoll<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">JedisPoolConfig</span> jedisPoolConfig <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisPoolConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        jedisPoolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxTotal</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 最大连接数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        jedisPoolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxIdle</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 最大空闲连接数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        jedisPoolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMinIdle</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 最小空闲连接数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        jedisPoolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxWaitMillis</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 最长等待时间</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        jedisPoll <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisPool</span><span class=\"token punctuation\">(</span>jedisPoolConfig<span class=\"token punctuation\">,</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6379</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Jedis</span> <span class=\"token function\">getJedis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> jedisPool<span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"springdataredis\"><a class=\"anchor\" href=\"#springdataredis\">#</a> SpringDataRedis</h4>\n<p>SpringData 是 Sring 中数据操作的模块，包含对各种数据库的集成，其中对 Redis 的集成模块即为 SpringDataRedis：</p>\n<ul>\n<li>提供了对不同 Redis 客户端的整合（Lettuce 和 Jedis）。</li>\n<li>提供了 RedisTemplate 统一 API 来操作 Redis。</li>\n<li>支持 Redis 的发布订阅模式。</li>\n<li>支持 Redis 的哨兵模式和集群模式。</li>\n<li>支持基于 Lettuce 的响应式编程。</li>\n<li>支持基于 JDK、JSON、字符串、Spring 对象的数据序列号及反序列化。</li>\n<li>支持基于 Redis 的 JDKCollection 实现。</li>\n</ul>\n<blockquote>\n<p>SpringDataRedis 官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLWRhdGEtcmVkaXM=\">https://spring.io/projects/spring-data-redis</span></p>\n</blockquote>\n<p>SpringDataRedis 提供了 RedisTemplate 工具类，其中封装了各种对 Redis 的操作，并且将不同数据类型的操作 API 封装到了不同的类型中：</p>\n<table>\n<thead>\n<tr>\n<th>API</th>\n<th>返回值类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>redisTemplate.opsForValue()</td>\n<td>valueOperations</td>\n<td>操作 String 类型数据</td>\n</tr>\n<tr>\n<td>redisTemplate.opsForHash()</td>\n<td>HashOperations</td>\n<td>操作 Hash 类型数据</td>\n</tr>\n<tr>\n<td>redisTemplate.opsForList()</td>\n<td>ListOperations</td>\n<td>操作 List 类型数据</td>\n</tr>\n<tr>\n<td>redisTemplate.opsForSet()</td>\n<td>SetOperations</td>\n<td>操作 Set 类型数据</td>\n</tr>\n<tr>\n<td>redisTemplate.opsForZSet()</td>\n<td>ZSetOperations</td>\n<td>操作 SortedSet 类型数据</td>\n</tr>\n<tr>\n<td>redisTemplate</td>\n<td></td>\n<td>通用命令</td>\n</tr>\n</tbody>\n</table>\n<p><strong>基本使用方式：</strong></p>\n<ol>\n<li>\n<p>添加依赖：</p>\n<ul>\n<li>Redis 依赖： <code>org.springframework.boot.spring-boot-starter-data-redis:2.6.2</code> 。</li>\n<li>连接池依赖： <code>org.apache.commons.commons-pool2:2.11.1</code> 。</li>\n</ul>\n</li>\n<li>\n<p>配置文件：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 127.0.0.1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6379</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123456</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># 默认使用 lettuce，如需使用 jedis，需引入对应依赖</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">lettuce</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">pool</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token key atrule\">max-active</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token key atrule\">max-idle</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token key atrule\">min-idle</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token key atrule\">max-wait</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span> <span class=\"token comment\"># 连接等待时间</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token key atrule\">timeout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">600</span> <span class=\"token comment\"># 连接超时时间</span></pre></td></tr></table></figure></li>\n<li>\n<p>注入 RedisTemplate 并使用：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">RedisTemplate</span> redisTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"chinmoku\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 插入</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">Object</span> name <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 读取</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name = \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 存储对象</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user:1\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chinmoku\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">)</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user:1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user = \"</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>SpringDataRedis 序列化方式：</strong></p>\n<p>SpringDataRedis 可以接收任意 Object 作为值写入 Redis，但在写入之前都会将其序列化为字节形式，并且默认采用 JdkSerializationRedisSerializer，这会导致可读性差和不必要的内存占用的问题。因此，我们可以对 SpringDataRedis 进行个性化实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * SpringDataRedis 自定义序列化方式</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Configuation</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">redisTemplate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span> redisConnectionFactory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UnknownHostException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> redisTemplate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 设置连接工厂</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionFactory</span><span class=\"token punctuation\">(</span>redisConnectionFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 设置序列化工具（注：使用 json 序列化需要引入 jackson-databind 依赖）</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">GenericJackson2JsonRedisSerializer</span> jsonRedisSerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericJackson2JsonRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">//key 和 hashKey 采用 string 序列化</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setKeySerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisSerializer</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setHashKeySerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisSerializer</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">//value 和 hashValue 采用 json 序列化</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setValueSerializer</span><span class=\"token punctuation\">(</span>jsonRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setHashValueSerializer</span><span class=\"token punctuation\">(</span>jsonRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如上示例，当存储 Java 对象时，我们可以使用 JSON 序列化器，自动实现对象的序列化和反序列化，但这种方式会在 Redis 中额外存储一个  <code>@class</code>  字段，用于指定序列化和反序列化对象所属的类，这也会在一定程度上造成不必要的空间浪费。</p>\n<p>为了节省空间，在编码过程中，我们通常推荐在存储数据之前，手动进行对象的序列化处理，然后再通过 String 序列化方式进行存储；取值时，再通过程序判断进行反序列化。为此，对于 String 类型的数据存储，SpringDataRedis 提供了一个 StringRedisTemplate 类，它默认即采用 String 序列化方式：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">StringRedisTemplate</span> stringRedisTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// JSON 工具（也可以使用其他序列化工具，如 fastjson 等）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ObjectMapper</span> mapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">testStringTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">JsonProcessingException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chinmoku\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 手动序列化</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user:1\"</span><span class=\"token punctuation\">,</span> json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user:1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">User</span> u <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">readVal</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 反序列化</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user = \"</span> <span class=\"token operator\">+</span> u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>RedisTemplate 操作 Hash：</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">testHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user:2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user:2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"21\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> entries <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user:2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"entries = \"</span> <span class=\"token operator\">+</span> entries<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"缓存问题及解决方案\"><a class=\"anchor\" href=\"#缓存问题及解决方案\">#</a> 缓存问题及解决方案</h3>\n<h4 id=\"缓存更新策略\"><a class=\"anchor\" href=\"#缓存更新策略\">#</a> 缓存更新策略</h4>\n<p>所谓缓存，就是数据交换的缓冲区，是存储数据的地方，一般读写性能较高。</p>\n<p>操作缓存和数据库时，需要考虑如下三个问题：</p>\n<ol>\n<li>\n<p>更新数据库时，对于缓存数据，是应当执行更新操作还是删除操作？</p>\n<ul>\n<li>更新缓存：每次更新数据库都更新缓存，容易产生较多的无效写操作。</li>\n<li>删除缓存：更新数据库时使缓存失效，查询数据库时再更新缓存（推荐）。</li>\n</ul>\n</li>\n<li>\n<p>如何保证缓存和数据库操作同时成功或同时失败？</p>\n<ul>\n<li>单系统环境下，需要将缓存和数据库操作放在同一个事务中。</li>\n<li>分布式系统环境下，可以利用 TCC 等分布式事务方案。</li>\n</ul>\n</li>\n<li>\n<p>执行数据操作时，先操作缓存还是数据库？</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2022/03/d1f36fa6ee35a9c1a98578527399f1e21647090860.png\" alt=\"redis-cache\" /></p>\n<p>如上图所示，不论是先操作缓存还是先操作数据库，在并发环境下，都有可能出现数据不一致问题。但通常而言，缓存操作效率远高于数据库操作效率，因此先操作数据库，再删除缓存出现数据不一致的概率较低，但也仅限于概率较低而已，仍存在数据不一致的风险。</p>\n</li>\n</ol>\n<p><strong>扩展：</strong></p>\n<p>基于数据库与缓存之间的数据不一致问题，目前有如下几种较为常见的解决方案：</p>\n<ol>\n<li>\n<p>延时双删</p>\n<p>所谓的延时双删，可以通过如下伪代码进行表示：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    redis<span class=\"token punctuation\">.</span><span class=\"token function\">delKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    db<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    redis<span class=\"token punctuation\">.</span><span class=\"token function\">delKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里的延时，主要是为了确保在进行第二次删除之前，其他交叉线程已经完成数据库查询和更新缓存操作，如下图所示：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2022/03/a3ba9a6e4004b2806121e1c35cb7be771647095968.png\" alt=\"redis-cache-sleep\" /></p>\n<p>在延时双删过程中，如果存在其他线程对缓存进行更新，那么该更新缓存的线程所得数据仍为旧数据，但新的线程访问时，能保证得到的数据是新的数据。</p>\n</li>\n<li>\n<p>异步更新缓存</p>\n<p>TODO</p>\n<blockquote>\n<p>值得注意的是，在保证 Redis 性能的前提下，数据库与缓存之间的数据其实是无法保证绝对一致的，我们通常所说的缓存一致性，往往需要将实际业务场景纳入考虑范围，进行综合考虑。</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"缓存穿透\"><a class=\"anchor\" href=\"#缓存穿透\">#</a> 缓存穿透</h4>\n<p>缓存穿透是指客户端请求的数据在缓存和数据库中均不存在，这样就使得缓存永远无法生效，导致请求始终都会直接访问数据库，从而影响服务性能。</p>\n<p>针对缓存穿透，有如下两种常见解决方案：</p>\n<ol>\n<li>\n<p>缓存空对象：即当数据库中不存在该数据时，则向缓存中存入空对象，同时设置较短的过期时间。</p>\n<p>优点：实现简单，方便维护。</p>\n<p>缺点：</p>\n<ul>\n<li>占用不必要的内存。</li>\n<li>可能造成短期数据不一致（针对这一缺点，可以在更新数据时同步更新到缓存）。</li>\n</ul>\n</li>\n<li>\n<p>布隆过滤</p>\n<p>相关介绍可查阅<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQjglODMlRTklOUElODYlRTglQkYlODclRTYlQkIlQTQlRTUlOTklQTg=\">布隆过滤器_百度百科</span>。</p>\n<p>优点：内存占用少，没有多余的 key。</p>\n<p>缺点：</p>\n<ul>\n<li>实现复杂。</li>\n<li>存在误判的可能。</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>除此之外，在业务上我们也应当做相应的控制，例如增加 ID 复杂度、做好数据的基础格式校验、加强用户权限校验、做好热点数据限流等。</p>\n</blockquote>\n<h4 id=\"缓存雪崩\"><a class=\"anchor\" href=\"#缓存雪崩\">#</a> 缓存雪崩</h4>\n<p>缓存雪崩是指在同一时段内的缓存 key 同时失效或者 Redis 服务宕机，导致大量请求直接到达数据库，给数据库带来巨大压力。</p>\n<p>针对缓存雪崩，有如下几种常见解决方案：</p>\n<ol>\n<li>给不同 key 的 TTL 添加随机值，尽量分散缓存的过期时间。</li>\n<li>利用 Redis 集群提高服务的可用性（以解决 Redis 服务宕机问题）。</li>\n<li>给缓存服务添加降级限流策略，做好服务容错。</li>\n<li>给业务添加多级缓存。</li>\n</ol>\n<h4 id=\"缓存击穿\"><a class=\"anchor\" href=\"#缓存击穿\">#</a> 缓存击穿</h4>\n<p>缓存击穿也被称为热点 key 问题，就是一个被高并发访问并且缓存重建业务较为复杂的 key 突然失效，大量请求瞬间访问到数据库，导致数据库承受巨大压力。</p>\n<p>针对缓存击穿，有如下几种常见解决方案：</p>\n<ol>\n<li>\n<p>互斥锁</p>\n<p>重建数据时，进行加锁，获取到锁的线程才进行数据重建，其他线程进行一定的等待和重试。这种方案由于需要线程等待，性能相对较差。</p>\n</li>\n<li>\n<p>逻辑过期</p>\n<p>不采用 Redis 提供的 TTL，而是自定义一个逻辑过期字段用于记录过期时间，当程序通过该字段判断数据过期时，则使用互斥锁开启一个新的线程，用该线程来执行更新缓存数据操作，更新完数据后，释放锁。其他未获取到互斥锁时，直接返回缓存中的旧数据。</p>\n</li>\n</ol>\n<h4 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h4>\n<blockquote>\n<p>为了更加方便开发过程中，对解决缓存穿透和缓存击穿等问题整理思路，此处引用一份黑马教学编写的示例代码，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vaHV5aTYxMi9obS1kaWFucGluZy9ibG9iL21hc3Rlci9zcmMvbWFpbi9qYXZhL2NvbS9obWRwL3V0aWxzL0NhY2hlQ2xpZW50LmphdmE=\">点击此处</span>可以查看源代码位置。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CacheClient</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">StringRedisTemplate</span> stringRedisTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ExecutorService</span> CACHE_REBUILD_EXECUTOR <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CacheClient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringRedisTemplate</span> stringRedisTemplate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stringRedisTemplate <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> time<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">JSONUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJsonStr</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setWithLogicalExpire</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> time<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 设置逻辑过期</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">RedisData</span> redisData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        redisData<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        redisData<span class=\"token punctuation\">.</span><span class=\"token function\">setExpireTime</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">plusSeconds</span><span class=\"token punctuation\">(</span>unit<span class=\"token punctuation\">.</span><span class=\"token function\">toSeconds</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 写入 Redis</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">JSONUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJsonStr</span><span class=\"token punctuation\">(</span>redisData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">,</span>ID<span class=\"token punctuation\">></span></span> <span class=\"token class-name\">R</span> <span class=\"token function\">queryWithPassThrough</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> keyPrefix<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ID</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> type<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>ID<span class=\"token punctuation\">,</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> dbFallback<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> time<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> keyPrefix <span class=\"token operator\">+</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 1. 从 redis 查询商铺缓存</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 2. 判断是否存在</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StrUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotBlank</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">// 3. 存在，直接返回</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token class-name\">JSONUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBean</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 判断命中的是否是空值</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>json <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">// 返回一个错误信息</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 4. 不存在，根据 id 查询数据库</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">R</span> r <span class=\"token operator\">=</span> dbFallback<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// 5. 不存在，返回错误</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token comment\">// 将空值写入 redis</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> CACHE_NULL_TTL<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>MINUTES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token comment\">// 返回错误信息</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token comment\">// 6. 存在，写入 redis</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">,</span> ID<span class=\"token punctuation\">></span></span> <span class=\"token class-name\">R</span> <span class=\"token function\">queryWithLogicalExpire</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> keyPrefix<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ID</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> type<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>ID<span class=\"token punctuation\">,</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> dbFallback<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> time<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> keyPrefix <span class=\"token operator\">+</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token comment\">// 1. 从 redis 查询商铺缓存</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token comment\">// 2. 判断是否存在</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StrUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token comment\">// 3. 存在，直接返回</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\">// 4. 命中，需要先把 json 反序列化为对象</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token class-name\">RedisData</span> redisData <span class=\"token operator\">=</span> <span class=\"token class-name\">JSONUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBean</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RedisData</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token class-name\">R</span> r <span class=\"token operator\">=</span> <span class=\"token class-name\">JSONUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">)</span> redisData<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token class-name\">LocalDateTime</span> expireTime <span class=\"token operator\">=</span> redisData<span class=\"token punctuation\">.</span><span class=\"token function\">getExpireTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token comment\">// 5. 判断是否过期</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>expireTime<span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token comment\">// 5.1. 未过期，直接返回店铺信息</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token comment\">// 5.2. 已过期，需要缓存重建</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token comment\">// 6. 缓存重建</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token comment\">// 6.1. 获取互斥锁</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token class-name\">String</span> lockKey <span class=\"token operator\">=</span> LOCK_SHOP_KEY <span class=\"token operator\">+</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">boolean</span> isLock <span class=\"token operator\">=</span> <span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span>lockKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token comment\">// 6.2. 判断是否获取锁成功</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token comment\">// 6.3. 成功，开启独立线程，实现缓存重建</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            CACHE_REBUILD_EXECUTOR<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                    <span class=\"token comment\">// 查询数据库</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                    <span class=\"token class-name\">R</span> newR <span class=\"token operator\">=</span> dbFallback<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                    <span class=\"token comment\">// 重建缓存</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setWithLogicalExpire</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> newR<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                    <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                    <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span>lockKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token comment\">// 6.4. 返回过期的商铺信息</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">,</span> ID<span class=\"token punctuation\">></span></span> <span class=\"token class-name\">R</span> <span class=\"token function\">queryWithMutex</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> keyPrefix<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ID</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> type<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>ID<span class=\"token punctuation\">,</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> dbFallback<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> time<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> keyPrefix <span class=\"token operator\">+</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token comment\">// 1. 从 redis 查询商铺缓存</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token class-name\">String</span> shopJson <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token comment\">// 2. 判断是否存在</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StrUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotBlank</span><span class=\"token punctuation\">(</span>shopJson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token comment\">// 3. 存在，直接返回</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token class-name\">JSONUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBean</span><span class=\"token punctuation\">(</span>shopJson<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token comment\">// 判断命中的是否是空值</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shopJson <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token comment\">// 返回一个错误信息</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token comment\">// 4. 实现缓存重建</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token comment\">// 4.1. 获取互斥锁</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token class-name\">String</span> lockKey <span class=\"token operator\">=</span> LOCK_SHOP_KEY <span class=\"token operator\">+</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token class-name\">R</span> r <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token keyword\">boolean</span> isLock <span class=\"token operator\">=</span> <span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span>lockKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>            <span class=\"token comment\">// 4.2. 判断是否获取成功</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isLock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>                <span class=\"token comment\">// 4.3. 获取锁失败，休眠并重试</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token function\">queryWithMutex</span><span class=\"token punctuation\">(</span>keyPrefix<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> dbFallback<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>            <span class=\"token comment\">// 4.4. 获取锁成功，根据 id 查询数据库</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>            r <span class=\"token operator\">=</span> dbFallback<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>            <span class=\"token comment\">// 5. 不存在，返回错误</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>                <span class=\"token comment\">// 将空值写入 redis</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>                stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> CACHE_NULL_TTL<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>MINUTES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>                <span class=\"token comment\">// 返回错误信息</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>            <span class=\"token comment\">// 6. 存在，写入 redis</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>            <span class=\"token comment\">// 7. 释放锁</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>            <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span>lockKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token comment\">// 8. 返回</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        <span class=\"token class-name\">Boolean</span> flag <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setIfAbsent</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">BooleanUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">isTrue</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"redis-分布式锁\"><a class=\"anchor\" href=\"#redis-分布式锁\">#</a> Redis 分布式锁</h3>\n<p>所谓分布式锁，就是满足分布式系统或集群模式下多进程可见并互斥的锁。</p>\n<p>分布式锁的核心是实现多线程之间的互斥，其实现方式常见有如下三种：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>MySQL</th>\n<th>Redis</th>\n<th>Zookeeper</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>互斥</td>\n<td>利用 mysql 本身的互斥锁机制</td>\n<td>利用 setnx 这样的互斥命令</td>\n<td>利用节点唯一性和有序性实现互斥</td>\n</tr>\n<tr>\n<td>高可用</td>\n<td>好</td>\n<td>好</td>\n<td>好</td>\n</tr>\n<tr>\n<td>高性能</td>\n<td>一般</td>\n<td>好</td>\n<td>一般</td>\n</tr>\n<tr>\n<td>安全性</td>\n<td>断开连接，自动释放锁</td>\n<td>利用超时机制，到期释放</td>\n<td>临时节点，断开连接自动释放</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"基于-redis-实现分布式锁\"><a class=\"anchor\" href=\"#基于-redis-实现分布式锁\">#</a> 基于 Redis 实现分布式锁</h4>\n<p>基本实现思路：</p>\n<ol>\n<li>\n<p>版本一：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 添加锁，利用 SETNX 的互斥性</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SETNX lock thread-1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 添加锁过期时间，避免服务宕机导致死锁</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>EXPIRE lock <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 释放锁</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>DEL lock</pre></td></tr></table></figure></li>\n<li>\n<p>版本二：</p>\n<p>在版本一中，由于命令逐条执行，考虑到在添加锁和设置锁过期时间之间仍有可能出现服务宕机的情况，因此我们还需要保证添加锁和设置锁过期时间这两个操作同时执行，具有原子性，因此需要对该方案进行升级：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 添加互斥锁并设置过期时间（原子性）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SET lock thread-1 EX <span class=\"token number\">10</span> NX</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 释放锁</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>DEL lock</pre></td></tr></table></figure></li>\n<li>\n<p>版本三：</p>\n<p>基于版本二，基本上能够解决大部分并发情况，但在部分极端情况下，仍旧存在线程安全问题。主要表现在当获取到互斥锁的线程（Thread-A）执行时间超过 Redis TTL 过期时间，就会导致锁提前失效，在当前线程（Thread-A）未释放锁的情况下，此时进入新的线程（Thread-B）仍旧可以获取锁并执行业务逻辑，并且，在新的线程（Thread-B）执行过程中，先前获取到锁的线程（Thread-A）执行完业务逻辑后，就会释放线程（Thread-B）持有的锁。这样就会导致大量锁持有异常，从而引发业务灾难。</p>\n<p>出现这样的问题，根本上是由于释放了非当前线程持有的锁导致的，因此，要解决这个问题，只需要在线程释放锁时，判断其释放的锁是否是当前线程持有即可。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 注：此段代码只用于方案说明，无法直接使用。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">String</span> lockKeyName <span class=\"token operator\">=</span> <span class=\"token string\">\"lock:user:192838\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">String</span> threadId <span class=\"token operator\">=</span> UUID<span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 获取锁</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">Boolean</span> success <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setIfAbsent</span><span class=\"token punctuation\">(</span>lockKeyName<span class=\"token punctuation\">,</span> threadId<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUtil</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">String</span> id <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>lockKeyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 校验锁拥有者</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>threadId<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>lockKeyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>最终版：</p>\n<p>可以说即便是基于版本三，仍旧有出现线程安全问题的可能。考虑这样一种情况：当程序在释放锁时，先通过校验锁是否为当前线程持有，校验通过后，如果此时线程（Thread-A）突然发生阻塞（可能是由 JVM 垃圾回收导致），并且导致锁超时自动释放，此时在该线程阻塞的状态下，其他线程（Thread-B）就仍可以获取到锁，而当线程（Thread-A）阻塞通过后，由于它已经通过锁持有者校验，因此它将会进行释放锁，但此时它锁释放的锁，其实际上并非这个线程（Thread-A）所持有，从而再次引起版本三种提到的问题。</p>\n<p>出现这样的问题，根本上是因为校验锁持有者的操作与释放锁操作之间存在时间空隙，导致锁被提前释放，因此，要解决这个问题，就需要保证校验锁持有者操作和释放锁操作同时执行，具有原子性。</p>\n<p>这里推荐使用  <code>Lua 脚本</code> ，来保证一个原子性的操作，Lua 脚本基本语法，可参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9sdWEvbHVhLXR1dG9yaWFsLmh0bWw=\">Lua 教程 | 菜鸟教程</span>。</p>\n<p>Lua 脚本示例：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 无参脚本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>EVAL <span class=\"token string\">\"return redis.call('set', 'name', 'chinmoku')\"</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 带参脚本</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>EVAL <span class=\"token string\">\"return redis.call('set', KEYS[1], ARGV[1])\"</span> <span class=\"token number\">2</span> name chinmoku</pre></td></tr></table></figure><p>基于 Lua 脚本，我们可以通过如下方式来解决版本三中遗留的问题：</p>\n<ul>\n<li>\n<p>编写释放锁的 Lua 脚本：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- FileName: unlock.lua</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 校验锁拥有者</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> KEYS<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ARGV<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">-- 释放锁 del key</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'del'</span><span class=\"token punctuation\">,</span> KEYS<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token number\">0</span></pre></td></tr></table></figure></li>\n<li>\n<p>在业务中执行 Lua 脚本：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> lockKeyName <span class=\"token operator\">=</span> <span class=\"token string\">\"lock:user:192838\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> threadId <span class=\"token operator\">=</span> UUID<span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">DefaultRedisScript</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> UNLOCK_SCRIPT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    UNLOCK_SCRIPT <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultRedisScript</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    UNLOCK_SCRIPT<span class=\"token punctuation\">.</span><span class=\"token function\">setLocation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unlock.lua\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    UNLOCK_SCRIPT<span class=\"token punctuation\">.</span><span class=\"token function\">setResultType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>UNLOCK_SCRIPT<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">singletonList</span><span class=\"token punctuation\">(</span>lockKeyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<h4 id=\"redisson\"><a class=\"anchor\" href=\"#redisson\">#</a> Redisson</h4>\n<p>上述对 Redis 分布式锁进行了一系列方案探索，已经能够解决大部分并发场景下 Redis 分布式锁问题，但这种基于 SETNX 命令实现的分布式锁仍旧存在一些不足，例如：</p>\n<ul>\n<li>不可重入：同一个线程无法多次获取同一把锁。</li>\n<li>不可重试：线程获取锁只尝试了一次，没有重试机制。</li>\n<li>超时释放：锁超时释放虽然可以避免死锁，但如果业务执行耗时较长，仍旧会导致锁释放，因而存在安全隐患。</li>\n<li>主从一致性：如果 Redis 提供主从集群，主从节点同步存在延迟时，如果主节点突然宕机，未能完成同步，则会导致数据不一致。</li>\n</ul>\n<p>鉴于如上问题，可以推荐一个更加使用的 Redis 解决方案，即 Redisson。</p>\n<p>Redisson 是一个在 Redis 基础上实现扩展库，它不仅提供一系列分布式的 Java 常用对象，还提供了许多分布式服务，包括各种分布式锁的实现。</p>\n<p>官网地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWRpc3Nvbi5vcmc=\">https://redisson.org</span></p>\n<p>Github 首页：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3JlZGlzc29uL3JlZGlzc29u\">https://github.com/redisson/redisson</span></p>\n<p><strong>基本使用：</strong></p>\n<ol>\n<li>\n<p>引入依赖： <code>org.redisson.redisson:3.13.6</code> 。</p>\n</li>\n<li>\n<p>客户端配置：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RedissonClient</span> <span class=\"token function\">redissonClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Config</span> config <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        config<span class=\"token punctuation\">.</span><span class=\"token function\">useSingleServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAddress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"redis://127.0.0.1:6379\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token class-name\">Redisson</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>测试使用：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">RedissonClient</span> redissonClient<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">RLock</span> lock <span class=\"token operator\">=</span> redissonClient<span class=\"token punctuation\">.</span><span class=\"token function\">getLock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lock:order:123764\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">boolean</span> isLock <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isLock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---> TODO 执行业务逻辑\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>Redisson 分布式锁原理</strong></p>\n<p><img data-src=\"https://img.xfc-exclave.com/2022/03/3a5c08426d7714bd67041598cc8457561647263198.png\" alt=\"redisson-lock\" /></p>\n<p>Redisson 如何处理分布式锁问题：</p>\n<ol>\n<li>\n<p>可重入问题：利用 Hash 结构记录线程 ID 和重入次数。</p>\n</li>\n<li>\n<p>可重试问题：利用信号量和 PubSub 功能实现等待、唤醒、获取锁失败的重试机制。</p>\n</li>\n<li>\n<p>超时续约：利用 watchDog，每隔一段时间（releaseTime / 3）重置锁的超时时间。</p>\n</li>\n<li>\n<p>主从一致性问题：</p>\n<p>Redisson 使用联锁（multiLock）机制，同时存在多个 Redis 主节点，并且获取锁时，需要保证所有主节点内该锁都已被释放。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">RedissonClient</span> redissonClient1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">RedissonClient</span> redissonClient2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">RedissonClient</span> redissonClient3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">RLock</span> lock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@BeforeEach</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">RLock</span> lock1 <span class=\"token operator\">=</span> redissonClient1<span class=\"token punctuation\">.</span><span class=\"token function\">getLock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"order\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">RLock</span> lock2 <span class=\"token operator\">=</span> redissonClient2<span class=\"token punctuation\">.</span><span class=\"token function\">getLock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"order\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">RLock</span> lock3 <span class=\"token operator\">=</span> redissonClient3<span class=\"token punctuation\">.</span><span class=\"token function\">getLock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"order\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    lock <span class=\"token operator\">=</span> redissonClient1<span class=\"token punctuation\">.</span><span class=\"token function\">getMultiLock</span><span class=\"token punctuation\">(</span>lock1<span class=\"token punctuation\">,</span> lock2<span class=\"token punctuation\">,</span> lock3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其本质上是对 MultiLock 内所有的锁进行遍历。</p>\n</li>\n</ol>\n<h3 id=\"redis-消息队列\"><a class=\"anchor\" href=\"#redis-消息队列\">#</a> Redis 消息队列</h3>\n<p>通常，对于并发和性能要求都较高的系统或业务，往往需要将流程分片化。例如典型的秒杀项目，出于性能考虑，我们通常会将较为复杂的、耗时较长但无需即时返回结果的请求存储到消息队列中，开启异步线程进行处理，这样既不会到影响业务，同时也提高了系统的性能。</p>\n<p>目前比较流行的消息队列产品包括：RabbitMQ、ActiveMQ、RocketMQ、kafka 等。</p>\n<p>此外，Redis 也提供了三种不同的方式来实现消息队列：</p>\n<ol>\n<li>List 结构：基于 List 结构模拟消息队列。</li>\n<li>PubSub：基本的点对点消息模型。</li>\n<li>Stream：比较完善的消息队列模型（推荐）。</li>\n</ol>\n<h4 id=\"基于-list-模拟消息队列\"><a class=\"anchor\" href=\"#基于-list-模拟消息队列\">#</a> 基于 List 模拟消息队列</h4>\n<p>消息队列，简单理解即时存放消息的队列，而 Redis 的 List 数据结构是一个双向链表，因此我们可以很容易地通过 LPUSH 结合 RPOP 或 RPUSH 结合 LPOP 来模拟出队列的效果。</p>\n<p>但值得注意的是，当 Redis List 中没有消息时，RPOP 或 LPOP 会返回 nil，而不是像 JVM 的阻塞队列那样阻塞并等待消息，因此，在取出消息时应当使用 BRPOP 或 BLPOP 来实现阻塞效果。</p>\n<p>相比 JVM 阻塞队列来说，Redis 实现的阻塞队列具有如下优点：</p>\n<ol>\n<li>不受 JVM 内存大小限制。</li>\n<li>基于 Redis 持久化，可以保证数据安全。</li>\n<li>可以满足消息的有序性。</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>无法避免消息丢失（当取出消息但未及时处理时，服务出现异常，会导致消息丢失）。</li>\n<li>只支持单消费者，无法实现多消费者同时消费。</li>\n</ol>\n<h4 id=\"基于-pubsub-的消息队列\"><a class=\"anchor\" href=\"#基于-pubsub-的消息队列\">#</a> 基于 PubSub 的消息队列</h4>\n<p>PubSub 是 Redis 2.0 版本引入的消息传递模型，消费者可以订阅一个或多个 channel，生产者想对应的 channel 发送消息后，所有订阅者都能收到相关消息。</p>\n<ul>\n<li>SUBSCRIBE channel [channel] 订阅一个或多个频道。</li>\n<li>PUBLISH channel msg 向一个频道发送消息。</li>\n<li>PSUBSCRIBE pattern [pattern] 订阅与 pattern 格式匹配的所有频道。</li>\n</ul>\n<p>PubSub 有点：</p>\n<ol>\n<li>采用发布订阅模型，支持多生产、多消费。</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>不支持数据持久化。</li>\n<li>无法避免消息丢失。</li>\n<li>消息堆积有上限，超出时消息会丢失。</li>\n</ol>\n<h4 id=\"基于-stream-的消息队列\"><a class=\"anchor\" href=\"#基于-stream-的消息队列\">#</a> 基于 Stream 的消息队列</h4>\n<p>Stream 是 Redis 5.0 引入的一种新的数据类型，可以实现一个功能非常完善的消息队列。</p>\n<p>Stream 消息队列相关命令：</p>\n<ol>\n<li>\n<p>XADD key *|ID field value [field value ...] 发送消息。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 添加消息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>XADD user:1001 * name chinmoku</pre></td></tr></table></figure></li>\n<li>\n<p>XREAD STREAMS key [key ...] ID [ID ...]</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 从 0 开始读取消息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>XREAD COUNT <span class=\"token number\">1</span> STREAMS user:1001 <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 读取最新消息</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>XREAD COUNT <span class=\"token number\">1</span> STREAMS user:1001 $</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 阻塞读取消息</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>XREAD COUNT <span class=\"token number\">1</span> BLOCK <span class=\"token number\">1000</span> STREAMS user:1001 $</pre></td></tr></table></figure></li>\n</ol>\n<p>实现消息队列示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 尝试读取队列中的消息，最多阻塞 2s</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Object</span> msg <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"XREAD COUNT 1 BLOCK 2000 STREAMS user:1001 $\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 处理消息</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">handleMessage</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>STREAM 类型消息队列的 XREAD 命令特点：</p>\n<ul>\n<li>消息可回溯。</li>\n<li>一个消息可以被多个消费者读取。</li>\n<li>可以阻塞读取。</li>\n<li>有消息漏读的风险。</li>\n</ul>\n<p><strong>消费者组（Consumer Group）</strong></p>\n<p>由于单消费者具有消息漏读的风险，因此引入了消费者组概念，所谓消费者组，就是将多个消费者划分到一个组中，监听同一个队列，它具备如下特点：</p>\n<ol>\n<li>\n<p>消息分流：</p>\n<p>队列中的消息会分流给组内的不同消费者，而不是重复消费，从而加快消息处理的速度。</p>\n</li>\n<li>\n<p>消息标示：</p>\n<p>消费者组会维护一个标示，记录最后一个被处理的消息，哪怕消费者宕机重启，仍旧会从标示之后读取消息，保证每一条消息都会被消费。</p>\n</li>\n<li>\n<p>消息确认：</p>\n<p>消费者获取消息后，消息处于 pending 状态，并存入一个 pending-list 中，当处理完成后需要通过 XACK 来确认消息，标记消息为已处理，这时才会从 pending-list 中移除。</p>\n</li>\n</ol>\n<p>Stream Consumer Group 相关操作命令：</p>\n<ol>\n<li>XGROUP CREATE key groupName ID [MKSTREAM] 创建消费者组。</li>\n<li>XGROUP DESTORY key groupName 删除消费者组。</li>\n<li>XGROUP CREATECONSUMER key groupName consumername 给指定消费者组添加消费者。</li>\n<li>XGROUP DELCONSUMER key groupName consumername 删除消费者组中指定消费者。</li>\n<li>XREADGROUP GROUP group consumer STREAMS key [key ...] ID [ID ...] 从消费者组读取消息。</li>\n<li>XACK key group ID [ID ...] 确认消息（读取消息后需要进行确认）。</li>\n<li>XPENDING key group [start end count] 获取未确认的消息。</li>\n</ol>\n<p>伪代码实现消费者组监听逻辑：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">white</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 尝试监听队列，使用阻塞模式，最长等待 2000ms</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Object</span> msg <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 200 STREAMS S1 >\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 没有消息，则继续下一次</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 处理消息，完成后并做 ACK</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">handleMessage</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 从 pending-list 中读取消息</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">Object</span> msg <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"XREADGROUP GROUP g1 s1 COUNT 1 STREAMS s1 0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token comment\">// 存在异常消息，再次处理</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token function\">handleMessage</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token comment\">// 再次出现异常，继续循环</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>STREAM 类型消息队列的 XREADGROUP 命令特点：</p>\n<ul>\n<li>消息可回溯。</li>\n<li>可以多消费者争抢消息，加快消费速度。</li>\n<li>可以阻塞读取。</li>\n<li>没有消息漏读风险。</li>\n<li>有消息确认机制，保证消息至少被消费一次。</li>\n</ul>\n<p><strong>Redis 消息队列对比：</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>List</th>\n<th>PubSub</th>\n<th>Stream</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>消息持久化</td>\n<td>支持</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>阻塞读取</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>消息堆积处理</td>\n<td>受内存空间限制，可以利用多消费者加快处理</td>\n<td>受限于消费者缓冲区</td>\n<td>受限于队列长度，可以利用消费者组提高消费速度，减少堆积</td>\n</tr>\n<tr>\n<td>消息确认机制</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>消息回溯</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>使用 Redis 作为消息队列，推荐使用 Stream，但 Redis 毕竟并非主要用于消息队列，因此在对消息队列性能要求较高的项目中，还是推荐使用专门的消息队列产品。</p>\n</blockquote>\n<h3 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h3>\n<blockquote>\n<p>参考内容来源于网络，本文不保证参考链接的长期有效性，以及参考内容的原创性。</p>\n</blockquote>\n<ul>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWRpcy5pby9jb21tYW5kcw==\">https://redis.io/commands</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWNyNHkxNjcxdA==\">https://www.bilibili.com/video/BV1cr4y1671t</span></p>\n<p><span class=\"label primary\">♥️ 推荐</span> 这个教程大致涉及了 Redis 基础及原理、分布式锁和 Redis 消息队列这几大内容，重点倾向于 Redis 基础及并发解决方案，目前似乎仍在持续更新，管道、集群等知识大概是要等后续更新吧。总体感觉相当良好，特别是 PPT 做得真的是眼前一亮。（就事论事）</p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaXRwbGF5L3AvMTEwOTg5OTAuaHRtbA==\">https://www.cnblogs.com/itplay/p/11098990.html</span></p>\n</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "JAVA学习路线",
                "进阶篇",
                "java",
                "Spring Cloud Alibaba"
            ]
        },
        {
            "id": "https://www.chinmoku.cc/blog-log/",
            "url": "https://www.chinmoku.cc/blog-log/",
            "title": "【长期置顶】博客文章更新日志",
            "date_published": "2022-01-22T15:37:53.000Z",
            "content_html": "<div class=\"note info\">\n<p>自 2021 年 10 月起，决定开始对博客内容的更新进行记录。本文将长期置顶并持续更新，此前原有内容亦在本文列出，但不做详细记录。本文的主要目的在于梳理博客文章的发布事件，同时也可以见证一个普通开发者的成长经历。单纯将本文当做一个博客归档也是可以的。</p>\n<p>为了阅读方便，本文记录内容将会按时间倒叙进行排列。<span class=\"rainbow\">本文作为动态文章，将会持续更新！</span></p>\n</div>\n<h3 id=\"发布日志\"><a class=\"anchor\" href=\"#发布日志\">#</a> 发布日志</h3>\n<p>博客更新日志：</p>\n<ul>\n<li>2022-02-14 发布《<a href=\"/computer-science/java-learning-path/3-advanced/redis-tutorial/\">Redis 如何保证高性能</a>》</li>\n<li>2022-01-22 发布《<a href=\"/computer-science/java-learning-path/2-intermediate/dubbo-tutorial/\">Dubbo 知识整理</a>》</li>\n<li>2021-11-03 发布《<a href=\"/computer-science/python/django-tutorial/\">Django 网站全栈开发教程</a>》</li>\n<li>2021-10-18 发布《<a href=\"/computer-science/java-learning-path/3-advanced/zookeeper-tutorial/\">Zookeeper 基础教程</a>》</li>\n<li>2021-10-06 《<a href=\"/language/japanese/standard-japanese/standard-japanese-02-ing/\">標準日本語の入門（二）</a>》临时发布，持续更新。</li>\n<li>2021-10-01 发布《<a href=\"/computer-science/python/python-all-base/\">Python 基础知识全通关</a>》</li>\n<li>2021-12-28 发布《<a href=\"/computer-science/java-learning-path/3-advanced/mongodb-tutorial/\">MongoDB 基础教程</a>》</li>\n</ul>\n<p>早期文章归档：</p>\n<blockquote>\n<p>2021 年 10 月前已发布文章整理归档，仅整理目录，不记录发布时间。</p>\n<p>另外，以前整理的或在其他平台发布的一些知识，例如  <code>VUE</code> 、 <code>Netty</code>  等，碍于以前的技术水平较低，如今再看自我感觉就不那么满意了，所以日后会对相关文章进行重新整理。</p>\n</blockquote>\n<ul>\n<li>《<a href=\"/language/japanese/standard-japanese/standard-japanese-01/\">標準日本語の入門（一）</a>》</li>\n<li>《<a href=\"/computer-science/java-learning-path/6-extension/quartz-tutorial/\">Quartz 快速入门及常规使用</a>》</li>\n<li>《<a href=\"/computer-science/java-learning-path/6-extension/elasticsearch-tutorial/\">Elasticsearch 教程</a>》</li>\n<li>《<a href=\"/computer-science/java-learning-path/5-framework/docker-tutorial/\">给，你要的 Docker 详细教程</a>》</li>\n<li>《<a href=\"/computer-science/java-learning-path/3-advanced/rabbitmq-tutorial/\">RabbitMQ - 从下载安装到集群部署</a>》</li>\n<li>《<a href=\"/computer-science/java-learning-path/3-advanced/activemq-tutorial/\">ActiveMQ - 从下载安装到集群部署</a>》</li>\n<li>《<a href=\"/computer-science/resource/wallpaper_site/\">高清壁纸网站推荐</a>》</li>\n<li>《<a href=\"/computer-science/others/blog-without-server/\">Hexo - 技术小白搭建个人博客</a>》</li>\n<li>《<a href=\"/computer-science/java-learning-path/2-intermediate/springcloud-tutorial/\">SpringCloud 教程（Finchley.RELEASE）</a>》</li>\n<li>《<a href=\"/computer-science/java-learning-path/2-intermediate/webservice-tutorial/\">WebService，如此而已</a>》</li>\n<li>《<a href=\"/computer-science/java-learning-path/2-intermediate/mybatis-tutorial/\">MyBatis 教程</a>》</li>\n<li>《<a href=\"/computer-science/java-learning-path/2-intermediate/spring-tutorial/\">Spring 教程</a>》</li>\n<li>《<a href=\"/computer-science/java-learning-path/1-basic/02-java-concurrency/\">Java 并发编程知识整理</a>》</li>\n<li>《<a href=\"/computer-science/java-learning-path/1-basic/01-java-basic/\">JAVA 基础知识大盘点</a>》</li>\n</ul>\n<h3 id=\"java-学习路线\"><a class=\"anchor\" href=\"#java-学习路线\">#</a> Java 学习路线</h3>\n<div class=\"note primary no-icon\">\n<p>注意：以下在线地址基于<strong>百度脑图</strong>，在线查看需要登录百度账号。</p>\n</div>\n<ol>\n<li>基础篇，<span class=\"exturl\" data-url=\"aHR0cDovL25hb3R1LmJhaWR1LmNvbS9maWxlL2MyNWRmM2MxZDliYTU0ZmZiMWE4Njc4ZDg0ZDA3ZTIyP3Rva2VuPWQ2OTU2MzQ4NDBlN2U1YmM=\">在线预览</span></li>\n<li>进阶篇，<span class=\"exturl\" data-url=\"aHR0cDovL25hb3R1LmJhaWR1LmNvbS9maWxlLzdhYzdkNzc0ZDYyNDA1ODI4YzU5ZmZkOTY4ODI0YjFjP3Rva2VuPTM1NjFmMTFhMDRmZmExOTU=\">在线预览</span></li>\n<li>高级篇，<span class=\"exturl\" data-url=\"aHR0cDovL25hb3R1LmJhaWR1LmNvbS9maWxlL2QwNzNmMjdkNzI0YmE3YjhhNGUwMTA5NTUyZWI1OTM3P3Rva2VuPTM2YmIyZjUyNWY4ZmI1MTQ=\">在线预览</span></li>\n<li>底层篇，<span class=\"exturl\" data-url=\"aHR0cDovL25hb3R1LmJhaWR1LmNvbS9maWxlL2MyNjUxYTNiMTZlMDQyOGFhZmM4MTQ3ZmExZWJmOWZiP3Rva2VuPTY0OTE2ZGE2ODllMDA2NzA=\">在线预览</span></li>\n<li>架构篇，<span class=\"exturl\" data-url=\"aHR0cDovL25hb3R1LmJhaWR1LmNvbS9maWxlL2QzNTc4YTkwYzFhZDZmMDZkZmM5MzhkMGI0NjAyMWJmP3Rva2VuPTI2Mjc0Njc5NDUwYzhlZDY=\">在线预览</span></li>\n<li>扩展篇，<span class=\"exturl\" data-url=\"aHR0cDovL25hb3R1LmJhaWR1LmNvbS9maWxlLzA0M2QyOTc3ZTg5N2QwZDhjNmNkMjIzY2Y2ZDRlNGQzP3Rva2VuPWEyYjdjYzA3YTBjOGMzZDA=\">在线预览</span></li>\n</ol>\n<div class=\"note success no-icon\">\n<p>注意：以下地址可下载 xmind 格式文件，文件基于 XMind 2022 版本进行编辑，版本低于 XMind 8 可能导致无法打开。</p>\n</div>\n<ol>\n<li>基础篇，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWZlcmVuY2UtMTMwMTA0Njc4OS5jb3MuYXAtbmFuamluZy5teXFjbG91ZC5jb20veG1pbmQvamF2YS1sZWFybmluZy1wYXRoLzEtYmFzaWMueG1pbmQ=\">点击下载</span></li>\n<li>进阶篇，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWZlcmVuY2UtMTMwMTA0Njc4OS5jb3MuYXAtbmFuamluZy5teXFjbG91ZC5jb20veG1pbmQvamF2YS1sZWFybmluZy1wYXRoLzItaW50ZXJtZWRpYXRlLnhtaW5k\">点击下载</span></li>\n<li>高级篇，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWZlcmVuY2UtMTMwMTA0Njc4OS5jb3MuYXAtbmFuamluZy5teXFjbG91ZC5jb20veG1pbmQvamF2YS1sZWFybmluZy1wYXRoLzMtYWR2YW5jZWQueG1pbmQ=\">点击下载</span></li>\n<li>底层篇，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWZlcmVuY2UtMTMwMTA0Njc4OS5jb3MuYXAtbmFuamluZy5teXFjbG91ZC5jb20veG1pbmQvamF2YS1sZWFybmluZy1wYXRoLzQtdW5kZXJseWluZy54bWluZA==\">点击下载</span></li>\n<li>架构篇，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWZlcmVuY2UtMTMwMTA0Njc4OS5jb3MuYXAtbmFuamluZy5teXFjbG91ZC5jb20veG1pbmQvamF2YS1sZWFybmluZy1wYXRoLzUtZnJhbWV3b3JrLnhtaW5k\">点击下载</span></li>\n<li>扩展篇，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWZlcmVuY2UtMTMwMTA0Njc4OS5jb3MuYXAtbmFuamluZy5teXFjbG91ZC5jb20veG1pbmQvamF2YS1sZWFybmluZy1wYXRoLzYtZXh0ZW5zaW9uLnhtaW5k\">点击下载</span></li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://www.chinmoku.cc/computer-science/java-learning-path/2-intermediate/dubbo-tutorial/",
            "url": "https://www.chinmoku.cc/computer-science/java-learning-path/2-intermediate/dubbo-tutorial/",
            "title": "Dubbo 知识整理",
            "date_published": "2022-01-22T01:01:24.000Z",
            "content_html": "<div class=\"note info\">\n<p>在微服务知识整理的过程中，断断续续看了好些文档和视频教程，写下的笔记也很杂乱，现决定稍微专注一点，一鼓作气将这块知识整理完整。</p>\n</div>\n<h3 id=\"基础知识\"><a class=\"anchor\" href=\"#基础知识\">#</a> 基础知识</h3>\n<p>RPC（Remote Procedure Call）意为<span class=\"blue\">远程过程调用</span>。</p>\n<p>🎈 <strong>RPC 是用来干什么的？</strong></p>\n<p>在微服务架构中，一个完整的项目，通常会被拆分成多个微型服务，但在业务过程中，这些服务彼此之间是存在调用关系的，对于这种跨服务之间的调用，通常就需要通过 RPC 来完成。简单来说，<ins>RPC 的目的，就是为了让程序能够像调用本地方法一样调用远程方法</ins>。</p>\n<p>🎈 <strong>既然有 HTTP 请求，为什么还要用 RPC 调用？</strong></p>\n<ol>\n<li>RPC 的出现是早于 HTTP 的，RPC 主要是基于 TCP/IP 协议，而 HTTP 是基于 HTTP 协议的。</li>\n<li>HTTP 和 RPC 不是两个可以对等的比较概念。因为 HTTP 是一个通信协议，而 RPC 是一个完整的远程调用方案。</li>\n<li>可以更简单地理解，HTTP 其实就是一种 RPC 的一种，它拥有更加具体的实现，但对于微服务之间的远程调用，则不太适用。</li>\n<li>知乎问答上有更加详细的讨论，可<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzQxNjA5MDcw\">点击此处</span>前往查看。</li>\n</ol>\n<p>🎈 <strong>RPC 的原理是什么？</strong></p>\n<p>要明白 RPC 的原理，首先应当了解如下几个概念：</p>\n<ul>\n<li>客户端：远程方法的调用者。</li>\n<li>客户端 Stub：它主要负责将调用的方法、类、方法参数等信息传递到服务端。</li>\n<li>网络传输：网络传输就是客户端将要调用的信息输到服务端，然后服务端执行完之后再把返回结果通过网络传输给你传输回来。网络传输即是指这种双向的数据传输过程。</li>\n<li>服务端 Stub：它的主要作用是接收客户端的请求，并指定对应的方法进行处理，最终将处理结果返回给客户端。</li>\n<li>服务端：远程方法的提供者。</li>\n</ul>\n<p>RPC 原理示意图：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2022/03/a9236ce73afce0b86e1fceba4fc737bb1646120102.png\" alt=\"dubbo\" /></p>\n<ol>\n<li>客户端以本地调用方式调用远程服务。</li>\n<li>客户端 stub 接收到调用后，将方法、参数等组装成能够进行网络传输的消息体（序列号）： <code>RpcRequest</code> 。</li>\n<li>客户端 stub 找到远程服务地址，并将消息发送到服务端。</li>\n<li>服务端 stub 接收到消息并反序列化为 Java 对象：RpcRequest。</li>\n<li>服务端 stub 根据 RpcRequest 中的类、方法、方法参数等信息调用本地方法。</li>\n<li>服务端 stub 得到方法执行结果，并将其序列号为  <code>RpcResponse</code>  对象，并通过网络传输发送到客户端。</li>\n<li>客户端 stub 接收到服务端的响应数据，并反序列化为 RpcResponse 对象。</li>\n</ol>\n<h3 id=\"dubbo-概述\"><a class=\"anchor\" href=\"#dubbo-概述\">#</a> Dubbo 概述</h3>\n<p>🎈 <strong>Dubbo 是什么？</strong></p>\n<p>Dubbo 是阿里巴巴开源的一款高性能、轻量级的 RPC 框架，它提供服务自动注册、自动发现等高效服务治理方案，可以和 Spring 框架无缝集成。</p>\n<p>Dubbo 提供了六大核心能力：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2022/03/45a4b3ecd2e3442d440838353ac3b4f91646121130.png\" alt=\"image-20220301153753633\" /></p>\n<p>🎈 <strong>为什么要用 Dubbo？</strong></p>\n<p>随着服务化的进一步发展，服务越来越多，服务之间的调用和依赖关系也越来越复杂，诞生了面向服务的架构体系（SOA）。同时，也由此衍生出了一系列相应的技术，如对服务提供、服务调用、连接处理、通信协议、序列化方式、服务发现、服务路由、日志输出等行为进行封装的服务框架。就这样为分布式系统的服务治理框架就出现了，这也是 Dubbo 最初的产生。</p>\n<p>🎈 <strong>Dubbo 的核心架构</strong></p>\n<p>下图是 Dubbo 官网描述的基本原理图：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2022/03/d2007d024eb6dd4c9c6fa459e7300aab1646120941.png\" alt=\"Dubbo Architecture\" width=\"500px\" /></p>\n<p>其中，Dubbo 默认使用 zookeeper 作为其注册中心，监控中心在 Dubbo 的架构中并非必须。</p>\n<h3 id=\"快速入门\"><a class=\"anchor\" href=\"#快速入门\">#</a> 快速入门</h3>\n<blockquote>\n<p>如前文所述，Dubbo 默认使用 zookeeper 作为其注册中心，因此，在正式入门前，需要了解如何安装 zookeeper，zookeeper 安装及相关基础知识，可参考文章《<a href=\"/computer-science/java-learning-path/3-advanced/zookeeper-tutorial/\">Zookeeper 基础教程</a>》。</p>\n</blockquote>\n<div class=\"note danger no-icon\">\n<p>集成实例代码已上传到 Github 仓库，可自行查看，自出不进行详述：</p>\n<ul>\n<li>Spring 集成 Dubbo，请<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3hmYy1leGNsYXZlL2Jsb2ctcHJvamVjdC90cmVlL21hc3Rlci81YjUzMGQvZHViYm8tcHJv\">点击此处</span>。</li>\n<li>SpringBoot 集成 Dubbo，请<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3hmYy1leGNsYXZlL2Jsb2ctcHJvamVjdC90cmVlL21hc3Rlci81YjUzMGQvc3ByaW5nYm9vdC1kdWJibw==\">点击此处</span>。</li>\n</ul>\n</div>\n<h3 id=\"高级特性\"><a class=\"anchor\" href=\"#高级特性\">#</a> 高级特性</h3>\n<h4 id=\"dubbo-admin\"><a class=\"anchor\" href=\"#dubbo-admin\">#</a> Dubbo Admin</h4>\n<ol>\n<li>\n<p>介绍</p>\n<p>Dubbo Admin 是一个通过 vue + springboot 实现的 Dubbo 可视化管理界面。</p>\n</li>\n<li>\n<p>下载</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9kdWJiby1hZG1pbg==\">https://github.com/apache/dubbo-admin</span></p>\n</li>\n<li>\n<p>后端部署</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/apache/dubbo-admin.git</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> dubbo-admin-server</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mvn clean package</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">cd</span> target</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>java -jar dubbo-admin-server-0.1.jar</pre></td></tr></table></figure></li>\n<li>\n<p>前端部署</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> dubbo-admin-ui</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">npm</span> run dev</pre></td></tr></table></figure></li>\n<li>\n<p>注意事项</p>\n<ul>\n<li>Dubbo Admin 前端依赖于 node.js 环境。</li>\n<li>Dubbo Admin 默认账号密码均为 root。</li>\n<li>Dubbo 默认使用 20880 端口连接注册中心，同一主机多个 Dubbo 客户端时应注意避免端口冲突。</li>\n<li>此部分尽量简化，如有疑问，可参考 Dubbo 官方提供的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kdWJiby5hcGFjaGUub3JnL3poL2RvY3MvdjIuNy9hZG1pbi9vcHMv\">Dubbo Admin 运维指南</span>。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"协议与序列化\"><a class=\"anchor\" href=\"#协议与序列化\">#</a> 协议与序列化</h4>\n<p>我们把对象转换为字节序列的过程称为对象的序列化，把字节序列恢复为对象的过程称为对象的反序列化。而 Dubbo 需要进行网络通信，就必然需要实现序列化和反序列化的过程。其实现序列化的方式也很简单，只需要使传输的对象类实现  <code>Serializable</code>  接口即可。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>🎈 <strong>Dubbo 支持的协议</strong></p>\n<p>Dobbo 支持的协议包括：dubbo、rmi、hessian、http、webservice、thrift、memcached、redis、rest。其中， <code>dubbo://</code>  是 Dobbo 默认支持的协议。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Dubbo</th>\n<th>RMI</th>\n<th>Hessian</th>\n<th>Http</th>\n<th>WebService</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>连接数</td>\n<td>单个</td>\n<td>多个</td>\n<td>多个</td>\n<td>多个</td>\n<td>多个</td>\n</tr>\n<tr>\n<td>连接类型</td>\n<td>长连接</td>\n<td>短连接</td>\n<td>短连接</td>\n<td>短连接</td>\n<td>短连接</td>\n</tr>\n<tr>\n<td>通信协议</td>\n<td>TCP</td>\n<td>TCP</td>\n<td>HTTP</td>\n<td>HTTP</td>\n<td>HTTP</td>\n</tr>\n<tr>\n<td>传输方式</td>\n<td>NIO</td>\n<td>同步</td>\n<td>同步</td>\n<td>同步</td>\n<td>同步</td>\n</tr>\n<tr>\n<td>序列化</td>\n<td>Hessian</td>\n<td>Java 标准二进制</td>\n<td>Hessian</td>\n<td>表单序列化</td>\n<td>SOAP 文本序列化</td>\n</tr>\n<tr>\n<td>使用场景</td>\n<td>大并发，小数据</td>\n<td>常规</td>\n<td>文件、页面</td>\n<td>支持客户端或 js 调用</td>\n<td>系统集成，跨语言</td>\n</tr>\n</tbody>\n</table>\n<p>Dubbo 针对不同服务，可以选择使用不同的协议：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>dubbo</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://dubbo.apache.org/schema/dubbo<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">dubbo:</span>application</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>world<span class=\"token punctuation\">\"</span></span>  <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">dubbo:</span>registry</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>registry<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">address</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.20.141.150:9090<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">username</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>admin<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">password</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hello1234<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 多协议配置 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">dubbo:</span>protocol</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dubbo<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">port</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20880<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">dubbo:</span>protocol</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rmi<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">port</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1099<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 使用 dubbo 协议暴露服务 --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">dubbo:</span>service</span> <span class=\"token attr-name\">interface</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.alibaba.hello.api.HelloService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>helloService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">protocol</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dubbo<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 使用 rmi 协议暴露服务 --></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">dubbo:</span>service</span> <span class=\"token attr-name\">interface</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.alibaba.hello.api.DemoService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>demoService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">protocol</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rmi<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>此外，Dubbo 也可以同时使用多个协议暴露服务：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>dubbo</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://dubbo.apache.org/schema/dubbo<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">dubbo:</span>application</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>world<span class=\"token punctuation\">\"</span></span>  <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">dubbo:</span>registry</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>registry<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">address</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.20.141.150:9090<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">username</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>admin<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">password</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hello1234<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 多协议配置 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">dubbo:</span>protocol</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dubbo<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">port</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20880<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">dubbo:</span>protocol</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hessian<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">port</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>8080<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 使用多个协议暴露服务 --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">dubbo:</span>service</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>helloService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">interface</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.alibaba.hello.api.HelloService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">protocol</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dubbo,hessian<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"超时与重试机制\"><a class=\"anchor\" href=\"#超时与重试机制\">#</a> 超时与重试机制</h4>\n<p>通过进行如下配置，即可实现 Dubbo 服务调用的超时与重试：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 服务调用超时设置为 5 秒，重试 3 次 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">dubbo:</span>service</span> <span class=\"token attr-name\">interface</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.provider.service.DemoService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>demoService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">retries</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">timeout</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5000<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">&lt;!-- &lt;dubbo:consumer timeout=\"1000\">&lt;/dubbo:consumer>--></span></pre></td></tr></table></figure><p>Dubbo 超时设置可以有两种方式：</p>\n<ol>\n<li>服务提供者端设置超时（推荐）。</li>\n<li>服务消费者端设置超时，其优先级更高。</li>\n</ol>\n<p>服务调用超时，Dubbo 会自动进行重试，当未指定重试次数时，默认为重试两次。</p>\n<blockquote>\n<p>除了通过 xml 的方式指定 Dubbo 超时重试等相关参数外，也可以通过指定注解参数的方式实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>dubbo<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span><span class=\"token punctuation\">(</span>timeout <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> retries <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注：Dubbo 新版本中  <code>@Service</code>  和  <code>@Reference</code>  已被标记为过时，并使用  <code>DubboService</code>  和  <code>DubboReference</code>  进行替代。</p>\n</blockquote>\n<h4 id=\"多版本\"><a class=\"anchor\" href=\"#多版本\">#</a> 多版本</h4>\n<p>在 Dubbo 中可以为同一个服务配置多个版本，当一个接口实现，出现不兼容升级时，可以用版本号过渡，版本号不同的服务相互间不引用。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 服务提供者端 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">dubbo:</span>service</span> <span class=\"token attr-name\">interface</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.foo.BarService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">&lt;!-- 服务消费者端 --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">dubbo:</span>reference</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>barService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">interface</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.foo.BarService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>*<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><p>同样，除了使用 xml 进行配置外，多版本参数也可以通过注解的方式进行指定：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 服务提供者端</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span><span class=\"token punctuation\">(</span>version <span class=\"token operator\">=</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 服务消费者端</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Reference</span><span class=\"token punctuation\">(</span>version <span class=\"token operator\">=</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"负载均衡\"><a class=\"anchor\" href=\"#负载均衡\">#</a> 负载均衡</h4>\n<p>在集群负载均衡时，Dubbo 提供了多种均衡策略，缺省为  <code>random</code>  随机调用。具体实现上，Dubbo 提供的是客户端负载均衡，即由 Consumer 通过负载均衡算法得出需要将请求提交到哪个 Provider 实例。</p>\n<p>目前 Dubbo 内置了如下负载均衡算法，用户可直接配置使用：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">算法</th>\n<th style=\"text-align:left\">特性</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">RandomLoadBalance</td>\n<td style=\"text-align:left\">加权随机</td>\n<td style=\"text-align:left\">默认算法，默认权重相同</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">RoundRobinLoadBalance</td>\n<td style=\"text-align:left\">加权轮询</td>\n<td style=\"text-align:left\">借鉴于 Nginx 的平滑加权轮询算法，默认权重相同，</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LeastActiveLoadBalance</td>\n<td style=\"text-align:left\">最少活跃优先 + 加权随机</td>\n<td style=\"text-align:left\">背后是能者多劳的思想</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ShortestResponseLoadBalance</td>\n<td style=\"text-align:left\">最短响应优先 + 加权随机</td>\n<td style=\"text-align:left\">更加关注响应速度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ConsistentHashLoadBalance</td>\n<td style=\"text-align:left\">一致性 Hash</td>\n<td style=\"text-align:left\">确定的入参，确定的提供者，适用于有状态请求</td>\n</tr>\n</tbody>\n</table>\n<p>xml 配置方式：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 服务端级别 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">dubbo:</span>service</span> <span class=\"token attr-name\">interface</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">loadbalance</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>roundrobin<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">&lt;!-- 服务端方法级别 --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">dubbo:</span>service</span> <span class=\"token attr-name\">interface</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">dubbo:</span>method</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">loadbalance</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>roundrobin<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">dubbo:</span>service</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">&lt;!-- 消费端级别 --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">dubbo:</span>reference</span> <span class=\"token attr-name\">interface</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">loadbalance</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>roundrobin<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">&lt;!-- 消费端方法级别 --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">dubbo:</span>reference</span> <span class=\"token attr-name\">interface</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">dubbo:</span>method</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">loadbalance</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>roundrobin<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">dubbo:</span>reference</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>注解配置方式：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Reference</span><span class=\"token punctuation\">(</span>loadbalance <span class=\"token operator\">=</span> <span class=\"token string\">\"random\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span><span class=\"token punctuation\">(</span>loadbalance <span class=\"token operator\">=</span> <span class=\"token string\">\"random\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"集群容错\"><a class=\"anchor\" href=\"#集群容错\">#</a> 集群容错</h4>\n<p>在集群调用失败时，Dubbo 提供了多种容错方案，缺省为 failover 重试。Dubbo 主要有如下几种集群容错模式：</p>\n<ol>\n<li>Failover：失败自动切换，当出现失败，重试其它服务器。通常用于读操作，但重试会带来更长延迟。可通过  <code>retries=&quot;2&quot;</code>  来设置重试次数（不含第一次）。</li>\n<li>Failfast：快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。</li>\n<li>Failsafe：失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。</li>\n<li>Failback：失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。</li>\n<li>Forking：并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过  <code>forks=&quot;2&quot;</code>  来设置最大并行数。</li>\n<li>Broadcast：广播调用所有提供者，逐个调用，任意一台报错则报错。通常用于通知所有提供者更新缓存或日志等本地资源信息。</li>\n<li>Available：调用目前可用的实例（只调用一个），如果当前没有可用的实例，则抛出异常。通常用于不需要负载均衡的场景。</li>\n<li>Mergeable：将集群中的调用结果聚合起来返回结果，通常和 group 一起配合使用。通过分组对结果进行聚合并返回聚合后的结果，比如菜单服务，用 group 区分同一接口的多种实现，现在消费方需从每种 group 中调用一次并返回结果，对结果进行合并之后返回，这样就可以实现聚合菜单项。</li>\n<li>ZoneAware：多注册中心订阅的场景，注册中心集群间的负载均衡。</li>\n</ol>\n<p>可以通过如下方式指定集群容错模式：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 在服务端设置 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">dubbo:</span>service</span> <span class=\"token attr-name\">cluster</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>failsafe<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">&lt;!-- 或在消费端设置 --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">dubbo:</span>reference</span> <span class=\"token attr-name\">cluster</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>failsafe<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><h4 id=\"服务降级\"><a class=\"anchor\" href=\"#服务降级\">#</a> 服务降级</h4>\n<p>Dubbo 可以通过服务降级功能临时屏蔽某个出错的非关键服务，并定义降级后的返回策略。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Reference</span><span class=\"token punctuation\">(</span>mock <span class=\"token operator\">=</span> <span class=\"token string\">\"forse:return null\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><code>mock=force:return null</code>  表示消费方对该服务的方法调用都直接返回 null 值，不发起远程调用。用来屏蔽不重要服务不可用时对调用方的影响。</li>\n<li>还可以改为  <code>mock=fail:return+null</code>  表示消费方对该服务的方法调用在失败后，再返回 null 值，不抛异常。用来容忍不重要服务不稳定时对调用方的影响。</li>\n</ul>\n<h3 id=\"面试题\"><a class=\"anchor\" href=\"#面试题\">#</a> 面试题</h3>\n<div class=\"note danger no-icon\">\n<p>碍于精力，这一部分的内容并暂时做的比较简单，部分问题也暂未给出参考答案和相关提示。作答者可根据前文中的知识内容自行总结。</p>\n<p>后续看情况会进行更新。</p>\n</div>\n<ol>\n<li class=\"quiz fill\">\n<p>Dubbo 是什么？</p>\n<blockquote>\n<p>参考 <strong>Dubbo 概述</strong>部分作答即可。</p>\n<p><span class=\"mistake\">这道题往往是作为 Dubbo 面试的预热题目，简单回答即可，等待面试官的追问。但其本质需要明确，Dubbo 本质上就是一款 RPC 框架。</span></p>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>试举几个 Dubbo 支持的协议。</p>\n<blockquote>\n<p>Dobbo 支持的协议包括：dubbo、rmi、hessian、http、webservice、thrift、memcached、redis、rest。其中， <code>dubbo://</code>  是 Dobbo 默认支持的协议。</p>\n<p><span class=\"mistake\">选择几个熟知的协议作答即可。</span></p>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>Dubbo 内置了哪几种服务容器？</p>\n</li>\n<li class=\"quiz fill\">\n<p>Dubbo 中有哪几种主要角色？</p>\n</li>\n<li class=\"quiz fill\">\n<p>Dubbo 服务注册与发现流程。</p>\n</li>\n<li class=\"quiz fill\">\n<p>Dubbo 的注册中心如何实现，实现方案和推荐方案。</p>\n</li>\n<li class=\"quiz\">\n<p>Dubbo 默认采用的通信框架是<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>Mina</li>\n<li class=\"correct\">Netty</li>\n<li>Grizzly</li>\n<li>xSocket</li>\n</ul>\n<blockquote>\n<p><span class=\"mistake\">除 xSocket 外，其他三个选项均是 Dubbo 支持的通信框架。</span></p>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>Dubbo 是如何进行序列号与反序列化的？</p>\n</li>\n</ol>\n<h3 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVZFNDExcTdkWA==\">https://www.bilibili.com/video/BV1VE411q7dX</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kdWJiby5hcGFjaGUub3JnL3poL2RvY3Mv\">https://dubbo.apache.org/zh/docs/</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aGFuZ2MyMzMuZ2l0aHViLmlvLzIwMjEvMDgvMTgvRHViYm8v\">https://zhangc233.github.io/2021/08/18/Dubbo/</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vamFtZXN6aGVuZy9wLzEwMjcxMzQxLmh0bWw=\">https://www.cnblogs.com/jameszheng/p/10271341.html</span></li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "JAVA学习路线",
                "进阶篇",
                "java",
                "Spring Cloud"
            ]
        },
        {
            "id": "https://www.chinmoku.cc/computer-science/java-learning-path/3-advanced/mongodb-tutorial/",
            "url": "https://www.chinmoku.cc/computer-science/java-learning-path/3-advanced/mongodb-tutorial/",
            "title": "MongoDB 基础教程",
            "date_published": "2021-12-28T14:12:53.000Z",
            "content_html": "<div class=\"note info\">\n<p>工作中的项目用到 MongoDB 的地方还是不少的，只是前几个月都比较忙碌，一直没腾出时间好好梳理一下。这两周稍微轻松些了，就决定把 MongoDB 这块知识过一遍，也方便以后参考（实在讨厌各大博客网站的转载机制，劣质无用的文章被转载的到处都是，真正遇到问题时，想要找到一篇具有参考性的文章实在太难）。由于工作中暂无 MongoDB 集群的使用场景，因此<mark>本文暂未整理分片集群这块的知识</mark>（标记为  <code>TODO</code> ，或许日后会补充）。</p>\n</div>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/12/88c902e77a46c54c6e3bd9eaa6601ab51640271078.png\" alt=\"mongodb-logo\" /></p>\n<h3 id=\"nosql-简介\"><a class=\"anchor\" href=\"#nosql-简介\">#</a> NoSQL 简介</h3>\n<p>NoSQL，指的是非关系型的数据库。NoSQL 是 Not Only SQL 的缩写，是对不同于传统的关系型数据库的数据库管理系统的统称。NoSQL 通常用于超大规模数据的存储（如谷歌或 Facebook 每天为他们的用户收集万亿比特的数据），这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。</p>\n<h4 id=\"nosql-优缺点\"><a class=\"anchor\" href=\"#nosql-优缺点\">#</a> NoSQL 优缺点</h4>\n<p>优点：</p>\n<ul>\n<li>高可扩展性</li>\n<li>分布式计算</li>\n<li>低成本</li>\n<li>架构的灵活性，半结构化数据</li>\n<li>没有复杂的关系</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>没有标准化</li>\n<li>有限的查询功能（到目前为止）</li>\n<li>最终一致是不直观的程序</li>\n</ul>\n<h4 id=\"rdbms-vs-nosql\"><a class=\"anchor\" href=\"#rdbms-vs-nosql\">#</a> RDBMS vs NoSQL</h4>\n<p>关系型数据库（RDBMS）与非关系型数据库（NoSQL）对比：</p>\n<table>\n<thead>\n<tr>\n<th>对比项</th>\n<th>RDBMS</th>\n<th>NoSQL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>存储格式</td>\n<td>表格式，行和列</td>\n<td>文档、键值对、图结构</td>\n</tr>\n<tr>\n<td>存储规范</td>\n<td>规范性，避免重复</td>\n<td>鼓励冗余</td>\n</tr>\n<tr>\n<td>存储扩展</td>\n<td>纵向扩展 (横向扩展有限)</td>\n<td>横向扩展，分布式</td>\n</tr>\n<tr>\n<td>查询方式</td>\n<td>结构化查询</td>\n<td>非结构化查询语言 SQL</td>\n</tr>\n<tr>\n<td>事务</td>\n<td>支持事务</td>\n<td>不支持事务一致性</td>\n</tr>\n<tr>\n<td>性能</td>\n<td>读写性能差</td>\n<td>读写性能高</td>\n</tr>\n<tr>\n<td>成本</td>\n<td>成本高</td>\n<td>简单易部署，开源，成本低</td>\n</tr>\n<tr>\n<td>存储方式</td>\n<td>数据主要存储在磁盘中</td>\n<td>数据主要存储在内存中（部分可以持久化到磁盘）</td>\n</tr>\n<tr>\n<td>建表原则</td>\n<td>依靠关系模型构建关联</td>\n<td>数据模型比较简单，用 K/V 的形式来存储数据</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"mongodb-简介\"><a class=\"anchor\" href=\"#mongodb-简介\">#</a> MongoDB 简介</h3>\n<p>MongoDB 是由  <code>C++</code>  语言编写的，是一个基于分布式文件存储的开源非关系型数据库系统。在高负载的情况下，添加更多的节点，可以保证服务器性能。MongoDB 旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。MongoDB 将数据存储为一个文档，数据结构由键值（key=&gt;value）对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p>\n<p>MongoDB 使用 BSON（Binary JSON）对象来存储，与 JSON 格式的键值对（key/value）类似，字段值可以包含其他文档，数组及文档数组。支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系型数据库单表查询的绝大部分功能，而且还支持对数据建立索引。</p>\n<h4 id=\"mongodb-主要特点\"><a class=\"anchor\" href=\"#mongodb-主要特点\">#</a> MongoDB 主要特点</h4>\n<ul>\n<li>MongoDB 是一个面向文档存储的数据库，操作起来比较简单和容易。</li>\n<li>你可以在 MongoDB 记录中设置任何属性的索引 （如：FirstName=&quot;Sameer&quot;,Address=&quot;8 Gandhi Road&quot;）来实现更快的排序。</li>\n<li>你可以通过本地或者网络创建数据镜像，这使得 MongoDB 有更强的扩展性。</li>\n<li>如果负载的增加（需要更多的存储空间和更强的处理能力） ，它可以分布在计算机网络中的其他节点上这就是所谓的分片。</li>\n<li>Mongo 支持丰富的查询表达式。查询指令使用 JSON 形式的标记，可轻易查询文档中内嵌的对象及数组。</li>\n<li>MongoDB 使用 update () 命令可以实现替换完成的文档（数据）或者一些指定的数据字段 。</li>\n<li>MongoDB 中的 Map/reduce 主要是用来对数据进行批量处理和聚合操作。</li>\n<li>Map 和 Reduce。Map 函数调用 emit (key,value) 遍历集合中所有的记录，将 key 与 value 传给 Reduce 函数进行处理。</li>\n<li>Map 函数和 Reduce 函数是使用 Javascript 编写的，并可以通过 db.runCommand 或 mapreduce 命令来执行 MapReduce 操作。</li>\n<li>GridFS 是 MongoDB 中的一个内置功能，可以用于存放大量小文件。</li>\n<li>MongoDB 允许在服务端执行脚本，可以用 Javascript 编写某个函数，直接在服务端执行，也可以把函数的定义存储在服务端，下次直接调用即可。</li>\n<li>MongoDB 支持各种编程语言：RUBY，PYTHON，JAVA，C++，PHP，C# 等多种语言。</li>\n<li>MongoDB 安装简单。</li>\n</ul>\n<h4 id=\"mongodb-数据类型\"><a class=\"anchor\" href=\"#mongodb-数据类型\">#</a> MongoDB 数据类型</h4>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>String</td>\n<td>字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。</td>\n</tr>\n<tr>\n<td>Integer</td>\n<td>整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>布尔值。用于存储布尔值（真 / 假）。</td>\n</tr>\n<tr>\n<td>Double</td>\n<td>双精度浮点值。用于存储浮点值。</td>\n</tr>\n<tr>\n<td>Min/Max keys</td>\n<td>将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。</td>\n</tr>\n<tr>\n<td>Arrays</td>\n<td>用于将数组或列表或多个值存储为一个键。</td>\n</tr>\n<tr>\n<td>Timestamp</td>\n<td>时间戳。记录文档修改或添加的具体时间。</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>用于内嵌文档。</td>\n</tr>\n<tr>\n<td>Null</td>\n<td>用于创建空值。</td>\n</tr>\n<tr>\n<td>Symbol</td>\n<td>符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。</td>\n</tr>\n<tr>\n<td>Object ID</td>\n<td>对象 ID。用于创建文档的 ID。</td>\n</tr>\n<tr>\n<td>Binary Data</td>\n<td>二进制数据。用于存储二进制数据。</td>\n</tr>\n<tr>\n<td>Code</td>\n<td>代码类型。用于在文档中存储 JavaScript 代码。</td>\n</tr>\n<tr>\n<td>Regular expression</td>\n<td>正则表达式类型。用于存储正则表达式。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"mongodb-支持语言\"><a class=\"anchor\" href=\"#mongodb-支持语言\">#</a> MongoDB 支持语言</h4>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/12/561f02944ca42fc819c495e03c2b43bc1640271138.png\" alt=\"mongodb_lang\" /></p>\n<h3 id=\"下载与安装\"><a class=\"anchor\" href=\"#下载与安装\">#</a> 下载与安装</h3>\n<h4 id=\"windows-环境\"><a class=\"anchor\" href=\"#windows-环境\">#</a> Windows 环境</h4>\n<ul>\n<li>\n<p>官网地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubW9uZ29kYi5jb20=\">https://www.mongodb.com</span></p>\n</li>\n<li>\n<p>下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vdHJ5L2Rvd25sb2Fk\">https://www.mongodb.com/try/download</span></p>\n</li>\n</ul>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/12/1dc378837afe9e2bbf8e8f1b3d240c171640271166.png\" alt=\"mongo_download\" /></p>\n<p>双击可执行文件  <code>.msi</code>  ，进行安装（基本上下一步即可）。</p>\n<p>推荐选择自定义安装：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/12/40520416960e56e4da5556ef7a688b271640273049.png\" alt=\"mongo_install\" /></p>\n<p>推荐取消默认的  <code>Install MongoDB Compass</code>  安装。</p>\n<p>MongoDB 配置：</p>\n<ol>\n<li>\n<p>环境变量</p>\n<p>编辑系统变量  <code>Path</code>  并添加 MongoDB 的 bin 目录位置。例如： <code>A:\\MongoDB\\Server\\5.0\\bin</code></p>\n</li>\n<li>\n<p>创建数据库文件的存放位置</p>\n<p>创建文件夹  <code>[MongoDB]\\data\\db</code>  。</p>\n<blockquote>\n<p>这是因为 MongoDB 服务在启动之前必须创建数据库文件的存放文件夹，否则命令不会自动创建，且服务无法启动成功。</p>\n</blockquote>\n</li>\n<li>\n<p>启动 MongoDB 服务</p>\n<p><code>cmd</code>  命令进入安装目录  <code>[MongoDB]\\data\\bin</code>  位置，执行如下命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>A:<span class=\"token punctuation\">\\</span>MongoDB<span class=\"token punctuation\">\\</span>Server<span class=\"token punctuation\">\\</span><span class=\"token number\">5.0</span><span class=\"token punctuation\">\\</span>bin<span class=\"token operator\">></span> mongod --dbpath A:<span class=\"token punctuation\">\\</span>MongoDB<span class=\"token punctuation\">\\</span>Server<span class=\"token punctuation\">\\</span><span class=\"token number\">5.0</span><span class=\"token punctuation\">\\</span>data<span class=\"token punctuation\">\\</span>db</pre></td></tr></table></figure><p>浏览器访问：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMToyNzAxNw==\">http://127.0.0.1:27017</span>，如果出现如下信息，则表示配置成功且服务已启动：</p>\n<blockquote>\n<p>It looks like you are trying to access MongoDB over HTTP on the native driver port.</p>\n</blockquote>\n</li>\n<li>\n<p>配置本地 MongoDB 服务</p>\n<p>创建文件夹  <code>[MongoDB]\\data\\log</code>  ，用于存放日志文件。</p>\n<p>创建配置文件  <code>[MongoDB]\\mongo.config</code> ：</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token attr-name\">dbpath</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">A:\\MongoDB\\Server\\5.0\\data\\db</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token attr-name\">logpath</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">A:\\MongoDB\\Server\\5.0\\data\\log\\mongo.log</span></pre></td></tr></table></figure><p>使用管理员角色执行如下命令：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 停止已启动的 MongoDB 服务</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>net stop MongoDB</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 移除 MongoDB 服务</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sc delete MongoDB</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 安装 MongoDB 服务</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>mongod -dbpath <span class=\"token string\">\"A:\\MongoDB\\Server<span class=\"token entity\" title=\"\\5\">\\5</span>.0\\data\\db\"</span> -logpath <span class=\"token string\">\"A:\\MongoDB\\Server<span class=\"token entity\" title=\"\\5\">\\5</span>.0\\data\\log\\mongo.log\"</span> -install -serviceName <span class=\"token string\">\"MongoDB\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 启动 MongoDB 服务</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>net start MongoDB</pre></td></tr></table></figure><p>浏览器访问：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMToyNzAxNw==\">http://127.0.0.1:27017</span></p>\n<p>客户端连接：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>A:<span class=\"token punctuation\">\\</span>MongoDB<span class=\"token punctuation\">\\</span>Server<span class=\"token punctuation\">\\</span><span class=\"token number\">5.0</span><span class=\"token punctuation\">\\</span>bin<span class=\"token operator\">></span> mongo.exe</pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"linux-环境\"><a class=\"anchor\" href=\"#linux-环境\">#</a> Linux 环境</h4>\n<ol>\n<li>\n<p>卸载删除</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 停止服务</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> mongo</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">kill</span> -9 xxx</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>net stop mongodb</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sudo</span> yum erase <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">rpm</span> -qa <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> mongodb-org<span class=\"token variable\">)</span></span> <span class=\"token comment\">#卸载 MongoDB</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">rm</span> -r /var/log/mongodb <span class=\"token comment\">#删除日志文件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">rm</span> -r /var/lib/mongo  <span class=\"token comment\">#删除数据文件</span></pre></td></tr></table></figure></li>\n<li>\n<p>安装</p>\n<p>配置 yum 源：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /etc/yum.repos.d</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">vi</span> mongodb-org-5.0.repo</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 版本选择可前往 https://repo.mongodb.org 进行查看。</span></pre></td></tr></table></figure><p>编辑如下内容（版本号视个人需要而定）：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>mongodb-org-5.0<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span>MongoDB Repository</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">baseurl</span><span class=\"token operator\">=</span>https://repo.mongodb.org/yum/redhat/7Server/mongodb-org/5.0/x86_64/</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">gpgcheck</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">enabled</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token assign-left variable\">gpgkey</span><span class=\"token operator\">=</span>https://www.mongodb.org/static/pgp/server-5.0.asc</pre></td></tr></table></figure><blockquote>\n<p>提示：具体版本，可前往源地址进行查看选择：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZXBvLm1vbmdvZGIub3Jn\">https://repo.mongodb.org</span></p>\n</blockquote>\n<p>执行安装：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> -y mongodb-org</pre></td></tr></table></figure><p>修改配置：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> /etc/mongod.conf</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># network interfaces</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>net:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  port: <span class=\"token number\">27017</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  bindIp: <span class=\"token number\">0.0</span>.0.0  <span class=\"token comment\"># Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.</span></pre></td></tr></table></figure><p>基本命令：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl start mongod.service　　<span class=\"token comment\"># 启动</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>systemctl status mongod.service　 <span class=\"token comment\"># 查看状态</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>systemctl stop mongod.service 　　<span class=\"token comment\"># 停止</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>systemctl <span class=\"token builtin class-name\">enable</span> mongod.service 　<span class=\"token comment\"># 自启</span></pre></td></tr></table></figure><p>测试连接：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mongo <span class=\"token number\">127.0</span>.0.1:27017 <span class=\"token comment\"># 如果是默认 IP 端口，可以不指定</span></pre></td></tr></table></figure><p>权限控制：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>use admin <span class=\"token comment\"># 其他数据库也类似</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>switched to db admin</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>db.createUser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> user:<span class=\"token string\">\"admin\"</span>, pwd:<span class=\"token string\">\"123456\"</span>, roles:<span class=\"token punctuation\">[</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Successfully added user: <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"user\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"admin\"</span>, <span class=\"token string\">\"roles\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"root\"</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>db.auth<span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span>, <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin class-name\">exit</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>bye</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>mongo -u root -p <span class=\"token number\">123456</span> <span class=\"token comment\"># 账号登录</span></pre></td></tr></table></figure><p>启用身份验证：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vi</span> /etc/mongod.conf</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>security:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     authorization: enabled   <span class=\"token comment\"># disable or enabled</span></pre></td></tr></table></figure></li>\n<li>\n<p>问题排查</p>\n<ul>\n<li>\n<p>MongoDB 服务启动失败，可以使用  <code>journalctl -xe</code>  命令跟踪更加详细的信息，通常是由于以下几种原因导致的：</p>\n<ol>\n<li>mongod.conf 配置内容或语法错误。</li>\n<li>日志访问权限不足。</li>\n<li>锁定</li>\n</ol>\n</li>\n<li>\n<p>如果服务器本地可以访问 MongoDB，但远程访问失败，请检查：</p>\n<ol>\n<li>检查配置文件  <code>/etc/mongod.conf</code>  IP 是否放开、是否允许远程访问，以及访问账号密钥信息。</li>\n<li>云服务器需注意配置安全组规则。</li>\n<li>如已开启防火墙，需添放开对应端口。</li>\n</ol>\n</li>\n<li>\n<p>命令提示</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看与修改</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">vi</span> /etc/mongod.conf <span class=\"token comment\"># MongoDB 配置文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">cat</span> /usr/lib/systemd/system/mongod.service <span class=\"token comment\"># MongoDB 服务</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 权限或 mongodb 锁文件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">chown</span> -Rc mongodb. /var/log/mongodb</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">chown</span> -Rc mongodb. /var/lib/mongo</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">rm</span> -rf /var/lib/mongo/mongod.lock</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">rm</span> -rf /tmp/mongodb-27017.sock</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 防火墙</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>firewall-cmd --state <span class=\"token comment\"># 查看防火墙状态</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>systemctl stop firewalld.service <span class=\"token comment\"># 关闭防火墙</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>systemctl start firewalld.service <span class=\"token comment\"># 开启防火墙</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>firewall-cmd --add-port<span class=\"token operator\">=</span><span class=\"token number\">27017</span>/tcp --permanent <span class=\"token comment\"># 防火墙放开指定端口（永久）</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>firewall-cmd --zone<span class=\"token operator\">=</span>public --list-ports <span class=\"token comment\"># 查看防火墙已开放端口</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>firewall-cmd --reload <span class=\"token comment\"># 防火墙配置重新载入</span></pre></td></tr></table></figure><blockquote>\n<p>配置参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1vbmdvZGIuY29tL21hbnVhbC9yZWZlcmVuY2UvY29uZmlndXJhdGlvbi1vcHRpb25z\">https://docs.mongodb.com/manual/reference/configuration-options</span></p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"mongodb-gui\"><a class=\"anchor\" href=\"#mongodb-gui\">#</a> MongoDB GUI</h4>\n<ul>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yb2JvbW9uZ28ub3JnL2Rvd25sb2Fk\">Robo 3T / Studio 3T</span></p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/12/76413eb9f3f06806e7ebad3a7605d7dc1640331051.png\" alt=\"Robo 3T / Studio 3T\" /></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubmF2aWNhdC5jb20=\">Navicat</span></p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/12/67a7e58152813db91e164a9718259ceb1640331382.png\" alt=\"image-20211224153611400\" /></p>\n</li>\n</ul>\n<h3 id=\"术语与概念\"><a class=\"anchor\" href=\"#术语与概念\">#</a> 术语与概念</h3>\n<p>SQL 数据库与 MongoDB 数据库术语及概念的对比：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">SQL 术语 / 概念</th>\n<th style=\"text-align:left\">MongoDB 术语 / 概念</th>\n<th style=\"text-align:left\">解释 / 说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">database</td>\n<td style=\"text-align:left\">database</td>\n<td style=\"text-align:left\">数据库</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">table</td>\n<td style=\"text-align:left\">collection</td>\n<td style=\"text-align:left\">数据库表 / 集合</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">row</td>\n<td style=\"text-align:left\">document</td>\n<td style=\"text-align:left\">数据记录行 / 文档</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">column</td>\n<td style=\"text-align:left\">field</td>\n<td style=\"text-align:left\">数据字段 / 域</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">index</td>\n<td style=\"text-align:left\">index</td>\n<td style=\"text-align:left\">索引</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">table joins</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">表连接，MongoDB 不支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">primary key</td>\n<td style=\"text-align:left\">primary key</td>\n<td style=\"text-align:left\">主键，MongoDB 自动将_id 字段设置为主键</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"数据库\"><a class=\"anchor\" href=\"#数据库\">#</a> 数据库</h4>\n<p>一个 mongodb 中可以建立多个数据库。MongoDB 的默认数据库为  <code>db</code>  ，该数据库存储在 data 目录中，这一点我们在安装配置时已有提及。</p>\n<p>MongoDB 的单个实例可以容纳多个独立的数据库，每一个都有自己的集合和权限，不同的数据库也放置在不同的文件中。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> show dbs <span class=\"token comment\"># 显示所有数据列表</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>admin   <span class=\"token number\">0</span>.000GB</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>config  <span class=\"token number\">0</span>.000GB</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">local</span>   <span class=\"token number\">0</span>.000GB</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">></span> db <span class=\"token comment\"># 显示当前数据库对象或集合</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">test</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">></span> use <span class=\"token builtin class-name\">local</span> <span class=\"token comment\"># 切换到指定数据库</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>switched to db <span class=\"token builtin class-name\">local</span></pre></td></tr></table></figure><p>MongoDB 默认有三个数据库：</p>\n<ul>\n<li>admin：从权限的角度来看，这是 root 数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。</li>\n<li>local：这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合</li>\n<li>config： 当 Mongo 用于分片设置时，config 数据库在内部使用，用于保存分片的相关信息。</li>\n</ul>\n<h4 id=\"文档\"><a class=\"anchor\" href=\"#文档\">#</a> 文档</h4>\n<p>文档是一组键值对（即 BSON），示例：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"site\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"www.chinmoku.cc\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Chinmoku\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>RDBMS 与 MongoDB 术语对比：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">RDBMS</th>\n<th style=\"text-align:left\">MongoDB</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">数据库</td>\n<td style=\"text-align:left\">数据库</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">表格</td>\n<td style=\"text-align:left\">集合</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">行</td>\n<td style=\"text-align:left\">文档</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">列</td>\n<td style=\"text-align:left\">字段</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">表联合</td>\n<td style=\"text-align:left\">嵌入文档</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">主键</td>\n<td style=\"text-align:left\">主键（MongoDB 提供了 key 为 _id）</td>\n</tr>\n</tbody>\n</table>\n<p>注意：</p>\n<ol>\n<li>文档中的键值对是有序的。</li>\n<li>文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型（甚至可以是整个嵌入的文档)。</li>\n<li>MongoDB 区分类型和大小写。</li>\n<li>MongoDB 的文档不能有重复的键。</li>\n<li>文档的键是字符串，除少数例外情况，键可以使用任意 UTF-8 字符。</li>\n</ol>\n<p>文档键命名规范：</p>\n<ul>\n<li>键不能含有空字符。这个字符用来表示键的结尾。</li>\n<li><code>.</code>  和  <code>$</code>  有特别的意义，只有在特定环境下才能使用。</li>\n<li>以下划线开头的键是保留的（不是严格要求的）。</li>\n</ul>\n<h4 id=\"集合\"><a class=\"anchor\" href=\"#集合\">#</a> 集合</h4>\n<p>集合就是 MongoDB 文档组，类似于 RDBMS 中的表。集合存在于数据库中，集合没有固定的结构。</p>\n<p>集合的合法性：</p>\n<ul>\n<li>集合名不能是空字符串。</li>\n<li>集合名不能含有  <code>\\0</code>  空字符，这个字符表示集合名的结尾。</li>\n<li>集合名不能以  <code>system.</code>  开头，这是为系统集合保留的前缀。</li>\n<li>用户创建的集合名字不能含有保留字符。有些驱动程序的确支持在集合名里面包含，这是因为某些系统生成的集合中包含该字符。</li>\n</ul>\n<h5 id=\"capped-collections\"><a class=\"anchor\" href=\"#capped-collections\">#</a> Capped Collections</h5>\n<p>Capped collections 就是固定大小的 collection，它是高性能自动的维护对象的插入顺序。它非常适合类似记录日志的功能和标准的 collection 不同，你必须要显式的创建一个 capped collection，指定一个 collection 的大小，单位是字节。collection 的数据存储空间值提前分配的。</p>\n<p>Capped collections 可以按照文档的插入顺序保存到集合中，而且这些文档在磁盘上存放位置也是按照插入顺序来保存的，所以当我们更新 Capped collections 中文档的时候，更新后的文档不可以超过之前文档的大小，这样话就可以确保所有文档在磁盘上的位置一直保持不变。</p>\n<p>由于 Capped collection 是按照文档的插入顺序而不是使用索引确定插入位置，这样的话可以提高增添数据的效率。MongoDB 的操作日志文件 <span class=\"exturl\" data-url=\"aHR0cDovL29wbG9nLnJz\">oplog.rs</span> 就是利用 Capped Collection 来实现的。</p>\n<p>要注意的是指定的存储大小包含了数据库的头信息。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db<span class=\"token punctuation\">.</span><span class=\"token function\">createCollection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mycoll\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>capped<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">:</span><span class=\"token number\">100000</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"元数据\"><a class=\"anchor\" href=\"#元数据\">#</a> 元数据</h4>\n<p>在 MongoDB 数据库中命名空间  <code>&lt;dbname&gt;.system.*</code>  是包含多种系统信息的特殊集合（Collection），如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">集合命名空间</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">dbname.system.namespaces</td>\n<td style=\"text-align:left\">列出所有名字空间。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dbname.system.indexes</td>\n<td style=\"text-align:left\">列出所有索引。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dbname.system.profile</td>\n<td style=\"text-align:left\">包含数据库概要（profile）信息。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dbname.system.users</td>\n<td style=\"text-align:left\">列出所有可访问数据库的用户。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dbname.local.sources</td>\n<td style=\"text-align:left\">包含复制对端（slave）的服务器信息和状态。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"objectid\"><a class=\"anchor\" href=\"#objectid\">#</a> ObjectId</h4>\n<p>ObjectId 类似唯一主键，可以很快的去生成和排序，它包含 12 个字节，其含义如下：</p>\n<ul>\n<li>前 4 个字节表示创建 unix 时间戳，格林尼治时间 UTC 时间，比北京时间晚了 8 个小时。</li>\n<li>接下来的 3 个字节是机器标识码。</li>\n<li>紧接的两个字节由进程 id 组成 PID。</li>\n<li>最后三个字节是随机数。</li>\n</ul>\n<p>使用方式：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> newObject <span class=\"token operator\">=</span> <span class=\"token function\">ObjectId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>newObject<span class=\"token punctuation\">.</span><span class=\"token function\">getTimestamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>newObject<span class=\"token punctuation\">.</span>str</pre></td></tr></table></figure><h4 id=\"时间与字符串\"><a class=\"anchor\" href=\"#时间与字符串\">#</a> 时间与字符串</h4>\n<ol>\n<li>\n<p>BSON 字符串</p>\n<p>BSON 字符串都是 UTF-8 编码。</p>\n</li>\n<li>\n<p>时间戳</p>\n<p>BSON 有一个特殊的时间戳类型用于 MongoDB 内部使用，与普通的日期类型不相关。</p>\n<p>在单个 mongod 实例中，时间戳值通常是唯一的。</p>\n<p>在复制集中，oplog 有一个 ts 字段。这个字段中的值使用 BSON 时间戳表示了操作时间。</p>\n<blockquote>\n<p>BSON 时间戳类型主要用于 MongoDB 内部使用。</p>\n</blockquote>\n</li>\n<li>\n<p>日期</p>\n<p>表示当前距离 Unix 新纪元（1970 年 1 月 1 日）的毫秒数。日期类型是有符号的，负数表示 1970 年之前的日期，创建及使用方式如下：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> mydate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typeof</span> mydate</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mydate<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这样创建的时间是日期类型，可以使用 JS 中的 Date 类型的方法。</p>\n</li>\n</ol>\n<h3 id=\"基本操作\"><a class=\"anchor\" href=\"#基本操作\">#</a> 基本操作</h3>\n<h4 id=\"数据库操作\"><a class=\"anchor\" href=\"#数据库操作\">#</a> 数据库操作</h4>\n<ol>\n<li>\n<p>创建连接</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 连接实例：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mongodb://root:123456@127.0.0.1/test</pre></td></tr></table></figure><blockquote>\n<p>更多 MongoDB 连接配置，参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9tb25nb2RiL21vbmdvZGItY29ubmVjdGlvbnMuaHRtbA==\">https://www.runoob.com/mongodb/mongodb-connections.html</span></p>\n</blockquote>\n</li>\n<li>\n<p>创建或切换数据库</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 如果不存在，则创建，如果已存在，则切换</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>use mytest</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 查看所有数据库（当创建的数据库没有数据时，不会显示）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>show dbs</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 插入一条数据</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>db.col1.insert<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Chinmoku\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 再次查询数据库列表</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>show dbs</pre></td></tr></table></figure></li>\n<li>\n<p>删除数据库</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>use mytest</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>db.dropDatabase<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"集合与文档操作\"><a class=\"anchor\" href=\"#集合与文档操作\">#</a> 集合与文档操作</h4>\n<ol>\n<li>\n<p>创建集合</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 创建集合</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>db.createCollection<span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 查看所有集合</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>show collections</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 查看所有集合（方式二）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>show tables</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 创建固定集合</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>db.createCollection<span class=\"token punctuation\">(</span><span class=\"token string\">\"col2\"</span>,<span class=\"token punctuation\">&#123;</span>capped:true,autoIndexId:true,size:6142800,max:10000<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 集合大小：6142800B，最大文档个数：10000</span></pre></td></tr></table></figure><blockquote>\n<p>在 MongoDB 中，其实不需要显式创建集合，在插入文档时，MongoDB 就会自动创建集合。</p>\n</blockquote>\n</li>\n<li>\n<p>删除集合</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># db.collection.drop ()，返回布尔值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>db.col2.drop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>文档基本操作</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 插入文档</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>db.col.insert<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>title: <span class=\"token string\">'Telephone Book'</span>, user: <span class=\"token string\">'Jason'</span>,mobile: <span class=\"token string\">'138****2573'</span>,site: <span class=\"token string\">'https://www.jason.com'</span>,label: <span class=\"token punctuation\">[</span><span class=\"token string\">'classmate'</span>, <span class=\"token string\">'friend'</span><span class=\"token punctuation\">]</span>,description: <span class=\"token string\">''</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>db.col.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 查看文档内容</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 也可以将数据定义为变量，然后插入该变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">jason_document</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>title: <span class=\"token string\">'Telephone Book'</span>, user: <span class=\"token string\">'Jason'</span>,mobile: <span class=\"token string\">'138****2573'</span>,site: <span class=\"token string\">'https://www.jason.com'</span>,label: <span class=\"token punctuation\">[</span><span class=\"token string\">'classmate'</span>, <span class=\"token string\">'friend'</span><span class=\"token punctuation\">]</span>,description: <span class=\"token string\">''</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>db.col.insert<span class=\"token punctuation\">(</span>jason_document<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># v3.2 版本之后新增了 insertOne 和 insertMany 方法</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>db.col2.insertOne<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Lily\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>db.col2.insertMany<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Charles\"</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"James\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>save 方法也可以创建文档。</p>\n</blockquote>\n</li>\n<li>\n<p>更新文档</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 参数（1. 筛选条件，2. 更新内容，3.***，4.***）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>db.col.update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'title'</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">'Telephone Book'</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$set</span>:<span class=\"token punctuation\">&#123;</span><span class=\"token string\">'title'</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">'Telephone Book: Jason'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 查询标题为 Telephone Book 的数据，并更新标题</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 同时更新多条文档内容</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>db.col.update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'user'</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">'Jason'</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$set</span>:<span class=\"token punctuation\">&#123;</span><span class=\"token string\">'title'</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">'Telephone Book: Jason'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span>multi:true<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># save（如果指定了 _id 字段，则更新对应文档，如果未指定，则新增文档）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>db.col.save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"61c9ad7bba2a467651726dba\"</span><span class=\"token punctuation\">)</span>,title: <span class=\"token string\">'Telephone Book: Bill'</span>, user: <span class=\"token string\">'Bill'</span>,mobile: <span class=\"token string\">'187****0966'</span>,site: <span class=\"token string\">'https://www.bill.com'</span>,label: <span class=\"token punctuation\">[</span><span class=\"token string\">'classmate'</span><span class=\"token punctuation\">]</span>,description: <span class=\"token string\">''</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>db.col.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 查询并格式化显示</span></pre></td></tr></table></figure><blockquote>\n<p>使用 save 方法更新文档时，文档内所有字段都会被更新，即 save 中未指定字段会被移除，save 指定但数据库不存在字段会被新增。</p>\n</blockquote>\n</li>\n<li>\n<p>删除文档</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 删除指定数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>db.col.remove<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'user'</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">'Jason'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 删除所有</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>db.col.remove<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>查询文档</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查询所有</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>db.col.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 查询并返回指定的键</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>db.col.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"title\"</span>:1,_id:0<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>db.col.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 查询并格式化显示</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>db.col.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.pretty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 查询一条</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>db.col.findOne<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>比较查询：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作</th>\n<th style=\"text-align:left\">格式</th>\n<th style=\"text-align:left\">示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">等于</td>\n<td style=\"text-align:left\"><code>&#123;&lt;key&gt;:&lt;value&gt;&#125;</code></td>\n<td style=\"text-align:left\">db.col.find({&quot;title&quot;:&quot;John&quot;})</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">小于</td>\n<td style=\"text-align:left\"><code>&#123;&lt;key&gt;:&#123;$lt:&lt;value&gt;&#125;&#125;</code></td>\n<td style=\"text-align:left\">db.col.find({&quot;age&quot;:{$lt:18}})</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">小于等于</td>\n<td style=\"text-align:left\"><code>&#123;&lt;key&gt;:&#123;$lte:&lt;value&gt;&#125;&#125;</code></td>\n<td style=\"text-align:left\">db.col.find({&quot;age&quot;:{$lte:18}})</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">大于</td>\n<td style=\"text-align:left\"><code>&#123;&lt;key&gt;:&#123;$gt:&lt;value&gt;&#125;&#125;</code></td>\n<td style=\"text-align:left\">db.col.find({&quot;age&quot;:{$gt:18}})</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">大于等于</td>\n<td style=\"text-align:left\"><code>&#123;&lt;key&gt;:&#123;$gte:&lt;value&gt;&#125;&#125;</code></td>\n<td style=\"text-align:left\">db.col.find({&quot;age&quot;:{$gte:18}})</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">不等于</td>\n<td style=\"text-align:left\"><code>&#123;&lt;key&gt;:&#123;$ne:&lt;value&gt;&#125;&#125;</code></td>\n<td style=\"text-align:left\">db.col.find({&quot;age&quot;:{$ne:18}})</td>\n</tr>\n</tbody>\n</table>\n<p>这些比较查询语句，类似于关系型数据库中的  <code>select * from col where age &gt; 18;</code> 。</p>\n<p>AND 和 OR：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># AND</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>db.col.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>key1:value1, key2:value2<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># OR</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>db.col.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$or</span>:<span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>key1: value1<span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span>key2:value2<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># AND 和 OR 联合使用</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>db.col.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"site\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"https://www.jason.com\"</span>, <span class=\"token variable\">$or</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"user\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Jason\"</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"age\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$gt</span>:18<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"进阶操作\"><a class=\"anchor\" href=\"#进阶操作\">#</a> 进阶操作</h3>\n<h4 id=\"type\"><a class=\"anchor\" href=\"#type\">#</a> $type</h4>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/12/150a87c9c43d3543ba943f30492c02af1640610969.png\" alt=\"image-20211227211354948\" /></p>\n<p>使用示例：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查询 title 类型为 string 的数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>db.col.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"title\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$type</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 等价于</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>db.col.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"title\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$type</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"limit-和-skip\"><a class=\"anchor\" href=\"#limit-和-skip\">#</a> limit 和 skip</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查询 2 条记录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>db.col.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"user\"</span>:1,_id:0<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>.limit<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 跳过 1 条数，并查询其后续的 2 条记录</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>db.col.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"user\"</span>:1,_id:0<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>.limit<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>.skip<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"排序\"><a class=\"anchor\" href=\"#排序\">#</a> 排序</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 排序使用 1 和 - 1 来分别表示正序和倒叙</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>db.col.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"user\"</span>:1,_id:0<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>.sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"age\"</span>:-1<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"索引\"><a class=\"anchor\" href=\"#索引\">#</a> 索引</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 根据键名 user 按顺序创建索引，1 为升序，-1 为降序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>db.col.createIndex<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"user\"</span>:-1<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 复合索引</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>db.col.createIndex<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"title\"</span>:1,<span class=\"token string\">\"description\"</span>:-1<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 查看集合索引</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>db.col.getIndexes<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 查看集合索引大小</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>db.col.totalIndexSize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 删除所有集合索引</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>db.col.dropIndexes<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 删除集合指定索引</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>db.col.dropIndex<span class=\"token punctuation\">(</span><span class=\"token string\">\"myindex\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>创建索引还可以接受许多参数，如索引名称、是否唯一、设置过期时间等，详情可自行参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1vbmdvZGIuY29tL21hbnVhbC9yZWZlcmVuY2UvY29tbWFuZC9jcmVhdGVJbmRleGVz\">官方文档</span>。</p>\n</blockquote>\n<h4 id=\"聚合\"><a class=\"anchor\" href=\"#聚合\">#</a> 聚合</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db.mypost.aggregate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$group</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span>_id <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"<span class=\"token variable\">$author</span>\"</span>, post_count <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$sum</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 类似于如下 SQL</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">select</span> author, count<span class=\"token punctuation\">(</span>*<span class=\"token punctuation\">)</span> as post_count from mypost group by author</pre></td></tr></table></figure><ol>\n<li>\n<p>管道：</p>\n<p>在此处的示例中， <code>$group</code>  是 MongoDB 管道的一种，MongoDB 的聚合管道将 MongoDB 文档在一个管道处理完毕后将结果传递给下一个管道处理，并且管道操作是可以重复的。</p>\n<p>常用管道操作符：</p>\n<ul>\n<li>$project：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>t</mi><mi>c</mi><mi>h</mi><mtext>：用于过滤数据，只输出符合条件的文档。</mtext></mrow><annotation encoding=\"application/x-tex\">match：用于过滤数据，只输出符合条件的文档。</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">h</span><span class=\"mord cjk_fallback\">：</span><span class=\"mord cjk_fallback\">用</span><span class=\"mord cjk_fallback\">于</span><span class=\"mord cjk_fallback\">过</span><span class=\"mord cjk_fallback\">滤</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">据</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">只</span><span class=\"mord cjk_fallback\">输</span><span class=\"mord cjk_fallback\">出</span><span class=\"mord cjk_fallback\">符</span><span class=\"mord cjk_fallback\">合</span><span class=\"mord cjk_fallback\">条</span><span class=\"mord cjk_fallback\">件</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">文</span><span class=\"mord cjk_fallback\">档</span><span class=\"mord cjk_fallback\">。</span></span></span></span>match 使用 MongoDB 的标准查询操作。</li>\n<li>$limit：用来限制 MongoDB 聚合管道返回的文档数。</li>\n<li>$skip：在聚合管道中跳过指定数量的文档，并返回余下的文档。</li>\n<li>$unwind：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。</li>\n<li>$group：将集合中的文档分组，可用于统计结果。</li>\n<li>$sort：将输入文档排序后输出。</li>\n<li>$geoNear：输出接近某一地理位置的有序文档。</li>\n</ul>\n</li>\n<li>\n<p>表达式：</p>\n<p>此处示例中的  <code>$sum</code>  即是表示聚合操作的表达式。</p>\n<p>常用表达式：</p>\n<ul>\n<li>$sum：计算总和。</li>\n<li>$avg：计算平均值</li>\n<li>$min：获取集合中所有文档对应值得最小值。</li>\n<li>$max：获取集合中所有文档对应值得最大值。</li>\n<li>$push：将值加入一个数组中，不会判断是否有重复的值。</li>\n<li>$addToSet：将值加入一个数组中，会判断是否有重复的值，若相同的值在数组中已经存在了，则不加入。</li>\n<li>$first：根据资源文档的排序获取第一个文档数据。</li>\n<li>$last：根据资源文档的排序获取最后一个文档数据</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"复制副本集\"><a class=\"anchor\" href=\"#复制副本集\">#</a> 复制（副本集）</h4>\n<p>MongoDB 复制是将数据同步在多个服务器的过程。复制提供了数据的冗余备份，并在多个服务器上存储数据副本，提高了数据的可用性， 并可以保证数据的安全性。复制还允许您从硬件故障和服务中断中恢复数据。</p>\n<p><strong>MongoDB 复制原理：</strong></p>\n<p>MongoDB 复制至少需要两个节点，其中一个是主节点，负责处理客户端请求，其余的都是从节点，负责复制主节点上的数据。</p>\n<p>主节点记录在其上的所有操作 oplog，从节点定期轮询主节点获取这些操作，然后对自己的数据副本执行这些操作，从而保证从节点的数据与主节点一致。</p>\n<p>MongoDB 复制结构图如下所示：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/12/3ff8e97233badeaa61c8cc333404a57b1640616478.png\" alt=\"image-20211227222410409\" /></p>\n<p>副本集具有如下特征：</p>\n<ul>\n<li>N 个节点的集群</li>\n<li>任何节点可作为主节点</li>\n<li>所有写入操作都在主节点上</li>\n<li>自动故障转移</li>\n<li>自动恢复</li>\n</ul>\n<p><strong>副本集设置：</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 启动一个名为 rs0 的 MongoDB 实例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mongod --port <span class=\"token number\">27017</span> --dbpath <span class=\"token string\">\"A:\\MongoDB\\Server<span class=\"token entity\" title=\"\\5\">\\5</span>.0\\data\"</span> --replSet rs0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 客户端连接并启动一个新的副本集</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>rs.initiate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 查看副本集配置</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>rs.conf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 查看副本集状态</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>rs.status<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>添加副本集成员：</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 副本集添加成员</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>rs.add<span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.0.101:27017\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 判断当前运行的 Mongo 服务是否为主节点</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>db.isMaster<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>MongoDB 中你只能通过主节点将 Mongo 服务添加到副本集中，并且，MongoDB 的副本集与我们常见的主从有所不同，主从在主机宕机后所有服务将停止，而副本集在主机宕机后，副本会接管主节点成为主节点。</p>\n</blockquote>\n<h4 id=\"分片\"><a class=\"anchor\" href=\"#分片\">#</a> 分片</h4>\n<p>MongoDB 中存在一种分片技术，它可以通过在多台机器上分割数据的方式，来使得数据库系统能存储和处理更多的数据或提高读写吞吐量。</p>\n<p>分片结构集群部署图例：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/12/d2d8f131c1e59a0a634c2953b12c1b891640618022.png\" alt=\"image-20211227231337940\" /></p>\n<p>组件说明：</p>\n<ul>\n<li>Shard：用于存储实际的数据块，实际生产环境中一个 shard server 角色可由几台机器组个一个 replica set 承担，防止主机单点故障。</li>\n<li>Config Servers：mongod 实例，存储了整个 ClusterMetadata，其中包括 chunk 信息。</li>\n<li>Query Routers：前端路由，客户端由此接入，且让整个集群看上去像单一数据库，前端应用可以透明使用。</li>\n</ul>\n<p><span class=\"label danger\">❗️TODO</span> 未完待补充</p>\n<h4 id=\"备份与恢复\"><a class=\"anchor\" href=\"#备份与恢复\">#</a> 备份与恢复</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 数据备份，语法：mongodump -h &lt;hostname>&lt;:port> -d dbname -o &lt;path></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 不指定参数，则连接本地 27017 端口服务，默认备份到目录 [mongodb]/bin/dump/ 中</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mongodump</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 备份恢复，语法：mongorestore -h &lt;hostname>&lt;:port> -d dbname &lt;path></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 不指定参数，则连接本地 27017 端口服务，默认从目录 [mongodb]/bin/dump/ 中获取备份文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>mongorestore</pre></td></tr></table></figure><h4 id=\"监控\"><a class=\"anchor\" href=\"#监控\">#</a> 监控</h4>\n<p><code>mongostat</code>  是 MongoDB 自带的状态检测工具，在命令行下使用。它会间隔固定时间获取 MongoDB 的当前运行状态，并输出。</p>\n<p>使用方式：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mongostat <span class=\"token comment\"># 无密码监控默认数据库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mongostat -uroot -p123456 --authenticationDatabase<span class=\"token operator\">=</span>admin</pre></td></tr></table></figure><blockquote>\n<p>如提示 command serverStatus requires authentication，那么多半是因为 MongoDB 需要登录权限，详情可通过命令  <code>mongostat --help</code>  查看。</p>\n</blockquote>\n<p><code>mongotop</code>  也是 MongoDB 下的一个内置工具，mongotop 提供了一个方法，用来跟踪一个 MongoDB 的实例，查看哪些大量的时间花费在读取和写入数据。 mongotop 提供每个集合的水平的统计数据。默认情况下，mongotop 返回值的每一秒。</p>\n<p>使用方式：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mongotop <span class=\"token comment\"># 无密码监控默认数据库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mongotop -uroot -p123456 --authenticationDatabase<span class=\"token operator\">=</span>admin</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mongotop -uroot -p123456 --authenticationDatabase<span class=\"token operator\">=</span>admin --lock <span class=\"token comment\"># 监控各个数据库锁使用情况</span></pre></td></tr></table></figure><h3 id=\"api\"><a class=\"anchor\" href=\"#api\">#</a> API</h3>\n<h4 id=\"java-api\"><a class=\"anchor\" href=\"#java-api\">#</a> Java API</h4>\n<blockquote>\n<p>此处 MongoDB Java API 以 SpringBoot 框架作为示例。</p>\n</blockquote>\n<p>准备工作：</p>\n<ol>\n<li>\n<p>使用 SpringInitializer 创建一个测试项目。</p>\n</li>\n<li>\n<p>配置依赖包。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-data-mongodb<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>启动文件配置：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">mongodb</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"mongodb://localhost:27017/test\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\"># 如未设置则不需要指定用户名及密码</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token comment\"># username:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\"># password:</span></pre></td></tr></table></figure></li>\n<li>\n<p>创建用于测试的实体类：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//id 会被映射为 mongodb 文档的主键</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<p>基础增删改查：</p>\n<ol>\n<li>\n<p>创建接口：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">User</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">User</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">User</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>实现类：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MongoTemplate</span> mongoTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mongoTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mongoTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mongoTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mongoTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">DeleteResult</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mongoTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">getDeletedCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>提供 API 访问：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserService</span> userService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/list\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userService<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/insert\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userService<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/save\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userService<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/update\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userService<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/remove\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userService<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>测试发送请求：</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>### 添加用户</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>POST http://localhost:8080/insert?name=Lily&amp;age=21</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token header-name keyword\">Accept:</span> application/json</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>###</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>POST http://localhost:8080/insert?name=Mike&amp;age=26</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token header-name keyword\">Accept:</span> application/json</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>###</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>POST http://localhost:8080/insert?name=Jason&amp;age=27</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token header-name keyword\">Accept:</span> application/json</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>###</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>POST http://localhost:8080/insert?name=Philips&amp;age=14</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token header-name keyword\">Accept:</span> application/json</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>### 添加</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>POST http://localhost:8080/save?name=Jill&amp;age=28</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token header-name keyword\">Accept:</span> application/json</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>### 修改</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>POST http://localhost:8080/save?name=Jill&amp;age=28&amp;id=61caf27055120f6b62234917</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token header-name keyword\">Accept:</span> application/json</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>### 修改</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>POST http://localhost:8080/update?name=Tom&amp;age=33&amp;id=61caf27055120f6b62234917</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token header-name keyword\">Accept:</span> application/json</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>### 查询列表</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>GET http://localhost:8080/list</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token header-name keyword\">Accept:</span> application/json</pre></td></tr></table></figure></li>\n</ol>\n<p>扩展查询：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 单一条件查询示例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">queryById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Criteria</span> criteria <span class=\"token operator\">=</span> <span class=\"token class-name\">Criteria</span><span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Query</span> query <span class=\"token operator\">=</span> <span class=\"token class-name\">Query</span><span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>criteria<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mongoTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回一条</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 符合条件查询示例</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">queryByCondition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">Criteria</span> criteria <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Criteria</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    criteria<span class=\"token punctuation\">.</span><span class=\"token function\">orOperator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Criteria</span><span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Criteria</span><span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">Query</span> query <span class=\"token operator\">=</span> <span class=\"token class-name\">Query</span><span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>criteria<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 排序</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">Sort</span> sort <span class=\"token operator\">=</span> <span class=\"token class-name\">Sort</span><span class=\"token punctuation\">.</span><span class=\"token function\">by</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Sort<span class=\"token punctuation\">.</span>Order</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Sort<span class=\"token punctuation\">.</span>Direction</span><span class=\"token punctuation\">.</span>DESC<span class=\"token punctuation\">,</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    query<span class=\"token punctuation\">.</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span>sort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mongoTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回多条</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 分页查询</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">queryWithPage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> limit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token class-name\">Query</span> query <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    query<span class=\"token punctuation\">.</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span>limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 从下标为 index 开始查询接下来的 limit 条数据</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mongoTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 模糊查询</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">like</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> chars<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token class-name\">Query</span> query <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Query</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Criteria</span><span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">regex</span><span class=\"token punctuation\">(</span>chars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 查询 name 中包含指定字符的数据</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mongoTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 查询并删除</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">queryToRemove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token class-name\">Query</span> query <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Query</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Criteria</span><span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token class-name\">DeleteResult</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mongoTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">getDeletedCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>更多 Java API 用法，请查询 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctZGF0YS9tb25nb2RiL2RvY3MvY3VycmVudC9hcGkvb3JnL3NwcmluZ2ZyYW1ld29yay9kYXRhL21vbmdvZGIvY29yZS9Nb25nb1RlbXBsYXRlLmh0bWw=\">spring-boot-starter-data-mongodb 文档</span>。</p>\n</blockquote>\n<h4 id=\"python-api\"><a class=\"anchor\" href=\"#python-api\">#</a> Python API</h4>\n<ol>\n<li>\n<p>安装 pymongo 连接工具：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python3 -m pip3 <span class=\"token function\">install</span> pymongo</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 如需更新，执行如下命令：</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>python3 -m pip3 <span class=\"token function\">install</span> --upgrade pymongo</pre></td></tr></table></figure></li>\n<li>\n<p>数据库与集合操作：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> pymongo</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 建立连接</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>myclient <span class=\"token operator\">=</span> pymongo<span class=\"token punctuation\">.</span>MongoClient<span class=\"token punctuation\">(</span><span class=\"token string\">\"mongodb://localhost:27017/\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 创建数据库</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>mydb <span class=\"token operator\">=</span> myclient<span class=\"token punctuation\">[</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 查询数据库列表</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>dblist <span class=\"token operator\">=</span> myclient<span class=\"token punctuation\">.</span>list_database_names<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># dblist = myclient.database_names() </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token string\">\"test\"</span> <span class=\"token keyword\">in</span> dblist<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数据库已存在！\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 创建集合</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>mydb <span class=\"token operator\">=</span> myclient<span class=\"token punctuation\">[</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>mycol <span class=\"token operator\">=</span> mydb<span class=\"token punctuation\">[</span><span class=\"token string\">\"col\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 查询集合列表</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>collist <span class=\"token operator\">=</span> mydb<span class=\"token punctuation\">.</span>list_collection_names<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token string\">\"col\"</span> <span class=\"token keyword\">in</span> collist<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"集合已存在！\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>增删改查</p>\n<p>新增：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 插入一条数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mydict <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Chinmoku\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"site\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://www.chinmoku.cc\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>x <span class=\"token operator\">=</span> mycol<span class=\"token punctuation\">.</span>insert_one<span class=\"token punctuation\">(</span>mydict<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>inserted_id<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 文档数据 ID</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 插入多条数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>mylist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Facebook\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://www.facebook.com\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"知乎\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://www.zhihu.com\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Github\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://www.github.com\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>x <span class=\"token operator\">=</span> mycol<span class=\"token punctuation\">.</span>insert_many<span class=\"token punctuation\">(</span>mylist<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>inserted_ids<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 也可以指定 ID</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>mylist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"百度\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://www.baidu.com\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Google\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://www.google.com\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>x <span class=\"token operator\">=</span> mycol<span class=\"token punctuation\">.</span>insert_many<span class=\"token punctuation\">(</span>mylist<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>inserted_ids<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>删除：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 删除单条</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>myquery <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"百度\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mycol<span class=\"token punctuation\">.</span>delete_one<span class=\"token punctuation\">(</span>myquery<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 删除多条 (删除 http 协议网站)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>myquery <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"$regex\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"^http:\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>x <span class=\"token operator\">=</span> mycol<span class=\"token punctuation\">.</span>delete_many<span class=\"token punctuation\">(</span>myquery<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已删除文档个数：\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">.</span>deleted_count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 删除所有文档</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>x <span class=\"token operator\">=</span> mycol<span class=\"token punctuation\">.</span>delete_many<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 删除集合</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>mycol<span class=\"token punctuation\">.</span>drop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>修改：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 修改单条</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>myquery <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>newvalues <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"$set\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"No 1\"</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mycol<span class=\"token punctuation\">.</span>update_one<span class=\"token punctuation\">(</span>myquery<span class=\"token punctuation\">,</span> newvalues<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 修改多条</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>myquery <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"$regex\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"^http:\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>newvalues <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"$set\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"非HTTPS协议网站\"</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>x <span class=\"token operator\">=</span> mycol<span class=\"token punctuation\">.</span>update_many<span class=\"token punctuation\">(</span>myquery<span class=\"token punctuation\">,</span> newvalues<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已更新文档个数：\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">.</span>modified_count<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>查询：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查询文档第一条数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>x <span class=\"token operator\">=</span> mycol<span class=\"token punctuation\">.</span>find_one<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 查询文档所有数据</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> mycol<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 查询指定字段（指定 1，表示需要返回的字段），注意，除_id 外，其他字段不能 0 或 1 必须一致</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> mycol<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 反向返回字段（返回除 url 之外的其他字段）</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> mycol<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 根据条件查询</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>myquery <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Chinmoku\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>mydoc <span class=\"token operator\">=</span> mycol<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>myquery<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> mydoc<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># 使用修饰符查询（比较 name 首字母）</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>myquery <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"$gt\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"H\"</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>mydoc <span class=\"token operator\">=</span> mycol<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>myquery<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> mydoc<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\"># 正则查询（查询 name 以 C 开头的数据）</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>myquery <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"$regex\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"^C\"</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>mydoc <span class=\"token operator\">=</span> mycol<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>myquery<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> mydoc<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\"># 返回指定条数</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>myresult <span class=\"token operator\">=</span> mycol<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>limit<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> myresult<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h3>\n<div class=\"note danger no-icon\">\n<p>本文相关代码已记录在 github，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3hmYy1leGNsYXZlL2Jsb2ctcHJvamVjdC90cmVlL21hc3Rlci80MTc3MjcxOWJmMTA0NTc3OTU5NmZkMTM0YjY1NDU0ZS9tb25nb3N0dWR5\">点击此处</span>前往查看。本文内容如有错误之处，欢迎在评论区留言告知。</p>\n</div>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1vbmdvZGIuY29t\">https://docs.mongodb.com</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9tb25nb2Ri\">https://www.runoob.com/mongodb</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubXJoZWxsb3dvcmxkLmNvbS9tb25nb2Ri\">https://www.mrhelloworld.com/mongodb</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaGV4cnVpL3AvMTQ4ODU3ODUuaHRtbA==\">https://www.cnblogs.com/hexrui/p/14885785.html</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ExMTIwNDY3ODAwL2FydGljbGUvZGV0YWlscy8xMDk5NTQxNDU=\">https://blog.csdn.net/a1120467800/article/details/109954145</span></li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "JAVA学习路线",
                "高级篇",
                "java"
            ]
        },
        {
            "id": "https://www.chinmoku.cc/computer-science/python/django-tutorial/",
            "url": "https://www.chinmoku.cc/computer-science/python/django-tutorial/",
            "title": "Django 网站全栈开发教程",
            "date_published": "2021-11-02T16:12:44.000Z",
            "content_html": "<div class=\"note info\">\n<p>这篇文章是在 Python 基础知识全通关的基础上进行的进阶学习。</p>\n</div>\n<div class=\"note danger\">\n<p>注意：由于本博客主题使用  <code>Prism.js</code>  对代码段进行渲染，渲染过程中，会与代码块中的双  <code>&#123;</code>  和  <code>&#123;</code>  +  <code>%</code>  的语法产生冲突，因此，本文将所有相关符号都替换为  <code>&#123;.&#123;</code>  和  <code>&#123;.%</code>  形式，以解决代码渲染的问题。读者在阅读和拷贝代码的过程中，请务必注意该问题并忽略符号之间多出的  <code>.</code> ，如因此造成阅读上的不便，还请见谅。</p>\n</div>\n<h3 id=\"学习前提\"><a class=\"anchor\" href=\"#学习前提\">#</a> 学习前提</h3>\n<h4 id=\"知识储备要求\"><a class=\"anchor\" href=\"#知识储备要求\">#</a> 知识储备要求</h4>\n<ol>\n<li>了解 Python 基础，如果不了解，请先行阅读《<a href=\"/computer-science/python/python-all-base/\">Python 基础知识全通关</a>》。</li>\n<li>拥有前端开发相关基础技能，至少包括：CSS、JS、HTML。</li>\n<li>会使用常用的 Liunx 命令。</li>\n</ol>\n<h4 id=\"环境说明\"><a class=\"anchor\" href=\"#环境说明\">#</a> 环境说明</h4>\n<p>本篇文章在编写过程中，将以如下信息作为参考环境：</p>\n<ol>\n<li>系统信息：<span class=\"label primary\">VMware 16.1.2</span> + <span class=\"label info\">CentOS 8.4</span>, <span class=\"label info\">windows10</span></li>\n<li>Python 版本：<span class=\"label success\">Python 3.9.6</span></li>\n<li>开发工具：<span class=\"label danger\">Pycharm</span></li>\n<li>命令行工具：<span class=\"label warning\">Termius</span></li>\n</ol>\n<blockquote>\n<p>关于 linux 环境，本文仅在安装、部署等少数部分提供相关说明，其他大部分环境将在 windows 下进行。</p>\n</blockquote>\n<h3 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h3>\n<p>Django 是一个由 Python 编写的一个开放源代码的 Web 应用框架，Django 本身基于 MVC 模型。</p>\n<p>Django 框架使用 MTV 模式，但其本质上和 MVC 是一样的，也是为了各组件间保持松耦合关系，只是定义上有些许不同，Django 的 MTV 分别是指：</p>\n<ol>\n<li>Model：编写程序应有的功能，负责业务对象与数据库的映射（ORM）。</li>\n<li>Template：负责如何把页面（html）展示给用户。</li>\n<li>View：负责业务逻辑，并在适当时候调用 Model 和 Template。</li>\n</ol>\n<p>除了以上三层之外，还需要一个 URL 分发器，它的作用是将一个个 URL 的页面请求分发给不同的 View 处理，View 再调用相应的 Model 和 Template。</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/10/fe81387a526f303ff097080034e919de1635158549.jpg\" alt=\"Python MTV\" /></p>\n<h3 id=\"安装与初始化\"><a class=\"anchor\" href=\"#安装与初始化\">#</a> 安装与初始化</h3>\n<h4 id=\"虚拟环境安装\"><a class=\"anchor\" href=\"#虚拟环境安装\">#</a> 虚拟环境安装</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip3 list <span class=\"token comment\"># 查看列表，检查是否存在 virtualenv</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pip3 <span class=\"token function\">install</span> virtualenv -i https://pypi.douban.com/simple <span class=\"token comment\"># 不存在则安装</span></pre></td></tr></table></figure><div class=\"note danger\">\n<p>注：安装 Python 环境，默认会安装 pip 工具包，可以通过如下命令统一指定镜像源：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip config <span class=\"token builtin class-name\">set</span> global.index-url https://pypi.douban.com/simple/</pre></td></tr></table></figure></div>\n<p>创建并进入虚拟环境：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 为简洁起见，此处将 cd 命令合并为长目录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mkdir</span> /app/projects/django_venv</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>virtualenv /app/projects/django_venv</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">source</span> /app/projects/django_venv/bin/activate</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 此时虚拟环境已启动成功，命令行带有前缀 (django_venv)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>pip3 list</pre></td></tr></table></figure><p>如需退出虚拟环境，使用如下命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>deactivate <span class=\"token comment\"># 退出虚拟环境</span></pre></td></tr></table></figure><blockquote>\n<p>提示：</p>\n<ol>\n<li>如果在虚拟机创建过程中提示  <code>-bash: virtualenv: command not found</code>  ，这是因为  <code>/usr/bin</code>  中还未创建软连接。</li>\n<li>查找 virtualenv 所在位置： <code>find / -name virtualenv</code>  （稍微耗时一点）。</li>\n<li>创建 virtualenv 软连接： <code>ln -s /usr/local/bin/python3/bin/virtualenv /usr/bin/virtualenv</code>  。</li>\n</ol>\n</blockquote>\n<h4 id=\"安装-django\"><a class=\"anchor\" href=\"#安装-django\">#</a> 安装 Django</h4>\n<p>进入虚拟环境，并为该虚拟环境安装 Django。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip3 <span class=\"token function\">install</span> <span class=\"token assign-left variable\">django</span><span class=\"token operator\">==</span><span class=\"token number\">3.2</span>.8 -i https://pypi.douban.com/simple</pre></td></tr></table></figure><p>创建并启动网站工程：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /app/projects</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>django-admin startproject firstsite <span class=\"token comment\"># 创建项目</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>python firstsite/manage.py runserver <span class=\"token comment\"># 启动项目</span></pre></td></tr></table></figure><p>测试访问：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/10/5f3532ce1015e2ee81c6a2c93e3969cf1635158673.png\" alt=\"First Django\" /></p>\n<blockquote>\n<p>注：如需通过外部网络访问虚拟机内部提供的服务，需要配置相应的防火墙出入站规则。</p>\n<p>另外，如需共享文件夹，可参考：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xNDY3NDU0MzE=\">Win10 下与虚拟机中的 linux 共享文件夹</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU0MDUzMy9hcnRpY2xlL2RldGFpbHMvMTA5MDAzNjY1\">VMware 与 win10 共享文件夹</span></li>\n</ul>\n</blockquote>\n<h4 id=\"windows-下安装\"><a class=\"anchor\" href=\"#windows-下安装\">#</a> windows 下安装</h4>\n<p>在 win10 环境下安装 python3 很简单，如果未安装，只需要在命令行输入  <code>python3</code>  即可进入微软商店免费获取，点击下载安装即可。</p>\n<p>创建文件夹  <code>A:\\python-venv\\django_venv</code> 。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>Administrator<span class=\"token operator\">></span>virtualenv A:<span class=\"token punctuation\">\\</span>python-venv<span class=\"token punctuation\">\\</span>django_venv <span class=\"token comment\"># 创建虚拟环境</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>A:<span class=\"token punctuation\">\\</span>python-venv<span class=\"token punctuation\">\\</span>django_venv<span class=\"token punctuation\">\\</span>Scripts<span class=\"token operator\">></span>activate <span class=\"token comment\"># 激活虚拟环境</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>django_venv<span class=\"token punctuation\">)</span> A:<span class=\"token punctuation\">\\</span>python-venv<span class=\"token punctuation\">\\</span>django_venv<span class=\"token punctuation\">\\</span>Scripts<span class=\"token operator\">></span>pip3 <span class=\"token function\">install</span> <span class=\"token assign-left variable\">django</span><span class=\"token operator\">==</span><span class=\"token number\">3.2</span>.8 -i https://pypi.douban.com/simple <span class=\"token comment\"># 为虚拟环境安装 django</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>django_venv<span class=\"token punctuation\">)</span> A:<span class=\"token punctuation\">\\</span>python-venv<span class=\"token punctuation\">\\</span>django_venv<span class=\"token punctuation\">\\</span>Scripts<span class=\"token operator\">></span>cd A:<span class=\"token punctuation\">\\</span>pycharm-workspace</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span>django_venv<span class=\"token punctuation\">)</span> A:<span class=\"token punctuation\">\\</span>pycharm-workspace<span class=\"token operator\">></span>django-admin startproject firstsite <span class=\"token comment\"># 创建项目</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>django_venv<span class=\"token punctuation\">)</span> A:<span class=\"token punctuation\">\\</span>pycharm-workspace<span class=\"token operator\">></span>python firstsite/manage.py runserver <span class=\"token comment\"># 启动项目</span></pre></td></tr></table></figure><blockquote>\n<p>其实总体上，linux 和 windows 平台的安装没有太大区别。</p>\n</blockquote>\n<p>在 Pycharm 中，可以通过如下方式制定虚拟环境：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/10/ccedb26db60dd0aee68a1d552f8826391635158698.png\" alt=\"Pycharm venv\" /></p>\n<p>在 Pycharm 中启动项目就更简单了，直接点击右上角的运行按钮即可。</p>\n<h4 id=\"项目结构\"><a class=\"anchor\" href=\"#项目结构\">#</a> 项目结构</h4>\n<p>在 Pycharm 中配置好环境，后续操作在编辑器中进行，将会更加方便。</p>\n<p>生成页面子应用：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python manage.py startapp index</pre></td></tr></table></figure><p>执行完成后，目录结构如下图所示：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/10/1e086365a34fdd07c562a3359b33b0ac1635158722.png\" alt=\"Django Project Structure\" /></p>\n<h4 id=\"项目配置\"><a class=\"anchor\" href=\"#项目配置\">#</a> 项目配置</h4>\n<p>与项目同名的子文件夹中存放了项目相关配置，部分文件说明如下：</p>\n<ul>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3NldHRpbmdzLnB5\">settings.py</span> - 项目配置</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 返回项目绝对路径</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>BASE_DIR <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>parent</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 数据加密，放置跨域攻击</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>SECRET_KEY <span class=\"token operator\">=</span> <span class=\"token string\">'django-insecure-7)s64=kl*o2zm$wc86k&amp;s(4*&amp;!%a)ecs_k&amp;jskmai2dmss10$8'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 是否处于开发环境</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>DEBUG <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 白名单，* 表示所有</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>ALLOWED_HOSTS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 应用注册</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>INSTALLED_APPS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token string\">'django.contrib.admin'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token string\">'django.contrib.auth'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token string\">'django.contrib.contenttypes'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token string\">'django.contrib.sessions'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token string\">'django.contrib.messages'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token string\">'django.contrib.staticfiles'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token string\">'index'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># 项目根路由</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>ROOT_URLCONF <span class=\"token operator\">=</span> <span class=\"token string\">'firstsite.urls'</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># 配置开发服务器</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>WSGI_APPLICATION <span class=\"token operator\">=</span> <span class=\"token string\">'firstsite.wsgi.application'</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\"># 配置数据库</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>DATABASES <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token string\">'default'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token string\">'ENGINE'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.db.backends.sqlite3'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token string\">'NAME'</span><span class=\"token punctuation\">:</span> BASE_DIR <span class=\"token operator\">/</span> <span class=\"token string\">'db.sqlite3'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\"># 用户密码加密</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>AUTH_PASSWORD_VALIDATORS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token string\">'NAME'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token string\">'NAME'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.contrib.auth.password_validation.MinimumLengthValidator'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token string\">'NAME'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.contrib.auth.password_validation.CommonPasswordValidator'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token string\">'NAME'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.contrib.auth.password_validation.NumericPasswordValidator'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\"># 网站默认语言 # zh-hans</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>LANGUAGE_CODE <span class=\"token operator\">=</span> <span class=\"token string\">'en-us'</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>TIME_ZONE <span class=\"token operator\">=</span> <span class=\"token string\">'UTC'</span> <span class=\"token comment\"># 时区 Asia/Shanghai</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\"># 模板配置</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>TEMPLATES <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token string\">'BACKEND'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.template.backends.django.DjangoTemplates'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token string\">'DIRS'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>BASE_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">'templates'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># 指定模板文件位置：当前项目下的 templates 文件夹</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token string\">'APP_DIRS'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token string\">'OPTIONS'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token string\">'context_processors'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                <span class=\"token string\">'django.template.context_processors.debug'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token string\">'django.template.context_processors.request'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                <span class=\"token string\">'django.contrib.auth.context_processors.auth'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token string\">'django.contrib.messages.context_processors.messages'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token comment\"># 指定静态文件位置</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>STATICFILES_DIRS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>BASE_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">'static'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure></li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3VybHMucHk=\">urls.py</span> - 路由配置</p>\n<p>编辑  <code>index/views.py</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> render</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> HttpResponse</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span><span class=\"token string\">'Hello world'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 返回数据</span></pre></td></tr></table></figure><p>在 <span class=\"exturl\" data-url=\"aHR0cDovL3VybHMucHk=\">urls.py</span> 中可以通过如下方式指定路由：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> admin</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> index<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> index</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>urlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    path<span class=\"token punctuation\">(</span><span class=\"token string\">'admin/'</span><span class=\"token punctuation\">,</span> admin<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">.</span>urls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    path<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 路由绑定视图</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>此时运行并访问，页面将会输出 Hello world 字样。</p>\n</li>\n<li>\n<p>templates - 模板配置</p>\n<p>templates 目录下可创建 html 模板文件。</p>\n<p>在 templates 同级目录下可创建  <code>static</code>  文件夹，用于存储静态文件，静态文件位置需要在 <span class=\"exturl\" data-url=\"aHR0cDovL3NldHRpbmdzLnB5\">settings.py</span> 中指定，见上文。</p>\n<p>在 static 文件夹下，可放置图片、css 样式文件、js 脚本等，在模板文件中可通过如下方式引用：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>纯CSS计时器演示<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>static/css/normalize.min.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>static/css/style.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>修改 index/views.py 中的 index 函数：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 视图绑定模板</span></pre></td></tr></table></figure><blockquote>\n<p>作为学习和效果展示，可以选择直接使用一些成品效果的代码，例如，可以从<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuMTdzdWNhaS5jb20vcHJldmlldy8xNjczMzY1LzIwMTktMDYtMDgvanNxL2luZGV4Lmh0bWw=\">纯 CSS 计时器演示</span>获取源码并在当前项目进行效果重现。</p>\n<p>另外，Django 支持热修改，除配置文件之外，其他文件修改后，无需重启即可生效。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"django-基础命令\"><a class=\"anchor\" href=\"#django-基础命令\">#</a> Django 基础命令</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>django-admin startproject <span class=\"token punctuation\">[</span>project_name<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 初始化一个项目</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>python3 manage.py startapp <span class=\"token punctuation\">[</span>app_name<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 在项目内创建页面子应用</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>python3 manage.py shell <span class=\"token comment\"># 进入代码调试模式</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>python3 manage.py makemigrations <span class=\"token comment\"># 数据库创建更改文件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>python3 manage.py migrate <span class=\"token comment\"># 同步到数据库进行更新</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>python3 manage.py flush <span class=\"token comment\"># 清空数据库</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>python3 manage.py runserver <span class=\"token number\">0.0</span>.0.0:8000 <span class=\"token comment\"># 启动服务</span></pre></td></tr></table></figure><h3 id=\"django-模板\"><a class=\"anchor\" href=\"#django-模板\">#</a> Django 模板</h3>\n<h4 id=\"准备工作\"><a class=\"anchor\" href=\"#准备工作\">#</a> 准备工作</h4>\n<ol>\n<li>\n<p>使用虚拟环境创建项目  <code>mydjango</code> 。</p>\n</li>\n<li>\n<p>创建应用  <code>app</code> 。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">-</span> app</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">-</span> migrations</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    __init__<span class=\"token punctuation\">.</span>py</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  __init__<span class=\"token punctuation\">.</span>py</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  admin<span class=\"token punctuation\">.</span>py # </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  apps<span class=\"token punctuation\">.</span>py # </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  models<span class=\"token punctuation\">.</span>py # 数据库连接文件</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  tests<span class=\"token punctuation\">.</span>py # 测试文件</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  views<span class=\"token punctuation\">.</span>py # 视图文件</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  urls<span class=\"token punctuation\">.</span>py  # 子路由信息，通过手动创建</pre></td></tr></table></figure><blockquote>\n<p>注意：后文中会出现一些  <code>mydjango</code>  和  <code>app</code> ，并不是什么特殊名称，而是指当前项目和应用文件夹的名称，项目创建不同，自然就不同。</p>\n</blockquote>\n</li>\n<li>\n<p>尝试启动项目，确保没有问题。</p>\n</li>\n<li>\n<p>在 mydjango 项目下创建文件夹  <code>templates</code>  和  <code>static</code>  分别用于存放模板文件和静态资源。</p>\n</li>\n<li>\n<p>修改 mydjango/mydjango/settings.py 配置。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ALLOWED_HOSTS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>INSTALLED_APPS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token string\">'django.contrib.admin'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token string\">'django.contrib.auth'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token string\">'django.contrib.contenttypes'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token string\">'django.contrib.sessions'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token string\">'django.contrib.messages'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token string\">'django.contrib.staticfiles'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token string\">'app'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 模板配置</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>TEMPLATES <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token string\">'BACKEND'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.template.backends.django.DjangoTemplates'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token string\">'DIRS'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>BASE_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">'templates'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 指定模板文件位置：当前项目下的 templates 文件夹</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token string\">'APP_DIRS'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token string\">'OPTIONS'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token string\">'context_processors'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token string\">'django.template.context_processors.debug'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token string\">'django.template.context_processors.request'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token string\">'django.contrib.auth.context_processors.auth'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token string\">'django.contrib.messages.context_processors.messages'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\"># 指定静态文件位置</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>STATICFILES_DIRS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>BASE_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">'static'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"路由与模板\"><a class=\"anchor\" href=\"#路由与模板\">#</a> 路由与模板</h4>\n<p>在初始创建项目时，默认会指定如下路由：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/mydjango/urls.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> admin</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>urlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    path<span class=\"token punctuation\">(</span><span class=\"token string\">'admin/'</span><span class=\"token punctuation\">,</span> admin<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">.</span>urls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>但在 app 目录下中也可以创建子路由，但其名称必须指定为  <code>urls.py</code> ：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/app/urls.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span> <span class=\"token keyword\">import</span> views</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>urlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    path<span class=\"token punctuation\">(</span><span class=\"token string\">'index/'</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">.</span>Index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    path<span class=\"token punctuation\">(</span><span class=\"token string\">'data/'</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>但是，如果要使子路由生效，必须在项目路由中进行指定：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/mydjango/urls.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path<span class=\"token punctuation\">,</span> include</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>urlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    path<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> include<span class=\"token punctuation\">(</span><span class=\"token string\">'app.urls'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>这样，当浏览器访问 <span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo4MDAwL2luZGV4Lw==\">http://127.0.0.1:8000/index/</span> 时，就会通过项目路由转到子路由，并最终交由子路由中指定的视图解析器  <code>views.Index</code>  进行解析。</p>\n<p>在进行视图解析时，我们可以有如下两种解析形式：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/app/views.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> HttpResponse</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> render</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 形式一：返回数据</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">Data</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 形式二：返回渲染后的模板</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">Index</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'My Resume!'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'author'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Chinmoku'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>当返回数据时，直接访问路由地址，即可获取到对应的数据。当返回视图模板时，会将参数传递到模板中，模板会解析参数，并补充到对应位置，此处使用到的模板如下：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>zh-CN<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>&#123;.&#123; title &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>姓名：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>&#123;.&#123; author &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>这种  <code>&#123;.&#123; value &#125;&#125;</code>  的模板占位方式，被称为 Mustache 语法，这种语法应用其实很广，不仅是在 python 或 java 的一些模板引擎中用到，在一些前端场景中通常使用尤为广泛，如：Vue。</p>\n<h4 id=\"模板列表\"><a class=\"anchor\" href=\"#模板列表\">#</a> 模板：列表</h4>\n<p>基本语法：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#123;.% for item in list %&#125;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> \t... item display</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#123;.% endfor %&#125;</pre></td></tr></table></figure><p>视图文件返回数据列表：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/app/views.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> render</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">Index</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    skills <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'java web'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'html/css/js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'vue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wx mini-program'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sql'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'python'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'My Resume!'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'author'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Chinmoku'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'skills'</span><span class=\"token punctuation\">:</span> skills<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在模板中对列表进行遍历：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>zh-CN<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>&#123;.&#123; title &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>作者：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>&#123;.&#123; author &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>我的技能：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">text-indent</span><span class=\"token punctuation\">:</span> 2em<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        &#123;.% for skill in skills %&#125;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>&#123;.&#123; forloop.counter &#125;&#125;. &#123;.&#123; skill &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        &#123;.% endfor %&#125;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>主技能：&#123;.&#123; skills.0 &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>这就是遍历的基本使用方式，但在遍历过程中，django 也提供了一些方法帮助我们获取循环相关的信息：</p>\n<ol>\n<li>forloop.counter</li>\n<li>forloop.counter0：下标从 0 开始。</li>\n<li>forloop.revcounter</li>\n<li>forloop.revcounter0</li>\n<li>forloop.first</li>\n<li>forloop.last</li>\n<li>empty</li>\n</ol>\n<blockquote>\n<p>这些信息是一眼就能看懂的，相信不用多做解释，要是一眼看不懂，就多看一眼，你会懂的。</p>\n</blockquote>\n<h4 id=\"模板字典\"><a class=\"anchor\" href=\"#模板字典\">#</a> 模板：字典</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/app/views.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> render</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">Index</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token string\">'info'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'birthday'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'xxxx-xx-xx xx:xx:xx'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>使用：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>生日：&#123;.&#123; info.birthday &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>年龄：&#123;.&#123; info.age &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"模板过滤器\"><a class=\"anchor\" href=\"#模板过滤器\">#</a> 模板：过滤器</h4>\n<p>基本语法： <code>&#123;.&#123; var | filter_name: not_required_params &#125;&#125;</code> 。</p>\n<p>过滤器的使用方式大概是这样：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>年龄：&#123;.&#123; info.age | add:18 &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>按照这样的使用方式，就可以将原有的值，通过某种规则，返回一个被计算或处理后的值，例如这里的自增 18。</p>\n<p>这种类似的被 Django 内置支持的过滤器还有不少，可以在网上<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGF2ZW5kZXIxMjIxL3AvMTIyOTk2ODguaHRtbA==\">看一看</span>。</p>\n<p>根据万物皆可套娃原则，过滤器也可以这样使用：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>年龄：&#123;.&#123; info.age | add:18 | divisibleby:5 | upper | linenumbers | length &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>以上是 Django 内置的过滤器，但在业务过程中，有时也需要对过滤器进行自定义，这里提供一下自定义过滤器的流程：</p>\n<ol>\n<li>\n<p>在 app 应用下创建文件夹  <code>templatetags</code> （固定名称）。</p>\n</li>\n<li>\n<p>在 templatetags 下创建文件，例如 <span class=\"exturl\" data-url=\"aHR0cDovL215ZmlsdGVycy5weQ==\">myfilters.py</span>（名称自定义）。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/app/templatetags/myfilters.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>template <span class=\"token keyword\">import</span> Library</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>register <span class=\"token operator\">=</span> Library<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># register 名字固定不可变</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token decorator annotation punctuation\">@register<span class=\"token punctuation\">.</span>filter</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'append'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 不指定名字，就会使用函数名</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">years</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 过滤之前的原值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">.</span>__str__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> param</pre></td></tr></table></figure></li>\n<li>\n<p>在模板中进行使用。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&#123;.% load myfilters %&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>年龄：&#123;.&#123; info.age | append:'year(s)' &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>注意：自定义过滤器只支持两个参数，参数一是过滤前的原值，参数二是可选的过滤参数。</p>\n</blockquote>\n<h4 id=\"模板条件判断\"><a class=\"anchor\" href=\"#模板条件判断\">#</a> 模板：条件判断</h4>\n<p>基本语法：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#123;.% if condition1 %&#125;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   ... display 1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#123;.% elif condition2 %&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   ... display 2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#123;.% else %&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   ... display 3</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&#123;.% endif %&#125;</pre></td></tr></table></figure><p>使用示例：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>称呼：王</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;.% if info.age &lt; 35 %&#125; 叔叔</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t&#123;.% elif info.age &lt; 80 %&#125; 大爷</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    &#123;.% else %&#125; 老妖怪</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    &#123;.% endif %&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>条件判断中，也支持与、或、非的判断，分别使用 and，or，not，不提。</p>\n<h4 id=\"模板ifequal\"><a class=\"anchor\" href=\"#模板ifequal\">#</a> 模板：ifequal</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#123;.% ifequal user currentuser %&#125;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Welcome!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#123;.% endifequal %&#125;</pre></td></tr></table></figure><p>与之相反的是  <code>ifnotequal</code>  。</p>\n<h4 id=\"模板标签\"><a class=\"anchor\" href=\"#模板标签\">#</a> 模板：标签</h4>\n<p>Django 模板内置标签：</p>\n<ul>\n<li><code>&#123;.% for %&#125;</code>  与  <code>&#123;.% endfor %&#125;</code> ：遍历输出内容。</li>\n<li><code>&#123;.% if %&#125;</code> 、 <code>&#123;.% elif %&#125;</code>  及  <code>&#123;.% endif %&#125;</code> ：条件判断。</li>\n<li><code>&#123;.% url name args %&#125;</code> ：引用路由配置名。</li>\n<li><code>&#123;.% load %&#125;</code> ：加载 Django 标签库。</li>\n<li><code>&#123;.% load static %&#125;</code> ：</li>\n<li><code>&#123;.% static static_path %&#125;</code> ：读取静态资源。</li>\n<li><code>&#123;.% extends base_template %&#125;</code> ：模板继承。</li>\n<li><code>&#123;.% block data %&#125;</code>  与  <code>&#123;.% endblock %&#125;</code> ：重写父模板代码。</li>\n<li><code>&#123;.% csrf_token %&#125;</code> ：跨域密钥。</li>\n</ul>\n<h4 id=\"静态资源\"><a class=\"anchor\" href=\"#静态资源\">#</a> 静态资源</h4>\n<p>使用静态资源之前，需要在 <span class=\"exturl\" data-url=\"aHR0cDovL3NldHRpbmdzLnB5\">settings.py</span> 中进行配置：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 指定静态文件位置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>STATICFILES_DIRS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>BASE_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">'static'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>模板中使用：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#123;.%% load static files %&#125;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;.% static <span class=\"token punctuation\">'</span>images/test.jpg<span class=\"token punctuation\">'</span> %&#125;<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><h4 id=\"自定义标签\"><a class=\"anchor\" href=\"#自定义标签\">#</a> 自定义标签</h4>\n<p>自定义标签步骤：</p>\n<ol>\n<li>\n<p>应用目录下创建 templatetags 目录。</p>\n</li>\n<li>\n<p>在 templatetags 目录下创建任意文件，如  <code>my_tags.py</code> 。</p>\n</li>\n<li>\n<p>配置文件中指定配置。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>TEMPLATES <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string\">'BACKEND'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.template.backends.django.DjangoTemplates'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">'DIRS'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>BASE_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">'templates'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 指定模板文件位置：当前项目下的 templates 文件夹</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string\">'APP_DIRS'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token string\">'OPTIONS'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token string\">'context_processors'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token string\">'django.template.context_processors.debug'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token string\">'django.template.context_processors.request'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token string\">'django.contrib.auth.context_processors.auth'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token string\">'django.contrib.messages.context_processors.messages'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token string\">\"libraries\"</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token string\">'my_tags'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'app.templatetags.my_tags'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure></li>\n<li>\n<p>编辑 my_tags.py</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/app/templatetags/my_tags.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django <span class=\"token keyword\">import</span> template</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>register <span class=\"token operator\">=</span> template<span class=\"token punctuation\">.</span>Library<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token decorator annotation punctuation\">@register<span class=\"token punctuation\">.</span>simple_tag</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'mytag'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">my_tag1</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> v1 <span class=\"token operator\">*</span> v2 <span class=\"token operator\">*</span> v3</pre></td></tr></table></figure></li>\n<li>\n<p>在模板文件中使用</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&#123;.% load my_tags %&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>11 * 22 * 33 = &#123;.% mytag 11 22 33 %&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ol>\n<p>此外，自定义标签时，也可以对标签内容进行语义化处理：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/app/templatetags/my_tags.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django <span class=\"token keyword\">import</span> template</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>safestring <span class=\"token keyword\">import</span> mark_safe</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>register <span class=\"token operator\">=</span> template<span class=\"token punctuation\">.</span>Library<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token decorator annotation punctuation\">@register<span class=\"token punctuation\">.</span>simple_tag</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">my_html</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    temp_html <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;input type='text' id='%s' placeholder='%s' />\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> mark_safe<span class=\"token punctuation\">(</span>temp_html<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在模板文件中使用：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>!<span class=\"token operator\">-</span><span class=\"token operator\">-</span>mydjango<span class=\"token operator\">/</span>templates<span class=\"token operator\">/</span>index<span class=\"token punctuation\">.</span>html<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token operator\">%</span> load my_tags <span class=\"token operator\">%</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token operator\">%</span> my_html <span class=\"token number\">20</span> <span class=\"token string\">'请输入年龄'</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr></table></figure><h4 id=\"其他模板知识\"><a class=\"anchor\" href=\"#其他模板知识\">#</a> 其他模板知识</h4>\n<ol>\n<li>\n<p>注释</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"></span></pre></td></tr></table></figure></li>\n<li>\n<p>include 标签</p>\n<p>include 标签允许在模板之中包含其他模板：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#123;.% include \"nav.html\" %&#125;</pre></td></tr></table></figure></li>\n<li>\n<p>csrf_token</p>\n<p><code>csrf_token</code>  用于 form 表单中，作用是跨站请求伪造保护，使用这个标签，表单提交数据才会成功，否则进行再次跳转页面时会抛出 403 错误。</p>\n</li>\n<li>\n<p>其他模板如  <code>jinja2</code> 、 <code>mako</code>  等，了解即可，如有需求，自行摸索。</p>\n</li>\n</ol>\n<h3 id=\"django-模型\"><a class=\"anchor\" href=\"#django-模型\">#</a> Django 模型</h3>\n<p>Django 对各种数据库提供了很好的支持，包括：PostgreSQL、MySQL、SQLite、Oracle，本文将以 MySQL 作为示例进行学习。</p>\n<p>安装 python mysql 驱动：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip3 <span class=\"token function\">install</span> pymysql -i https://pypi.douban.com/simple</pre></td></tr></table></figure><h4 id=\"数据库配置\"><a class=\"anchor\" href=\"#数据库配置\">#</a> 数据库配置</h4>\n<p>手动创建数据库：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> mydjango <span class=\"token keyword\">default</span> <span class=\"token keyword\">charset</span><span class=\"token operator\">=</span>utf8<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>配置数据库信息：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/mydjango/settings.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>DATABASES <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token string\">'default'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string\">'ENGINE'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.db.backends.mysql'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 数据库引擎</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token string\">'NAME'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'mydjango'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 数据库名称</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token string\">'HOST'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 数据库地址，本机 ip 地址 127.0.0.1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token string\">'PORT'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3306</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 端口</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token string\">'USER'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\"># 数据库用户名</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token string\">'PASSWORD'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 数据库密码</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 <span class=\"exturl\" data-url=\"aHR0cDovL3NldHRpbmdzLnB5\">settings.py</span> 同级目录下的  <code>__init__.py</code>  中编辑内容：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/mydjango/__init__.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> pymysql</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>pymysql<span class=\"token punctuation\">.</span>install_as_MySQLdb<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"定义模型\"><a class=\"anchor\" href=\"#定义模型\">#</a> 定义模型</h4>\n<p>编辑模型文件：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/app/models.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>创建表结构：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python3 manage.py migrate <span class=\"token comment\"># 创建表结构</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>python3 manage.py makemigrations</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>python3 manage.py migrate</pre></td></tr></table></figure><p>执行成功后，就会自动向数据库创建一张表  <code>app_test</code> （表名与当前模块和模型内的类名有关）。</p>\n<blockquote>\n<p>提示：</p>\n<ol>\n<li>\n<p>如需在 PyCharm Terminal 中自动激活虚拟环境，可在 settings -&gt; Tools -&gt; Terminal -&gt; Shell path 中进行类似如下的配置：</p>\n<p><code>&quot;cmd.exe&quot; /k &quot;&quot;A:\\python-venv\\django_venv\\Scripts\\activate&quot;&quot; </code></p>\n</li>\n<li>\n<p>执行  <code>python3 manage.py migrate</code>  时报错：'str' object has no attribute 'decode'</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29uZV9kYXk0MTUvYXJ0aWNsZS9kZXRhaWxzLzEwMTIzMjk2Mg==\">点击此处</span>前往查看解决方法。</p>\n</li>\n</ol>\n</blockquote>\n<h4 id=\"数据库操作\"><a class=\"anchor\" href=\"#数据库操作\">#</a> 数据库操作</h4>\n<p>配置路由：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/app/urls.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span> <span class=\"token keyword\">import</span> views</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>urlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    path<span class=\"token punctuation\">(</span><span class=\"token string\">'user/add/&lt;str:name>'</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">.</span>UserAdd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>视图处理：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/app/views.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> HttpResponse</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> app<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Test</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">UserAdd</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    test1 <span class=\"token operator\">=</span> Test<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    test1<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;p>数据添加成功！&lt;/p>\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>浏览器访问 <span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo4MDAwL3VzZXIvYWRkL3poYW5n\">http://127.0.0.1:8000/user/add/zhang</span> 即可向数据库添加一条记录，且其主键默认采用自增策略。</p>\n<p>类似地，通过对象直接调用方法，即可完成对数据库的增删改查：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查询数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Test<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 查询所有，相当于 => select *</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Test<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 过滤查询，相当于 => where</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Test<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 查询单个对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Test<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>order_by<span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 排序并限制，相当于 => order by 'name' offset 0 limit 2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Test<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>order_by<span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 排序</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Test<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"runoob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>order_by<span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 连锁使用</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 更新数据</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>test1 <span class=\"token operator\">=</span> Test<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>test1<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Ouyang'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>test1<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Test<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'Ouyang'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Test<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'Xxx'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 修改所有</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 删除数据</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>test2 <span class=\"token operator\">=</span> Test<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>test2<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Test<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Test<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 删除所有</span></pre></td></tr></table></figure><h3 id=\"django-表单\"><a class=\"anchor\" href=\"#django-表单\">#</a> Django 表单</h3>\n<h4 id=\"get\"><a class=\"anchor\" href=\"#get\">#</a> GET</h4>\n<p>创建模板文件：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>!<span class=\"token operator\">-</span><span class=\"token operator\">-</span>mydjango<span class=\"token operator\">/</span>templates<span class=\"token operator\">/</span>search_form<span class=\"token punctuation\">.</span>html<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>!DOCTYPE html<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>html lang<span class=\"token operator\">=</span><span class=\"token string\">\"en\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>Django form get<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">&lt;</span>form action<span class=\"token operator\">=</span><span class=\"token string\">\"/search/\"</span> method<span class=\"token operator\">=</span><span class=\"token string\">\"get\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token builtin\">input</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"q\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"请输入搜索内容\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token builtin\">input</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"搜索\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></pre></td></tr></table></figure><p>编辑视图文件：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/app/views.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> HttpResponse</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> render</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 表单</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">search_form</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">'search_form.html'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 接收请求数据</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    request<span class=\"token punctuation\">.</span>encoding <span class=\"token operator\">=</span> <span class=\"token string\">'utf-8'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token string\">'q'</span> <span class=\"token keyword\">in</span> request<span class=\"token punctuation\">.</span>GET <span class=\"token keyword\">and</span> request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">[</span><span class=\"token string\">'q'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        message <span class=\"token operator\">=</span> <span class=\"token string\">'你搜索的内容为: '</span> <span class=\"token operator\">+</span> request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">[</span><span class=\"token string\">'q'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        message <span class=\"token operator\">=</span> <span class=\"token string\">'你提交了空表单'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>配置路由：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/app/urls.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> url</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span> <span class=\"token keyword\">import</span> views</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>urlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    url<span class=\"token punctuation\">(</span><span class=\"token string\">r'^search-form/$'</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">.</span>search_form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    url<span class=\"token punctuation\">(</span><span class=\"token string\">r'^search/$'</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h4 id=\"post\"><a class=\"anchor\" href=\"#post\">#</a> Post</h4>\n<p>创建模板文件：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Django form post<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/search-post/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    &#123;.% csrf_token %&#125;<span class=\"token comment\"></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>q<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>请输入搜索内容<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>搜索<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>&#123;.&#123; keyword &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>编辑视图文件：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/app/views.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> render</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">search_post</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ctx <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        ctx<span class=\"token punctuation\">[</span><span class=\"token string\">'keyword'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">[</span><span class=\"token string\">'q'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">\"post.html\"</span><span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>配置路由：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/app/urls.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> url</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span> <span class=\"token keyword\">import</span> views</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>urlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    url<span class=\"token punctuation\">(</span><span class=\"token string\">r'^search-post/$'</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">.</span>search_post<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>通过这种方式，可以将提交的数据处理后，重新渲染到页面上。</p>\n<h4 id=\"request-对象\"><a class=\"anchor\" href=\"#request-对象\">#</a> Request 对象</h4>\n<p>每个视图函数的第一个参数都必须是  <code>HttpRequest</code>  对象，通过该对象，可以获取一些列属性：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> HttpResponse</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">dj_test</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>request 中的属性主要有：</p>\n<ol>\n<li>path</li>\n<li>method</li>\n<li>GET</li>\n<li>POST</li>\n<li>REQUEST：为了方便，该属性是 POST 和 GET 属性的集合体，但是有特殊性，先查找 POST 属性，然后再查找 GET 属性。（不建议使用）</li>\n<li>COOKIES</li>\n<li>FILES</li>\n<li>META：包含所有可用 HTTP 头部信息的字典。</li>\n<li>user：是一个  <code>django.contrib.auth.models.User</code>  对象，代表当前登录的用户。可以通过 user 的  <code>is_authenticated()</code>  方法来辨别用户是否登录。</li>\n<li>session</li>\n<li>raw_post_data：原始 HTTP POST 数据，未解析过。高级处理时会有用处。</li>\n</ol>\n<p>request 也提供了一些方法：</p>\n<ol>\n<li><code>__getitem__(key)</code> ：返回 GET/POST 的键值，先取 POST，后取 GET。如果键不存在则抛出 KeyError。</li>\n<li><code>has_key()</code> ：检查 request.GET or request.POST 中是否包含参数指定的 Key。</li>\n<li><code>get_full_path()</code></li>\n<li><code>is_secure()</code> ：检验 HTTPS。</li>\n</ol>\n<h4 id=\"querydict-对象\"><a class=\"anchor\" href=\"#querydict-对象\">#</a> QueryDict 对象</h4>\n<p>在 HttpRequest 对象中，GET 和 POST 属性是 django.http.QueryDict 类的实例。QueryDict 类似字典的自定义类，用来处理单键对应多值的情况，它不仅实现所有标准的词典方法，还包括了一些特有的方法：</p>\n<ol>\n<li>\n<p><code>__getitem__(key)</code> ：和标准字典的处理有一点不同，就是，如果 Key 对应多个 Value，则会返回最后一个 value。</p>\n</li>\n<li>\n<p><code>__setitem__(key, value)</code> ：这里的 value 是一个 list，它只能在一个 mutable QueryDict 对象上被调用（即通过 copy 产生的一个 QueryDict 对象的拷贝）。</p>\n</li>\n<li>\n<p><code>get()</code> ：如果对应多个 value，则返回最后一个。</p>\n</li>\n<li>\n<p><code>update()</code> ：参数可以是 QueryDict，也可以是标准字典。和标准字典的 update 方法不同，该方法添加字典 items，而不是替换它们。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>q <span class=\"token operator\">=</span> QueryDict<span class=\"token punctuation\">(</span><span class=\"token string\">'a=1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>q <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># to make it mutable</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>q<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>getlist<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['1', '2']</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['2'] # return the last one</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>items()</code> ：和标准字典同名方法有一点不同，该方法使用单值逻辑的 <em>_getitem</em>_()。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>q <span class=\"token operator\">=</span> QueryDict<span class=\"token punctuation\">(</span><span class=\"token string\">'a=1&amp;a=2&amp;a=3'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [('a', '3')]</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>values()</code> ：同样是单值。</p>\n</li>\n<li>\n<p>copy</p>\n</li>\n<li>\n<p>getlist</p>\n</li>\n<li>\n<p>setlist</p>\n</li>\n<li>\n<p>appendlist</p>\n</li>\n<li>\n<p>setlistdefault</p>\n</li>\n<li>\n<p>lists</p>\n</li>\n<li>\n<p>urlencode</p>\n</li>\n</ol>\n<h3 id=\"django-视图\"><a class=\"anchor\" href=\"#django-视图\">#</a> Django 视图</h3>\n<p>一个视图函数，简称视图，是一个简单的 Python 函数，它接受 Web 请求并且返回 Web 响应。响应可以是一个 HTML 页面、一个 404 错误页面、重定向页面、XML 文档、或者一张图片等。视图逻辑一般放在项目的 <span class=\"exturl\" data-url=\"aHR0cDovL3ZpZXdzLnB5\">views.py</span> 文件中，但并不限制。</p>\n<p>视图响应方式包括：HttpResponse、render、redirect。</p>\n<h4 id=\"httpresponse\"><a class=\"anchor\" href=\"#httpresponse\">#</a> HttpResponse</h4>\n<p>返回字符串文本，包括 html 形式的字符串在内。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> HttpResponse</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">http_response_text</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span><span class=\"token string\">'Hello world!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">http_response_html</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;a href=\"https://www.chinmoku.cc\">チンモクのブログ&lt;/>'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>HttpResponse 返回 html 代码时，代码内容由模板进行渲染处理。</p>\n</blockquote>\n<h4 id=\"render\"><a class=\"anchor\" href=\"#render\">#</a> render</h4>\n<p>返回文本，第二个参数为模板页面名称，第三个参数为字典（可选）。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> render</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">Home</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">\"home.html\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>render 底层返回的也是 HttpResponse 对象。</p>\n<h4 id=\"redirect\"><a class=\"anchor\" href=\"#redirect\">#</a> redirect</h4>\n<p>重定向，跳转新页面。参数为字符串，字符串中填写页面路径。一般用于 form 表单提交后，跳转到新页面。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> redirect</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">to_index</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span><span class=\"token string\">'/index/'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>redirect 底层继承自 HttpResponse。</p>\n<h4 id=\"jsonresponse\"><a class=\"anchor\" href=\"#jsonresponse\">#</a> JsonResponse</h4>\n<p>JsonResponse 返回标准 JSON，与 HttpResponse 不同的是，JsonResponse 无需手动进行序列化与反序列化。HttpResponse 字符串 JSON 则需要对序列化和反序列化手动进行处理。</p>\n<h3 id=\"django-路由\"><a class=\"anchor\" href=\"#django-路由\">#</a> Django 路由</h3>\n<p>路由简单的来说就是根据用户请求的 URL 链接来判断对应的处理程序，并返回处理结果，也就是 URL 与 Django 的视图建立映射关系。Django 路由在 <span class=\"exturl\" data-url=\"aHR0cDovL3VybHMucHk=\">urls.py</span> 配置，<span class=\"exturl\" data-url=\"aHR0cDovL3VybHMucHk=\">urls.py</span> 中的每一条配置对应相应的处理方法。</p>\n<h4 id=\"路由配置方式\"><a class=\"anchor\" href=\"#路由配置方式\">#</a> 路由配置方式</h4>\n<ol>\n<li>\n<p>Django 1.1.x</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> url <span class=\"token comment\"># 用 url 需要引入</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>urlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    url<span class=\"token punctuation\">(</span><span class=\"token string\">r'^admin/$'</span><span class=\"token punctuation\">,</span> admin<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">.</span>urls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    url<span class=\"token punctuation\">(</span><span class=\"token string\">r'^index/$'</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">.</span>Index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># 普通路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    url<span class=\"token punctuation\">(</span><span class=\"token string\">r'^articles/([0-9]&#123;4&#125;)/$'</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">.</span>Articles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># 正则路径</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure></li>\n<li>\n<p>Django 2.2.x+</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> re_path <span class=\"token comment\"># 用 re_path 需要引入</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>urlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    path<span class=\"token punctuation\">(</span><span class=\"token string\">'admin/'</span><span class=\"token punctuation\">,</span> admin<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">.</span>urls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    path<span class=\"token punctuation\">(</span><span class=\"token string\">'index/'</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># 普通路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    re_path<span class=\"token punctuation\">(</span><span class=\"token string\">r'^articles/([0-9]&#123;4&#125;)/$'</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">.</span>articles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># 正则路径（版本向下兼容，也可以使用 url ()）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><ul>\n<li>path：用于普通路径，不需要自己手动添加正则首位限制符号，底层已经添加。</li>\n<li>re_path：用于正则路径，需要自己手动添加正则首位限制符号。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"正则路由\"><a class=\"anchor\" href=\"#正则路由\">#</a> 正则路由</h4>\n<ol>\n<li>\n<p>正则路径中的无名分组</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/app/urls.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> re_path</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span> <span class=\"token keyword\">import</span> views</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>urlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    path<span class=\"token punctuation\">(</span><span class=\"token string\">'home/&lt;str:name>/&lt;int:age>'</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">.</span>Home<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    re_path<span class=\"token punctuation\">(</span><span class=\"token string\">r\"^index/(?P&lt;age>[0-9]&#123;2&#125;)/(?P&lt;name>[A-Z]&#123;2&#125;)/\"</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">.</span>Home<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>视图处理：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> render</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> HttpResponse</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">Articles</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 一个形参代表路径中一个分组的内容，按顺序匹配</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    articleId <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'articleId'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 获取非路径参数的 get 参数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>articleId<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\"># ... 处理逻辑</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span><span class=\"token string\">'Django tutorial!'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>正则路径中的有名分组</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/app/urls.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> re_path</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span> <span class=\"token keyword\">import</span> views</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>urlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    path<span class=\"token punctuation\">(</span><span class=\"token string\">'home/&lt;str:name>/&lt;int:age>'</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">.</span>Home<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    re_path<span class=\"token punctuation\">(</span><span class=\"token string\">r\"^home2/(?P&lt;age>[0-9]&#123;2&#125;)/(?P&lt;name>[A-Z]&#123;2&#125;)/\"</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">.</span>Home<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>视图处理：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> render</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> HttpResponse</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">Home</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> age<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">\"home.html\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>有名分组会在路由中指定参数名称，视图解析时则不需要按照规定顺序，只需要根据名称进行匹配即可。</p>\n</li>\n<li>\n<p>路由分发</p>\n<p>Django 项目中多个 app 共用一个 <span class=\"exturl\" data-url=\"aHR0cDovL3VybHMucHk=\">urls.py</span> 容易造成混淆，因此，每个 app 可以拥有自己的 <span class=\"exturl\" data-url=\"aHR0cDovL3VybHMucHk=\">urls.py</span> 文件配置路由。</p>\n<p>而在项目路由中，只需要通过如下方式配置路由分发即可：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path<span class=\"token punctuation\">,</span> include</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>urlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    path<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> include<span class=\"token punctuation\">(</span><span class=\"token string\">'app.urls'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"反向解析\"><a class=\"anchor\" href=\"#反向解析\">#</a> 反向解析</h4>\n<p>在路由配置中，指定路由的  <code>name</code>  属性，即可设置反向解析的参考点，例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/app/urls.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> url</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span> <span class=\"token keyword\">import</span> views</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>urlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    path<span class=\"token punctuation\">(</span><span class=\"token string\">'index/'</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">.</span>Index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    path<span class=\"token punctuation\">(</span><span class=\"token string\">'search-form/'</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">.</span>Index<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'toForm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>在模板中使用：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- mydjango/templates/index.html --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;.% url <span class=\"token punctuation\">'</span>toForm<span class=\"token punctuation\">'</span> %&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>填写信息<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>点击链接即可将请求发送到 views.Index 进行处理。</p>\n<p>在视图中使用：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/app/views.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> render<span class=\"token punctuation\">,</span> redirect</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">redirectForm</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span><span class=\"token builtin\">reversed</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toForm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>当某一请求调用执行 redirectForm 时，就会重定向到 views.Index 进行后续处理。</p>\n<p>在反向解析路由时，同样可以传递参数，包括有名和无名分组在内，传递参数方式如下：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;.% url <span class=\"token punctuation\">'</span>toForm<span class=\"token punctuation\">'</span> 19 %&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>填写信息<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;.% url <span class=\"token punctuation\">'</span>toForm<span class=\"token punctuation\">'</span> age=19 %&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>填写信息<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>在视图中反向解析时传递参数：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/app/views.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> render<span class=\"token punctuation\">,</span> redirect</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">redirectForm</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span><span class=\"token builtin\">reversed</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toForm'</span><span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 无名分组</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># return redirect (reversed ('toForm', kwargs=&#123;'age': 19&#125;))  # 无名分组</span></pre></td></tr></table></figure><blockquote>\n<p>路由别名 name 没有作用域，Django 在反向解析 URL 时，会在项目全局顺序搜索，当查找到第一个路由别名 name 指定 URL 时，立即返回。当在不同的 app 目录下的 urls 中定义相同的路由别名 name 时，可能会导致 URL 反向解析错误。</p>\n</blockquote>\n<h4 id=\"命名空间\"><a class=\"anchor\" href=\"#命名空间\">#</a> 命名空间</h4>\n<p>命名空间是表示标识符的可见范围。</p>\n<ul>\n<li>一个标识符可在多个命名空间中定义，它在不同命名空间中的含义是互不相干的。</li>\n<li>一个新的命名空间中可定义任何标识符，它们不会与任何重复的标识符发生冲突，因为重复的定义都处于其它命名空间中。</li>\n</ul>\n<p>由于路由别名没有作用于，因此多个 app 存在同名别名时，会导致反向解析错误，但如果对其限定命名空间，就可以避免该错误。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/mydjango/urls.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path<span class=\"token punctuation\">,</span> include</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>urlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    path<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> include<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app.urls'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>在子路由中指定反向解析别名：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/app/urls.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span> <span class=\"token keyword\">import</span> views</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>urlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    path<span class=\"token punctuation\">(</span><span class=\"token string\">'search-form/'</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">.</span>Index<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'toForm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>此时使用如下方式进行路由反向解析，则只会在命名空间指定的 app 下查找路由：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/app/views.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> render<span class=\"token punctuation\">,</span> redirect</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">redirectForm</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span><span class=\"token builtin\">reversed</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app:toForm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在模板中的使用方式也是类似：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>!<span class=\"token operator\">-</span><span class=\"token operator\">-</span>swig￼<span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"&#123;.% url 'app:toForm' 19 %&#125;\"</span><span class=\"token operator\">></span>填写信息<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"django-admin\"><a class=\"anchor\" href=\"#django-admin\">#</a> Django Admin</h3>\n<h4 id=\"配置\"><a class=\"anchor\" href=\"#配置\">#</a> 配置</h4>\n<p>Django 提供了基于 web 的管理工具。Django 自动管理工具是 django.contrib 的一部分。Django Admin 默认情况下即被注册启用：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/mydjango/settings.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>INSTALLED_APPS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token string\">'django.contrib.admin'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token string\">'django.contrib.auth'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token string\">'django.contrib.contenttypes'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token string\">'django.contrib.sessions'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token string\">'django.contrib.messages'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token string\">'django.contrib.staticfiles'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>如需使用，只需在路由中进行指定即可（通常创建项目时默认即指定了）：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/mydjango/urls.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> url</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> admin</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>urlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    url<span class=\"token punctuation\">(</span><span class=\"token string\">r'^admin/'</span><span class=\"token punctuation\">,</span> admin<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">.</span>urls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>通过访问 <span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo4MDAwL2FkbWluLw==\">http://127.0.0.1:8000/admin/</span> 即可跳转登录界面。</p>\n<h4 id=\"登录与使用\"><a class=\"anchor\" href=\"#登录与使用\">#</a> 登录与使用</h4>\n<p>可以通过命令  <code>python3 manage.py createsuperuser</code>  来创建超级用户，创建成功后，即可登录，登录成功后将跳转如下页面：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/10/08daa75223cafee969ae81742a4186b61635348370.png\" alt=\"image-20211027232541350\" /></p>\n<p>如需在 admin 界面管理某个数据模型，只需要在应用下的 <span class=\"exturl\" data-url=\"aHR0cDovL2FkbWluLnB5\">admin.py</span> 文件中注册对应的数据模型即可：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> admin</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> app<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Test</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># Register your models here.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>admin<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">.</span>register<span class=\"token punctuation\">(</span>Test<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>然后刷新 admin 界面，即可看到对应的数据模型。</p>\n<h4 id=\"自定义表单\"><a class=\"anchor\" href=\"#自定义表单\">#</a> 自定义表单</h4>\n<blockquote>\n<p>自行摸索吧，感觉没啥意思。</p>\n</blockquote>\n<h3 id=\"django-orm\"><a class=\"anchor\" href=\"#django-orm\">#</a> Django ORM</h3>\n<h4 id=\"单表实例\"><a class=\"anchor\" href=\"#单表实例\">#</a> 单表实例</h4>\n<ol>\n<li>\n<p>准备工作</p>\n<p>注册当前应用：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/mydjango/settings.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>INSTALLED_APPS <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token string\">'django.contrib.admin'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token string\">'django.contrib.auth'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token string\">'django.contrib.contenttypes'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token string\">'django.contrib.sessions'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token string\">'django.contrib.messages'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token string\">'django.contrib.staticfiles'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token string\">'app01'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 添加此项</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>指定数据库连接：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/mydjango/__init__.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> pymysql</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pymysql<span class=\"token punctuation\">.</span>install_as_MySQLdb<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>创建模型</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/app/models.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>AutoField<span class=\"token punctuation\">(</span>primary_key<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># id 会自动创建，可以手动写入</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    title <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 书籍名称</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    price <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DecimalField<span class=\"token punctuation\">(</span>max_digits<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> decimal_places<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 书籍价格</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    publish <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 出版社名称</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    pub_date <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 出版时间</span></pre></td></tr></table></figure><p>执行数据迁移命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python3 manage.py migrate  <span class=\"token comment\"># 创建表结构</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>python3 manage.py makemigrations app  <span class=\"token comment\"># 让 Django 知道我们在我们的模型有一些变更</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>python3 manage.py migrate app  <span class=\"token comment\"># 创建表结构</span></pre></td></tr></table></figure><p>执行完毕后，数据库会生成一张  <code>app_book</code>  表。</p>\n</li>\n<li>\n<p>新增数据</p>\n<p>编写新增数据的视图函数：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/app/views.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> HttpResponse</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> app <span class=\"token keyword\">import</span> models</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add_book</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    book <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Book<span class=\"token punctuation\">(</span>title<span class=\"token operator\">=</span><span class=\"token string\">\"捕鱼女\"</span><span class=\"token punctuation\">,</span> price<span class=\"token operator\">=</span><span class=\"token number\">35.00</span><span class=\"token punctuation\">,</span> publish<span class=\"token operator\">=</span><span class=\"token string\">\"江苏凤凰文艺出版社\"</span><span class=\"token punctuation\">,</span> pub_date<span class=\"token operator\">=</span><span class=\"token string\">\"2015-10-01\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    book<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;p>&lt;script>alert(\"数据添加成功！\")&lt;/script>&lt;/p>'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>配置路由规则：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/app/urls.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span> <span class=\"token keyword\">import</span> views</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>urlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    path<span class=\"token punctuation\">(</span><span class=\"token string\">'book/add/'</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">.</span>add_book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>浏览器访问 <span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo4MDAw\">http://127.0.0.1:8000</span> 即可在向数据库中新增一条记录。</p>\n<p>此外，也可以使用如下方式新增数据：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>books <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>title<span class=\"token operator\">=</span><span class=\"token string\">\"日本文学史\"</span><span class=\"token punctuation\">,</span> price<span class=\"token operator\">=</span><span class=\"token number\">48.00</span><span class=\"token punctuation\">,</span> publish<span class=\"token operator\">=</span><span class=\"token string\">\"译林出版社\"</span><span class=\"token punctuation\">,</span> pub_date<span class=\"token operator\">=</span><span class=\"token string\">\"2020-06-01\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>books<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>books<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Book object (4)</span></pre></td></tr></table></figure></li>\n<li>\n<p>查询数据</p>\n<ul>\n<li>\n<p>查询列表</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_books</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    books <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>books<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>books<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># QuerySet 类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;p>&lt;script>alert(\"数据列表查询成功！\")&lt;/script>&lt;/p>'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>过滤查询</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_book</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> book_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    books <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>pk<span class=\"token operator\">=</span>book_id<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 这里 pk 相当于 primary key，因为 id 有其他特殊意义所以使用 pk 替代 id</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># books = models.Book.objects.filter(price__lt=40.00)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># books = models.Book.objects.filter (title__iendswith=' 文学史 ')</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>books<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>books<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># QuerySet 类型</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> book <span class=\"token keyword\">in</span> books<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;p>&lt;script>alert(\"数据列表过滤查询成功！\")&lt;/script>&lt;/p>'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>filter 也内置了一些其他常用的筛选方式，通过如下提示即可查看：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/11/51fe7dd6bd601bbe7f2d413faa24f0dc1635813491.png\" alt=\"image-20211101204130217\" /></p>\n<p>关于过滤规则及其意义，可以<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamI1MS5uZXQvYXJ0aWNsZS8xODI3NjcuaHRt\">点击此处</span>作为参考，这里不反复书写示例。</p>\n<blockquote>\n<p>filter 中只能使用  <code>=</code> ，无法使用大于小于等其他比较符号。但是，可以使用  <code>__gt</code>  这样的方式来间接表示。</p>\n</blockquote>\n</li>\n<li>\n<p>反向查询</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查询不符合条件（pk=book_id）的所有数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>books <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>exclude<span class=\"token punctuation\">(</span>pk<span class=\"token operator\">=</span>book_id<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>单条查询</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>book <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>pk<span class=\"token operator\">=</span>book_id<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>单条查询的查询条件不一定是主键，但必须保证查询结果是单一的，否则会抛出异常。</p>\n</li>\n<li>\n<p>排序</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>books <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>price__lt<span class=\"token operator\">=</span><span class=\"token number\">40.00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>order_by<span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 升序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># books = models.Book.objects.filter (price__lt=40.00).order_by ('-title')  # 降序（在条件前添加负号 “-” 即可）</span></pre></td></tr></table></figure></li>\n<li>\n<p>排序翻转</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>books <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>price__lt<span class=\"token operator\">=</span><span class=\"token number\">40.00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>order_by<span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 将原本的排序进行翻转</span></pre></td></tr></table></figure></li>\n<li>\n<p>计数</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>count <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>price__gt<span class=\"token operator\">=</span><span class=\"token number\">40.00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># int 类型</span></pre></td></tr></table></figure></li>\n<li>\n<p>查询第一条</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>books <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 返回所有数据的第一条数据</span></pre></td></tr></table></figure><p>其实就是在所有查询的数据列表中，取下标为 0 的数据。</p>\n</li>\n<li>\n<p>查询最后一条（同上）</p>\n</li>\n<li>\n<p>仅查询指定的字段</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>book_vals <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token string\">'pk'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>book_vals<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># QuerySet 内部是可迭代的字典序列</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>book_val_list <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>values_list<span class=\"token punctuation\">(</span><span class=\"token string\">'pk'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>book_val_list<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># QuerySet 内部是元组</span></pre></td></tr></table></figure></li>\n<li>\n<p>去重复</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>books <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>values_list<span class=\"token punctuation\">(</span><span class=\"token string\">\"publish\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>distinct<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>修改数据</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">update_book</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> book_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    book <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>pk<span class=\"token operator\">=</span>book_id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    book<span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> <span class=\"token number\">40.00</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    book<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\"># books = models.Book.objects.filter(pk__in=[7, 8]).update(price=35.00)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;p>&lt;script>alert(\"数据更新成功！\")&lt;/script>&lt;/p>'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>删除数据</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>books<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>pk<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># books = models.Book.objects.all ().delete ()  # 删除所有</span></pre></td></tr></table></figure><blockquote>\n<p>注意：数据删除属于非常规操作，在业务过程中，一般删除都进行逻辑删除，而非物理删除。</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"多表实例\"><a class=\"anchor\" href=\"#多表实例\">#</a> 多表实例</h4>\n<p>表与表之间的关系，通常有如下三种：</p>\n<ol>\n<li>一对一。</li>\n<li>一对多。</li>\n<li>多对多。</li>\n</ol>\n<blockquote>\n<p>注意：这种对应关系时相对而言的，若甲与乙是一对多关系，那么，乙与甲则是一对一关系（也可以说是多对一），反之，则不一定成立。</p>\n</blockquote>\n<ol>\n<li>\n<p>准备工作</p>\n<ul>\n<li>\n<p>移除上一实例生成的数据库表，以及删除对应的数据模型，或者重新新建应用。</p>\n</li>\n<li>\n<p>清除 mydjango/app/migrations 下的 sql 脚本文件。</p>\n</li>\n<li>\n<p>删除数据库表  <code>django_migrations</code>  中旧有生成记录。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">delete</span> <span class=\"token keyword\">from</span> django_migrations <span class=\"token keyword\">where</span> app <span class=\"token operator\">=</span> <span class=\"token string\">'app'</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>创建模型</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/app/models.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    title <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    price <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DecimalField<span class=\"token punctuation\">(</span>max_digits<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> decimal_places<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    pub_date <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    publish <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span><span class=\"token string\">\"Publish\"</span><span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    authors <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ManyToManyField<span class=\"token punctuation\">(</span><span class=\"token string\">\"Author\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Publish</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    city <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    email <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>EmailField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Author</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    age <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>SmallIntegerField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    au_detail <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>OneToOneField<span class=\"token punctuation\">(</span><span class=\"token string\">\"AuthorDetail\"</span><span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthorDetail</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    gender_choices <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"女\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"男\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"未知\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    gender <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>SmallIntegerField<span class=\"token punctuation\">(</span>choices<span class=\"token operator\">=</span>gender_choices<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    phone <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    address <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    birthday <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>说明：</p>\n<ol>\n<li>EmailField 数据类型是邮箱格式，底层继承 CharField，进行了封装，相当于 MySQL 中的 varchar。</li>\n<li>Django1.1 版本不需要联级删除：on_delete=models.CASCADE，Django2.2 需要。</li>\n</ol>\n</blockquote>\n<p>执行数据迁移命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python3 manage.py migrate</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>python3 manage.py makemigrations app</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>python3 manage.py migrate app</pre></td></tr></table></figure><p>执行完毕后，数据库会生成如下表结构：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/11/feb0ba77917d6af9622e1675fe5e21da1635813491.png\" alt=\"image-20211102081211144\" /></p>\n</li>\n<li>\n<p>初始化数据</p>\n<p>为方便后续操作，为当前生成的表结构初始化部分数据：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> app_publish<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> city<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"山东文艺出版社\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"山东\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"602666251@qq.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"商务印书馆\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"北京\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bainianziyuan@cp.com.cn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"时代文艺出版社\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"吉林\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"367036063@qq.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"花城出版社\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"广东\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"gdhctsyx@126.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> app_book<span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> pub_date<span class=\"token punctuation\">,</span> publish_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'深处的镜子'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42.00</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2018-08-01'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'诗学'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36.00</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2009-07-01'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'神殿的基石'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">38.00</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2014-04-01'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> app_authordetail<span class=\"token punctuation\">(</span>gender<span class=\"token punctuation\">,</span> phone<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">,</span> birthday<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13432335433</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"罗马尼亚\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1895-5-23\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13943454554</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"古希腊\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1000-8-13\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> app_author<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> au_detail_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"卢齐安·布拉加\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"亚里士多德\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">58</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> app_book_authors<span class=\"token punctuation\">(</span>book_id<span class=\"token punctuation\">,</span> author_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>注意：由于表之间存在外键关联关系，因此，在手动插入数据时，需要遵循关联顺序进行插入。</p>\n</blockquote>\n</li>\n<li>\n<p>新增数据</p>\n<p>一对多添加数据：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">addBook</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    pub_obj <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Publish<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>pk<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    book <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>title<span class=\"token operator\">=</span><span class=\"token string\">\"一九八四\"</span><span class=\"token punctuation\">,</span> price<span class=\"token operator\">=</span><span class=\"token number\">32.00</span><span class=\"token punctuation\">,</span> pub_date<span class=\"token operator\">=</span><span class=\"token string\">\"2021-01-01\"</span><span class=\"token punctuation\">,</span> publish<span class=\"token operator\">=</span>pub_obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># book = models.Book.objects.create (title=\"先知・沙与沫\", price=35.00, pub_date=\"2018-07-01\", publish_id=pub_obj.pk)  # 方法二</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>多对多添加数据：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">addBook</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">#  获取书籍对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    book1 <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>title<span class=\"token operator\">=</span><span class=\"token string\">\"神殿的基石\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    book2 <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>title<span class=\"token operator\">=</span><span class=\"token string\">\"深处的镜子\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">#  获取作者对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    author <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Author<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"卢齐安·布拉加\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">#  给作者对象的 book_set 属性用 add 方法传书籍对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    author<span class=\"token punctuation\">.</span>book_set<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>book1<span class=\"token punctuation\">,</span> book2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\"># author.book_set.add (book1.pk)  # 方法二</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>author<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>其他用法：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>book_obj <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>author_list <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Author<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>id__gt<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>book_obj<span class=\"token punctuation\">.</span>authors<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>author_list<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 将 id 大于 2 的作者对象添加到这本书的作者集合中</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 方式二：传对象 id</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>book_obj<span class=\"token punctuation\">.</span>authors<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 将 id=1 和 id=3 的作者对象添加到这本书的作者集合中</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>pub <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Publish<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"商务印书馆\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>wo <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Author<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"申忠信\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>book <span class=\"token operator\">=</span> wo<span class=\"token punctuation\">.</span>book_set<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>title<span class=\"token operator\">=</span><span class=\"token string\">\"诗韵词韵速查手册\"</span><span class=\"token punctuation\">,</span> price<span class=\"token operator\">=</span><span class=\"token number\">38.00</span><span class=\"token punctuation\">,</span> pub_date<span class=\"token operator\">=</span><span class=\"token string\">\"2014-07-01\"</span><span class=\"token punctuation\">,</span> publish<span class=\"token operator\">=</span>pub<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>author_obj <span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>Author<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>book_obj <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>author_obj<span class=\"token punctuation\">.</span>book_set<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>book_obj<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 移除指定关联</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>book <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>title<span class=\"token operator\">=</span><span class=\"token string\">\"菜鸟教程\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>book<span class=\"token punctuation\">.</span>authors<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 移除所有关联</span></pre></td></tr></table></figure></li>\n<li>\n<p>查询数据</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查询某书籍出版社位置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>book <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>pk<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>res <span class=\"token operator\">=</span> book<span class=\"token punctuation\">.</span>publish<span class=\"token punctuation\">.</span>city</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 查询某出版社的出版记录</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>pub <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Publish<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"人民文学出版社\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>res <span class=\"token operator\">=</span> pub<span class=\"token punctuation\">.</span>book_set<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> res<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 查询某作者联系方式</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>author <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Author<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"贾平凹\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>res <span class=\"token operator\">=</span> author<span class=\"token punctuation\">.</span>au_detail<span class=\"token punctuation\">.</span>phone</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 查询成都作者</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>addr <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>AuthorDetail<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>addr<span class=\"token operator\">=</span><span class=\"token string\">\"成都\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>res <span class=\"token operator\">=</span> addr<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">.</span>name</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># 查询某书籍的联名作者</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>book <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>title<span class=\"token operator\">=</span><span class=\"token string\">\"脂砚斋重评石头记\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>res <span class=\"token operator\">=</span> book<span class=\"token punctuation\">.</span>authors<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> res<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">.</span>au_detail<span class=\"token punctuation\">.</span>phone<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\"># 查询某作者的所有书籍</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>author <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Author<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"威廉·萨默塞特·毛姆\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>res <span class=\"token operator\">=</span> author<span class=\"token punctuation\">.</span>book_set<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> res<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>双下划线跨表查询</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查询某出版社书籍及价格</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>res <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>publish__name<span class=\"token operator\">=</span><span class=\"token string\">\"凤凰文艺出版社\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>values_list<span class=\"token punctuation\">(</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"price\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>res <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Publish<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"凤凰文艺出版社\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>values_list<span class=\"token punctuation\">(</span><span class=\"token string\">\"book__title\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"book__price\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 查询某作者所有书籍名称</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>res <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>authors__name<span class=\"token operator\">=</span><span class=\"token string\">\"张爱玲\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>values_list<span class=\"token punctuation\">(</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>res <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Author<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"张爱玲\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>values_list<span class=\"token punctuation\">(</span><span class=\"token string\">\"book__title\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 查询某作者联系方式</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>res <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Author<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"汪曾祺\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>values_list<span class=\"token punctuation\">(</span><span class=\"token string\">\"au_detail__phone\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>res <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>AuthorDetail<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>author__name<span class=\"token operator\">=</span><span class=\"token string\">\"汪曾祺\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>values_list<span class=\"token punctuation\">(</span><span class=\"token string\">\"phone\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>Django ORM 主要思想在于通过操作对象来实现对数据库关联表的增删改查，其实这种通过对象实体之间的关系来操作数据库关联表的技术（或框架）并不鲜见，例如 Java 中的 Spring Data JPA，理解了对象操作的本质，自然一通百通，而不需要强行记忆。</p>\n</blockquote>\n<h3 id=\"django-form-组件\"><a class=\"anchor\" href=\"#django-form-组件\">#</a> Django Form 组件</h3>\n<p>Django Form 组件用于对页面进行初始化，生成 HTML 标签，此外还可以对用户提交对数据进行校验（显示错误信息）。</p>\n<h4 id=\"使用方式\"><a class=\"anchor\" href=\"#使用方式\">#</a> 使用方式</h4>\n<ol>\n<li>\n<p>创建 Form 组件文件。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/app/My_forms.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django <span class=\"token keyword\">import</span> forms</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>exceptions <span class=\"token keyword\">import</span> ValidationError</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> app <span class=\"token keyword\">import</span> models</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">EmpForm</span><span class=\"token punctuation\">(</span>forms<span class=\"token punctuation\">.</span>Form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    name <span class=\"token operator\">=</span> forms<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>min_length<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">\"姓名\"</span><span class=\"token punctuation\">,</span> error_messages<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"min_length\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"至少需要4个字符\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"required\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"该字段不能为空!\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    age <span class=\"token operator\">=</span> forms<span class=\"token punctuation\">.</span>IntegerField<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"年龄\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    salary <span class=\"token operator\">=</span> forms<span class=\"token punctuation\">.</span>DecimalField<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"工资\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>视图处理逻辑</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/app/views.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> HttpResponse</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> render<span class=\"token punctuation\">,</span> redirect</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> app <span class=\"token keyword\">import</span> models</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> app<span class=\"token punctuation\">.</span>My_forms <span class=\"token keyword\">import</span> EmpForm</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add_emp</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        form <span class=\"token operator\">=</span> EmpForm<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">\"add_emp.html\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"form\"</span><span class=\"token punctuation\">:</span> form<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        form <span class=\"token operator\">=</span> EmpForm<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span> form<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 进行数据校验</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\"># 校验成功</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            data <span class=\"token operator\">=</span> form<span class=\"token punctuation\">.</span>cleaned_data  <span class=\"token comment\"># 校验成功的值，会放在 cleaned_data 里。</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            data<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token string\">'r_salary'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            models<span class=\"token punctuation\">.</span>Emp<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span><span class=\"token string\">'ok'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\"># return render(request, \"add_emp.html\", &#123;\"form\": form&#125;)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 打印错误信息</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            clean_errors <span class=\"token operator\">=</span> form<span class=\"token punctuation\">.</span>errors</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">\"add_emp.html\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"form\"</span><span class=\"token punctuation\">:</span> form<span class=\"token punctuation\">,</span> <span class=\"token string\">\"clean_errors\"</span><span class=\"token punctuation\">:</span> clean_errors<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>配置路由：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>path<span class=\"token punctuation\">(</span><span class=\"token string\">'add_emp/'</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">.</span>add_emp<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>新建模板文件</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>!<span class=\"token operator\">-</span><span class=\"token operator\">-</span> mydjango<span class=\"token operator\">/</span>templates<span class=\"token operator\">/</span>add_emp<span class=\"token punctuation\">.</span>html<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>!DOCTYPE html<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>html lang<span class=\"token operator\">=</span><span class=\"token string\">\"en\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">></span>添加员工<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span>!<span class=\"token operator\">-</span><span class=\"token operator\">-</span> <span class=\"token number\">1</span>、自己手动写HTML页面<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">&lt;</span>form action<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span> method<span class=\"token operator\">=</span><span class=\"token string\">\"post\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>姓名：<span class=\"token operator\">&lt;</span><span class=\"token builtin\">input</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"name\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>年龄：<span class=\"token operator\">&lt;</span><span class=\"token builtin\">input</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"age\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>工资：<span class=\"token operator\">&lt;</span><span class=\"token builtin\">input</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"salary\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token operator\">%</span> csrf_token <span class=\"token operator\">%</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token builtin\">input</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#123;</span> clean_errors <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token operator\">&lt;</span>!<span class=\"token operator\">-</span><span class=\"token operator\">-</span> <span class=\"token number\">2</span>、通过form对象的as_p方法实现<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token operator\">&lt;</span>form action<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span> method<span class=\"token operator\">=</span><span class=\"token string\">\"post\"</span> novalidate<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token operator\">%</span> csrf_token <span class=\"token operator\">%</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#123;</span> form<span class=\"token punctuation\">.</span>as_p <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token builtin\">input</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token operator\">&lt;</span>!<span class=\"token operator\">-</span><span class=\"token operator\">-</span> <span class=\"token number\">3</span>、手动获取form对象的字段<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token operator\">&lt;</span>form action<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span> method<span class=\"token operator\">=</span><span class=\"token string\">\"post\"</span> novalidate<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token operator\">%</span> csrf_token <span class=\"token operator\">%</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token operator\">&lt;</span>label <span class=\"token keyword\">for</span><span class=\"token operator\">=</span><span class=\"token string\">\"id_&#123;.&#123; form.name.name &#125;&#125;\"</span><span class=\"token operator\">></span>姓名<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#123;</span> form<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#123;</span> form<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">.</span><span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token operator\">&lt;</span>label <span class=\"token keyword\">for</span><span class=\"token operator\">=</span><span class=\"token string\">\"id_&#123;.&#123; form.age.name &#125;&#125;\"</span><span class=\"token operator\">></span>年龄<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#123;</span> form<span class=\"token punctuation\">.</span>age <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#123;</span> form<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">.</span><span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token operator\">&lt;</span>label <span class=\"token keyword\">for</span><span class=\"token operator\">=</span><span class=\"token string\">\"id_salary\"</span><span class=\"token operator\">></span>工资<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#123;</span> form<span class=\"token punctuation\">.</span>salary <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#123;</span> form<span class=\"token punctuation\">.</span>salary<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">.</span><span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token builtin\">input</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token operator\">&lt;</span>!<span class=\"token operator\">-</span><span class=\"token operator\">-</span> <span class=\"token number\">4</span>、用<span class=\"token keyword\">for</span>循环展示所有字段 <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token operator\">&lt;</span>form action<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span> method<span class=\"token operator\">=</span><span class=\"token string\">\"post\"</span> novalidate<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token operator\">%</span> csrf_token <span class=\"token operator\">%</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token operator\">%</span> <span class=\"token keyword\">for</span> field <span class=\"token keyword\">in</span> form <span class=\"token operator\">%</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token operator\">&lt;</span>label <span class=\"token keyword\">for</span><span class=\"token operator\">=</span><span class=\"token string\">\"id_&#123;.&#123; field.name &#125;&#125;\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#123;</span> field<span class=\"token punctuation\">.</span>label <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#123;</span> field <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#123;</span> field<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">.</span><span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token operator\">%</span> endfor <span class=\"token operator\">%</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token builtin\">input</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"局部钩子和全局钩子\"><a class=\"anchor\" href=\"#局部钩子和全局钩子\">#</a> 局部钩子和全局钩子</h4>\n<p>表单组件：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/app/My_forms.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django <span class=\"token keyword\">import</span> forms</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>exceptions <span class=\"token keyword\">import</span> ValidationError</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> app <span class=\"token keyword\">import</span> models</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">EmpForm</span><span class=\"token punctuation\">(</span>forms<span class=\"token punctuation\">.</span>Form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    name <span class=\"token operator\">=</span> forms<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>min_length<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">\"姓名\"</span><span class=\"token punctuation\">,</span> error_messages<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"required\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"该字段不能为空!\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"min_length\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"用户名太短。\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    age <span class=\"token operator\">=</span> forms<span class=\"token punctuation\">.</span>IntegerField<span class=\"token punctuation\">(</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"年龄\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    salary <span class=\"token operator\">=</span> forms<span class=\"token punctuation\">.</span>DecimalField<span class=\"token punctuation\">(</span>max_digits<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> decimal_places<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">\"工资\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    r_salary <span class=\"token operator\">=</span> forms<span class=\"token punctuation\">.</span>DecimalField<span class=\"token punctuation\">(</span>max_digits<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> decimal_places<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">\"请再输入工资\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">clean_name</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 局部钩子</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        val <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>cleaned_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span> val<span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">raise</span> ValidationError<span class=\"token punctuation\">(</span><span class=\"token string\">\"用户名不能是纯数字\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">elif</span> models<span class=\"token punctuation\">.</span>Emp<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">raise</span> ValidationError<span class=\"token punctuation\">(</span><span class=\"token string\">\"用户名已存在！\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">return</span> val</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">clean</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 全局钩子 确认两次输入的工资是否一致。</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        val <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>cleaned_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"salary\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        r_val <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>cleaned_data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"r_salary\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> val <span class=\"token operator\">==</span> r_val<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>cleaned_data</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">raise</span> ValidationError<span class=\"token punctuation\">(</span><span class=\"token string\">\"请确认工资是否一致。\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>视图处理：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add_emp</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        form <span class=\"token operator\">=</span> EmpForm<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 初始化 form 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">\"add_emp.html\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"form\"</span><span class=\"token punctuation\">:</span>form<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        form <span class=\"token operator\">=</span> EmpForm<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 将数据传给 form 对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> form<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 进行校验</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            data <span class=\"token operator\">=</span> form<span class=\"token punctuation\">.</span>cleaned_data</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            data<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token string\">\"r_salary\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            models<span class=\"token punctuation\">.</span>Emp<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span><span class=\"token string\">\"/index/\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 校验失败</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            clear_errors <span class=\"token operator\">=</span> form<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"__all__\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 获取全局钩子错误信息</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">\"add_emp.html\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"form\"</span><span class=\"token punctuation\">:</span> form<span class=\"token punctuation\">,</span> <span class=\"token string\">\"clear_errors\"</span><span class=\"token punctuation\">:</span> clear_errors<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>模板：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">novalidate</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &#123;.% csrf_token %&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id_&#123;.&#123; form.name.name &#125;&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>姓名<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        &#123;.&#123; form.name &#125;&#125; <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>&#123;.&#123; form.name.errors.0 &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id_&#123;.&#123; form.age.name &#125;&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>年龄<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        &#123;.&#123; form.age &#125;&#125; <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>&#123;.&#123; form.age.errors.0 &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id_salary<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>工资<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        &#123;.&#123; form.salary &#125;&#125; <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>&#123;.&#123; form.salary.errors.0 &#125;&#125;&#123;.&#123; clear_errors.0 &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id_r_salary<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>请再输入工资<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        &#123;.&#123; form.r_salary &#125;&#125; <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>&#123;.&#123; form.r_salary.errors.0 &#125;&#125;&#123;.&#123; clear_errors.0 &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>注：这一部分的代码示例基本是从<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9kamFuZ28vZGphbmdvLWZvcm0tY29tcG9uZW50Lmh0bWw=\"> Django Form 组件 | 菜鸟教程</span>直接拷贝过来的。（目前的 WEB 应用基本都是前后端分离的，就实际而言，这一小节内容的价值并不大，因此，对于这一部分的代码也未做实际的操作验证）</p>\n</blockquote>\n<h3 id=\"django-auth\"><a class=\"anchor\" href=\"#django-auth\">#</a> Django Auth</h3>\n<p>Django 用户认证组件需要导入 auth 模块：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 认证模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> auth</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 对应数据库</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> User</pre></td></tr></table></figure><h4 id=\"用户级别\"><a class=\"anchor\" href=\"#用户级别\">#</a> 用户级别</h4>\n<p>可以通过如下方法创建用户对象：</p>\n<ol>\n<li>\n<p><code>create()</code>  创建一个普通用户，密码是明文的。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span><span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>create_user()</code>  创建一个普通用户，密码是密文的。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create_user<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span><span class=\"token string\">'zhangsan'</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span><span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>create_superuser</code>  创建一个超级用户，密码是密文的，要多传一个邮箱 email 参数。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create_superuser<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span><span class=\"token string\">'chinmoku'</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span><span class=\"token string\">'123456'</span><span class=\"token punctuation\">,</span> email<span class=\"token operator\">=</span><span class=\"token string\">'chinmoku@xxx.com'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"用户验证\"><a class=\"anchor\" href=\"#用户验证\">#</a> 用户验证</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> auth</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">\"login.html\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    username <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    password <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwd\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    valid_num <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"valid_num\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    keep_str <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"keep_str\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> keep_str<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> valid_num<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        user_obj <span class=\"token operator\">=</span> auth<span class=\"token punctuation\">.</span>authenticate<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span>username<span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span>password<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>user_obj<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> user_obj<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span><span class=\"token string\">\"/login/\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            auth<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> user_obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            path <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"next\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token string\">\"/index/\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span><span class=\"token string\">\"/login/\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>如果用户账号密码验证通过，则返回该用户对象，否则，返回 None。</p>\n<h4 id=\"用户注销\"><a class=\"anchor\" href=\"#用户注销\">#</a> 用户注销</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> auth</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">logout</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    _out <span class=\"token operator\">=</span> auth<span class=\"token punctuation\">.</span>logout<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>_out<span class=\"token punctuation\">)</span> <span class=\"token comment\"># None</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span><span class=\"token string\">\"/login/\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"登录重定向\"><a class=\"anchor\" href=\"#登录重定向\">#</a> 登录重定向</h4>\n<p>可以通过装饰器，指定某页面需要登录才能访问：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>decorators <span class=\"token keyword\">import</span> login_required</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token decorator annotation punctuation\">@login_required</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>此时访问 <span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo4MDAwL2luZGV4Lw==\">http://127.0.0.1:8000/index/</span> ，如果用户未登录，则会被重定向到 <span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo4MDAwL2xvZ2luLz9uZXh0PS9pbmRleC8=\">http://127.0.0.1:8000/login/?next=/index/</span> 页面。</p>\n<p>当用户登录时，可以通过如下方式进行处理，使其登录成功后重定向到 <span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo4MDAwL2luZGV4Lw==\">http://127.0.0.1:8000/index/</span> 页面：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>path <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"next\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token string\">\"/index/\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"cookies-session\"><a class=\"anchor\" href=\"#cookies-session\">#</a> Cookies &amp; Session</h3>\n<h4 id=\"django-cookies-操作\"><a class=\"anchor\" href=\"#django-cookies-操作\">#</a> Django Cookies 操作</h4>\n<p>Cookies 在 Django 中的简单应用如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">\"login.html\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    username <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    password <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwd\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    user_obj <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span>username<span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>user_obj<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> user_obj<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span><span class=\"token string\">\"/login/\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        rep <span class=\"token operator\">=</span> redirect<span class=\"token punctuation\">(</span><span class=\"token string\">\"/index/\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        rep<span class=\"token punctuation\">.</span>set_cookie<span class=\"token punctuation\">(</span><span class=\"token string\">\"is_login\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 设置 Cookies</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> rep</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>COOKIES<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'is_login'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    status <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>COOKIES<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'is_login'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 获取 Cookies</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> status<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span><span class=\"token string\">'/login/'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">\"index.html\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">logout</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    rep <span class=\"token operator\">=</span> redirect<span class=\"token punctuation\">(</span><span class=\"token string\">'/login/'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    rep<span class=\"token punctuation\">.</span>delete_cookie<span class=\"token punctuation\">(</span><span class=\"token string\">\"is_login\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 删除 Cookies</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> rep</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>COOKIES<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'is_login'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    status <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>COOKIES<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'is_login'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 获取 Cookies</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> status<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span><span class=\"token string\">'/login/'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">\"order.html\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"django-session-操作\"><a class=\"anchor\" href=\"#django-session-操作\">#</a> Django Session 操作</h4>\n<p>Session 在 Django 中的简单应用如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">\"login.html\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    username <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    password <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwd\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    user_obj <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>UserInfo<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span>username<span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>user_obj<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> user_obj<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span><span class=\"token string\">\"/session_login/\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        request<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">[</span><span class=\"token string\">'is_login'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>  <span class=\"token comment\"># 设置 session</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        request<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">[</span><span class=\"token string\">'user1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> username</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span><span class=\"token string\">\"/s_index/\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">s_index</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    status <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'is_login'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 获取 session</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> status<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span><span class=\"token string\">'/session_login/'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">\"s_index.html\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">s_logout</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\"># del request.session [\"is_login\"] # 删除 session_data 里的一组键值对</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    request<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>flush<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 删除一条记录包括 (session_key session_data expire_date) 三个字段</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span><span class=\"token string\">'/session_login/'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"django-中间件\"><a class=\"anchor\" href=\"#django-中间件\">#</a> Django 中间件</h3>\n<p>Django 中间件是修改 Django request 或者 response 对象的钩子，它可以在用户请求之后、服务响应之前做出一些特定的处理。</p>\n<blockquote>\n<p>每个中间件都需要在 <span class=\"exturl\" data-url=\"aHR0cDovL3NldHRpbmdzLnB5\">settings.py</span> 中的  <code>MIDDLEWARE</code>  下进行配置。</p>\n</blockquote>\n<h4 id=\"自定义中间件\"><a class=\"anchor\" href=\"#自定义中间件\">#</a> 自定义中间件</h4>\n<p>创建中间件文件：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/app/middlewares.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>deprecation <span class=\"token keyword\">import</span> MiddlewareMixin</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MD1</span><span class=\"token punctuation\">(</span>MiddlewareMixin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\"># 中间件需要继承 MiddlewareMixin</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr></table></figure><p>在 <span class=\"exturl\" data-url=\"aHR0cDovL3NldHRpbmdzLnB5\">settings.py</span> 中进行注册：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/mydjango/settings.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>MIDDLEWARE <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token string\">'django.middleware.security.SecurityMiddleware'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token string\">'django.contrib.sessions.middleware.SessionMiddleware'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token string\">'django.middleware.common.CommonMiddleware'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token string\">'django.middleware.csrf.CsrfViewMiddleware'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token string\">'django.contrib.auth.middleware.AuthenticationMiddleware'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token string\">'django.contrib.messages.middleware.MessageMiddleware'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token string\">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token string\">'app.middlewares.MD1'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h4 id=\"中间件方法\"><a class=\"anchor\" href=\"#中间件方法\">#</a> 中间件方法</h4>\n<p>中间件类中可以定义如下方法：</p>\n<ol>\n<li>process_request</li>\n<li>process_view</li>\n<li>process_exception</li>\n<li>process_response</li>\n</ol>\n<p>方法定义实例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mydjango/app/middlewares.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>deprecation <span class=\"token keyword\">import</span> MiddlewareMixin</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> render<span class=\"token punctuation\">,</span> HttpResponse</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MD1</span><span class=\"token punctuation\">(</span>MiddlewareMixin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">process_request</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"md1  process_request 方法。\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 在视图之前执行</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">process_response</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 基于请求响应</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"md1  process_response 方法！\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 在视图之后</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> response</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">process_view</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> view_func<span class=\"token punctuation\">,</span> view_args<span class=\"token punctuation\">,</span> view_kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"md1  process_view 方法！\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 在视图之前执行 顺序执行</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> view_func<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">process_exception</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 引发错误 才会触发这个方法</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"md1  process_exception 方法！\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 返回错误信息</span></pre></td></tr></table></figure><blockquote>\n<p>注：个人（基于 JAVA）理解，这里的【中间件】概念，其实相当于 Spring 的切面，或者拦截器等，能够在一个请求的整个生命周期中进行监控处理。</p>\n</blockquote>\n<h3 id=\"fbv-cbv\"><a class=\"anchor\" href=\"#fbv-cbv\">#</a> FBV &amp; CBV</h3>\n<ol>\n<li>\n<p>FBV</p>\n<p>FBV（function base views）基于函数的视图，就是在视图里使用函数处理请求。</p>\n<p>其实就是上文中频繁使用的请求处理方式。</p>\n</li>\n<li>\n<p>CBV</p>\n<p>CBV（class base views）基于类的视图，就是在视图里使用类处理请求。</p>\n<p>CBV 主要通过 View 提供的静态方法  <code>as_view()</code>  来实现，as_view 方法是基于类的外部接口，他返回一个视图函数，调用后请求会传递给 dispatch 方法，dispatch 方法再根据不同请求来处理不同的方法。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> render<span class=\"token punctuation\">,</span>HttpResponse</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> View</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Login</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># CBV 类需要继承 View</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span><span class=\"token string\">\"GET 方法\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        user <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        pwd <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"pwd\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> user <span class=\"token operator\">==</span> <span class=\"token string\">\"runoob\"</span> <span class=\"token keyword\">and</span> pwd <span class=\"token operator\">==</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span><span class=\"token string\">\"POST 方法\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span><span class=\"token string\">\"POST 方法 1\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>路由：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>urlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    path<span class=\"token punctuation\">(</span><span class=\"token string\">\"login/\"</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">.</span>Login<span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"django-部署\"><a class=\"anchor\" href=\"#django-部署\">#</a> Django 部署</h3>\n<h4 id=\"nginx-uwsgi\"><a class=\"anchor\" href=\"#nginx-uwsgi\">#</a> Nginx + uwsgi</h4>\n<p><span class=\"label danger\">❗️TODO</span> 待完善</p>\n<h3 id=\"文末总结\"><a class=\"anchor\" href=\"#文末总结\">#</a> 文末总结</h3>\n<div class=\"note info\">\n<p>写这一篇博客时，先是跟着 B 站视频学了一段，后面觉得讲得一般，就放弃了，转而跟着菜鸟教程编写笔记，断断续续，差不多用了两周多的时间。中途也在看 Django 开发的开源项目，感觉挺有趣的，这里强烈推荐一下：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kamFuZ28tdnVlLWFkbWluLmNvbS8=\">Django-Vue-Admin</span>，也可能是因为我对若依 Java 那一套很熟悉，所以这个开源项目对我来说，要看懂也不太难。</p>\n</div>\n<h3 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWkzNDExaTdhTA==\">https://www.bilibili.com/video/BV1i3411i7aL</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9kamFuZ28vZGphbmdvLXR1dG9yaWFsLmh0bWw=\">https://www.runoob.com/django/django-tutorial.html</span></li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "Python入门教程",
                "python"
            ]
        },
        {
            "id": "https://www.chinmoku.cc/computer-science/java-learning-path/3-advanced/zookeeper-tutorial/",
            "url": "https://www.chinmoku.cc/computer-science/java-learning-path/3-advanced/zookeeper-tutorial/",
            "title": "Zookeeper 基础教程",
            "date_published": "2021-10-18T12:55:42.000Z",
            "content_html": "<div class=\"note info\">\n<p>这篇文章原本是跟着 B 站教学视频学习 Zookeeper 时记录下的笔记，但后来再次查看时，发现原本笔记中很多内容并不是太清晰，因此也整理参考了一些其他的文章，进行综合整理，希望能够尽可能详尽地触及到 ZK 相关的所有基础知识点。</p>\n</div>\n<h3 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h3>\n<blockquote>\n<p>Zookeeper 是一个分布式的，开放源码的分布式应用程序协调服务，是 Google 的 Chubby 一个开源的实现，是 Hadoop 和 Hbase 的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p>\n<p>quote from <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS96b29rZWVwZXI=\">百度百科_zookeeper</span></p>\n</blockquote>\n<p><code>Zookeeper</code>  从设计模式角度来理解：是一个基于观察者模式设计的分布式服务管理框架，它负责存储数据，并接受观察者的注册，一旦这些数据的状态发生变化，ZK 就会负责通知已经在 ZK 上注册的那些观察者做出相应的反应。</p>\n<h4 id=\"zookeeper-的特点\"><a class=\"anchor\" href=\"#zookeeper-的特点\">#</a> Zookeeper 的特点</h4>\n<ol>\n<li>它是由一个  <code>Leader</code> ，多个  <code>Follower</code>  组成的继承。</li>\n<li>全局数据一致：每个 Server 保存一份相同的数据副本，Client 无论连接到哪个 Server，数据都是一致的。</li>\n<li>可靠性：如果消息被其中一台服务器接收，那么将被所有服务器接收。</li>\n<li>顺序性：更新请求顺序执行，来自同一个客户端的更新请求按其发送顺序依次执行。</li>\n<li>原子性：一次数据更新要么成功，要么失败。</li>\n<li>实时性：在一定时间范围内，客户端能读到最新的数据。</li>\n<li>半数机制：集群中只要有<ins>半数以上</ins>的节点存活，zookeeper 集群就能正常提供服务，所以 zookeeper 适合安装奇数台服务器。</li>\n</ol>\n<h4 id=\"zookeeper-架构图\"><a class=\"anchor\" href=\"#zookeeper-架构图\">#</a> Zookeeper 架构图</h4>\n<p>Zookeeper 数据模型的结构与 Unix 文件系统类似，整体上可以看做是一棵树，每个节点被称为一个  <code>ZNode</code> 。每个 ZNode 默认能够存储 1MB 的数据，每个 ZNode 都可以通过其路径唯一标识。</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/10/d4ced668cec031d5ddc5b7cd1fb4c13d1634485347.jpg\" alt=\"Zookeeper 架构图\" /></p>\n<p>Zookeeper 角色：</p>\n<ol>\n<li>Leader：它是 Zookeeper 集群工作的核心，事务请求（写操作）的唯一调度和处理者，保证集群事务处理的顺序性；集群内部各个服务的调度者。对于所有服务节点中具有 create，setData，delete 等有写性质的请求，需要统一转发给 leader 处理，Leader 需要决定编号、执行操作，这个过程称为一个事务。</li>\n<li>Follower：处理客户端非事务（读操作）请求，转发事务请求给 Leader 参与集群 leader 选举投票，参与选举的所有服务器节点数应为  <code>2 * n - 1</code>  台。此外，针对访问量较大的 zookeeper 集群，还可以新增观察者角色。</li>\n<li>Observer：观察者角色，观察 zooKeeper 集群的最新状态变化并将这些状态进行同步，其对于非事务请求可以进行独立处理，对于事务请求，则会转发给 Leader 服务器处理。它只提供服务，不参与任何形式的投票，通常用于在不影响集群事务处理能力的前提下提升集群的非事务处理能力。</li>\n</ol>\n<h4 id=\"zookeeper-的应用场景\"><a class=\"anchor\" href=\"#zookeeper-的应用场景\">#</a> Zookeeper 的应用场景</h4>\n<p>Zookeeper 是一个典型的  <code>发布/订阅模式</code>  的分布式数据管理与协调框架，它提供基于类似于文件系统的目录节点树方式的数据进行存储（共享的内存中的树型结构）。利用 zooKeeper 可以非常方便构建一系列分布式应用中都会涉及到的核心功能。</p>\n<p>Zookeeper 提供的服务主要包括：</p>\n<ol>\n<li>\n<p>数据的发布和订阅</p>\n<p>数据发布 / 订阅的一个常见的场景是配置中心，发布者将数据发布到 zookeeper 上供订阅者订阅，从而达到动态获取数据的目的。</p>\n<p>这种应用场景通常有以下几个特点：</p>\n<ul>\n<li>数据内容通常是数据量较小的键值对。</li>\n<li>数据在客户端运行期间，可能会发生动态变化。</li>\n<li>集群环境下，在不同客户端之间需要进行配置共享和保持一致。</li>\n</ul>\n<p>Zookeeper 发布与订阅采用推拉结合的方式：</p>\n<ol>\n<li>推：服务端将事件推送给注册了监控节点的客户端，客户端通过 Watcher 获取到事件通知。</li>\n<li>拉：客户端获取到通知后，主动到服务端拉取最新数据。</li>\n</ol>\n</li>\n<li>\n<p>软负载均衡</p>\n<p>Zookeeper 中记录了每台服务器的访问数，它可以根据一定的算法将请求分发到压力最小的服务器进行处理。</p>\n</li>\n<li>\n<p>统一命名服务</p>\n<ul>\n<li>\n<p>提供类 JNDI 功能，可以把系统中各种服务的名称、地址以及目录信息存放在 Zookeeper，需要的时候去 Zookeeper 中读取。</p>\n</li>\n<li>\n<p>制作分布式的序列号生成器。</p>\n<p>利用 zooKeeper <ins>顺序节点</ins>的特性，制作分布式的序列号生成器，或者叫 id 生成器。在创建节点时设置节点是有序的，zookeeper 就会自动在创建的节点名称后追加序号。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>分布式协调 / 通知</p>\n<p>在 zookeeper 中，可以使用其临时节点的特性，不同机器在 zooKeeper 的一个指定节点下创建临时子节点，不同机器之间可以根据这个临时节点来判断客户端机器是否存活。</p>\n</li>\n<li>\n<p>统一集群管理</p>\n<p>集群管理主要指集群监控和集群控制两个方面。前者侧重于集群运行时的状态的收集，后者则是对集群进行操作与控制。</p>\n<p>利用 zookeeper 可以很方便地实现集群管理和监控组件，其思路主要如下：</p>\n<p>当某一主机上线时，将该主机节点添加到指定的 zookeeper 目录下，如  <code>/servers/[hostname]</code> ，此时关注  <code>/servers</code>  节点的监控中心将会收到子节点变更事件（即上线通知），并可以进行相应的业务逻辑处理，从而实现了服务器动态上下线。</p>\n</li>\n<li>\n<p>分布式锁</p>\n<p>通过对 zookeeper 进行逻辑处理，也可以实现分布式锁控制。（后文将做详细讲解）</p>\n</li>\n<li>\n<p>分布式队列</p>\n</li>\n</ol>\n<h3 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h3>\n<h4 id=\"本地安装\"><a class=\"anchor\" href=\"#本地安装\">#</a> 本地安装</h4>\n<p>下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96b29rZWVwZXIuYXBhY2hlLm9yZy9yZWxlYXNlcy5odG1s\">https://zookeeper.apache.org/releases.html</span></p>\n<ol>\n<li>\n<p>安装前提</p>\n<ul>\n<li>\n<p>环境准备</p>\n<blockquote>\n<p>参考文章：</p>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMTgwMDY5L2FydGljbGUvZGV0YWlscy8xMTMzODc4NDI=\">VMware15 上安装 CentOS8 图形化界面</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaW15YWxvc3QvcC84NzA5NTc4Lmh0bWw=\">Linux 下安装 JDK</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc2hpcmVlbmxlZTR0ZXN0aW5nL3AvOTQ2OTY1MC5odG1s\">如何使用 Xshell 连接 VMware 上的 Linux 虚拟机</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNzc0MzI1L2FydGljbGUvZGV0YWlscy84MTE4OTAzMw==\">VMware 如何通过现有虚拟机克隆新的虚拟机</span></li>\n</ol>\n</blockquote>\n</li>\n<li>\n<p>将下载的 zookeeper 安装包拷贝到 Linux 目录下。</p>\n<p>假定上传后的文件位置为  <code>/opt/software/apache-zookeeper-3.5.7-bin.tar.gz</code> 。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tar</span> -zxvf apache-zookeeper-3.5.7-bin.tar.gz -C /opt/module/</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>/module/</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">mv</span> apache-zookeeper-3.5.7-bin/ zookeeper-3.5.7</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">cd</span> zookeeper-3.5.7/conf/</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">mv</span> zoo_sample.cfg zoo.cfg</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token punctuation\">..</span>/zkData</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">vim</span> zoo.cfg</pre></td></tr></table></figure></li>\n<li>\n<p>修改配置文件</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 此处为简洁显示，删除了原文件的注释</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token attr-name\">tickTime</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">2000</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token attr-name\">initLimit</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">10</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token attr-name\">syncLimit</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">5</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token attr-name\">dataDir</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">/opt/module/zookeeper-3.5.7/zkData</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token attr-name\">clientPort</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">2181</span></pre></td></tr></table></figure></li>\n<li>\n<p>启动</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">..</span>/bin/zkServer.sh start</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>jps -l</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">..</span>/bin/zkCli.sh</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">ls</span> /</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>quit</pre></td></tr></table></figure></li>\n<li>\n<p>其他操作</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">..</span>/bin/zkServer.sh status</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">..</span>/bin/zkServer.sh stop</pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>配置参数说明</p>\n<p>从官网下载 zookeeper 后，其提供的配置示例文件  <code>zoo_sample.cfg</code>  内容如下：</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 此处为简洁显示，删除了原文件的注释</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token attr-name\">tickTime</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">2000</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token attr-name\">initLimit</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">10</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token attr-name\">syncLimit</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">5</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token attr-name\">dataDir</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">/tmp/zookeeper</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token attr-name\">clientPort</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">2181</span></pre></td></tr></table></figure><ul>\n<li>tickTime 表示通信心跳时间，即 zk 客户端与服务端通信频率，单位：毫秒。</li>\n<li>initLimit 表示 Leader 与 Follower 初始通信时限，超出该时间意味着通信连接失败，单位：tickTime。</li>\n<li>syncLimit 表示 Leader 与 Follower 同步通信时限，如果超出该时间，Leader 则 Follower 判定为死亡，单位：tickTime。</li>\n<li>dataDir：保存 zk 的数据目录。</li>\n<li>clientPort：客户端连接端口。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"集群安装\"><a class=\"anchor\" href=\"#集群安装\">#</a> 集群安装</h4>\n<ol>\n<li>\n<p>准备<ins>奇数台</ins>服务器（或虚拟机）。</p>\n</li>\n<li>\n<p>将相同环境部署到其他主机。</p>\n<p>按照本地安装步骤，分别在其他服务器上安装 zk。（也可以直接克隆当前服务器，然后修改主机、网络等信息）</p>\n<p>这里假定三台主机分别为：hadoop01，hadoop02，hadoop03。</p>\n</li>\n<li>\n<p>配置 myid</p>\n<p>对于 zk 集群环境，必须在每一台主机上配置唯一标识。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /opt/module/zookeeper-3.5.7/zkData</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">vim</span> myid</pre></td></tr></table></figure><p><code>myid</code>  文件中输入当前 zk 的数字编号，可以随意指定，但需要与同集群下的其他主机的 zk 数字编号不同。</p>\n<p>这里假定主机与 myid 的对应关系为：hadoop01 -&gt; 1，hadoop02 -&gt; 2，hadoop03 -&gt; 3。</p>\n<p>编辑所有主机上的文件 /opt/module/zookeeper-3.5.7/conf/zoo.cfg 并在其末尾追加内容：</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token attr-name\">server.1</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">hadoop01:2888:3888;2181</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token attr-name\">server.2</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">hadoop02:2888:3888;2181</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token attr-name\">server.3</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">hadoop03:2888:3888;2181</span></pre></td></tr></table></figure><p>注意：此处的  <code>server.[myid]:[hostname]:2888:3888;2181</code>  必须与  <code>myid</code>  及主机名保持一致。</p>\n</li>\n<li>\n<p>依次启动</p>\n<blockquote>\n<p>由于同集群下的主机各自未配置防火墙出入站规则，可以选择关闭防火墙。</p>\n</blockquote>\n<p>防火墙相关命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl status firewalld.service <span class=\"token comment\"># 查看防火墙状态</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>systemctl start firewalld.service <span class=\"token comment\"># 打开防火墙</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>systemctl stop firewalld.service <span class=\"token comment\"># 关闭防火墙</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>systemctl <span class=\"token builtin class-name\">enable</span> firewalld.service <span class=\"token comment\"># 开启防火墙</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>systemctl disable firewalld.service <span class=\"token comment\"># 禁用防火墙</span></pre></td></tr></table></figure><p>依次启动 zk 服务：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/opt/module/zookeeper-3.5.7/bin/zkServer.sh start</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/opt/module/zookeeper-3.5.7/bin/zkServer.sh status <span class=\"token comment\"># 查看 zk 状态</span></pre></td></tr></table></figure><p>当所有服务节点启动成功后，分别查看各自状态，可以发现其中有且仅有一个服务节点为  <code>Mode: leader</code> ，其他节点均为  <code>Mode: follower</code> ，这其中涉及到 zookeeper 的  <code>选举机制</code>  ，这将在后文进行说明。</p>\n</li>\n</ol>\n<h4 id=\"集群启动脚本\"><a class=\"anchor\" href=\"#集群启动脚本\">#</a> 集群启动脚本</h4>\n<p>创建脚本文件  <code>zk.sh</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># !/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token variable\">$1</span> <span class=\"token keyword\">in</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token string\">\"start\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> hadoop01 hadoop02 hadoop03</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token function\">ssh</span> <span class=\"token variable\">$i</span> <span class=\"token string\">\"/opt/module/zookeeper-3.5.7/bin/zkServer.sh start\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token builtin class-name\">echo</span> ------------ zookeeper <span class=\"token variable\">$i</span> is started ------------</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token string\">\"stop\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> hadoop01 hadoop02 hadoop03</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token function\">ssh</span> <span class=\"token variable\">$i</span> <span class=\"token string\">\"/opt/module/zookeeper-3.5.7/bin/zkServer.sh stop\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token builtin class-name\">echo</span> ------------ zookeeper <span class=\"token variable\">$i</span> is stopped ------------</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token string\">\"stop\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> hadoop01 hadoop02 hadoop03</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token builtin class-name\">echo</span> ------------ zookeeper <span class=\"token variable\">$i</span> status ------------</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token function\">ssh</span> <span class=\"token variable\">$i</span> <span class=\"token string\">\"/opt/module/zookeeper-3.5.7/bin/zkServer.sh status\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">esac</span></pre></td></tr></table></figure><p>修改文件权限：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chmod</span> a+x zk.sh</pre></td></tr></table></figure><blockquote>\n<p>注意：</p>\n<ol>\n<li>脚本中 hadoop01 等作为主机名，需要在对应的主机上配置了对应的 hosts 才会有效。</li>\n<li>脚本执行过程中，如果主机权限拦截，需要输入密码。</li>\n</ol>\n</blockquote>\n<h4 id=\"docker-安装\"><a class=\"anchor\" href=\"#docker-安装\">#</a> Docker 安装</h4>\n<p>使用 Docker 安装 Zookeeper（单节点）</p>\n<p>拉取 zookeeper 镜像：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker pull zookeeper <span class=\"token comment\"># 拉取指定版本镜像</span></pre></td></tr></table></figure><p>预先创建 zookeeper 挂载目录：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> -p /home/docker/zookeeper/conf</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">chmod</span> <span class=\"token number\">777</span> /home/docker/zookeeper/conf</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">mkdir</span> -p /home/docker/zookeeper/data</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">mkdir</span> -p /home/docker/zookeeper/log</pre></td></tr></table></figure><p>创建自定义网络：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker network create --driver bridge --subnet <span class=\"token number\">127.0</span>.0.1/16 zk_network</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker network <span class=\"token function\">ls</span> <span class=\"token comment\"># 查看是否创建成功</span></pre></td></tr></table></figure><p>启动镜像：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run -d -p <span class=\"token number\">2181</span>:2181 -p <span class=\"token number\">2888</span>:2888 -p <span class=\"token number\">3888</span>:3888 --name zookeeper --privileged --restart always --network zk_network <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>-v /home/docker/zookeeper/conf:/conf <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>-v /home/docker/zookeeper/data:/data <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>-v /home/docker/zookeeper/datalog:/datalog <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>zookeeper</pre></td></tr></table></figure><p>检验是否启动成功：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker <span class=\"token builtin class-name\">exec</span> -it zookeeper zkCli.sh</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 进入客户端后，如需退出，可以使用 quit 指令</span></pre></td></tr></table></figure><p>该命令其实相当于：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker <span class=\"token builtin class-name\">exec</span> -it zookeeper /bin/bash</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> bin/</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>./zkCli.sh -server <span class=\"token number\">127.0</span>.0.1:2181</pre></td></tr></table></figure><p>如果出现  <code>[zk: localhost:2181(CONNECTED) 0]</code>  则表示 zookeeper 启动成功。</p>\n<p>查看当前 zookeeper 模式及配置：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./zkServer.sh status</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Zookeeper JMX enabled by default</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Using config: /conf/zoo.cfg</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Client port found: <span class=\"token number\">2181</span>. Client address: localhost. Client SSL: false.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Mode: standalone</pre></td></tr></table></figure><p>注意：这里的 zookeeper 的配置文件位于容器中的 /conf/zoo.cfg 位置，并被映射到宿主机的 /home/docker/zookeeper/conf 目录。</p>\n<blockquote>\n<p>这里仅列出了必要的命令，更多 Docker 相关知识，可参考文章《<a href=\"/computer-science/java-learning-path/5-framework/docker-tutorial/\">给，你要的 Docker 详细教程</a>》。</p>\n<p>提示：</p>\n<p>退出容器使用  <code>Ctrl + P + Q</code>  。</p>\n<p>Docker 安装 zookeeper 默认未指定日志文件，如需要日志文件配置，可从官网下载完整 zookeeper，并将  <code>/conf/log4j.properties</code>  拷贝至配置目录，然后重启即可。</p>\n</blockquote>\n<p>启动和停止 zookeeper 服务：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./zkServer.sh start <span class=\"token comment\"># 启动 zookeeper 服务</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>./zkServer.sh stop <span class=\"token comment\"># 停止 zookeeper 服务</span></pre></td></tr></table></figure><h3 id=\"zookeeper-选举机制\"><a class=\"anchor\" href=\"#zookeeper-选举机制\">#</a> Zookeeper 选举机制</h3>\n<p>依次启动集群节点，当节点超过半数时，将在已启动的集群节点中找出 ID 最大的节点，并被选举为 Leader。一旦 Leader 确定，新加入节点自动标记为 Follower。</p>\n<p>Zookeeper 节点状态：</p>\n<ul>\n<li>LOOKING：寻找 Leader 状态，处于该状态需要进入选举流程。</li>\n<li>LEADING：领导者状态，处于该状态的节点说明是角色已经是 Leader。</li>\n<li>FOLLOWING：跟随者状态，表示 Leader 已经选举出来，当前节点角色是 Follower。</li>\n<li>OBSERVER：观察者状态，表明当前节点角色是 observer。</li>\n</ul>\n<p>选举相关概念：</p>\n<ul>\n<li>SID：服务器 ID，用来唯一标识 ZK 集群中的每一台及其，它和 myid 保持一致。</li>\n<li>ZXID：事务 ID，用来标识一次服务器状态的变更。</li>\n<li>Epoch：每个 Leader 任期的代号。</li>\n</ul>\n<p>自制图例（点击查看大图）：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/10/90feafd997e82ebe2fc3d53560158e3f1634544405.png\" alt=\"Zookeeper选举机制\" height=\"400px\" /></p>\n<blockquote>\n<p>注：图是画着玩的，能理解就好，不相关的不要纠结哈。</p>\n</blockquote>\n<h3 id=\"zookeeper-工作流\"><a class=\"anchor\" href=\"#zookeeper-工作流\">#</a> Zookeeper 工作流</h3>\n<p>一旦 Zookeeper 集合启动，它将等待客户端连接。客户端将连接到 Zookeeper 集合中的一个节点。它可以是 Leader 或 Follower 节点。一旦客户端被连接，节点将向特定客户端分配会话 ID 并向该客户端发送确认。如果客户端没有收到确认，它将尝试连接 Zookeeper 集合中的另一个节点。 一旦连接到节点，客户端将以有规律的间隔向节点发送心跳，以确保连接不会丢失。</p>\n<ol>\n<li>如果客户端想要读取特定的 znode，它将会向具有 znode 路径的节点发送读取请求，并且节点通过从其自己的数据库获取来返回所请求的 znode。因此，在 Zookeeper 集合中读取速度快。</li>\n<li>如果客户端想要将数据存储在 Zookeeper 集合中，则会将 znode 路径和数据发送到服务器。连接的服务器将该请求转发给 Leader，然后 Leader 将向所有的 Follower 重新发出写入请求。如果只有大部分节点成功响应，而写入请求成功，则成功返回代码将被发送到客户端。 否则，写入请求失败。绝大多数节点被称为  <code>Quorum</code> 。</li>\n</ol>\n<p>Zookeeper 工作流示意图：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/10/97d5eb34bb51d80ffed555b47aa2d45e1634527137.png\" alt=\"ZK工作流\" /></p>\n<p>Zookeeper 工作流组件描述：</p>\n<ul>\n<li>\n<p>写入（write）</p>\n<p>写入过程由 Leader 节点处理。Leader 将写入请求转发到所有 znode，并等待 znode 的回复。如果一半的 znode 回复，则写入过程完成。</p>\n</li>\n<li>\n<p>读取（read）</p>\n<p>读取由特定连接的 znode 在内部执行，因此不需要与集群进行交互。</p>\n</li>\n<li>\n<p>复制数据库（replicated database）</p>\n<p>它用于在 zookeeper 中存储数据。每个 znode 都有自己的数据库，每个 znode 在一致性的帮助下每次都有相同的数据。</p>\n</li>\n<li>\n<p>领导者（Leader）</p>\n<p>Leader 是负责处理写入请求的 znode。</p>\n</li>\n<li>\n<p>跟随者（Follower）</p>\n<p>Follower 从客户端接收写入请求，并将它们转发到 Leader znode。</p>\n</li>\n<li>\n<p>请求处理器（request processor）</p>\n<p>只存在于 Leader 节点。它管理来自 Follower 节点的写入请求。</p>\n</li>\n<li>\n<p>原子广播（atomic broadcasts）</p>\n<p>负责广播从 Leader 节点到 Follower 节点的变化。</p>\n</li>\n</ul>\n<h3 id=\"zookeeper-cli\"><a class=\"anchor\" href=\"#zookeeper-cli\">#</a> Zookeeper CLI</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/opt/module/zookeeper-3.5.7/bin/zkCli.sh -server hadoop01:2181</pre></td></tr></table></figure><h4 id=\"节点类型\"><a class=\"anchor\" href=\"#节点类型\">#</a> 节点类型</h4>\n<p>Zookeeper 创建节点的语法为  <code>create -[params] [path] [data]</code> ，它主要有以下四种节点类型：</p>\n<ol>\n<li>\n<p>PERSISTENT（持久节点）</p>\n<p>节点创建后，即使服务器重启，节点都会一直存在，直到主动删除该节点。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>create /node <span class=\"token string\">\"node\"</span></pre></td></tr></table></figure></li>\n<li>\n<p>PERSISTENT_SEQUENTIAL（持久顺序节点）</p>\n<p>具有顺序命名特点的持久节点，父节点会为其第一季子节点维护一份时序，记录子节点的先后顺序。该节点类型可以通过参数  <code>-s</code>  进行指定。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>create -s /node/seq_node <span class=\"token string\">\"seq_node\"</span></pre></td></tr></table></figure></li>\n<li>\n<p>EPHEMERAL（临时节点）</p>\n<p>在客户端会话失效后节点自动清除，临时节点下不能创建子节点。该节点类型可以通过参数  <code>-e</code>  进行指定。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>create -e /node/temp_node <span class=\"token string\">\"temp_node\"</span></pre></td></tr></table></figure></li>\n<li>\n<p>EPHEMERAL_SEQUENTIAL（顺序临时节点）</p>\n<p>具有顺序命名特点的临时节点，该节点类型可以通过参数  <code>-e -s</code>  进行指定。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>create -e -s /node/temp_seq_node <span class=\"token string\">\"temp_seq_node\"</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"节点操作\"><a class=\"anchor\" href=\"#节点操作\">#</a> 节点操作</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> / <span class=\"token comment\"># 查看根节点列表</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>create /nodeA <span class=\"token string\">\"info about nodeA\"</span> <span class=\"token comment\"># 创建节点并指定内容（持久节点）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>create /nodeA/node <span class=\"token string\">\"info about node, parent is nodeA\"</span> <span class=\"token comment\"># 创建子节点并指定内容</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">ls</span> /nodeA <span class=\"token comment\"># 查看子节点列表</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>get -s /zodeA <span class=\"token comment\"># 获取节点内容</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>create -s /node <span class=\"token string\">\"info about node which sorted by no\"</span> <span class=\"token comment\"># 创建顺序编号的节点并指定内容</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>quit <span class=\"token comment\"># 退出节点（退出后，再次进入持久节点仍然存在 ----------）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>create -e /nodeB <span class=\"token string\">\"info about nodeB, temp node\"</span> <span class=\"token comment\"># 创建临时节点</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>create -e -s /nodeB/node <span class=\"token string\">\"info about nodeB, temp node, sorted by no\"</span> <span class=\"token comment\"># 创建顺序编号的临时节点</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin class-name\">set</span> /nodeA/node <span class=\"token string\">\"node info is updated\"</span> <span class=\"token comment\"># 修改节点内容</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>delete /nodeA/node <span class=\"token comment\"># 移除节点</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>deleteall /nodeA <span class=\"token comment\"># 递归移除节点及其子节点</span></pre></td></tr></table></figure><h4 id=\"监听器\"><a class=\"anchor\" href=\"#监听器\">#</a> 监听器</h4>\n<p>Zookeeper 通过参数  <code>-w</code>  可以设置监听节点数据及节点的增删变化：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>get -w /nodeA <span class=\"token comment\"># 监听节点数据的变化</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ls</span> -w /nodeA <span class=\"token comment\"># 监听子节点增删变化</span></pre></td></tr></table></figure><p>Zookeeper 监听器原理：</p>\n<ol>\n<li>在创建 zookeeper 客户端时，会创建两个线程，一个负责网络连接通信（connet），一个负责事件监听（listener）。</li>\n<li>通过 connet 线程将注册的监听事件发送给 zookeeper。</li>\n<li>zookeeper 将注册的监听事件添加到监听器列表。</li>\n<li>当 zookeeper 监听到数据或路径发生变化，就会将消息发送给 listener 线程。</li>\n<li>listener 线程内部调用了  <code>process()</code>  方法进行处理。</li>\n</ol>\n<h3 id=\"zookeeper-api\"><a class=\"anchor\" href=\"#zookeeper-api\">#</a> Zookeeper API</h3>\n<p>Zookeeper 有一个绑定 Java 和 C 的官方 API。Zookeeper 社区为大多数语言（.NET，python 等）提供非官方 API。使用 Zookeeper API，应用程序可以连接，交互，操作数据，协调，最后断开与 Zookeeper 集合的连接。</p>\n<blockquote>\n<p>本文以 Java 语言作为示例。</p>\n</blockquote>\n<h4 id=\"java-简单示例\"><a class=\"anchor\" href=\"#java-简单示例\">#</a> Java 简单示例</h4>\n<ol>\n<li>\n<p>准备工作</p>\n<ul>\n<li>创建普通 maven 工程。</li>\n<li>启动可用的 zookeeper 集群服务。</li>\n</ul>\n</li>\n<li>\n<p>引入依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.zookeeper<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>zookeeper<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.5.5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>测试文件</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ZkTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> connectString <span class=\"token operator\">=</span> <span class=\"token string\">\"hadoop01:2181,hadoop02:2181,hadoop03:2181\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> sessionTimeout <span class=\"token operator\">=</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 会话超时，毫秒</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Zookeeper</span> zkClient <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Before</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        zkClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Zookeeper</span><span class=\"token punctuation\">(</span>connectString<span class=\"token punctuation\">,</span> sessionTimeout<span class=\"token punctuation\">,</span> watchedEvent <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">// 处理监视器任务：获取所有根节点</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> children <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                children <span class=\"token operator\">=</span> zkClient<span class=\"token punctuation\">.</span><span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">KeeperException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> child <span class=\"token operator\">:</span> children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">KeeperException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> zkClient<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"node for test\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ZooDefs<span class=\"token punctuation\">.</span>Ids</span><span class=\"token punctuation\">.</span>OPEN_ACL_UNSAFE<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CreateMode</span><span class=\"token punctuation\">.</span>PERSISTENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">KeeperException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">Stat</span> stat <span class=\"token operator\">=</span> zkClient<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stat <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"not exist\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"exist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>代码优化</p>\n<p>在实际使用过程中，我们通常会将相关的连接方法提取作为单独的连接器，例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ZookeeperConnector</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Zookeeper</span> client<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">CountDownLatch</span> connectedSignal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CountDownLatch</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Zookeeper</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> host<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Zookeeper</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">,</span> watcher <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>watcher<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">Watcher<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>KeeperState<span class=\"token punctuation\">.</span>SyncConnected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                connectedSignal<span class=\"token punctuation\">.</span><span class=\"token function\">countDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        connectedSignal<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> client<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        client<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在使用时直接调用连接器示例即可：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ZkCreate</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Zookeeper</span> zk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ZookeeperConnector</span> conn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">KeeperException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        zk<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ZooDefs<span class=\"token punctuation\">.</span>Ids</span><span class=\"token punctuation\">.</span>OPEN_ACL_UNSAFE<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CreateMode</span><span class=\"token punctuation\">.</span>PERSISTENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">String</span> path <span class=\"token operator\">=</span> <span class=\"token string\">\"/MyZnode\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data <span class=\"token operator\">=</span> <span class=\"token string\">\"My Znode\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            conn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ZookeeperConnector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            zk <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hadoop01:2181,hadoop02:2181,hadoop03:2181\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            conn<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"curator-框架\"><a class=\"anchor\" href=\"#curator-框架\">#</a> Curator 框架</h3>\n<p>官方地址：<span class=\"exturl\" data-url=\"aHR0cDovL2N1cmF0b3IuYXBhY2hlLm9yZy9jdXJhdG9yLWZyYW1ld29yaw==\">http://curator.apache.org/curator-framework</span></p>\n<p>用法示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ZkCurator</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> connectString <span class=\"token operator\">=</span> <span class=\"token string\">\"hadoop01:2181,hadoop02:2181,hadoop03:2181\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 重试策略</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">RetryPolicy</span> retryPolicy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExponentialBackoffRetry</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 创建客户端，方式一</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//        CuratorFramework client = CuratorFrameworkFactory.newClient(connectString, 5000, 5000, retryPolicy);</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 创建客户端，方式二</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">CuratorFramework</span> client <span class=\"token operator\">=</span> <span class=\"token class-name\">CuratorFrameworkFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">connectString</span><span class=\"token punctuation\">(</span>connectString<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">sessionTimeoutMs</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 会话超时时间</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">connectionTimeoutMs</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 连接超时时间</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">retryPolicy</span><span class=\"token punctuation\">(</span>retryPolicy<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">namespace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"base\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 包含隔离名称</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        client<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已创建并启动客户端\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 创建数据节点</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        client<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">creatingParentContainersIfNeeded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 递归创建所需父节点</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">withMode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreateMode</span><span class=\"token punctuation\">.</span>PERSISTENT<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 创建类型为持久节点</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">forPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/nodeA\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"init\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 目录及内容</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成功创建持久节点\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 获取节点数据</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/nodeA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// init</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 修改节点数据</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        client<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">withVersion</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 指定版本修改</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">forPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/nodeA\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 事务处理</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CuratorTransactionResult</span><span class=\"token punctuation\">></span></span> commit <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">inTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/nodeA\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withMode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreateMode</span><span class=\"token punctuation\">.</span>EPHEMERAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/nodeB\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"init\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withMode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreateMode</span><span class=\"token punctuation\">.</span>EPHEMERAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/nodeC\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"init\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        commit<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Path: \"</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getForPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token class-name\">Stat</span> stat <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">checkExists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/nodeA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 检查是否存在</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stat <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/base/nodeA 节点存在。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> strings <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/nodeA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取子节点的路径</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> string <span class=\"token operator\">:</span> strings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path: \"</span> <span class=\"token operator\">+</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token comment\">// 异步回调</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token class-name\">Executor</span> executor <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        client<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">creatingParentsIfNeeded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">withMode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreateMode</span><span class=\"token punctuation\">.</span>PERSISTENT<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">inBackground</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>curatorFramework<span class=\"token punctuation\">,</span> curatorEvent<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eventType:%s,resultCode:%s\"</span><span class=\"token punctuation\">,</span> curatorEvent<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> curatorEvent<span class=\"token punctuation\">.</span><span class=\"token function\">getResultCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> executor<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">forPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/syncNode\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token comment\">// 删除数据节点</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        client<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">guaranteed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 强制保证删除</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">deletingChildrenIfNeeded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 递归删除子节点</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">withVersion</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 指定删除的版本号</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">forPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已成功删除节点[/base]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h3>\n<div class=\"note danger no-icon\">\n<p>本文相关代码已记录在 github，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3hmYy1leGNsYXZlL2Jsb2ctcHJvamVjdC90cmVlL21hc3Rlci9hNmE1MWE4Y2U3Y2Q0YjY5ODA2OWZiN2I5N2IzMzNiMS96a3N0dWR5\">点击此处</span>前往查看。本文内容如有错误之处，欢迎在评论区留言告知。</p>\n</div>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXRvNHkxQzdndw==\">https://www.bilibili.com/video/BV1to4y1C7gw</span> （个人感觉讲得不是太好）</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81OTY2OTk4NQ==\">https://zhuanlan.zhihu.com/p/59669985</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudzNjc2Nob29sLmNuL3pvb2tlZXBlcg==\">https://www.w3cschool.cn/zookeeper</span></li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "JAVA学习路线",
                "高级篇",
                "java"
            ]
        },
        {
            "id": "https://www.chinmoku.cc/language/japanese/standard-japanese/standard-japanese-02-ing/",
            "url": "https://www.chinmoku.cc/language/japanese/standard-japanese/standard-japanese-02-ing/",
            "title": "標準日本語の入門（二）",
            "date_published": "2021-10-05T16:00:00.000Z",
            "content_html": "<div class=\"note info\">\n<p>本文对日语基础进行深一步介绍，其中有许多较为重要的内容，包括动词三分类。</p>\n<p>本文主要内容参考自《中日交流标准日本语初级》。</p>\n</div>\n<h3 id=\"动词三分类\"><a class=\"anchor\" href=\"#动词三分类\">#</a> 动词三分类</h3>\n<h4 id=\"动词\"><a class=\"anchor\" href=\"#动词\">#</a> 动词</h4>\n<p>所有的动词原型都是由  <code>う</code>  段结尾。</p>\n<h5 id=\"一类动词五段动词-う-段\"><a class=\"anchor\" href=\"#一类动词五段动词-う-段\">#</a> 一类动词（五段动词）  <code>う</code>  段</h5>\n<ol>\n<li>\n<p>结尾是  <code>う</code>  段非  <code>る</code>  的动词，肯定是 5 段动词。</p>\n<p>例如：</p>\n<p><ruby>書<rp> (</rp><rt>か</rt><rp>)</rp> く<rt></rt></ruby>、<ruby>探<rp> (</rp><rt>さが</rt><rp>)</rp> す<rt></rt></ruby>、<ruby>勝<rp> (</rp><rt>か</rt><rp>)</rp> つ<rt></rt></ruby>、<ruby>遊<rp> (</rp><rt>あそ</rt><rp>)</rp> ぶ<rt></rt></ruby>、<ruby>読<rp> (</rp><rt>よ</rt><rp>)</rp> む<rt></rt></ruby></p>\n</li>\n<li>\n<p>あ段 + る、う段 + る、お段 + る</p>\n<p><ruby>困<rp> (</rp><rt>こま</rt><rp>)</rp> る<rt></rt></ruby>、<ruby>怒<rp> (</rp><rt>おこ</rt><rp>)</rp> る<rt></rt></ruby>、やる</p>\n</li>\n<li>\n<p>特例。</p>\n<p><ruby>切<rp> (</rp><rt>き</rt><rp>)</rp> る<rt></rt></ruby>、<ruby>帰<rp> (</rp><rt>かえ</rt><rp>)</rp> る<rt></rt></ruby>、<ruby>走<rp> (</rp><rt>はし</rt><rp>)</rp> る<rt></rt></ruby></p>\n</li>\n</ol>\n<h5 id=\"二类动词上一段动词-下一段动词\"><a class=\"anchor\" href=\"#二类动词上一段动词-下一段动词\">#</a> 二类动词（上一段动词、下一段动词）</h5>\n<ol>\n<li>\n<p>い段 + る（上一段）</p>\n</li>\n<li>\n<p>え段 + る（下一段）</p>\n</li>\n</ol>\n<h5 id=\"三类动词カ变-サ变\"><a class=\"anchor\" href=\"#三类动词カ变-サ变\">#</a> 三类动词（カ变、サ变）</h5>\n<p>以  <code>くる</code>  （カ变）和  <code>する</code>  （サ变）结尾的动词，为三类动词。</p>\n<h4 id=\"动词变形\"><a class=\"anchor\" href=\"#动词变形\">#</a> 动词变形</h4>\n<ol>\n<li>\n<p>一类动词变形</p>\n<p>将  <code>う</code>  段结尾的音节向前挪一位，并加  <code>ます</code> 。</p>\n<p>書く　かく　ー　書きます</p>\n<p>吸う　すう　ー　吸います</p>\n<p>切る　きる　ー　切ります</p>\n<p>呼ぶ　よぶ　ー　呼びます</p>\n</li>\n<li>\n<p>二类动词变形</p>\n<p>将  <code>る</code>  变为  <code>ます</code></p>\n<p>教える　おしえる　ー　教えます</p>\n<p>開ける　あける　　ー　開けます</p>\n<p>調べる　しらべる　ー　調べます</p>\n<p>得る　　える　　　ー　得ます</p>\n</li>\n<li>\n<p>三类动词变形</p>\n<p><code>くる</code>  变为  <code>きます</code> ， <code>する</code>  变为  <code>します</code>  。</p>\n<p>勉強する　べんきょうする　ー　勉強します</p>\n<p>散歩する　さんぽする　　　ー　散歩します</p>\n<p>努力する　どりょくする　　ー　努力します</p>\n</li>\n</ol>\n<p>课前练习：</p>\n<ol>\n<li class=\"quiz\">\n<p>对于句子 “墙上有开关” 的翻译，下列正确的是 <span class=\"gap\"></span> 。</p>\n<ul class=\"options\">\n<li class=\"correct\">壁にスイッチがあります。</li>\n<li>壁の上にスイッチがあります。</li>\n<li>壁にスイッチがいます。</li>\n<li>壁の上にスイッチがいます。</li>\n</ul>\n</li>\n<li class=\"quiz fill\">\n<p>动词  <code>開ける</code>  的变形是 <span class=\"gap\">開けます</span>。</p>\n<blockquote>\n<p>考察动词分类及其变形规则。</p>\n<p><span class=\"mistake\">以  <code>ける</code>  结尾，表示该词是三类动词，其变形规则为：  <code>する</code>  变为  <code>します</code>  。</span></p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"课目\"><a class=\"anchor\" href=\"#课目\">#</a> 课目</h3>\n<h4 id=\"第五课森さんは-7時に-起きます\"><a class=\"anchor\" href=\"#第五课森さんは-7時に-起きます\">#</a> 第五课：森さんは　７時に　起きます</h4>\n<h5 id=\"单词\"><a class=\"anchor\" href=\"#单词\">#</a> 单词</h5>\n<table>\n<thead>\n<tr>\n<th>单词</th>\n<th>假名</th>\n<th>声调</th>\n<th>词义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>今</td>\n<td>いま</td>\n<td>1</td>\n<td>现在</td>\n</tr>\n<tr>\n<td>先週</td>\n<td>せんしゅう</td>\n<td>0</td>\n<td>上个星期</td>\n</tr>\n<tr>\n<td>来週</td>\n<td>らいしゅう</td>\n<td>0</td>\n<td>下个星期</td>\n</tr>\n<tr>\n<td>再来週</td>\n<td>さらいしゅう</td>\n<td>0</td>\n<td>下下个星期</td>\n</tr>\n<tr>\n<td>今週</td>\n<td>こんしゅう</td>\n<td>0</td>\n<td>这个星期</td>\n</tr>\n<tr>\n<td>昨日</td>\n<td>きのう</td>\n<td>0</td>\n<td>昨天</td>\n</tr>\n<tr>\n<td>明日</td>\n<td>あした</td>\n<td>3</td>\n<td>明天</td>\n</tr>\n<tr>\n<td>明後日</td>\n<td>あさって</td>\n<td>2</td>\n<td>后天</td>\n</tr>\n<tr>\n<td>一昨日</td>\n<td>おととい</td>\n<td>3</td>\n<td>前天</td>\n</tr>\n<tr>\n<td>毎日</td>\n<td>まいにち</td>\n<td>1</td>\n<td>每天</td>\n</tr>\n<tr>\n<td>毎朝</td>\n<td>まいあさ</td>\n<td>1</td>\n<td>每天早上</td>\n</tr>\n<tr>\n<td>毎晩</td>\n<td>まいばん</td>\n<td>1</td>\n<td>每天晚上</td>\n</tr>\n<tr>\n<td>毎週</td>\n<td>まいしゅう</td>\n<td>0</td>\n<td>每个星期</td>\n</tr>\n<tr>\n<td>午前</td>\n<td>ごぜん</td>\n<td>1</td>\n<td>上午</td>\n</tr>\n<tr>\n<td>午後</td>\n<td>ごご</td>\n<td>1</td>\n<td>下午</td>\n</tr>\n<tr>\n<td>日曜日</td>\n<td>にちようび</td>\n<td>3</td>\n<td>星期天</td>\n</tr>\n<tr>\n<td>月曜日</td>\n<td>げつようび</td>\n<td>3</td>\n<td>星期一</td>\n</tr>\n<tr>\n<td>火曜日</td>\n<td>かようび</td>\n<td>2</td>\n<td>星期二</td>\n</tr>\n<tr>\n<td>水曜日</td>\n<td>すいようび</td>\n<td>3</td>\n<td>星期三</td>\n</tr>\n<tr>\n<td>木曜日</td>\n<td>もくようび</td>\n<td>3</td>\n<td>星期四</td>\n</tr>\n<tr>\n<td>金曜日</td>\n<td>きんようび</td>\n<td>3</td>\n<td>星期五</td>\n</tr>\n<tr>\n<td>土曜日</td>\n<td>どようび</td>\n<td>2</td>\n<td>星期六</td>\n</tr>\n<tr>\n<td>今朝</td>\n<td>けさ</td>\n<td>1</td>\n<td>今天早上</td>\n</tr>\n<tr>\n<td>今晩</td>\n<td>こんばん</td>\n<td>1</td>\n<td>今天晚上</td>\n</tr>\n<tr>\n<td>来年</td>\n<td>らいねん</td>\n<td>0</td>\n<td>明年</td>\n</tr>\n<tr>\n<td>去年</td>\n<td>きょねん</td>\n<td>1</td>\n<td>去年</td>\n</tr>\n<tr>\n<td>夜</td>\n<td>よる</td>\n<td>1</td>\n<td>晚上，夜里，夜晚</td>\n</tr>\n<tr>\n<td>晩</td>\n<td>ばん</td>\n<td>0</td>\n<td>晚上</td>\n</tr>\n<tr>\n<td>朝</td>\n<td>あさ</td>\n<td>1</td>\n<td>早晨</td>\n</tr>\n<tr>\n<td>学校</td>\n<td>がっこう</td>\n<td>0</td>\n<td>学校</td>\n</tr>\n<tr>\n<td>試験</td>\n<td>しけん</td>\n<td>2</td>\n<td>考试</td>\n</tr>\n<tr>\n<td>仕事</td>\n<td>しごと</td>\n<td>0</td>\n<td>工作</td>\n</tr>\n<tr>\n<td>遅刻</td>\n<td>ちこく</td>\n<td>0</td>\n<td>迟到</td>\n</tr>\n<tr>\n<td>休み</td>\n<td>やすみ</td>\n<td>0</td>\n<td>休息</td>\n</tr>\n<tr>\n<td>出張</td>\n<td>しゅっちょう</td>\n<td>0</td>\n<td>出差</td>\n</tr>\n<tr>\n<td>研修</td>\n<td>けんしゅう</td>\n<td>0</td>\n<td>进修</td>\n</tr>\n<tr>\n<td>旅行</td>\n<td>りょこう</td>\n<td>0</td>\n<td>旅行</td>\n</tr>\n<tr>\n<td>展覧会</td>\n<td>てんらんかい</td>\n<td>3</td>\n<td>展览会</td>\n</tr>\n<tr>\n<td>歓迎会</td>\n<td>かんげいかい</td>\n<td>3</td>\n<td>欢迎会</td>\n</tr>\n<tr>\n<td>ポーティー</td>\n<td>ぽーてぃー</td>\n<td>1</td>\n<td>联欢会</td>\n</tr>\n<tr>\n<td>お宅</td>\n<td>おたく</td>\n<td>0</td>\n<td>府上，（您）家</td>\n</tr>\n<tr>\n<td>いつ</td>\n<td>いつ</td>\n<td>1</td>\n<td>什么时候</td>\n</tr>\n<tr>\n<td>休みます</td>\n<td>やすみます・やすむ</td>\n<td>4</td>\n<td>休息</td>\n</tr>\n<tr>\n<td>働きます</td>\n<td>はたらきます・はたらく</td>\n<td>5</td>\n<td>工作</td>\n</tr>\n<tr>\n<td>始まります</td>\n<td>はじまります・はじまる</td>\n<td>5</td>\n<td>开始</td>\n</tr>\n<tr>\n<td>終わります</td>\n<td>おわります・おわる</td>\n<td>4</td>\n<td>结束</td>\n</tr>\n<tr>\n<td>起きます</td>\n<td>おきます・おきる</td>\n<td>3</td>\n<td>起床</td>\n</tr>\n<tr>\n<td>寝ます</td>\n<td>ねます・ねる</td>\n<td>2</td>\n<td>睡觉</td>\n</tr>\n<tr>\n<td>勉強します</td>\n<td>べんきょうします・べんきょうする</td>\n<td>6</td>\n<td>学习</td>\n</tr>\n<tr>\n<td>いつも</td>\n<td>いつも</td>\n<td>1</td>\n<td>经常</td>\n</tr>\n<tr>\n<td>北京支社</td>\n<td>ペキンししゃ</td>\n<td>4</td>\n<td>北京分社</td>\n</tr>\n<tr>\n<td>神戸</td>\n<td>こうべ</td>\n<td>1</td>\n<td>神户</td>\n</tr>\n<tr>\n<td>おはよう</td>\n<td>おはよう</td>\n<td>0</td>\n<td>早</td>\n</tr>\n</tbody>\n</table>\n<p>一至十二时发音：</p>\n<p>いちじ、にじ、さんじ、よじ、ごじ、ろくじ、しちじ、はちじ、くじ、じゅうじ、じゅういちじ、じゅうにじ</p>\n<p>常见分钟发音：</p>\n<p>一分、二分、三分、四分、五分、六分、七分、八分、九分、十分、十一分、十五分、三十分、四十五分、何分</p>\n<p>いっぷん、にふん、さんぷん、よんぷん、ごふん、ろっぷん、ななふん、はっぷん、きゅうふん、じゅっぷん、じゅういっぷん、じゅうごふん、よんじゅうごふん、なんぷん</p>\n<h5 id=\"课文\"><a class=\"anchor\" href=\"#课文\">#</a> 课文</h5>\n<ol>\n<li>\n<p>课文一</p>\n<p>今、四時です。</p>\n<p>森さんは　七時に　起きます。</p>\n<p>森さんは　先週　休みました。</p>\n<p>私は　昨日　働きませんてした。</p>\n</li>\n<li>\n<p>课文二</p>\n</li>\n</ol>\n<h5 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h5>\n<ol>\n<li>\n<p>今　～時　～分です。</p>\n<p>表示现在的时间。说话双方都明确在讲现在的时间时，“今” 可以省略。询问具体的时间时用 “何時”。</p>\n<ul>\n<li>今何時ですか。</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>四時半です。</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p>動詞</p>\n<p>常态：ます</p>\n<p>过去时肯定：ません</p>\n<p>否定：ました</p>\n<p>过去时否定：ませんでした</p>\n<table>\n<thead>\n<tr>\n<th>原型</th>\n<th>ます型</th>\n<th>过去时</th>\n<th>否定</th>\n<th>过去时否定</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>働く</td>\n<td>働きます</td>\n<td>働きました</td>\n<td>働きません</td>\n<td>働きませんでした</td>\n</tr>\n<tr>\n<td><ruby>帰<rp> (</rp><rt>かえ</rt><rp>)</rp> る<rt></rt></ruby></td>\n<td>帰ります</td>\n<td>帰りました</td>\n<td>帰りません</td>\n<td>帰りませんでした</td>\n</tr>\n<tr>\n<td><ruby>行<rp> (</rp><rt>い</rt><rp>)</rp> く<rt></rt></ruby></td>\n<td>行きます</td>\n<td>行きました</td>\n<td>行きません</td>\n<td>行きませんでした</td>\n</tr>\n<tr>\n<td><ruby>出会<rp> (</rp><rt>であ</rt><rp>)</rp> う<rt></rt></ruby></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>名 [时间] に　動詞</p>\n<p>表示动作发生的时间时，要在具体时间词语后加上助词 “に”。</p>\n<p>也存在部分情况不需要加助词 “に”，如：今、昨日、今日、明日、每日、去年、来年。</p>\n<p>月曜日ー日曜日，一般需要加助词 “に”，但有时根据情况也可以不加。</p>\n<p>例句：</p>\n<ul>\n<li>森さんは　七時に　起きます。（７時、森さんは起きます）</li>\n<li>学校は　八時半に　始まります。（八時半、学校は始まります）</li>\n<li>昨日の８時、私は起きました。</li>\n</ul>\n</li>\n<li>\n<p>名 [时间] から　名 [时间] まで　動詞。</p>\n<p>表示某个动作发生在某个时期之间时，使用 “~ から　～まで”。</p>\n<ul>\n<li>私は　九時から　五時まで　働きます。</li>\n<li>森さんは　月曜日から　水曜日まで　休みましだ。</li>\n</ul>\n<p>也可以分开使用：</p>\n<ul>\n<li>私は　九時から　働きます。（我从九点开始工作）</li>\n<li>王さんは　九時まで　働きます。（王先生工作到九点）</li>\n</ul>\n</li>\n<li>\n<p>ちつ　動詞ますが</p>\n<p>询问什么时候做某事。</p>\n<p>常见词：何時に、何曜日に、何日に。</p>\n<ul>\n<li>\n<p>試験は　いつ　始まりますか。（考试什么时候开始）</p>\n</li>\n<li>\n<p>仕事は　何時に　終わりますが。（工作几点结束）</p>\n</li>\n<li>\n<p>展覧会は　いつから　始まりますか。（展览会几点开始）</p>\n</li>\n<li>\n<p>張さんは　何曜日まで　休みますが。（小张休息倒星期几）</p>\n<p>—— 火曜日までです。</p>\n</li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "语言学习",
                "日语",
                "標準日本語入門",
                "日本語"
            ]
        },
        {
            "id": "https://www.chinmoku.cc/computer-science/python/python-all-base/",
            "url": "https://www.chinmoku.cc/computer-science/python/python-all-base/",
            "title": "Python 基础知识全通关",
            "date_published": "2021-10-01T09:22:15.000Z",
            "content_html": "<div class=\"note info\">\n<p>最近在工作的项目中，有一个模块的服务是使用 Python 脚本编写的，刚巧最近通过用户的反馈发现这个脚本有些 bug ，而我周围同事又都是 Java 体系的，对 Python 不太了解。基于这个原因，加上我之前也模糊了解过，大概知道 Python 的入门是很简单的。所以就干脆花点时间好好地学一下 Python ，预期能够入门并适用到一些简单的工作场景中。</p>\n<p>关于开发语言的热度：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGlvYmUuY29tL3Rpb2JlLWluZGV4\">https://www.tiobe.com/tiobe-index</span></p>\n<p>当然，不同开发语言各有优劣，脱离实际需要进行对比也无意义，能适应需要的语言，就是好的语言。</p>\n<p>另外，本文作为 Python 基础学习的笔记，限于篇幅，对于部分较为深广的知识不做扩展，但响应部分都会尽量留出扩展链接，供有兴趣的读者进行深化了解。</p>\n</div>\n<h3 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h3>\n<p>Python 的优点很多，简单的可以总结为以下几点。</p>\n<ol>\n<li>简单和明确，做一件事只有一种方法。</li>\n<li>学习曲线低，跟其他很多语言相比，Python 更容易上手。</li>\n<li>开放源代码，拥有强大的社区和生态圈。</li>\n<li>解释型语言，天生具有平台可移植性。</li>\n<li>支持两种主流的编程范式（面向对象编程和函数式编程）都提供了支持。</li>\n<li>可扩展性和可嵌入性，可以调用  <code>C/C++</code>  代码，也可以在  <code>C/C++</code>  中调用 Python。</li>\n<li>代码规范程度高，可读性强，适合有代码洁癖和强迫症的人群。</li>\n</ol>\n<p>Python 的缺点主要集中在以下几点。</p>\n<ol>\n<li>运行速度慢，和 C 程序相比非常慢，因为 Python 是解释型语言，你的代码在执行时会一行一行地翻译成 CPU 能理解的机器码，这个翻译过程非常耗时，所以很慢。</li>\n<li>代码无法加密，发布出去的 Python 代码都是源代码，这是所有解释型语言的共性。</li>\n<li>在开发时可以选择的框架太多（如 Web 框架就有 100 多个），有选择的地方就有错误。</li>\n</ol>\n<p>目前 Python 在 Web 应用开发、云基础设施、DevOps、网络爬虫开发、数据分析挖掘、机器学习等领域都有着广泛的应用，因此也产生了 Web 后端开发、数据接口开发、自动化运维、自动化测试、科学计算和可视化、数据分析、量化交易、机器人开发、图像识别和处理等一系列的职位。</p>\n<h3 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h3>\n<blockquote>\n<p>本文作为学习示例，以 windows 作为学习环境，Python 当前文档版本号：  <code>3.9.6</code></p>\n</blockquote>\n<h4 id=\"windows-环境\"><a class=\"anchor\" href=\"#windows-环境\">#</a> Windows 环境</h4>\n<p>官网下载：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucHl0aG9uLm9yZw==\">https://www.python.org</span></p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/1d551f6f77ba7c6dfd11272639e424981629963175.png\" alt=\"Python官网首页\" /></p>\n<p>从官网下载安装文件  <code>python-3.9.6-amd64.exe</code>  并双击执行安装：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/dfa4fe1ca0aa52c76328e36fa6d4a78d1629963181.png\" alt=\"Python安装引导\" /></p>\n<blockquote>\n<p>注意：安装时请勾选  <code>Add Python *.* to PATH</code>  ，它将会为您自动配置环境变量。</p>\n</blockquote>\n<p>检验是否安装成功：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/e21b309abd82d2f79572f8ad2f308cbb1629963192.png\" alt=\"校验Python安装\" /></p>\n<p>如图所示，则表示 Python 安装成功！</p>\n<h4 id=\"linux-环境\"><a class=\"anchor\" href=\"#linux-环境\">#</a> Linux 环境</h4>\n<p>部分主机或虚拟机版本会内置安装 Python，如内置 Python 以足够，即可跳过此小节。</p>\n<ol>\n<li>\n<p>选择 Python 版本（可选）。</p>\n<p>如需指定版本号，<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucHl0aG9uLm9yZy9mdHAvcHl0aG9uLw==\">点击此处</span>前往官网进行选择，本文将以  <code>3.9.6</code>  作为示例。</p>\n</li>\n<li>\n<p>安装并更新。</p>\n<p>在合适的位置下载安装包：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wget</span> https://www.python.org/ftp/python/3.9.6/Python-3.9.6.tgz <span class=\"token comment\"># 下载</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">tar</span> -zxvf Python-3.9.6.tgz -C /opt/module/ <span class=\"token comment\"># 解压</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>yum -y <span class=\"token function\">install</span> gcc zlib* libffi-devel <span class=\"token comment\"># 安装编译 Python 所需要的开发包</span></pre></td></tr></table></figure><p>进入解压目录，进行编译和安装：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /opt/module/Python-3.9.6</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>./configure --prefix<span class=\"token operator\">=</span>/usr/local/bin/python3</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">make</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token function\">make</span> <span class=\"token function\">install</span></pre></td></tr></table></figure><blockquote>\n<p>如在编译过程中提示 make 命令不存在，会给出相应的提示，可根据提示进行安装。</p>\n</blockquote>\n<p>删除原先的命令，并建立新的软连接：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python3 -V <span class=\"token comment\"># 此时仍是旧版本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">rm</span> -rf /usr/bin/python3</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">ln</span> -s /usr/local/bin/python3/bin/python3 /usr/bin/python3</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>python3 -V <span class=\"token comment\"># 此时被替换为新安装的版本</span></pre></td></tr></table></figure><blockquote>\n<p>注意：</p>\n<ol>\n<li>如果安装过程中出现网络问题，可尝试临时关闭防火墙。</li>\n<li>如果出现权限问题，可尝试使用 root 或 sudo 用户身份。</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"hello-world\"><a class=\"anchor\" href=\"#hello-world\">#</a> Hello World</h3>\n<p>安装成功后，我们将开始学习如何编写第一个 Python 程序。</p>\n<h4 id=\"命令行模式与-python-交互模式\"><a class=\"anchor\" href=\"#命令行模式与-python-交互模式\">#</a> 命令行模式与 Python 交互模式</h4>\n<p>正式编写 Python 程序之前，需要先了解一下什么是命令行模式，什么是 Python 模式。</p>\n<ol>\n<li>\n<p>命令行模式</p>\n<p>命令行模式，即命令提示符，也就是我们常说的  <code>CMD</code>  、小黑框等，它用于执行一些 Windows 命令。</p>\n</li>\n<li>\n<p>Python 交互模式</p>\n<p>在命令行模式下，输入  <code>python</code>  ，即可进入 Python 交互模式，它以  <code>&gt;&gt;&gt;</code>  作为提示符。</p>\n<p>在 Python 交互模式下，输入  <code>exit()</code>  或使用快捷键  <code>Ctrl + Z</code>  并回车，即可退出，回到命令行模式。</p>\n<blockquote>\n<p>Python 只是为调试代码提供方便，并非正式运行 Python 代码的环境。</p>\n</blockquote>\n</li>\n</ol>\n<p>尝试在 Python 交互模式下，执行一些简单的指令：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">100</span> + <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">120</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> print<span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World~'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Hello World~</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">2</span> ** <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">1024</span></pre></td></tr></table></figure><p>在命令行模式下，也可以执行  <code>python hello.py</code>  运行一个  <code>.py</code>  文件。</p>\n<p><code>hello.py</code>  内容示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">100</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World~'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在命令行模式下执行：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>C:<span class=\"token punctuation\">\\</span><span class=\"token operator\">></span>python hello.py</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Hello World~</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1024</span></pre></td></tr></table></figure><h4 id=\"选择开发工具\"><a class=\"anchor\" href=\"#选择开发工具\">#</a> 选择开发工具</h4>\n<p>在上文中，我们已经能够通过命令行执行一些简单的 Python 指令，但…… 总有点重上幼儿园的感觉。好吧，这不怪我们，怪只怪没有用上趁手的工具。这里提出几款可供选择的 Python 开发工具：</p>\n<ul>\n<li>\n<p>PyCharm（推荐 1）</p>\n<p>下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9weWNoYXJt\">https://www.jetbrains.com/pycharm</span></p>\n</li>\n<li>\n<p>Visual Studio Code（推荐 2）</p>\n</li>\n<li>\n<p>Eclipse（不推荐）</p>\n</li>\n</ul>\n<blockquote>\n<p>PyCharm 社区版是免费的，商业版是收费的。我对用过的所有 JetBrains 的产品都欲罢不能，在选择开发工具方面，我个人的首选当然是 PyCharm 啦。</p>\n</blockquote>\n<p>使用 PyCharm 创建一个 Python 项目并运行，如下图所示：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/0868aaf999e563773eb14044b3b6e4be1630046231.png\" alt=\"PyCharm第一个程序\" /></p>\n<h4 id=\"输入打印\"><a class=\"anchor\" href=\"#输入打印\">#</a> 输入打印</h4>\n<p>在上述示例中，我们反复用到了  <code>print()</code>  这个函数，它的作用就是将内容打印（输出）到控制台。而如果需要从控制台获取用户自定义输入的内容，则需要使用到  <code>input()</code>  函数，使用方式如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>name <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Please input your name: '</span><span class=\"token punctuation\">)</span><span class=\"token comment\"># 开启输入，并提示</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello, '</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token comment\"># 打印用户输入的内容</span></pre></td></tr></table></figure><blockquote>\n<p>注意，与 Java 不同，Python 每一行代码的结尾部分不需要添加  <code>;</code>  。</p>\n</blockquote>\n<h3 id=\"python-基础\"><a class=\"anchor\" href=\"#python-基础\">#</a> Python 基础</h3>\n<p>Python 的语法比较简单，采用缩进方式，示例代码如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># print absolute value of an integer:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> a <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>a<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>Python 语法特点：</p>\n<ol>\n<li>\n<p>关于注释</p>\n<p>Python 以  <code>#</code>  来表示注释，与其他语言一样，注释的作用只是为开发人员提供方便，对程序没有实际意义，解释器（或编译器）会忽略掉注释内容。</p>\n</li>\n<li>\n<p>代码块</p>\n<p>当缩进的语句以冒号  <code>:</code>  结尾时，缩进的语句被视为代码块。</p>\n</li>\n<li>\n<p>缩进</p>\n<p>Python 采用缩进方式组织代码，它对缩进是十分敏感的，但同时，它又并未规定具体的缩进方式，理论上两个或四个空格的缩进方式与一个制表符的缩进方式都是可以的，甚至在很多情况下混合使用也能够正常执行。但缩进作为 Python 语法的一部分，它是需要严谨对待的，编码人员一定要强制要求自己，在书写 Python 代码时，使用 4 个空格作为缩进方式。</p>\n<blockquote>\n<p>注意区分 4 个空格与 1 个 tab 的区别。</p>\n<p>另外，Python 的缩进与 Java 不同，Java 缩进的作用仅仅是为了代码的美观和可读性。</p>\n</blockquote>\n</li>\n<li>\n<p>字母大小写</p>\n<p>和 Java 一样，Python 程序也是大小写敏感的。</p>\n</li>\n</ol>\n<h4 id=\"数据类型和变量\"><a class=\"anchor\" href=\"#数据类型和变量\">#</a> 数据类型和变量</h4>\n<ol>\n<li>\n<p>整数</p>\n<p>Python 可以处理任意大小的整数（包括负整数），如需使用十六进制，则需要以  <code>0x</code>  作为前缀，例如  <code>0xff00</code>  。</p>\n<p>对于较大的数值，为了提高可读性，Python 支持使用下划线来分割位数，例如  <code>10_000_000_000</code>  。</p>\n</li>\n<li>\n<p>浮点数</p>\n<p>浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的。浮点数可以用数学写法，例如  <code>3.14</code>  。但是对于很大或很小的浮点数，就必须用科学计数法表示。</p>\n<p>整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的，而浮点数运算则可能会有四舍五入的误差。</p>\n</li>\n<li>\n<p>字符串</p>\n<p>字符串是以英文单引号或双引号括起来的任意文本，引号本身只是一种表示方式，不是字符串的一部分。如果字符串内容本身带有引号，则要进行区分，关于引号的各种情况，可以参照以下代码清单：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'It\\'s a nice day!'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出结果：It's a nice day!</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"It's a nice day!\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出结果：It's a nice day!</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"He said: \\\"It's a nice day!\\\"\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># He said: \"It's a nice day!\"</span></pre></td></tr></table></figure><p>这里使用到的  <code>\\</code>  被称为转义字符，它除了可以对引号进行转义之外，还可以表示换行（ <code>\\n</code> ）、制表符（ <code>\\t</code> ）以及该字符本身（ <code>\\\\</code> ）。但是，当字符串中存在较多需要进行转义处理的字符时，Python 还允许使用  <code>r''</code>  来表示引号内部的字符串内容不转义，例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'\\n表示换行'</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\nr''表示引用原字符\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>但如果字符串内存在多个换行，使用  <code>\\n</code>  换行时候，会对阅读造成不便，因此 Python 允许使用  <code>'''...'''</code>  的格式表示多行内容，例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token triple-quoted-string string\">'''My learning tasks:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Java</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Python</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Golang</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>'''</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>同样，多行字符  <code>'''...'''</code>  前也可以加上  <code>r</code>  字符结合使用。</p>\n</li>\n<li>\n<p>布尔值</p>\n<p>布尔值和布尔代数的表示完全一致，一个布尔值只有  <code>True</code>  、  <code>False</code>  两种值，要么是  <code>True</code>  ，要么是  <code>False</code>  ，在 Python 中，可以直接用  <code>True</code>  、  <code>False</code>  表示布尔值（注意大小写），也可以通过布尔运算计算出来：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr></table></figure><p>布尔值可以使用  <code>and</code>  、  <code>or</code>  和  <code>not</code>  进行运算。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>t1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>f1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">></span> <span class=\"token number\">2</span>  <span class=\"token comment\"># False</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>t2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>f2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span>  <span class=\"token comment\"># False</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'and ------->'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t1 <span class=\"token keyword\">and</span> f1<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True and False => False</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t1 <span class=\"token keyword\">and</span> t2<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True and True => True</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f1 <span class=\"token keyword\">and</span> f2<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False and False => False</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'or ------->'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t1 <span class=\"token keyword\">or</span> f1<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True or False => True</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t1 <span class=\"token keyword\">or</span> t2<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True or True => True</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f1 <span class=\"token keyword\">or</span> f2<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False or False => False</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'not ------->'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">not</span> t1<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># not True => False</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">not</span> f1<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># not False => True</span></pre></td></tr></table></figure></li>\n<li>\n<p>空值</p>\n<p>空值是 Python 里一个特殊的值，用  <code>None</code>  表示。</p>\n</li>\n<li>\n<p>变量</p>\n<p>变量名必须是大小写英文、数字和  <code>_</code>  的组合，且不能用数字开头，例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>age <span class=\"token operator\">=</span> <span class=\"token number\">20</span>  <span class=\"token comment\"># age 是一个数值型的变量，它的值为 20</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>birth_98 <span class=\"token operator\">=</span> <span class=\"token string\">'1998年'</span>  <span class=\"token comment\"># birth_98 是一个字符串类型的变量，它的值为【1998 年】</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>MyAnswer <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>  <span class=\"token comment\"># 布尔型变量...</span></pre></td></tr></table></figure><p>在 Python 中，等号  <code>=</code>  是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>totalPrice <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bookPrice <span class=\"token operator\">=</span> <span class=\"token number\">299</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pencilPrice <span class=\"token operator\">=</span> <span class=\"token number\">84</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'この本は　いくらですか？'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 询问价格</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>priceAStr <span class=\"token operator\">=</span> bookPrice<span class=\"token punctuation\">.</span>__str__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'円です'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>priceAStr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>totalPrice <span class=\"token operator\">=</span> totalPrice <span class=\"token operator\">+</span> bookPrice</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'その鉛筆は？'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pencilPrice<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>totalPrice <span class=\"token operator\">+=</span> pencilPrice  <span class=\"token comment\"># A += B ==> A = A + B</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'全部でいくらですか？'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>totalPrice <span class=\"token operator\">=</span> totalPrice<span class=\"token punctuation\">.</span>__str__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'円です'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>totalPrice<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 哈哈，最近在日语入门，有点疯魔，不要介意</span></pre></td></tr></table></figure><p>示例中，变量 totalPrice 被进行了多次赋值，而且可以看到，对于同一变量，可以为其赋予不同类型的值。</p>\n<p>这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。也可以理解为强类型与弱类型，Python 是弱类型的语言。</p>\n<p>和静态语言相比，动态语言更灵活。</p>\n<blockquote>\n<p>注意理解赋值语句与数学上的等号的区别。</p>\n</blockquote>\n</li>\n<li>\n<p>常量</p>\n<p>所谓常量就是不能变的变量，比如常用的数学常数  <code>π</code>  就是一个常量。在 Python 中，通常用全部大写的变量名表示常量：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PI <span class=\"token operator\">=</span> <span class=\"token number\">3.14159265359</span></pre></td></tr></table></figure><blockquote>\n<p>但其实 Python 中并不存在常量，因为即便是通过大写的方式生命变量名，但它并没有与其他语言的  <code>const</code>  类似的修饰符，它不能保证它所谓的常量不被修改。而使用大写标识常量也只是人为的规定而已，实际上是可以被修改的。简单来说，<ins>Python 中没有常量</ins>。</p>\n</blockquote>\n</li>\n</ol>\n<p><strong>Python 中的除法：</strong></p>\n<p>Python 的除法有两种方式：</p>\n<ol>\n<li>\n<p><code>/</code>  获取浮点数结果。</p>\n<p>这种除法方式的结果始终都是浮点数，不论是否能够被整除。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 3.3333333333333335</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span> <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 3.0</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>//</code>  被称为地板除。</p>\n<p>这种除法会舍去运算结果的小数部分，如果是整数相除，则结果为整数类型，否则，结果为浮点类型，例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">//</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span> <span class=\"token operator\">//</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 3</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">9.6</span> <span class=\"token operator\">//</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 3.0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">9.6</span> <span class=\"token operator\">//</span> <span class=\"token number\">3.2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2.0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0006</span> <span class=\"token operator\">//</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0.0</span></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>注意：和 Java 不同，Python 的整数没有大小限。Python 的浮点数也没有大小限制，但是超出一定范围就直接表示为  <code>inf</code> （无限大）。</p>\n</blockquote>\n<h4 id=\"字符串和编码\"><a class=\"anchor\" href=\"#字符串和编码\">#</a> 字符串和编码</h4>\n<p>在最新的 Python 3 版本中，字符串是以 Unicode 编码的，也就是说，Python 的字符串支持多语言。</p>\n<p>对于单个字符的编码，Python 提供了  <code>ord()</code>  函数获取字符的整数表示， <code>chr()</code>  函数把编码转换为对应的字符，例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 65</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'甲'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 30002</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'あ'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 12354</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">65</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">30002</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 甲</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">12354</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># あ</span></pre></td></tr></table></figure><p>另外，你也可以直接使用字符的整数编码，例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\u7532\\u4e59\\u4e19\\u4e01'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 甲乙丙丁</span></pre></td></tr></table></figure><p>关于中文转码，可以使用在线转码工具：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmVqc29uLmNvbS9jb252ZXJ0L3VuaWNvZGVfY2hpbmVzZQ==\">https://www.bejson.com/convert/unicode_chinese</span></p>\n<p>由于 Python 的字符串类型是  <code>str</code>  ，在内存中以 Unicode 表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把  <code>str</code>  变为以字节为单位的  <code>bytes</code>  。</p>\n<p>Python 对  <code>bytes</code>  类型的数据用带  <code>b</code>  前缀的单引号或双引号表示：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token string\">b'ABC'</span></pre></td></tr></table></figure><p>以 Unicode 表示的  <code>str</code>  通过  <code>encode()</code>  方法可以编码为指定的  <code>bytes</code>  ，例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ABC'</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'ascii'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># b'ABC'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'中文'</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'中文'</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'ascii'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 报错，因为 ASCII 无法表示中文</span></pre></td></tr></table></figure><p>反过来，如果需要从磁盘上读取字节流，就需要将  <code>bytes</code>  转换为字符串，这时就需要使用  <code>decode()</code>  方法：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">b'ABC'</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'ascii'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ABC</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 中文</span></pre></td></tr></table></figure><p>Python 还提供了一个  <code>len()</code>  函数，用于计算字符长度或字节数：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token string\">'中文'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token string\">b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 6</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token string\">'中文'</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 6</span></pre></td></tr></table></figure><blockquote>\n<p>在 Unicode 编码中，一个中文字符占用 3 个字节，在字符串操作过程中，如果经常需要对将字符串与字节流进行转换，则需要尽量保持编码的一致性。</p>\n</blockquote>\n<p>我们在保存 Python 源代码时，为了让 Python 解释器在读取源码时按照 UTF-8 的编码读取，我们可以在文件开头位置指定读取的编码方式：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/env python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># -*- coding: utf-8 -*-</span></pre></td></tr></table></figure><p>字符串的格式化方式：</p>\n<ol>\n<li>\n<p><code>%</code>  占位符格式化</p>\n<p>在 Python 中，也可以对字符串进行格式化，它采用的格式化方式和 C 语言是一致的，用  <code>%</code>  实现，例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello, %s!'</span> <span class=\"token operator\">%</span> <span class=\"token string\">'World'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I\\'m learning %s! It had took me %d hours yet.'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Python'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>%</code>  用于占位和替换，其对应的占位符有四种类型：</p>\n<ol>\n<li><code>%s</code>  表示字符串占位。</li>\n<li><code>%d</code>  表示整数占位。</li>\n<li><code>%f</code>  表示浮点数占位。</li>\n<li><code>%x</code>  表示十六进制整数占位。</li>\n</ol>\n<p>其中，格式化整数和浮点数还可以指定是否补 0 和整数与小数的位数：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%.2f'</span> <span class=\"token operator\">%</span> <span class=\"token number\">3.1415926</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 保留 2 位小数</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>format()</code>  格式化</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello, &#123;0&#125;, 成绩提升了 &#123;1:.1f&#125;%'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'小明'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17.125</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这种方式相比占位符更加麻烦。</p>\n</li>\n<li>\n<p><code>f-string</code>  格式化</p>\n<p>这种格式化字符串的方法是使用以  <code>f</code>  开头的字符串，称之为  <code>f-string</code>  ，它和普通字符串不同之处在于，字符串如果包含  <code>&#123;xxx&#125;</code>  ，就会以对应的变量替换：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>r <span class=\"token operator\">=</span> <span class=\"token number\">2.5</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>s <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span> <span class=\"token operator\">*</span> r <span class=\"token operator\">**</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'The area of a circle with radius </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>r<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>s<span class=\"token punctuation\">:</span><span class=\"token format-spec\">.2f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># The area of a circle with radius 2.5 is 19.62</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"list-和-tuple\"><a class=\"anchor\" href=\"#list-和-tuple\">#</a> list 和 tuple</h4>\n<h5 id=\"list\"><a class=\"anchor\" href=\"#list\">#</a> list</h5>\n<p>list（列表）是 Python 内置的一种数据类型，它是一种有序的集合，可以随时添加和删除其中的元素。</p>\n<p>使用  <code>len()</code>  函数则可以获取到集合的大小。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>language <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Zh-CN'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'En'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Ja'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>language<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 3</span></pre></td></tr></table></figure><p>Python 中的列表概念 Java 基本一样，都是一个有序的列表，都是以 0 作为起始索引，所以超出范围会报越界错误。</p>\n<p>我们可以向列表中插入追加数据，数据会默认追加到最后位置。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>language <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Zh-CN'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'En'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Ja'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>language<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'Zh-TW'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>language<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['Zh-CN', 'En', 'Ja', 'Zh-TW']</span></pre></td></tr></table></figure><p>当然，也可以将新的数据插入到指定的下标位置，例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>language <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Zh-CN'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'En'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Ja'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>language<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Zh-TW'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>language<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['Zh-CN', 'Zh-TW', 'En', 'Ja']</span></pre></td></tr></table></figure><p>删除列表中的元素，需要使用  <code>pop()</code>  ，如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>language <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Zh-CN'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Zh-TW'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Ko'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'En'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Ja'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Fran'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>language<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 不指定 pop () 函数的参数，则删除最后一个元素</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>language<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>language<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 删除指定下标位置的元素</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>language<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['Zh-CN', 'Zh-TW', 'En', 'Ja']</span></pre></td></tr></table></figure><p>替换元素：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>language <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Zh-CN'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'En'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Ja'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>language<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Zh-TW'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>language<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['Zh-TW', 'En', 'Ja']</span></pre></td></tr></table></figure><p>列表中元素的数据类型并不一定要保持一致，如果数组列表中包含有列表类型的元素，则被称为多维数组。</p>\n<h5 id=\"tuple\"><a class=\"anchor\" href=\"#tuple\">#</a> tuple</h5>\n<p>tuple（元组）是另一种有序列表，它和 list 非常相似，但 tuple 一旦初始化就不能修改。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>language <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Zh-CN'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'En'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Ja'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>language<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Zh-TW'</span>  <span class=\"token comment\"># 报错：'tuple' object does not support item assignment</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>language<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>元组列表没有提供  <code>append()</code>  和  <code>insert()</code>  类似的方法。</p>\n<p>因为 tuple 初始化后是不可改变的，因而更具有安全性。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tupleA <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 定义一个空的 tuple</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>tupleB <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 当 tuple 内只有一个元素时，也需要添加逗号，以避免和数学公式符号混淆</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>tupleB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 1</span></pre></td></tr></table></figure><p>可变的 tuple ？</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>t<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'X'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>t<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Y'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ('a', 'b', ['X', 'Y'])</span></pre></td></tr></table></figure><p>这里的可变并不是真正的可变，这里变化的只是 tuple 内部的 list 元素，而 tuple 本身的指针指向并没有变。</p>\n<h4 id=\"条件判断\"><a class=\"anchor\" href=\"#条件判断\">#</a> 条件判断</h4>\n<p>Python 使用  <code>if-elif-else</code>  作为条件判断的语法结构，其中  <code>elif</code>  其实是  <code>else if</code>  的缩写，该语法的完整形式的使用如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>condition <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> condition<span class=\"token punctuation\">.</span>__eq__<span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'do A'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">elif</span> condition<span class=\"token punctuation\">.</span>__eq__<span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'do B'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">elif</span> condition<span class=\"token punctuation\">.</span>__eq__<span class=\"token punctuation\">(</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'do C'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'do D'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>if</code>  判断条件不一定要求是布尔类型或布尔类型的表达式，也可以是一些其他的数据类型，如果这些数据类型是非零数值、非空字符串、非空数组等，条件判断则为  <code>True</code>  ，否则为  <code>False</code>  ，例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Please input and enter to judge true or false: '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Your input is: '</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">+</span> <span class=\"token string\">', it\\'s true'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Your input is: '</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">+</span> <span class=\"token string\">', it\\'s false'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>通过输入不同内容，即可判断该输入内容是否为 True ，可以在您的开发工具中尝试一下，并观察返回结果。但同时，请注意，通过  <code>input()</code>  获取到的用户输入的所有内容都是字符串类型。</p>\n</blockquote>\n<p>如需要将字符串内容转换为数值型，可以使用  <code>int()</code>  函数。</p>\n<h4 id=\"循环\"><a class=\"anchor\" href=\"#循环\">#</a> 循环</h4>\n<p>Python 中有两种循环方式：</p>\n<ol>\n<li>\n<p><code>for...in</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>total <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    total <span class=\"token operator\">+=</span> num</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>Python 也提供了一个  <code>range()</code>  方法用于生成整数序列，而通过  <code>list()</code>  方法可以将整数序列转换为数组，例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">'| '</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token builtin\">str</span> <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">.</span>__str__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">' | '</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># | 0 | 1 | 2 | 3 | 4 |</span></pre></td></tr></table></figure><blockquote>\n<p><code>range()</code>  函数有两个参数，一个是起始值，一个是终止值，当起始为 0 时，可以省略不写。</p>\n</blockquote>\n</li>\n<li>\n<p><code>while</code></p>\n<p>对于 while 循环，只要条件满足，就不断循环，条件不满足时退出循环。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 计算 100 以内所有奇数之和</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin\">sum</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>n <span class=\"token operator\">=</span> <span class=\"token number\">99</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span> n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token builtin\">sum</span> <span class=\"token operator\">+=</span> n</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    n <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<p><code>break</code>  和  <code>continue</code>  ：</p>\n<ol>\n<li>\n<p><code>break</code></p>\n<p>在循环中， <code>break</code>  语句可以提前退出循环。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 获取大于 100 的最小立方数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>result <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>n <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    n <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    result <span class=\"token operator\">=</span> n <span class=\"token operator\">*</span> n <span class=\"token operator\">*</span> n</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> result <span class=\"token operator\">></span> <span class=\"token number\">100</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 125</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>continue</code></p>\n<p>在循环过程中，也可以通过  <code>continue</code>  语句，跳过当前的这次循环，直接开始下一次循环。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 获取 100 以内所有奇数的总和</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>total <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>n <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    n <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">continue</span>  <span class=\"token comment\"># 当条件满足时，进入下一次循环</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    total <span class=\"token operator\">+=</span> n</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2500</span></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p><code>break</code>  和  <code>continue</code>  的区别在于，前者是直接跳出整个循环结构，而后者当前正在循环的某一轮，可以理解为跳过当前循环，继续下一次。另外， <code>break</code>  往往适用于从众多数据中找到某一个符合特定条件的数据，而  <code>continue</code>  则适用于从众多数据中找到某一系列符合条件的数据。</p>\n<p>注意：由于逻辑不够完善，或循环和跳出语句使用不当，可能会出现死循环的情况，就需要终止当前程序并检查代码逻辑。（在终端可使用  <code>Ctrl + C</code>  终止程序）</p>\n</blockquote>\n<h4 id=\"dict-和-set\"><a class=\"anchor\" href=\"#dict-和-set\">#</a> dict 和 set</h4>\n<h5 id=\"dict\"><a class=\"anchor\" href=\"#dict\">#</a> dict</h5>\n<p>Python 内置了字典（在其他语言中也称为  <code>map</code>  ），它使用  <code>key-value</code>  （键值对）的方式存储，具有极快的查找速度。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'dataA'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dataB'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">73</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dataC'</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">7</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'dataB'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 73</span></pre></td></tr></table></figure><p>也可以对 dict 中的值进行添加、修改或移除等操作：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'dataA'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dataB'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">73</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dataC'</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">7</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 计算 dict 元素个数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>data<span class=\"token punctuation\">[</span><span class=\"token string\">'dataB'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">54</span>  <span class=\"token comment\"># 根据 key 值修改 dict 中的元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>data<span class=\"token punctuation\">[</span><span class=\"token string\">'dataD'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">108</span>  <span class=\"token comment\"># 向 dict 中添加元素</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>data<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token string\">'dataA'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &#123;'dataB': 54, 'dataC': -7, 'dataD': 108&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># dict 的遍历</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>data<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 清空 dict</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &#123;&#125;</span></pre></td></tr></table></figure><p>但是，在根据 key 从 dict 中获取值时，可能会出现 key 不存在的情况，这时就会引起程序报错，我们可以通过如下方式避免：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'dataA'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dataB'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">73</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dataC'</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">7</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 方式一：判断要查询的 key 是否存在</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token string\">'dataD'</span> <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'dataD'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 方式二：推荐</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'dataD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 未查询到时，返回 None</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'dataD'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 未查询到时，指定返回内容（这里是 - 1）</span></pre></td></tr></table></figure><blockquote>\n<p>注意：在 Python 交互环境中，返回值为 None 是不会输出到控制台的，另外， dict 内部元素的存放顺序和 key 放入的顺序无关。</p>\n</blockquote>\n<p>dict 和 list 比较：</p>\n<ol>\n<li>对于查找和插入，dict 处理极快，不会随着 key 的增加而变慢，而 list 则会因为元素的不断增加变慢。</li>\n<li>对于内存占用而言，dict 由于要存储键值对，占用内存较多，而 list 则占用很少。</li>\n</ol>\n<p>所以，list 的优势在于空间占用少，而 dict 的优势在于时间消耗少。</p>\n<p>此外，由于 dict 是通过 key 来计算 value 的存储位置，所以程序需要保证 key 的对象的不可变性，这种不可变性，需要通过<ins>哈希算法</ins>进行保证。在 Python 中，字符串和整数都是不可变的，可以作为 dict 的 key 使用，但 list 却是可变的，不应当作为 key 使用。</p>\n<h5 id=\"set\"><a class=\"anchor\" href=\"#set\">#</a> set</h5>\n<p>set 和 dict 类似，也是一组 key 的集合，但是 set 中不存储 value，由于 key 是不可重复的，所以 set 中不存在重复的数据。</p>\n<p>要创建一个 set，需要先提供一个 list 作为输入集合：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>s1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\"># 直接声明 set，重复值时无效的</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>s1<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 向 set 中添加元素</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s1<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 如果添加元素已存在，不会引起报错，但也不会重复添加</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>s1<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 移除 set 中某个元素</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &#123;1, 3, 4&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 计算元素个数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>s2 <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 将 list 转为 set</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &#123;1, 2, 3&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>s1<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 清空 set</span></pre></td></tr></table></figure><p>set 无序不重复的元素集合，它可以做数学意义上的交集、并集处理：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>s1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>s2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 交集</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">&amp;</span> s2<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &#123;2, 4&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 并集</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">|</span> s2<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &#123;1, 2, 3, 4, 6, 8&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># set 中存放 list 会导致报错</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>s3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s3<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 报错：TypeError: unhashable type: 'list'</span></pre></td></tr></table></figure><blockquote>\n<p>set 中存放 list 作为元素会引起报错，其原理和 dict 是一样的。</p>\n</blockquote>\n<h3 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h3>\n<p>Python 内置了很多有用的函数，我们可以直接调用，例如在上文中频繁使用到的  <code>len()</code>  。</p>\n<h4 id=\"调用函数\"><a class=\"anchor\" href=\"#调用函数\">#</a> 调用函数</h4>\n<p>要调用一个函数，需要知道函数的名称和参数，而且需要保证参数的类型及顺序的一致，否则就会引起程序错误。</p>\n<p>也有一些函数可以接收任意多个参数。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">13.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 13.2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 33</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 类型转换函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token string\">'15'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 15</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2.18'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2.18</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.62</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 1.62</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr></table></figure><p>函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个别名：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token builtin\">abs</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 6</span></pre></td></tr></table></figure><h4 id=\"定义函数\"><a class=\"anchor\" href=\"#定义函数\">#</a> 定义函数</h4>\n<p>在 Python 中，定义一个函数要使用  <code>def</code>  语句，依次写出函数名、括号、括号中的参数和冒号  <code>:</code>  ，然后，在缩进块中编写函数体，函数的返回值用  <code>return</code>  语句返回（无返回值不写即可）。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">division</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span>  <span class=\"token comment\"># return None 可以直接简写为 return</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> m <span class=\"token operator\">/</span> n</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>division<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2.5</span></pre></td></tr></table></figure><p>当暂未想好如何定义函数的实现时，可以定义一个空函数，它的目的是进行占位，当想好函数的实现内容时在填充即可。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>i <span class=\"token operator\">=</span> <span class=\"token number\">1001</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>u <span class=\"token operator\">=</span> <span class=\"token number\">1005</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> u<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># if I were You</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">pass</span>  <span class=\"token comment\"># I would ...  # if 内容暂未确定，但留空又会报错</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>say<span class=\"token punctuation\">(</span><span class=\"token string\">'Anyway!!!'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># but I'm not, so, >>></span></pre></td></tr></table></figure><p>调用函数时，如果参数个数不对，Python 解释器会自动检查出来，并抛出  <code>TypeError</code>  错误，但是如果参数类型不对，Python 解释器就无法帮我们检查。</p>\n<blockquote>\n<p>但是现在的 IDE 工具很智能了，PyCharm 在代码编写时就可以帮助我们规避很多错误，例如参数检查。</p>\n</blockquote>\n<p>因此，我们定义函数的时候，可以进行参数类型检查：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">division</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">raise</span> TypeError<span class=\"token punctuation\">(</span><span class=\"token string\">'您传入的除数必须是数值型'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">raise</span> TypeError<span class=\"token punctuation\">(</span><span class=\"token string\">'您传入的被除数必须是整数'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> m <span class=\"token operator\">/</span> n</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>division<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 抛出【您传入的被除数必须是整数】错误</span></pre></td></tr></table></figure><p>Python 函数也可以返回多个值：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">maxAndMin</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token builtin\">max</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token builtin\">min</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> item <span class=\"token operator\">></span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token builtin\">max</span> <span class=\"token operator\">=</span> item</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> item <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token builtin\">min</span> <span class=\"token operator\">=</span> item</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">min</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token builtin\">max</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">min</span> <span class=\"token operator\">=</span> maxAndMin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">53</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'max = '</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># max =  53</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'min = '</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># min =  -1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>maxAndMin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">53</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (53, -1)</span></pre></td></tr></table></figure><blockquote>\n<p>从示例中可以看到，Python 函数返回多个值其实是一种假象，它返回多个值，其实本质上是返回一个 tuple 。</p>\n</blockquote>\n<p>尝试定义一个函数  <code>quadratic(a, b, c)</code>  来求出一元二次方程的解，公式定义：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mi>b</mi><mi>x</mi><mo>+</mo><mi>c</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">ax^2 + bx + c = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></p>\n<blockquote>\n<p>提示：</p>\n<ol>\n<li>\n<p>一元二次方程的求根公式为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.15999999999999992em\" columnalign=\"center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>x</mi><mo>=</mo><mfrac><mrow><mo>−</mo><mi>b</mi><mo>±</mo><msqrt><mrow><msup><mi>b</mi><mn>2</mn></msup><mo>−</mo><mn>4</mn><mi>a</mi><mi>c</mi></mrow></msqrt></mrow><mrow><mn>2</mn><mi>a</mi></mrow></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin {array}{c}\n\nx = \\frac{-b±\\sqrt {b^2-4ac}}{2a}\n\n\\end {array}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3994820000000001em;vertical-align:-0.449741em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9497410000000002em;\"><span style=\"top:-2.949741em;\"><span class=\"pstrut\" style=\"height:3.039482em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.039482em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">a</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.3939999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">b</span><span class=\"mbin mtight\">±</span><span class=\"mord sqrt mtight\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9221171428571429em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mtight\" style=\"padding-left:0.833em;\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463142857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">4</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">c</span></span></span><span style=\"top:-2.882117142857143em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail mtight\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.11788285714285718em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.449741em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span></span></span></span></span></p>\n</li>\n<li>\n<p>计算平方根可以调用  <code>math.sqrt()</code>  函数。</p>\n</li>\n</ol>\n</blockquote>\n<p>使用下面的代码来尝试一下吧：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> math</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">quadratic</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">pass</span>  <span class=\"token comment\"># 在这里写入你的代码逻辑</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Input parameter a: '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Input parameter b: '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Input parameter c: '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    a <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    b <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    c <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">'参数错误：请传入数值类型的参数'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Get result = '</span> <span class=\"token operator\">+</span> quadratic<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__str__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><details><summary>点击这里查看参考答案。</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> math</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">quadratic</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    x1 <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    x2 <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># 1. 参数校验</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> a <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'参数错误：一元二次方程的a值不能为0'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\"># 2. 判断有多少个解</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    d <span class=\"token operator\">=</span> b <span class=\"token operator\">**</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> a <span class=\"token operator\">*</span> c</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> d <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 该方程只有一个解，或两个解相同</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'该一元二次方程没有【无解】'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">elif</span> d <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        x1 <span class=\"token operator\">=</span> b <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        x2 <span class=\"token operator\">=</span> x1</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 该方程有两个解</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        x1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>b <span class=\"token operator\">+</span> math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        x2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>b <span class=\"token operator\">-</span> math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> x1<span class=\"token punctuation\">,</span> x2</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Input parameter a: '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Input parameter b: '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Input parameter c: '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    a <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    b <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    c <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">'参数错误：请传入数值类型的参数'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Get result = '</span> <span class=\"token operator\">+</span> quadratic<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__str__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>可以尝试输入一些下面这几组参数进行验证：</p>\n<p>1, 2, -3 -&gt; (1.0, -3.0)</p>\n<p>4, 6, 0 -&gt; (0.0, -1.5)</p>\n<p>1, 4, 4 -&gt; (-2.0, -2.0)</p>\n</blockquote>\n</div></details>\n<h4 id=\"函数的参数\"><a class=\"anchor\" href=\"#函数的参数\">#</a> 函数的参数</h4>\n<ol>\n<li>\n<p>位置参数</p>\n<p>在前文中，我们已经多次使用到位置参数，所谓位置参数，就是在调用函数时，指定的实际参数的数量，必须和形式参数的数量保持一致，否则就会抛出  <code>TypeError</code>  异常。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">power</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    s <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">while</span> n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        s <span class=\"token operator\">*=</span> x</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        n <span class=\"token operator\">-=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> s</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>power<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>默认参数</p>\n<p>默认参数是指当函数调用方不传递时，函数指定参数具有一个默认的值。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">power</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> n<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 次方数默认为 2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    s <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">while</span> n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        s <span class=\"token operator\">*=</span> x</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        n <span class=\"token operator\">-=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> s</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>power<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>使用默认参数需要记住以下原则：</p>\n<ul>\n<li>\n<p>位置参数放前，默认参数放后。</p>\n</li>\n<li>\n<p>确定性大的参数放前，确定性小的参数放后。</p>\n</li>\n<li>\n<p>调用的函数需要传递默认参数，但参数位置不匹配时，需要指定参数名。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> school<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> gender<span class=\"token operator\">=</span><span class=\"token string\">'Male'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>test<span class=\"token punctuation\">(</span><span class=\"token string\">'Susan'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> gender<span class=\"token operator\">=</span><span class=\"token string\">'Female'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>默认参数必须指向不变对象【坑点】。</p>\n<p>例如，当默认参数定义为数组时，将出现如下情况：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add_end</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    l<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'END'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> l</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>add_end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [1, 2, 3, 'END']</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>add_end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['END']</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>add_end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['END', 'END']</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>add_end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['END', 'END', 'END']</span></pre></td></tr></table></figure><p>这是因为默认参数指定为 list 时，指定的其实只是一个指针，当我们每次使用默认参数，使用的都是指针对应的值，多次调用就会反复修改 list 指针对应的值，导致多重拼接。</p>\n<blockquote>\n<p>要理解这一点，请务必理解可变对象和不可变对象。（在 Java 语言中，被称为值类型和引用类型）</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p>可变参数</p>\n<p>可变参数，即参数的个数是可以变化的，可以传入任意多个参数（包括 0 个）。定义函数可变参数的方式如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token builtin\">sum</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token builtin\">sum</span> <span class=\"token operator\">+=</span> num</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">sum</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 42</span></pre></td></tr></table></figure><p>可变参数接收到的是一个 tuple 类型。</p>\n<p>如果调用函数时，某一个参数本身即是 tuple 类型的参数，为了区分可变参数与参数的 tuple 类型参数，可以使用如下方式调用函数：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token builtin\">sum</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token builtin\">sum</span> <span class=\"token operator\">+=</span> num</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">sum</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 50</span></pre></td></tr></table></figure><blockquote>\n<p>这里是将 tuple 转换为可变参数，再传入到函数中。</p>\n</blockquote>\n</li>\n<li>\n<p>关键字参数</p>\n<p>关键字参数允许传入任意多个参数，这些关键字参数在函数内部会自动组装成一个 dict 。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name:'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token string\">'age:'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> <span class=\"token string\">'extra:'</span><span class=\"token punctuation\">,</span> kw<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>person<span class=\"token punctuation\">(</span><span class=\"token string\">'Lily'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> city<span class=\"token operator\">=</span><span class=\"token string\">'Shanghai'</span><span class=\"token punctuation\">,</span> job<span class=\"token operator\">=</span><span class=\"token string\">'teacher'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># name: Lily age: 24 extra: &#123;'city': 'Shanghai', 'job': 'teacher'&#125;</span></pre></td></tr></table></figure><p>关键字参数可以扩展函数的功能，函数调用方可以根据情况自由选择是否传递某些参数字段，上面的函数也可以做如下简化：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name:'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token string\">'age:'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> <span class=\"token string\">'extra:'</span><span class=\"token punctuation\">,</span> kw<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>extra <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'city'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Shanghai'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'job'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'teacher'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>person<span class=\"token punctuation\">(</span><span class=\"token string\">'Lily'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>extra<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>注意：函数内的关键字参数只是传入实际参数的一份拷贝，对它进行改动并不会影响到函数调用方的变量。</p>\n</blockquote>\n</li>\n<li>\n<p>命名关键字参数</p>\n<p>对于关键字参数，调用方对参数名称可以任意指定，但如需进行参数名称限制，我们可以进行如下声明：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> city<span class=\"token punctuation\">,</span> job<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name:'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token string\">'age:'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> <span class=\"token string\">'city:'</span><span class=\"token punctuation\">,</span> city<span class=\"token punctuation\">,</span> <span class=\"token string\">'job:'</span><span class=\"token punctuation\">,</span> job<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>extra <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'city'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Shanghai'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'job'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'teacher'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>person<span class=\"token punctuation\">(</span><span class=\"token string\">'Lily'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>extra<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这种通过  <code>*</code>  分隔被命名的关键字参数，可以实现对参数命名的限制，但通过这种方式传递参数时，调用方必须传递所有关键字参数（除非关键字参数中使用了默认参数），否则会引起报错。</p>\n<p>另外，当函数中已经定义了一个可变参数，那么，这个函数中的可变参数前就不再需要使用  <code>*</code>  分隔符了，例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> city<span class=\"token operator\">=</span><span class=\"token string\">'Taiyuan'</span><span class=\"token punctuation\">,</span> job<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr></table></figure></li>\n<li>\n<p>参数组合</p>\n<p>在 Python 中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这 5 种参数都可以组合使用。但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数，例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> school<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a ='</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> <span class=\"token string\">'b ='</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token string\">'c ='</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> <span class=\"token string\">'args ='</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> school<span class=\"token punctuation\">,</span> <span class=\"token string\">'kw ='</span><span class=\"token punctuation\">,</span> kw<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>f1<span class=\"token punctuation\">(</span><span class=\"token string\">'zhangsan'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'nanjing'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> school<span class=\"token operator\">=</span><span class=\"token string\">'NanJin University'</span><span class=\"token punctuation\">,</span> email<span class=\"token operator\">=</span><span class=\"token string\">'abc@q.com'</span><span class=\"token punctuation\">,</span> phone<span class=\"token operator\">=</span><span class=\"token string\">'15625376'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># a = zhangsan b = nanjing c = 5 args = (12, 33) NanJin University kw = &#123;'email': 'abc@q.com', 'phone': '15625376'&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>但是，由于多种类型的组合参数可读性并不太高，不推荐同时使用较多种类型的参数进行组合。</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"递归函数\"><a class=\"anchor\" href=\"#递归函数\">#</a> 递归函数</h4>\n<p>在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数，例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 阶乘</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fact</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> fact<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fact<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 120</span></pre></td></tr></table></figure><p>递归函数的优点是定义简单，逻辑清晰。理论上，所有的递归函数都可以写成循环的方式，但循环的逻辑不如递归清晰。</p>\n<p>使用递归函数需要注意防止栈溢出。在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。（例如在示例中调用  <code>fact(1000)</code>  ）</p>\n<p>解决递归调用栈溢出的方法是通过<strong>尾递归</strong>优化，事实上尾递归和循环的效果是一样的，所以，把循环看成是一种特殊的尾递归函数也是可以的。</p>\n<blockquote>\n<p>对于 Python 而言，因为其解释器并未对尾递归做优化，所以，Python 使用尾递归方式也不能解决栈溢出的问题。</p>\n</blockquote>\n<p>尾递归是指，在函数返回的时候，调用自身本身，并且，return 语句不能包含表达式。这样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 尾递归阶乘</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fact</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> fact_iter<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fact_iter</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> num <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> product</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> fact_iter<span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> num <span class=\"token operator\">*</span> product<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fact<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 120</span></pre></td></tr></table></figure><p>两者的区别在于：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 递归方式：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fact<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3</span> <span class=\"token operator\">*</span> fact<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> fact<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 尾递归方式：</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>fact_iter<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>fact_iter<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>fact_iter<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">6</span></pre></td></tr></table></figure><h3 id=\"高级特性\"><a class=\"anchor\" href=\"#高级特性\">#</a> 高级特性</h3>\n<h4 id=\"切片\"><a class=\"anchor\" href=\"#切片\">#</a> 切片</h4>\n<p>在 Python 中，可以通过切片截取数组中任意任意位置的元素。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    arr<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [0, 1, 2]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [0, 1, 2]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">:</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [10, 11, 12, 13]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [99] # 倒数第一个元素</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [96, 97, 98]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [96, 97, 98, 99] # 倒数四个参数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># []</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [0, 2, 4, 6, 8] # 前 10 个数中，每 3 个数取一个</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 拷贝原数组</span></pre></td></tr></table></figure><blockquote>\n<p>倒数第一个元素的索引是 -1。</p>\n</blockquote>\n<p>字符串和 tuple 也是看做是一种 list ，因此它们同样支持切片操作：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (0, 1, 2)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'PYTHON'</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># PYT</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'PYTHON'</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># PTO</span></pre></td></tr></table></figure><p>在很多编程语言中，针对字符串提供了很多各种截取函数（例如，substring），其实目的就是对字符串切片。Python 没有针对字符串的截取函数，但可以直接使用切片方式实现。</p>\n<h4 id=\"迭代\"><a class=\"anchor\" href=\"#迭代\">#</a> 迭代</h4>\n<p>对于一个 list 或 tuple ，我们可以通过循环来进行遍历，这种遍历被称为迭代。</p>\n<p>在 Python 中，迭代是通过  <code>for ... in</code>  来完成的，它既可以迭代一个 list 和 tuple ，也可以迭代字符串。</p>\n<p>而且在 Python 中，程序只需要关注对象是否可迭代，而不需要关注迭代对象的类型，判断对象是否可迭代：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> collections<span class=\"token punctuation\">.</span>abc <span class=\"token keyword\">import</span> Iterable</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False # 整数不可迭代</span></pre></td></tr></table></figure><p>另外，Python 也内置了一个  <code>enumerate</code>  函数，可以将 list 变为一个  <code>索引-元素</code>  对，这样就可以在 <code>for</code>  循环中同时迭代索引和元素本身：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>Python 也可以同时遍历多个内部元素，但需要注意个数需要完全匹配，否则会报错：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># ValueError: not enough values to unpack</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"列表生成式\"><a class=\"anchor\" href=\"#列表生成式\">#</a> 列表生成式</h4>\n<p>列表生成式即  <code>List Comprehensions</code>  ，是 Python 内置的非常简单却强大的可以用来创建 list 的生成式。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x <span class=\"token operator\">*</span> x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></pre></td></tr></table></figure><p>for 循环后面还可以加上条件判断：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x <span class=\"token operator\">*</span> x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [4, 16, 36, 64, 100]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token keyword\">if</span> x <span class=\"token operator\">></span> <span class=\"token number\">5</span> <span class=\"token keyword\">else</span> x <span class=\"token operator\">*</span> x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [4, 16, 12, 16, 20]</span></pre></td></tr></table></figure><blockquote>\n<p>注意：在列表生成式中， for 后面的条件判断的作用是进行筛选，所以不能带有  <code>elif</code>  或  <code>else</code>  判断。而 for 前面也可以使用  <code>if</code>  语句，但如果是在 for 前面添加条件判断，它的作用则是作为一个表达式，这时它必须有  <code>else</code>  语句，以便能够保证所有的情况都得到处理。</p>\n<p>在一个列表生成式中， <code>for</code>  前面的  <code>if ... else</code>  是表达式，而  <code>for</code>  后面的  <code>if</code>  是过滤条件，不能带  <code>else</code> 。</p>\n</blockquote>\n<p>还可以使用多个 for 循环生成全排列：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>a <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> c <span class=\"token keyword\">for</span> a <span class=\"token keyword\">in</span> <span class=\"token string\">'BC'</span> <span class=\"token keyword\">for</span> b <span class=\"token keyword\">in</span> <span class=\"token string\">'12'</span> <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> <span class=\"token string\">'あう'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># ['B1 あ ', 'B1 う ', 'B2 あ ', 'B2 う ', 'C1 あ ', 'C1 う ', 'C2 あ ', 'C2 う ']</span></pre></td></tr></table></figure><p>运用列表生成式，可以写出非常简洁的代码。例如，列出当前目录下的所有文件和目录名：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>d <span class=\"token keyword\">for</span> d <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['.idea', 'main.py', 'venv']</span></pre></td></tr></table></figure><p>for 循环其实可以同时使用两个甚至多个变量，比如 dict 的 items () 可以同时迭代 key 和 value：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>d <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> d<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> <span class=\"token string\">'='</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>k <span class=\"token operator\">+</span> <span class=\"token string\">'='</span> <span class=\"token operator\">+</span> v <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> d<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['x=A', 'y=B', 'z=C']</span></pre></td></tr></table></figure><p>另外，还可以对字符串进行处理，例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>L <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'World'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'IBM'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Apple'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> L<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['hello', 'world', 'ibm', 'apple']</span></pre></td></tr></table></figure><h4 id=\"生成器\"><a class=\"anchor\" href=\"#生成器\">#</a> 生成器</h4>\n<p>通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含 100 万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</p>\n<p>但如果列表元素可以按照某种算法推算出来，那我们就可以在循环的过程中不断推算出后续的元素，这样就不必创建完整的 list，从而节省大量的空间。在 Python 中，这种一边循环一边计算的机制，称为生成器： <code>generator</code>  。</p>\n<p>要创建一个 generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的  <code>[]</code>  改成  <code>()</code>  ，就创建了一个 generator：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>d <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>g <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">+</span> <span class=\"token string\">'='</span> <span class=\"token operator\">+</span> v <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> d<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;generator object &lt;genexpr> at 0x00000210690ADBA0></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># x=A</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span>__next__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># y=B</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># z=C</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 抛出异常 StopIteration</span></pre></td></tr></table></figure><p>generator 可以通过实例中  <code>next()</code>  的方式依次取出相应的值，但这种做法较为笨拙，而且越界时会抛出异常，由于 generator 也是可遍历对象，因此更加常见的是结合循环进行使用：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>d <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>g <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">+</span> <span class=\"token string\">'='</span> <span class=\"token operator\">+</span> v <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> d<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> g<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>另一种创建 generator 的方法：</p>\n<p>著名的斐波拉契数列（Fibonacci），除第一个和第二个数外，任意一个数都可由前两个数相加得到：</p>\n<p>1, 1, 2, 3, 5, 8, 13, 21, 34, ...</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 函数实现斐波拉契数列</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    n<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">while</span> n <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        n <span class=\"token operator\">=</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'done'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>fib<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>将上述算法修改为一个生成器：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 斐波拉契数列生成器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    n<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">while</span> n <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">yield</span> b  <span class=\"token comment\"># yield 中断执行并返回每轮执行的结果</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        n <span class=\"token operator\">=</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'done'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 这里得到的 fib (10) 是一个 generator 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> fib<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这就是第二种创建 generator 的方法，如果一个函数中定义了  <code>yield</code>  字段，这个函数就不再是一个普通函数，而是一个生成器。</p>\n<p>函数和生成器有一个较为突出的区别：函数是按照顺序执行，如果遇到 return 语句或执行到最后一行语句就返回；而生成器却是在每次调用  <code>next()</code>  方法时才执行，遇到  <code>yield</code>  语句时就返回，而当再次执行  <code>next()</code>  时，就从上一次  <code>yield</code>  返回语句处继续执行。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 在这里，注释中的 [ ] 表示执行顺序，其后表示输出内容</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">odd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'step 1'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [1] step 1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'step 2'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [3] step 2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">yield</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'step 3'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [5] step 3</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">yield</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>odd <span class=\"token operator\">=</span> odd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>odd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [2] 1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>odd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [4] 3</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>odd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [6] 5</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 也可以使用循环进行遍历</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># for n in odd():</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#     print(n)</span></pre></td></tr></table></figure><p>如果在取出生成器中的所有值之后，希望获得生成器中返回语句定义的内容，可以通过异常捕获的方式：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    n<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">while</span> n <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">yield</span> b  <span class=\"token comment\"># yield 中断执行并返回每轮执行的结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        n <span class=\"token operator\">=</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'done'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>fib <span class=\"token operator\">=</span> fib<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        x <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>fib<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'g:'</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">except</span> StopIteration <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Generator return value:'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 获取到生成器中 return 语句的返回值。</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr></table></figure><h4 id=\"迭代器\"><a class=\"anchor\" href=\"#迭代器\">#</a> 迭代器</h4>\n<p>在前文的<strong>迭代</strong>部分，我们已经提到过迭代器，可以直接作用于 for 循环的对象，都被称为可迭代对象，并且可以使用  <code>isinstance()</code>  函数来判断一个对象是否可迭代。而其实，可以被  <code>next()</code>  函数调用并不断返回下一个值的对象，即为迭代器（Iterator）。</p>\n<p>生成器都是迭代器对象，而数组、字典、字符串等虽然具有可迭代属性，却并不是迭代器对象，这是因为迭代器对象可以被  <code>next()</code>  函数不断获取下一个值，但其本身却并不知晓当前序列的长度，只能通过  <code>next()</code>  函数实现按需计算下一个元素。因此，迭代器的计算是惰性的，只有在需要返回下一个数据的时候，才会进行计算。</p>\n<blockquote>\n<p>迭代器甚至可以表示一个无限大的数据流，而列表等类型则是有限的。判断是否是迭代器对象很简单，只需要知道它是否是可作用于  <code>next()</code>  函数的对象即可。</p>\n</blockquote>\n<h3 id=\"函数式编程\"><a class=\"anchor\" href=\"#函数式编程\">#</a> 函数式编程</h3>\n<p>函数是 Python 内建支持的一种封装，我们通过把大段代码拆成函数，通过一层一层的函数调用，就可以把复杂任务分解成简单的任务，这种分解可以称之为面向过程的程序设计。函数就是面向过程的程序设计的基本单元。</p>\n<p>而函数式编程（Functional Programming）虽然也可以归结到面向过程的程序设计，但其思想更接近数学计算。</p>\n<p>函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！</p>\n<p>Python 对函数式编程提供部分支持。由于 Python 允许使用变量，因此，Python 不是纯函数式编程语言。</p>\n<h4 id=\"高阶函数\"><a class=\"anchor\" href=\"#高阶函数\">#</a> 高阶函数</h4>\n<p>函数本身可以赋值给一个变量，即变量可以指向函数。</p>\n<p>当一个变量指向了某个函数，那么就可以通过这个变量来调用该函数：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>f <span class=\"token operator\">=</span> <span class=\"token builtin\">abs</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 12</span></pre></td></tr></table></figure><p>其实，函数名本身就是一个指向函数的变量，那么，这个变量自然也可以被重新赋值：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> collections<span class=\"token punctuation\">.</span>abc <span class=\"token keyword\">import</span> Iterable</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">abs</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">isinstance</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 报错：TypeError</span></pre></td></tr></table></figure><p>由此可知，函数本身也是一个变量，反过来说，我们可以定义一个函数类型的变量，而函数本身是可以接收变量作为参数的，那么，同样函数就也可以接收一个函数类型的参数。这种接收函数作为参数的函数，就被称为高阶函数，例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>result <span class=\"token operator\">=</span> add<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 6</span></pre></td></tr></table></figure><p>总而言之，<mark>把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式。</mark></p>\n<h5 id=\"map-reduce\"><a class=\"anchor\" href=\"#map-reduce\">#</a> map / reduce</h5>\n<p>Python 内建了  <code>map()</code>  和  <code>reduce()</code>  函数。</p>\n<ol>\n<li>\n<p>map</p>\n<p><code>map()</code>  函数接收两个参数，一个是函数，一个是  <code>Iterable</code> ， <code>map</code>  将传入的函数依次作用到序列的每个元素，并把结果作为新的  <code>Iterator</code>  返回，例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>r <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 返回值是一个 Iterator 对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [1, 4, 9, 16, 25, 36, 49, 64, 81]</span></pre></td></tr></table></figure><p>通过 map 传递不同的函数参数，可以实现对数组的不同处理。</p>\n</li>\n<li>\n<p>reduce</p>\n<p><code>reduce</code>  把一个函数作用在一个序列上，这个函数必须接收两个参数， <code>reduce</code>  会把结果继续和序列的下一个元素做累积计算，其效果就是：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">reduce</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>x1<span class=\"token punctuation\">,</span> x2<span class=\"token punctuation\">,</span> x3<span class=\"token punctuation\">,</span> x4<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> f<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">,</span> x2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> x3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> x4<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> <span class=\"token builtin\">reduce</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> x</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>result <span class=\"token operator\">=</span> <span class=\"token builtin\">reduce</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 256</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># f(f(2, 4), 6) ==> (6 - 2) ** ((4 - 2) ** 2) ==> 4 ** (2 ** 2) ==> 4 ** 4 ==> 256</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 256</span></pre></td></tr></table></figure><p>当然，map 和 reduce 也可以进行组合使用。</p>\n</li>\n</ol>\n<h5 id=\"filter\"><a class=\"anchor\" href=\"#filter\">#</a> filter</h5>\n<p>Python 内建的  <code>filter()</code>  函数用于过滤序列，它和  <code>map()</code>  类似，也接收一个函数和一个序列。但不同的是， <code>filter()</code>  把传入的函数依次作用于每个元素，然后根据返回值是  <code>True</code>  还是  <code>False</code>  决定保留还是丢弃该元素，例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 过滤掉奇数，保留偶数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">is_odd</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>f <span class=\"token operator\">=</span> <span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>is_odd<span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [1, 3, 5, 7, 9]</span></pre></td></tr></table></figure><p>除了上述示例的用法，还可以有很多用途，例如：去除字符串中的特殊字符、移除数组中的空元素、保留数组中具有某种特征的元素等，总之，filter 的主要作用在于对序列进行过滤和赛选。</p>\n<blockquote>\n<p>map 和 filter 返回的都是 Iterator 。由于迭代器是惰性序列，因此，要强迫其完成计算结果，需要使用  <code>list()</code>  函数获取所有结果并返回数组。</p>\n</blockquote>\n<p>可以尝试用已有知识求出 100 以内所有素数。</p>\n<h5 id=\"sorted\"><a class=\"anchor\" href=\"#sorted\">#</a> sorted</h5>\n<p>排序也是在程序中经常用到的算法。无论使用冒泡排序还是快速排序，排序的核心是比较两个元素的大小。如果是数字，我们可以直接比较，但如果是字符串或者两个 dict 比较的过程就必须通过函数抽象出来。</p>\n<p>Python 内置的  <code>sorted()</code>  函数就可以对 list 进行排序：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [-21, -12, 5, 9, 36]</span></pre></td></tr></table></figure><p>但  <code>sort()</code>  作为一个高阶函数，除了默认的排序之外，它还可以接收一个  <code>key</code>  指定的函数来实现自定义的排序，例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> x <span class=\"token operator\">**</span> x <span class=\"token operator\">-</span> x</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 按绝对值大小排序</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token builtin\">abs</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [5, 9, -12, -21, 36]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 按自定义函数方式进行排序</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [-12, -21, 5, 9, 36]</span></pre></td></tr></table></figure><p>而如果要对字符串进行排序，sort 默认会对字符串的 ASCII 码进行比较。</p>\n<p>而要进行反向排序，只需要指定一个  <code>reverse=True</code>  参数即可：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [-21, -12, 5, 9, 36]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [36, 9, 5, -12, -21]</span></pre></td></tr></table></figure><h4 id=\"返回函数\"><a class=\"anchor\" href=\"#返回函数\">#</a> 返回函数</h4>\n<p>高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回，例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 可变参数求和的懒执行方式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">lazy_sum</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        ax <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> args<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            ax <span class=\"token operator\">=</span> ax <span class=\"token operator\">+</span> n</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> ax</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">sum</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>f <span class=\"token operator\">=</span> lazy_sum<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 返回的函数并不是立即执行</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;function lazy_sum.&lt;locals>.sum at 0x000001875C48EB80></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 而是 f () 函数调用时才执行</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 25</span></pre></td></tr></table></figure><p>这种在函数中定义的函数，称为内部函数，内部函数可以引用外部函数的参数和局部变量，当外部函数被调用并返回内部函数时，相关的参数和变量都会保存在返回的函数中，这种被称为<strong>闭包</strong>的结构在许多程序中都有广泛的应用。</p>\n<p>另外，每次调用外部函数时，返回的内部函数都是一个新的实例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> f</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>f1 <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>f2 <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f1 <span class=\"token operator\">==</span> f2<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr></table></figure><p>另外，需要注意的是，返回函数不要引用任何循环变量，或者后续会发生变化的变量，反例如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    fs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">def</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>             <span class=\"token keyword\">return</span> i <span class=\"token operator\">*</span> i</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        fs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> fs</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>f1<span class=\"token punctuation\">,</span> f2<span class=\"token punctuation\">,</span> f3 <span class=\"token operator\">=</span> count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 9 （预期是 1）</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 9 （预期是 4）</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f3<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 9</span></pre></td></tr></table></figure><p>这就会出现函数的返回值和预期不一致，这是因为在返回的函数中引用了循环变量，但这种返回函数并非立即执行，而当多个循环函数都被返回时，循环变量已经变为循环周期的最大值，所以最终调用函数进行计算时，就不会得到预期的循环效果产生的值。</p>\n<p>而如果一定要引用循环变量，可以通过如下方式，将循环变量作为参数传入到另一内部函数中，这样就可以保证被绑定的循环变量参数不变：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">def</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span> j <span class=\"token operator\">*</span> j</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> g</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    fs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        fs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># f (i) 立刻被执行，因此 i 的当前值被传入 f ()</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> fs</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>f1<span class=\"token punctuation\">,</span> f2<span class=\"token punctuation\">,</span> f3 <span class=\"token operator\">=</span> count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 4</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f3<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 9</span></pre></td></tr></table></figure><h4 id=\"匿名函数\"><a class=\"anchor\" href=\"#匿名函数\">#</a> 匿名函数</h4>\n<p>当我们在传入函数时，有些时候，不需要显式地定义函数，直接传入匿名函数更方便。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>n <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [1, 4, 9, 16, 25, 36, 49, 64, 81]</span></pre></td></tr></table></figure><p>关键字  <code>lambda</code>  表示匿名函数，冒号前面的变量表示函数参数。</p>\n<p>匿名函数有个限制，就是只能有一个表达式，不用写  <code>return</code>  ，返回值就是该表达式的结果。</p>\n<p>匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数；同样地，也可以把匿名函数作为返回值返回。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>f <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">*</span> x</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 16</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">lambda</span><span class=\"token punctuation\">:</span> x <span class=\"token operator\">**</span> x</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 27</span></pre></td></tr></table></figure><h4 id=\"装饰器\"><a class=\"anchor\" href=\"#装饰器\">#</a> 装饰器</h4>\n<p>装饰器（Decorator）可以在代码运行期间，动态地增加功能，而其实本质上，装饰器就是一个返回函数的高阶函数。</p>\n<p>由于函数也是一个对象，而且函数对象可以被赋值给变量，所以，通过变量也能调用该函数。而函数对象有一个  <code>__name__</code>  属性，可以获取到函数的名字，据此，我们可以尝试实现一个简单的打印日志的功能：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'call %s()'</span> <span class=\"token operator\">%</span> func<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kw<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> wrapper</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token decorator annotation punctuation\">@log</span>  <span class=\"token comment\"># 通过 Python 的 @语法，将装饰器置于函数的定义处，相当于执行了：say_hi = log (say_hi)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">say_hi</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi,'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>say_hi<span class=\"token punctuation\">(</span><span class=\"token string\">'Zhang San'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>say_hi<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># call say_hi()</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># Hi, Zhang San</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># wrapper  # 函数名错误</span></pre></td></tr></table></figure><p>当然，你也可以为以上程序添加断点，并观察其执行流程。</p>\n<p>但是，如果装饰器本身需要传入参数，那就需要编写一个返回装饰器的高阶函数，相对而言会更加复杂：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">decorator</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%s %s()'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kw<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> wrapper</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> decorator</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token decorator annotation punctuation\">@log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Python\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 相当于执行了：now = log ('Python')(say_hi)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">say_hi</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi,'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>say_hi<span class=\"token punctuation\">(</span><span class=\"token string\">'Zhang San'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>say_hi<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># Python say_hi()</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># Hi, Zhang San</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># wrapper  # 函数名错误</span></pre></td></tr></table></figure><p>但如代码所示，通过现在的方式调用，被装饰器修饰的函数（say_hi）在执行结束后，其函数名称被替换了，这是因为装饰器是将被修饰的函数（say_hi）作为参数传递到了装饰器的内部，并且最终将其赋值为装饰器内部定义的一个内部函数（wrapper），因此，装饰器修饰的函数所对应的名称（say_hi），其实际上指向的不再是原本定义的函数，而是指向其作为参数传递，并且被赋值到的装饰器的一个内部参数（wrapper），所以最终通过  <code>say_hi.__name__</code>  获取到的函数名称变为了  <code>wrapper</code>  。</p>\n<p>而要解决这样的问题，我们就需要在装饰器中实现类似  <code>wrapper.__name__ = func.__name__</code>  的功能，但我们其实并不需要手动编写这样的代码，因为 Python 内置了一个  <code>functools.wraps</code>  函数可以实现这样的功能：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> functools  <span class=\"token comment\"># 导入 functools 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">decorator</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token decorator annotation punctuation\">@functools<span class=\"token punctuation\">.</span>wraps</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\"># wrapper.__name__ = func.__name__  # 当然，通过这种方式也是可以的，但不推荐</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%s %s()'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">return</span> func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kw<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> wrapper</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> decorator</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token decorator annotation punctuation\">@log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Python\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">say_hi</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi,'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>say_hi<span class=\"token punctuation\">(</span><span class=\"token string\">'Zhang San'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>say_hi<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># Python say_hi()</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># Hi, Zhang San</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># say_hi  # 函数名正确</span></pre></td></tr></table></figure><h4 id=\"偏函数\"><a class=\"anchor\" href=\"#偏函数\">#</a> 偏函数</h4>\n<p>Python 的  <code>functools</code>  模块提供了很多有用的功能，其中一个就是偏函数（Partial function）。</p>\n<p>通过函数  <code>functools.partial</code>  ，我们可以创建一个偏函数：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># hex 字符串转 10 进制</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> functools</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>int2 <span class=\"token operator\">=</span> functools<span class=\"token punctuation\">.</span>partial<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> base<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>int2<span class=\"token punctuation\">(</span><span class=\"token string\">'101000'</span><span class=\"token punctuation\">,</span> base<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 101000</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>int2<span class=\"token punctuation\">(</span><span class=\"token string\">'101000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 40</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 相当于</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token string\">'101000'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'base'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 40</span></pre></td></tr></table></figure><p><code>functools.partial</code>  的作用就是，把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，这样调用这个新函数会更简单。而且，调用方可以根据自己的需要，选择是否传递新的值覆盖默认值。</p>\n<p>创建偏函数时，实际上可以接收函数对象、  <code>*args</code>  和  <code>**kw</code>  这 3 个参数，在上面的二进制示例中，实际上是固定了  <code>int()</code>  函数的关键字参数  <code>base</code>  。而其他偏函数也是类似地，是将向偏函数中传入的值作为远函数的一部分，自动添加到所有参数左侧，例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> functools</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>args1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>max1 <span class=\"token operator\">=</span> functools<span class=\"token punctuation\">.</span>partial<span class=\"token punctuation\">(</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>max1<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 相当于</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>args2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>max2 <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>max2<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>当函数的参数个数太多，需要简化时，使用  <code>functools.partial</code>  可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单。</p>\n</blockquote>\n<p>课间休息，听听音乐吧！</p>\n<p><div class=\"media-container\"><div class=\"player\" data-type=\"audio\" data-src='[{\"title\":\"音乐推荐\",\"list\":[\"https://music.163.com/#/song?id=1501450521\",\"https://music.163.com/#/song?id=28461702\",\"https://music.163.com/#/song?id=857606\",\"http://music.163.com/#/song?id=31545838\",\"https://music.163.com/#/song?id=1815109509\",\"https://music.163.com/#/song?id=1485319473\"]}]'></div></div></p>\n<h3 id=\"模块\"><a class=\"anchor\" href=\"#模块\">#</a> 模块</h3>\n<p>在计算机程序的开发过程中，随着业务逐渐完善，代码会越来越多，也越来越不容易维护。所以，为了便于更好地维护代码，提高开发效率，所有开发语言都有意识地将代码模块进行分化，这也是也是必然的。</p>\n<p>为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。在 Python 中，一个  <code>.py</code>  文件就称之为一个模块（Module）。</p>\n<p>在不同的模块中，函数的命名是可以重复的，但是我们所编写的函数，应当尽量与 Python 的内置函数区别开来，避免引起不必要的误会和冲突。</p>\n<p>可以在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9saWJyYXJ5L2Z1bmN0aW9ucy5odG1s\">官方文档</span>中查看 Python 的所有的内置函数。</p>\n<p>另外，对于模块的命名， Python 按照目录来组织模块结构，并且称之为包（Package），而这种目录结构，通常推荐使用公司或企业的组织结构进行命名。</p>\n<p>Python 的每个包目录下，都应当存在一个  <code>__init__.py</code>  文件，这个文件是必须的，否则，这个目录就不会被识别为包，而这个  <code>__init__.py</code>  文件本身可以是空文件，也可以有代码内容。</p>\n<blockquote>\n<p>在开发时创建模块，命名时需要注意避开 Python 自带的模块名称，例如系统自带了  <code>sys</code>  模块，就不可再命名为  <code>sys.py</code>  ，否则将导致系统的  <code>sys</code>  模块无法导入。</p>\n</blockquote>\n<h4 id=\"使用模块\"><a class=\"anchor\" href=\"#使用模块\">#</a> 使用模块</h4>\n<p>Python 本身内置了很多非常有用的模块，只要安装完毕，这些模块就可以立刻使用，一个标准的 Python 文件模板如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/env python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># -*- coding: utf-8 -*-</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\" a test module \"\"\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>__author__ <span class=\"token operator\">=</span> <span class=\"token string\">'Chinmoku'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    args <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>argv</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['A:/pycharm-workspace/py-test/main.py']</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello, world!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">elif</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello, %s!'</span> <span class=\"token operator\">%</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Too many arguments!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    test<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>前两行是标准注释，第一行注释指定了 Python 的环境，可以让这个文件直接在 Unix/Linux/Mac 环境上运行；而第二行注释则表明了这个文件使用的编码格式，避免解释器读取代码时产生乱码。第四行的字符串是用来指定当前模块的文档注释内容，任何模块的第一个字符串都将被视为该模块的文档注释。而第六行的  <code>__author__</code>  则指定了当前文件的开发者姓名，方便合作开发和维护。</p>\n</blockquote>\n<p>要使用一个模块，第一步是导入该模块，与其他开发语言大同小异，Python 导入模块的语法如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr></table></figure><p><code>sys</code>  模块被导入后，就可以通过  <code>sys</code>  这个变量来访问该模块的所有功能。</p>\n<p><code>sys.argv</code>  变量使用 list 存储了命令行的所有参数，它最少有一个参数，即是当前  <code>.py</code>  文件的全名称。</p>\n<p>另外，在一个模块中，我们可能会定义很多函数或变量，但是我们希望一些函数或变量仅仅在模块内部进行使用，这时就要通过  <code>_</code>  前缀来实现。</p>\n<p>正常的函数和变量名是公开的（public），可以被直接引用，，比如： <code>abc</code> ， <code>x123</code> ， <code>PI</code>  等；而特殊变量使用  <code>__xxx__</code>  方式命名，可以被直接引用，但是有特殊用途，例如  <code>__author__</code>  、  <code>__name__</code>  就分别代表作者和当前模块名，而且模块定义的文档注释其实也可以使用变量  <code>__doc__</code>  来访问（非常规）。</p>\n<p>类似  <code>_xxx</code>  和  <code>__xxx</code>  这样的函数或变量就是非公开的（private），不应该被直接引用，比如  <code>_abc</code>  ， <code>__abc</code>  等；</p>\n<blockquote>\n<p>但是，Python 其实并没有一种方法可以完全限制访问 private 函数或变量，但是，从编程习惯上不应该引用 private 函数或变量。</p>\n</blockquote>\n<p>外部不需要引用的函数尽量全部定义成 private，只有外部需要引用的函数才定义为 public。</p>\n<h4 id=\"安装第三方模块\"><a class=\"anchor\" href=\"#安装第三方模块\">#</a> 安装第三方模块</h4>\n<p>在 Python 中，安装第三方模块，是通过包管理工具 pip 完成的。</p>\n<p>一般来说，第三方库都会在 Python 官方的 <span class=\"exturl\" data-url=\"aHR0cDovL3B5cGkucHl0aG9uLm9yZw==\">pypi.python.org</span> 网站注册，要安装一个第三方库，必须先知道该库的名称，可以在官网或者 pypi 上搜索，比如 Pillow 的名称叫 Pillow，因此，安装 Pillow 的命令就是：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip install Pillow</pre></td></tr></table></figure><p>在使用 Python 时，我们经常需要用到很多第三方库，例如，上面提到的 Pillow，以及 MySQL 驱动程序，Web 框架 Flask，科学计算 Numpy 等。用 pip 一个一个安装费时费力，还需要考虑兼容性。因此，更加推荐地是使用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYW5hY29uZGEuY29tLw==\">Anaconda</span> ，这是一个基于 Python 的数据处理和科学计算平台，它已经内置了许多非常有用的第三方库，可以从<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYW5hY29uZGEuY29tL2Rvd25sb2FkLw==\"> Anaconda 官网</span>下载安装包。</p>\n<p>下载完成后进行安装，推荐不要在安装时勾选自动配置环境变量的选项，而是手动进行配置，配置示例：</p>\n<blockquote>\n<p>在  <code>path</code>  环境变量中，添加如下配置：</p>\n<p>A:\\anaconda3<br />\nA:\\anaconda3\\Scripts<br />\nA:\\anaconda3\\Library\\bin</p>\n</blockquote>\n<p>在命令行中输入  <code>python</code>  ，在回车输出的结果中，如果有  <code>Anaconda</code>  字符，就表示安装成功。</p>\n<p>当我们试图加载一个模块时，Python 会在指定的路径下搜索对应的  <code>.py</code>  文件，如果找不到，就会抛出  <code>ModuleNotFoundError</code>  异常。</p>\n<p>默认情况下，Python 解释器会搜索当前目录、所有已安装的内置模块和第三方模块，搜索路径存放在  <code>sys</code>  模块的  <code>path</code>  变量中：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>如果要添加自定义的搜索目录，有以下两种方式：</p>\n<ol>\n<li>\n<p>直接修改  <code>sys.path</code>  ，添加自定义的搜索目录：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sys<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>'<span class=\"token operator\">/</span>Users<span class=\"token operator\">/</span>chinmoku<span class=\"token operator\">/</span>py_test<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这种方法是在运行时进行修改，程序运行结束后即失效。</p>\n</li>\n<li>\n<p>设置环境变量  <code>PYTHONPATH</code>  ，该环境变量的内容会被自动添加到模块搜索路径中。</p>\n</li>\n</ol>\n<h3 id=\"面向对象编程\"><a class=\"anchor\" href=\"#面向对象编程\">#</a> 面向对象编程</h3>\n<blockquote>\n<p>由于本人的第一开发语言 Java 本身就是一种面向对象的语言，因此，部分与 Java 共通的思想或基础概念，这里会有所省略。</p>\n</blockquote>\n<h4 id=\"类和实例\"><a class=\"anchor\" href=\"#类和实例\">#</a> 类和实例</h4>\n<p>Python 通过如下方式定义一个类：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr></table></figure><p>其中，  <code>class</code>  是定义类的关键字，  <code>Student</code>  是类名，而紧接着的  <code>(object)</code>  表示当前类所继承的父类，所有的类最终都会继承自  <code>object</code>  类。</p>\n<p>根据已有的类创建类的实例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 定义一个类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>name</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>zhang <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'zhang'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>zhang<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;__main__.Student object at 0x000002153559BA60></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>zhang<span class=\"token punctuation\">.</span>get_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># zhang</span></pre></td></tr></table></figure><p><code>__init__()</code>  是一个特殊的函数，这个方法在获取类的实例时被调用，可以进行对实例进行一些初始化定义，它可以有多个参数，但第一个参数必须是  <code>self</code>  ，表示创建的实例本身。在创建实例时，要根据  <code>__init__()</code>  函数所需要的参数匹配传值，但  <code>self</code>  参数在传值时可以忽略，因为 Python 解释器会自动将实例变量传入到这个函数中。</p>\n<p>在类中声明的函数与普通函数基本一样，但在类中声明的函数默认会有一个  <code>self</code>  参数，和  <code>__init__()</code>  函数一样，调用函数时忽略  <code>self</code>  参数即可。</p>\n<p><mark>数据封装</mark>是面向对象编程的一个重要特点。</p>\n<p>我们定义一个类，并且通过  <code>__init__()</code>  函数可以创建出该类的实例，但对于创建的实例，是可以调用类内部定义的方法的，这些在类内部的函数与类本身是关联起来的，我们称这些函数为类的方法，如上述代码片段中的  <code>get_name()</code>  函数。而要调用类的方法也很简单，通过实例直接调用即可。这样，对于实例而言，它并不需要关心调用的方法内部的实现细节，这是封装的好处之一。封装的另一好处是可以给类增加新的方法，而类的实例只需要直接调用方法即可。</p>\n<p>总而言之：</p>\n<ul>\n<li>\n<p>类是创建实例的模板，而实例则是一个一个具体的对象，各个实例拥有的数据都互相独立，互不影响；</p>\n</li>\n<li>\n<p>方法就是与实例绑定的函数，和普通函数不同，方法可以直接访问实例的数据；</p>\n</li>\n<li>\n<p>通过在实例上调用方法，我们就直接操作了对象内部的数据，但无需知道方法内部的实现细节；</p>\n</li>\n</ul>\n<blockquote>\n<p>Python 允许对实例变量绑定任何数据，也就是说，对于两个实例变量，虽然它们都是同一个类的不同实例，但拥有的变量名称都可能不同。</p>\n</blockquote>\n<h4 id=\"访问限制\"><a class=\"anchor\" href=\"#访问限制\">#</a> 访问限制</h4>\n<p>在 Class 内部，可以有属性和方法，而外部代码可以通过直接调用实例变量的方法来操作数据，这样，就隐藏了内部的复杂逻辑。但是，外部仍旧可以自由访问和修改一个实例内部的属性，如果不希望内部属性被外部访问，可以使用  <code>__name</code>  这种方式对属性进行命名。该变量就会变为一个私有变量，这样，这个变量就只有内部可以访问，而外部是无法访问的。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>__name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>__name</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">set_name</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        self<span class=\"token punctuation\">.</span>__name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>zhang <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'zhang'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>zhang<span class=\"token punctuation\">.</span>_Student__name<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># zhang</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>zhang<span class=\"token punctuation\">.</span>__name<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># AttributeError: 'Student' object has no attribute '__name'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>zhang<span class=\"token punctuation\">.</span>set_name<span class=\"token punctuation\">(</span><span class=\"token string\">'zhou'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>zhang<span class=\"token punctuation\">.</span>get_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># zhou</span></pre></td></tr></table></figure><p>其实在上文已经多次提到，以  <code>__xxx</code>  方式命名变量，并不能保证变量不被外部直接访问，例如在上面的代码清单中，其实通过  <code>.Student__name</code>  依然能够得到私有变量的值，而之所以说通过  <code>__xxx</code>  方式可以声明为私有变量，其实仅仅是出于约定俗成的规定，而非出于程序的强制要求，往往更多的是需要开发者拥有主动意识，自觉遵守这些约定或规范。</p>\n<blockquote>\n<p>注意：  <code>__xxx__</code>  命名方式，表示这个变量是一个特殊变量，它不是私有变量，可以被直接访问，所以在属性命名时，不应当以这种方式命名。另外，以  <code>_xxx</code>  这种方式命名的变量，是可以被外部访问的，但作为一种约定俗成的规定，我们应当尽量将它当做私有变量看待。</p>\n</blockquote>\n<h4 id=\"继承和多态\"><a class=\"anchor\" href=\"#继承和多态\">#</a> 继承和多态</h4>\n<p>前面提到封装是面向对象编程的一个重要特点，而继承和多态则是面向对象编程的另外两大特点。</p>\n<p>当我们定义一个类的时候，我们定义的这个类可以从某个类继承，因此新创建的类相对被继承的类而言就是子类，而被继承的类就是基类、父类或超类。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> ani<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%s can run'</span> <span class=\"token operator\">%</span> ani<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> type_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        self<span class=\"token punctuation\">.</span>type_name <span class=\"token operator\">=</span> type_name</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">get_type_name</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>type_name</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\"># 子类可以重写父类的方法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%s can run every!'</span> <span class=\"token operator\">%</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>catA <span class=\"token operator\">=</span> Cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>catA<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token string\">'Cat'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 子类可以调用父类的方法</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># Cat can run</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>dogA <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">'Dog'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>dogA<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>dogA<span class=\"token punctuation\">.</span>get_type_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># Dog can run every!</span></pre></td></tr></table></figure><p>继承的好处在于不用进行任何声明就可以获得父类的全部功能，而且子类仍然可以对自身进行扩展和增强而不受父类限制，例如新增属性和方法。</p>\n<p>当子类和父类存在相同的方法时，我们便说子类覆盖了父类的方法。当实例调用该同名方法时，就只会调用子类的方法，而不会调用父类，这种特性在面向对象的思想里被称为多态。</p>\n<p>在 Python 基础中我们提到过，可以使用  <code>isinstance()</code>  函数来判断某个变量是否是某种类型。而在这里的实例中，我们同样可以通过这种方法来对拥有继承关系的子类对象和父类进行判断：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>catA<span class=\"token punctuation\">,</span> Cat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>dogA<span class=\"token punctuation\">,</span> Dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>catA<span class=\"token punctuation\">,</span> Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>dogA<span class=\"token punctuation\">,</span> Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>animal <span class=\"token operator\">=</span> Animal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">,</span> Dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr></table></figure><p><strong>静态语言与动态语言：</strong></p>\n<p>对于静态语言来说（例如 Java），如果需要传入 Animal 类型，那么就必须传入 Animal 类型或它的子类，否则无法调用其  <code>run()</code>  方法。</p>\n<p>而对于 Python 这样的动态语言来说，则不一定非要传入 Animal 类型或其子类，我们只需要保证传入的对象有一个  <code>run()</code>  方法即可。</p>\n<p>Python 具有这种  <code>file-like-object</code>  的特点，它并不严格要求继承体系，这就是所谓的 “鸭子类型”。</p>\n<blockquote>\n<p>鸭子类型：一个对象只要 “看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。</p>\n</blockquote>\n<h4 id=\"获取对象信息\"><a class=\"anchor\" href=\"#获取对象信息\">#</a> 获取对象信息</h4>\n<p>当我们获得一个对象的引用时，我们可以通过  <code>type()</code>  函数来判断该对象的类型，当然，如果一个变量指向函数或类，也可以使用  <code>type()</code>  函数进行判断：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>dogA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;class '__main__.Dog'></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>dogA<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Dog<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>dogA<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>catA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr></table></figure><p><code>type()</code>  函数返回的是一个 Class 类型，除了自定义的类型之外，也可以判断内置的类型：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> types</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> types<span class=\"token punctuation\">.</span>FunctionType<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> types<span class=\"token punctuation\">.</span>LambdaType<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>types<span class=\"token punctuation\">.</span>GeneratorType<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr></table></figure><p>type 函数可以判断一个对象的类型，但对于拥有继承关系的对象而言，就无法判断它的父级类型，对于这种情况，我们仍旧可以使用  <code>isinstance()</code>  函数进行判断，它可以判断对象是否处于某一继承链上。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>catA<span class=\"token punctuation\">,</span> Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>dogA<span class=\"token punctuation\">,</span> Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>dogA<span class=\"token punctuation\">,</span> Cat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>dogA<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>Cat<span class=\"token punctuation\">,</span> Dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True # 判断是否是多个对象中的一种</span></pre></td></tr></table></figure><p>如果要获得一个对象的所有属性和方法，可以使用  <code>dir()</code>  函数，它返回一个包含字符串的 list ；如果想要获取对象长度，可以使用  <code>__len__()</code>  方法或  <code>len()</code>  函数，他们是等价的，并且，我们可以重写类中的  <code>__len__()</code>  方法。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>catA <span class=\"token operator\">=</span> Cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span>catA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['__class__', '__delattr__', '__dict__', '__dir__' ...</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>catA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 20</span></pre></td></tr></table></figure><p>另外，对象还提供了  <code>getattr()</code>  、  <code>setattr()</code>  、  <code>hasattr()</code>  函数，可用于操作类中的属性。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># print(getattr(dogA, 'color'))  # AttributeError: 'Dog' object has no attribute 'color'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>dogA<span class=\"token punctuation\">,</span> <span class=\"token string\">'color'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># None # 获取属性时，可以传入一个默认值，当属性不存在时生效</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>dogA<span class=\"token punctuation\">,</span> <span class=\"token string\">'color'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>dogA<span class=\"token punctuation\">,</span> <span class=\"token string\">'color'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'brown'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>dogA<span class=\"token punctuation\">,</span> <span class=\"token string\">'color'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>dogA<span class=\"token punctuation\">,</span> <span class=\"token string\">'color'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># brown</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>dogA<span class=\"token punctuation\">,</span> <span class=\"token string\">'run'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;bound method Dog.run of &lt;__main__.Dog object at 0x000001BB085C2FA0>> # 判断是否有某方法</span></pre></td></tr></table></figure><blockquote>\n<p>这些用于获取属性的方法或函数，通常是在不知道某一个类是否具有该方法时才使用的。</p>\n</blockquote>\n<h4 id=\"实例属性和类属性\"><a class=\"anchor\" href=\"#实例属性和类属性\">#</a> 实例属性和类属性</h4>\n<p>对于一个类的实例，我们可以通过实例变量直接声明或使用 self 参数的方式声明以为其绑定属性。但对一个类本身，我们也可以通过如下方式为这个类声明属性：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name <span class=\"token operator\">=</span> <span class=\"token string\">'Student'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>student <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Student</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Student<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Student</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>student<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Teacher'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Teacher</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">del</span> student<span class=\"token punctuation\">.</span>name</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Student</span></pre></td></tr></table></figure><p>这个为类声明的属性虽然为类所有，但这个类的所有实例均可以访问该属性。如果类属性与实例属性同名，调用属性时默认从实例属性中获取，如实例属性未获取到，则从类属性中获取。因此，在编程时，我们应当尽量避免出现实例属性与类属性同名的情况。</p>\n<h3 id=\"面向对象高级编程\"><a class=\"anchor\" href=\"#面向对象高级编程\">#</a> 面向对象高级编程</h3>\n<h4 id=\"_slots_\"><a class=\"anchor\" href=\"#_slots_\">#</a> _<em>slots</em>_</h4>\n<p>对于一个已声明的对象的实例，我们可以为其绑定任何属性和方法，但是为某一实例绑定的属性或方法，仅对当前实例有效，如果需要为所有实例都绑定属性或方法，则可以直接将属性或方法绑定到类上。给类绑定实例或方法后，这个类的所有实例均可调用。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>student1 <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>student1<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Zhang'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>student1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Zhang</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>student2 <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># print(student2.name)  # AttributeError: 'Student' object has no attribute 'name'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Student<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">17</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>student1<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 17</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>student2<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 17</span></pre></td></tr></table></figure><p>但是，为示例绑定属性或方法并不受任何限制，如果需要限定实例需要绑定的属性或方法，可以通过  <code>__slots__</code>  来指定：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    __slots__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'study'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">study</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%s is studying!'</span> <span class=\"token operator\">%</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>student1 <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>student1<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Zhang'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>student1<span class=\"token punctuation\">.</span>study <span class=\"token operator\">=</span> study</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>student1<span class=\"token punctuation\">.</span>study<span class=\"token punctuation\">(</span>student1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Zhang is studying!</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>student1<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">17</span>  <span class=\"token comment\"># AttributeError: 'Student' object has no attribute 'age'</span></pre></td></tr></table></figure><p><code>__slots__</code>  使用 tuple 来指定多个属性名，实例在绑定属性或方法时，所绑定的属性或方法的名称必须在  <code>__slot__</code>  属性中存在，否则就会抛出异常。</p>\n<p>注意：  <code>__slots__</code>  中定义的属性仅仅对当前类的实例起作用，对继承的子类是不起作用的，除非在子类中也进行声明，这样，子类和父类的  <code>__slots__</code>  限制会进行叠加。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    __slots__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    __slots__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'grade'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'score'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>student1 <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>student1<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Zhang'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>student1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Zhang</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>student1<span class=\"token punctuation\">.</span>character <span class=\"token operator\">=</span> <span class=\"token string\">'forthright'</span>  <span class=\"token comment\"># AttributeError: 'Student' object has no attribute 'character'</span></pre></td></tr></table></figure><h4 id=\"property\"><a class=\"anchor\" href=\"#property\">#</a> @property</h4>\n<p>对于一个类的属性，声明的实例直接调用属性是不安全而且无法进行任何限制的，如果需要对属性进行限制，我们可以使用 Python 内置的  <code>@property</code>  装饰器来将一个方法变为属性调用。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@property</span>  <span class=\"token comment\"># getter</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">score</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_score</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@score<span class=\"token punctuation\">.</span>setter</span>  <span class=\"token comment\"># setter</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">score</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">'score must be an integer!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> value <span class=\"token operator\">></span> <span class=\"token number\">100</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">'score must between 0 ~ 100!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_score <span class=\"token operator\">=</span> value</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>student1 <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># student1.score = 'C'  # ValueError: score must be an integer!</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># student1.score = 120  # ValueError: score must between 0 ~ 100!</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>student1<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> <span class=\"token number\">60</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>student1<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 60</span></pre></td></tr></table></figure><p>如果需要定义一个只读属性，那么，我们只需要不对  <code>setter</code>  进行定义即可。</p>\n<p>但需要注意一点，属性的方法名不应当与实例变量重名，这样会导致无线递归，最终赵成栈溢出，错误示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@property</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">score</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 属性方法名为 score</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>score  <span class=\"token comment\"># 实例变量名也为 score</span></pre></td></tr></table></figure><h4 id=\"多重继承\"><a class=\"anchor\" href=\"#多重继承\">#</a> 多重继承</h4>\n<p>在面向对象的思想中，一个类是可以同时继承多个类的，但在设计类的继承关系时，通常，主线都是单一继承下来的，如果需要 “混入” 额外的功能，通过多重继承就可以实现，这种设计通常称之为  <code>MixIn</code>  。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span>Mammal<span class=\"token punctuation\">,</span> RunnableMixIn<span class=\"token punctuation\">,</span> CarnivorousMixIn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr></table></figure><p>MixIn 的目的就是给一个类增加多个功能，这样，在设计类的时候，我们优先考虑通过多重继承来组合多个 MixIn 的功能，而不是设计多层次的复杂的继承关系。</p>\n<p>Python 自带的很多库也使用了 MixIn。例如 Python 自带了  <code>TCPServer</code>  和  <code>UDPServer</code>  这两类网络服务，而要同时服务多个用户就必须使用多进程或多线程模型，这两种模型由  <code>ForkingMixIn</code>  和  <code>ThreadingMixIn</code>  提供，于是，我们可以通过不同的组合来创建合适的服务。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 多进程模式的 TCP 服务</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTCPServer</span><span class=\"token punctuation\">(</span>TCPServer<span class=\"token punctuation\">,</span> ForkingMixIn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 多线程模式的 UDP 服务</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyUDPServer</span><span class=\"token punctuation\">(</span>UDPServer<span class=\"token punctuation\">,</span> ThreadingMixIn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr></table></figure><p>通过这种 MixIn 方式，我们不需要复杂而庞大的继承链，只要选择组合不同的类的功能，就可以快速构造出所需的子类。</p>\n<blockquote>\n<p>只允许单一继承的语言（如 Java）不能使用 MixIn 的设计。</p>\n</blockquote>\n<h4 id=\"定制类\"><a class=\"anchor\" href=\"#定制类\">#</a> 定制类</h4>\n<h5 id=\"_str_\"><a class=\"anchor\" href=\"#_str_\">#</a> _<em>str</em>_</h5>\n<p>当我们在打印一个类的实例时，通常打印的都是都是这个实例的内存地址信息，如需要有意义的自定义实例信息，可以使用  <code>__str__()</code>  方法：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">'class Student(name: %s)'</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>name</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>teacher1 <span class=\"token operator\">=</span> Teacher<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>teacher1<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;__main__.Teacher object at 0x000001D2DAC21FD0></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>student1 <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'Zhang'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>student1<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># class Student(name: Zhang)</span></pre></td></tr></table></figure><h5 id=\"_iter_\"><a class=\"anchor\" href=\"#_iter_\">#</a> _<em>iter</em>_</h5>\n<p>如果一个类想被用于  <code>for ... in</code>  循环，就必须实现一个  <code>__iter__()</code>  方法，该方法返回一个迭代对象，然后，Python 的 for 循环就会不断调用该迭代对象的  <code>__next__()</code>  方法拿到循环的下一个值，直到遇到  <code>StopIteration</code>  错误时退出循环，例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 斐波那契数列</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Fib</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>  <span class=\"token comment\"># 初始化两个计数器 a，b</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__iter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> self  <span class=\"token comment\"># 实例本身就是迭代对象，故返回自己</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__next__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        self<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>b  <span class=\"token comment\"># 计算下一个值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>a <span class=\"token operator\">></span> <span class=\"token number\">1000</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 退出循环的条件</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">raise</span> StopIteration<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>a  <span class=\"token comment\"># 返回下一个值</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>fib <span class=\"token operator\">=</span> Fib<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>tu <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> fib<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    tu<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tu<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]</span></pre></td></tr></table></figure><h5 id=\"_getitem_\"><a class=\"anchor\" href=\"#_getitem_\">#</a> _<em>getitem</em>_</h5>\n<p>在上面的斐波那契数列代码清单中，声明的实例对象虽然和 list 很像，但它还不能通过下标获取对应的元素，要实现这一点，可以通过加入  <code>__getitem__()</code>  方法来实现：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">__getitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> a</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Fib<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 5</span></pre></td></tr></table></figure><p>而如果要支持切片方式，则需要更加完善的逻辑：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">__getitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># n 是索引</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> a</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token builtin\">slice</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># n 是切片</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        start <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span>start</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        stop <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span>stop</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> start <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            start <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        L <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>stop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">if</span> x <span class=\"token operator\">>=</span> start<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                L<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> L</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fib<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [8, 13, 21, 34, 55]</span></pre></td></tr></table></figure><h5 id=\"_getattr_\"><a class=\"anchor\" href=\"#_getattr_\">#</a> _<em>getattr</em>_</h5>\n<p>当一个实例调用不存在的属性或方法时，就会抛出异常，我们可以定义一个  <code>__getattr__()</code>  方法来动态地返回属性或函数。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Michael'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__getattr__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> attr <span class=\"token operator\">==</span> <span class=\"token string\">'score'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">60</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> attr <span class=\"token operator\">==</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">lambda</span><span class=\"token punctuation\">:</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">raise</span> AttributeError<span class=\"token punctuation\">(</span><span class=\"token string\">'\\'Student\\' object has no attribute \\'%s\\''</span> <span class=\"token operator\">%</span> attr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>student1 <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>student1<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 60</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>student1<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 18</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>student1<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># None</span></pre></td></tr></table></figure><blockquote>\n<p>注意：只有在没有找到属性的情况下，才会调用  <code>__getattr__()</code>  ，并且，当调用一个不存在的方法或属性时，  <code>__getattr__()</code>  方法会默认返回为 None ，我们也可以做自定义处理，例如抛出自定义异常。</p>\n</blockquote>\n<p>实现一个动态路由链：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Chain</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> path<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_path <span class=\"token operator\">=</span> path</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__getattr__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> Chain<span class=\"token punctuation\">(</span><span class=\"token string\">'%s/%s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_path<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token keyword\">return</span> Chain<span class=\"token punctuation\">(</span><span class=\"token string\">'%s/%s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_path<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_path</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>url <span class=\"token operator\">=</span> Chain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">(</span><span class=\"token string\">'zhang'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">.</span>timeline<span class=\"token punctuation\">.</span><span class=\"token builtin\">list</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># /user/zhang/status/timeline/list</span></pre></td></tr></table></figure><h5 id=\"_call_\"><a class=\"anchor\" href=\"#_call_\">#</a> _<em>call</em>_</h5>\n<p>在动态路由链的代码清单中，我们使用到了一个  <code>__call__()</code>  方法，这个方法可以直接在实例本身的基础上调用方法。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mr. %s is %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Person<span class=\"token punctuation\">(</span><span class=\"token string\">'Zhang'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">'working!'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Mr. Zhang is working!</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>person1 <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token string\">'Wang'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">callable</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True # 可以使用 callable () 函数判断是否是可调用对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>person1<span class=\"token punctuation\">(</span><span class=\"token string\">'studying!'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Mr. Wang is studying!</span></pre></td></tr></table></figure><p>Python 的 class 允许定义许多定制方法，可以让我们非常方便地生成特定的类，还有很多可定制的方法，详情可参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9yZWZlcmVuY2UvZGF0YW1vZGVsLmh0bWwjc3BlY2lhbC1tZXRob2QtbmFtZXM=\">官方文档</span>。</p>\n<h4 id=\"枚举类\"><a class=\"anchor\" href=\"#枚举类\">#</a> 枚举类</h4>\n<p>Python 枚举类的声明及使用方式如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> enum <span class=\"token keyword\">import</span> Enum</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Month <span class=\"token operator\">=</span> Enum<span class=\"token punctuation\">(</span><span class=\"token string\">'Month'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Jan'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Feb'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Mar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Apr'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'May'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Jun'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Jul'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Aug'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Sep'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Oct'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Nov'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Dec'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Month<span class=\"token punctuation\">.</span>May<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Month.May</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Month<span class=\"token punctuation\">.</span>May<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># May</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Month<span class=\"token punctuation\">.</span>May<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 5 # 默认从 1 开始计数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">for</span> name<span class=\"token punctuation\">,</span> member <span class=\"token keyword\">in</span> Month<span class=\"token punctuation\">.</span>__members__<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">'=>'</span><span class=\"token punctuation\">,</span> member<span class=\"token punctuation\">,</span> <span class=\"token string\">','</span><span class=\"token punctuation\">,</span> member<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>如果需要更精确地控制枚举类型，可以从  <code>Enum</code>  派生出自定义类：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> enum <span class=\"token keyword\">import</span> Enum<span class=\"token punctuation\">,</span> unique</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token decorator annotation punctuation\">@unique</span>  <span class=\"token comment\"># 用于检查重复</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Weekday</span><span class=\"token punctuation\">(</span>Enum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Sun <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># 自定义值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Mon <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    Tue <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    Wed <span class=\"token operator\">=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Thu <span class=\"token operator\">=</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    Fri <span class=\"token operator\">=</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    Sat <span class=\"token operator\">=</span> <span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Weekday<span class=\"token punctuation\">.</span>Thu<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Weekday.Thu</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Weekday<span class=\"token punctuation\">.</span>Thu<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Thu</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Weekday<span class=\"token punctuation\">.</span>Thu<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 4</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Weekday<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Weekday.Wed # 也可以通过 value 来获取对应的枚举</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">for</span> name<span class=\"token punctuation\">,</span> member <span class=\"token keyword\">in</span> Weekday<span class=\"token punctuation\">.</span>__members__<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">'=>'</span><span class=\"token punctuation\">,</span> member<span class=\"token punctuation\">,</span> <span class=\"token string\">','</span><span class=\"token punctuation\">,</span> member<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"元类\"><a class=\"anchor\" href=\"#元类\">#</a> 元类</h4>\n<p>动态语言和静态语言最大的不同，就是函数和类的定义，不是编译时定义的，而是运行时动态创建的。</p>\n<p>通过  <code>type()</code>  函数可以查看一个类型或变量的类型，同时，  <code>type()</code>  函数既可以返回一个对象的类型，又可以创建出新的类型，而无需通过  <code>class Hello(object)...</code>  这样的方式定义。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello, %s!'</span> <span class=\"token operator\">%</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Hello <span class=\"token operator\">=</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>hello<span class=\"token operator\">=</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>h <span class=\"token operator\">=</span> Hello<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>h<span class=\"token punctuation\">.</span>hello<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># Hello, world!</span></pre></td></tr></table></figure><p>通过 type 函数创建类需要接收三个参数：</p>\n<ol>\n<li>class 类名。</li>\n<li>继承的父类集合。</li>\n<li>class 的方法名称与函数绑定。</li>\n</ol>\n<p>通过 type 函数创建的类和直接创建的类没有任何区别，因为通过 class 定义的类在解释器执行时，实际上也是通过调用 type 函数来进行定义的。正常情况下，我们通过 class 来创建类即可，但 type 函数允许我们动态地将类创建出来。也就是说，动态语言本身支持运行期动态创建类。</p>\n<p>除了使用 type 函数动态创建类以外，要控制类的创建行为，还可以使用  <code>metaclass</code>  （元类），元类可以对类进行创建和修改等操作。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 定义一个元类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListMetaclass</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__new__</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> bases<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        attrs<span class=\"token punctuation\">[</span><span class=\"token string\">'add'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">.</span>__new__<span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> bases<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 使用元类来创建类</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyList</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">,</span> metaclass<span class=\"token operator\">=</span>ListMetaclass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>l <span class=\"token operator\">=</span> MyList<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>l<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>l<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [1, 9]</span></pre></td></tr></table></figure><p>通过这种方式创建类，当程序执行到  <code>metaclass=Xxx</code>  时，就会调用对应元类的  <code>__new__()</code>  方法来创建类，在该函数中，通过  <code>type.__new__()</code>  方法创建类，并依次传入以下参数：</p>\n<ol>\n<li>当前准备创建的类的对象。</li>\n<li>类名。</li>\n<li>所继承的父类集合。</li>\n<li>类所有方法的集合。</li>\n</ol>\n<p>这种动态创建类的方式，一个较为常见的引用常见即是 ORM 框架。</p>\n<p><span class=\"label danger\">❗️TODO</span> 待完善</p>\n<h3 id=\"错误-调试和测试\"><a class=\"anchor\" href=\"#错误-调试和测试\">#</a> 错误、调试和测试</h3>\n<h4 id=\"错误处理\"><a class=\"anchor\" href=\"#错误处理\">#</a> 错误处理</h4>\n<p>在程序运行的过程中，如果发生了错误，可以事先约定返回一个错误代码，这样，就可以知道是否有错，以及出错的原因。但是，返回错误码的方式常常容易与业务数据混合在一起，造成调用者必须用大量的代码来判断是否出错，因此，Python 也提供了一套错误处理机制。</p>\n<p>异常捕获：</p>\n<p>当我们认为某些代码可能出现异常时，我们可以通过  <code>try</code>  语句块来运行这段代码，如果出错，则不会继续，而是直接跳转错误代码处理，即  <code>except</code>  语句块中，执行完异常处理之后，如果有  <code>finally</code>  语句块，则执行该语句块。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    a <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 不会执行</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">except</span> ValueError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ValueError:'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">except</span> ZeroDivisionError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 错误也可以同时有多个类型</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ZeroDivisionError:'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 指定未出现异常时的处理</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'No error!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'finally'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>Python 的错误其实也是 class，所有的错误类型都继承自  <code>BaseException</code>  ，所以在使用  <code>except</code>  时需要注意的是，它不但捕获该类型的错误，还把其子类也一并捕获，这时需要注意捕获的层级，先捕获层级较低的异常，后捕获层级较高的异常。</p>\n<p>Python 所有的错误都是从  <code>BaseException</code>  类派生的，常见的错误类型和继承关系可以通过<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9saWJyYXJ5L2V4Y2VwdGlvbnMuaHRtbCNleGNlcHRpb24taGllcmFyY2h5\">官方文档</span>进行查看。</p>\n<p>使用  <code>try...expect</code>  也可以跨越多层调用处理异常，而不需要在每一个调用层都重复进行异常处理：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">10</span> <span class=\"token operator\">/</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> foo<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        bar<span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error:'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'finally...'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>如果没有对错误进行处理，错误就会一直向上一级抛出，直到最后被 Python 解释器捕获并打印出错误信息，然后退出程序。</p>\n<p>Python 内置的  <code>logging</code>  模块可以非常容易地记录错误信息：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> logging</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">10</span> <span class=\"token operator\">/</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> foo<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        bar<span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        logging<span class=\"token punctuation\">.</span>exception<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'END'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这样就可以在抛出异常之后，程序仍旧可以按照预期的方式执行，而不会因为某一个异常而导致整个程序无法运行。并且，通过配置， <code>logging</code>  还可以把错误记录到日志文件里，方便事后排查。</p>\n<p>因为错误是 class，捕获一个错误就是捕获到该 class 的一个实例。因此，错误并不是凭空产生的，而是有意创建并抛出的。Python 的内置函数会抛出很多类型的错误，但是，我们也可以抛出一个自定义的错误类型。</p>\n<p>如果要抛出错误，首先根据需要，可以定义一个错误的 class，选择好继承关系，然后，用  <code>raise</code>  语句抛出一个错误的实例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">FooError</span><span class=\"token punctuation\">(</span>ValueError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    n <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> n<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">raise</span> FooError<span class=\"token punctuation\">(</span><span class=\"token string\">'Invalid value: %s'</span> <span class=\"token operator\">%</span> s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">10</span> <span class=\"token operator\">/</span> n</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>foo<span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在捕获异常时，我们也可以将异常捕获后继续抛出：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    n <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> n<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">'invalid value: %s'</span> <span class=\"token operator\">%</span> s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">10</span> <span class=\"token operator\">/</span> n</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        foo<span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">except</span> ValueError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ValueError!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">raise</span>  <span class=\"token comment\"># raise 语句如果不带任何参数，则会将错误原样抛出</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>此外，还可以在捕获异常之后，将异常进行转换并再次抛出，但是，这种异常转换操作，应当考虑到逻辑的合理性。</p>\n<h4 id=\"调试\"><a class=\"anchor\" href=\"#调试\">#</a> 调试</h4>\n<p>在编码或程序运行过程中，难免会出现很多错误，一个运行良好的程序，通常都需要经过一定的调试。在调试过程中，我们可以通过  <code>print()</code>  的方式将一些对象值输出到控制台查看，但这种方式并不推荐，因为对程序而言，  <code>print()</code>  语句本身并无任何作用。因此，在通常的调试过程中，我们可以使用断言来辅助进行调试，凡是可以通过 print 来辅助查看的地方，都可以使用 assert 进行断言。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    n <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">assert</span> n <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'n is zero!'</span>  <span class=\"token comment\"># AssertionError: n is zero!</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">10</span> <span class=\"token operator\">/</span> n</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    foo<span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>当断言语句判断为 False 时，就会抛出一个  <code>AssertionError</code>  错误。</p>\n<p>如果在 Python 交互环境中执行程序，可以指定是否开启断言调试，默认开启，也可以通过如下方式关闭：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ python -O err.py</pre></td></tr></table></figure><p>除了使用断言，我们也可以使用  <code>logging</code>  的方式来记录错误信息：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> logging</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>logging<span class=\"token punctuation\">.</span>basicConfig<span class=\"token punctuation\">(</span>level<span class=\"token operator\">=</span>logging<span class=\"token punctuation\">.</span>INFO<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 指定日志级别</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>s <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>n <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>logging<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">'n = %d'</span> <span class=\"token operator\">%</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">/</span> n<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>logging</code>  允许指定记录信息的级别，主要有  <code>debug</code> ， <code>info</code> ， <code>warning</code> ， <code>error</code>  等几个级别。</p>\n<p>Python 日志级别：</p>\n<table>\n<thead>\n<tr>\n<th>级别</th>\n<th>日志函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DEBUG</td>\n<td>logging.debug()</td>\n<td>最低级别，追踪问题时使用。</td>\n</tr>\n<tr>\n<td>INFO</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL2xvZ2dpbmcuaW5mbw==\">logging.info</span>()</td>\n<td>记录程序中一般事件的信息，或确认一切工作正常。</td>\n</tr>\n<tr>\n<td>WARNING</td>\n<td>logging.warning()</td>\n<td>记录信息，用于警告。</td>\n</tr>\n<tr>\n<td>ERROR</td>\n<td>logging.error()</td>\n<td>用于记录程序报错信息。</td>\n</tr>\n<tr>\n<td>CRITICAL</td>\n<td>logging.critical()</td>\n<td>最高级别，记录可能导致程序崩溃的错误。</td>\n</tr>\n</tbody>\n</table>\n<p>另外，还可以使用 Python 的  <code>pdb</code>  调试器，让程序以单步方式运行，可以随时查看运行状态。</p>\n<p><span class=\"label danger\">❗️TODO</span> 待完善</p>\n<p>但一些功能较为强大的 IDE 工具，一般都包含有十分便捷的调试工具，使用这些 IDE 提供的调试工具，通常是最方便的。</p>\n<h4 id=\"单元测试\"><a class=\"anchor\" href=\"#单元测试\">#</a> 单元测试</h4>\n<p>单元测试是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作。</p>\n<p>为了编写单元测试，我们需要引入 Python 自带的  <code>unittest</code>  模块，编写单元测试时使用的测试类，通常都是从  <code>unittest.TestCase</code>  继承而来，类中的方法以  <code>test</code>  开头，就标识为测试方法，反之，不以  <code>test</code>  开头的方法就不会被标识为测试方法，测试的时候也就不会被执行。</p>\n<p>对每一类测试都需要编写一个  <code>test_xxx()</code>  方法。由于  <code>unittest.TestCase</code>  提供了很多内置的条件判断，我们只需要调用这些方法就可以断言输出是否是我们所期望的。最常用的断言就是  <code>assertEqual()</code>  ：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 断言返回结果与预期结果是否相等</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">with</span> self<span class=\"token punctuation\">.</span>assertRaises<span class=\"token punctuation\">(</span>KeyError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 断言抛出预期类型的 Error</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    value <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span><span class=\"token string\">'empty'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">with</span> self<span class=\"token punctuation\">.</span>assertRaises<span class=\"token punctuation\">(</span>AttributeError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    value <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>empty</pre></td></tr></table></figure><p>要运行一个单元测试，只需要在当前  <code>.py</code>  文件末尾加上如下代码即可：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    unittest<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这样就可以将测试代码当做正常的 Python 脚本执行。</p>\n<p>但如果在 Python 交互环境中，我们也可以加入参数  <code>-m unittest</code>  来运行单元测试：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ python -m unittest main</pre></td></tr></table></figure><p>如果要对每个单元测试方法的调用时机进行监控，可以使用  <code>setUp()</code>  和  <code>tearDown()</code>  这两个特殊的方法来实现。这两个方法会分别在每一个测试方法调用前后执行。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test start...'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test end...'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"文档测试\"><a class=\"anchor\" href=\"#文档测试\">#</a> 文档测试</h4>\n<p>Python 内置的文档测试（doctest）模块可以直接提取注释中的代码并执行测试。</p>\n<p><span class=\"label danger\">❗️TODO</span> 待完善</p>\n<h3 id=\"io编程\"><a class=\"anchor\" href=\"#io编程\">#</a> IO 编程</h3>\n<p>IO 在计算机中通常是指 Input/Output，也就是输入和输出。</p>\n<p>在 IO 编程中，Stream（流）是一个很重要的概念。</p>\n<p>操作 IO 的能力都是由操作系统提供的，每一种编程语言都会把操作系统提供的低级 C 接口封装起来方便使用，Python 也不例外。</p>\n<blockquote>\n<p>一般来说，异步 IO 的复杂度远远高于同步 IO。</p>\n</blockquote>\n<h4 id=\"文件的读写\"><a class=\"anchor\" href=\"#文件的读写\">#</a> 文件的读写</h4>\n<p>读写文件是最常见的 IO 操作。Python 内置了读写文件的函数，用法和 C 是兼容的。</p>\n<p>在磁盘上读写文件的功能其实都是由操作系统提供的，现代操作系统不允许普通的程序直接操作磁盘，所以，读写文件就是请求操作系统打开一个文件对象（通常称为文件描述符），然后，通过操作系统提供的接口从这个文件对象中读取数据（读文件），或者把数据写入这个文件对象（写文件）。</p>\n<p>要以读文件的模式打开一个文件对象，需要使用 Python 内置的  <code>open()</code>  函数，并传入文件名和标示符：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>f <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'C:\\\\Users\\\\Administrator\\\\Desktop\\\\test.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">except</span> FileNotFoundError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    f<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>其中，参数  <code>r</code>  表示这是一个读操作，如果文件不存在，就会抛出一个  <code>IOError</code>  错误，并告知文件不存在；调用  <code>read()</code>  方法可以读取文件中的内容，并返回字符串；而当文件读取完毕后，需要调用  <code>close()</code>  方法关闭文件。</p>\n<blockquote>\n<p>文件使用完后必须关闭，因为文件对象会占用操作系统的资源，并且操作系统同一时间可打开的文件数量是有限的，  <code>close()</code>  方法应当放在 finally 语句块中，保证其一定会执行。</p>\n</blockquote>\n<p>我们可以在 finally 语句块中关闭文件，但有时候会显得比较麻烦，Python 为此也引入了一个  <code>with</code>  语句来帮助自动调用关闭文件的方法。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'C:\\\\Users\\\\Administrator\\\\Desktop\\\\test.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    buf <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>由于 read 方法默认会读取文件的全部内容，但如果文件本身较大，则应当通过  <code>read(size)</code>  来限定读取文件的大小，如果需要逐行读取，可以使用  <code>readlines()</code>  方法，这个方法的返回值时一个字符串数组。</p>\n<p>如果需要读取一个二进制文件，比如图片、视频等，打开文件时就需要指定参数为  <code>rb</code>  。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 打开图片文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'C:\\\\Users\\\\Administrator\\\\Desktop\\\\img\\\\avatar.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    buf <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出十六进制的字节</span></pre></td></tr></table></figure><p>如果读取时候的编码不对，就很有可能会导致乱码，因此，在打开文件时也可以指定读取文件所使用的编码。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'C:\\\\Users\\\\Administrator\\\\Desktop\\\\test.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">,</span> errors<span class=\"token operator\">=</span><span class=\"token string\">'ignore'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    buf <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>同时，当读取文件中出现非法编码内容，可以通过指定  <code>errors</code>  参数进行处理。</p>\n<p>写文件与读文件基本一样，只是在打开文件时指定参数为  <code>w</code>  或  <code>wb</code>  即可：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'C:\\\\Users\\\\Administrator\\\\Desktop\\\\test.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'gbk'</span><span class=\"token punctuation\">,</span> errors<span class=\"token operator\">=</span><span class=\"token string\">'ignore'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'How are you?'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>可以反复调用  <code>write()</code>  来写入文件，但是写入完毕后务必要关闭文件。当我们写文件时，操作系统往往不会立刻把数据写入磁盘，而是放到内存缓存起来，空闲的时候再慢慢写入。只有调用关闭方法时，操作系统才保证把没有写入的数据全部写入磁盘。忘记调用关闭方法的后果是数据可能只写了一部分到磁盘，剩下的丢失了。所以，在读写文件时最后都使用  <code>with</code>  语句。</p>\n</blockquote>\n<p>使用  <code>a</code>  参数，可以设置为追加模式，在原文件内容的基础上，追加新的内容。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'C:\\\\Users\\\\Administrator\\\\Desktop\\\\test.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'gbk'</span><span class=\"token punctuation\">,</span> errors<span class=\"token operator\">=</span><span class=\"token string\">'ignore'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'\\rI\\'m fine, thank you!'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"stringio-与-bytesio\"><a class=\"anchor\" href=\"#stringio-与-bytesio\">#</a> StringIO 与 BytesIO</h4>\n<p>很多会后数据读写并不一定是操作文件，也有可能是在内存中进行读写， <code>StringIO</code>  就是用来读写内存中的字符串。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> io <span class=\"token keyword\">import</span> StringIO</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>f1 <span class=\"token operator\">=</span> StringIO<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>f1<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>f1<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>f1<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'Mike!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">.</span>getvalue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Hello Mike! # 获取写入后的字符串内容</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>f2 <span class=\"token operator\">=</span> StringIO<span class=\"token punctuation\">(</span><span class=\"token string\">'Hello Jack!\\nHow are you?\\nI\\'m fine, thanks!'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 也可以使用字符串初始化 StringIO</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    s <span class=\"token operator\">=</span> f2<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> s <span class=\"token operator\">==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>同理，我们也可以使用  <code>BytesIO</code>  来操作内存中的字节数组。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> io <span class=\"token keyword\">import</span> BytesIO</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>f1 <span class=\"token operator\">=</span> BytesIO<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>f1<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'中文'</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 写入 bytes</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">.</span>getvalue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>f2 <span class=\"token operator\">=</span> BytesIO<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f2<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"操作文件和目录\"><a class=\"anchor\" href=\"#操作文件和目录\">#</a> 操作文件和目录</h4>\n<p>使用 Python 提供的  <code>os</code>  模块，可以操作系统的文件和目录。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># nt 则表示 windows，posix 则表示 Linux，Unix 或 Mac Os X</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>uname<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 获取更加详细的操作系统信息（不支持 windows）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 查看操作系统中定义的环境变量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'JAVA_HOME'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Invalid key!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 获取某个具体的环境变量</span></pre></td></tr></table></figure><p>操作文件和目录的函数一部分放在  <code>os</code>  模块中，一部分放在  <code>os.path</code>  模块中。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>abspath<span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 查看当前文件的绝对路径</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string\">'A:\\\\python'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'workspace'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 目录路径</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A:\\python\\workspace</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ('A:\\\\', 'python')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'/usr/chinmoku/test/file.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ('/usr/chinmoku/test', 'file.txt')</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>splitext<span class=\"token punctuation\">(</span><span class=\"token string\">'/usr/chinmoku/test/file.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ('/usr/chinmoku/test/file', '.txt') # 可以直接得到文件的扩展名</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>os<span class=\"token punctuation\">.</span>mkdir<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 在指定位置创建目录</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>os<span class=\"token punctuation\">.</span>rmdir<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 删除指定位置的目录</span></pre></td></tr></table></figure><blockquote>\n<p>把两个路径合成一个时，不要直接拼字符串，而要通过  <code>os.path.join()</code>  函数，这样可以正确处理不同操作系统的路径分隔符。同理，拆分路径时，也应当通过  <code>os.path.split()</code>  函数进行拆分。</p>\n</blockquote>\n<p>另外还有一些其他常用的文件操作：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>os<span class=\"token punctuation\">.</span>rename<span class=\"token punctuation\">(</span><span class=\"token string\">'test.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'test.py'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 文件重命名</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>os<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">'test.py'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 删除文件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isdir<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 过滤文件，列出当前目录下的所有目录</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isfile<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>splitext<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'.py'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 列出当前目录下的所有 .py 文件</span></pre></td></tr></table></figure><h4 id=\"序列化\"><a class=\"anchor\" href=\"#序列化\">#</a> 序列化</h4>\n<p>在程序运行的过程中，所有的变量都是在内存中，可以随时修改，但是一旦程序结束，变量所占用的内存就被操作系统全部回收。如果在此期间没有将修改后的值存储到磁盘上，下次重新运行程序，变量又会被重新初始化。我们把变量从内存中变成可存储或传输的过程称之为序列化，在 Python 中叫  <code>pickling</code>  ，在其他语言中也被称之为 serialization，marshalling，flattening 等等。</p>\n<p>序列化之后，就可以把序列化后的内容写入磁盘，或者通过网络传输到别的机器上。反过来，把变量内容从序列化的对象重新读到内存里称之为反序列化，即  <code>unpickling</code>  。Python 提供了  <code>pickle</code>  模块来实现序列化。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> pickle</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>d <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> score<span class=\"token operator\">=</span><span class=\"token number\">88</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>buf <span class=\"token operator\">=</span> pickle<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 将任意对象转换为 bytes</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'C:\\\\Users\\\\Administrator\\\\Desktop\\\\test.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\"># f.write (buf) # 向文件写入 bytes</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    pickle<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 序列化并写入文件</span></pre></td></tr></table></figure><p>读取被序列化的文件：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> pickle</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'C:\\\\Users\\\\Administrator\\\\Desktop\\\\test.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    res <span class=\"token operator\">=</span> pickle<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &#123;'name': 'Bob', 'age': 20, 'score': 88&#125;</span></pre></td></tr></table></figure><p>Python 也提供了对 JSON 数据格式的支持，我们可以很容易地将一个 Python 对象转换为 JSON 对象。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> json</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>d <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> score<span class=\"token operator\">=</span><span class=\"token number\">88</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>s <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 将 Python 类型序列化为 JSON 字符串</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &#123;\"name\": \"Bob\", \"age\": 20, \"score\": 88&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr></table></figure><p>同样，我们也可以将 JSON 字符串反序列化为 Python 对象。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> json</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>obj <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;\"name\": \"Bob\", \"age\": 20, \"score\": 88&#125;'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr></table></figure><p>但对于一个 Python 类进行序列化操作则有所不同：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> json</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        self<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> score</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">student2dict</span><span class=\"token punctuation\">(</span>std<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> std<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> std<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token string\">'score'</span><span class=\"token punctuation\">:</span> std<span class=\"token punctuation\">.</span>score</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>s <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">88</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># print(json.dumps(s))  # TypeError: Object of type Student is not JSON serializable</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span>student2dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &#123;\"name\": \"Bob\", \"age\": 20, \"score\": 88&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 方法二：通常类的实例都有一个 __dict__ 属性，可以将实例转换为 dict，用来存储实例变量</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> obj<span class=\"token punctuation\">:</span> obj<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &#123;\"name\": \"Bob\", \"age\": 20, \"score\": 88&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>并不是所有类的实例都有  <code>__dict__</code>  属性，也有少数例外，例如定义了  <code>__slots__</code>  的类。</p>\n</blockquote>\n<p>将 JSON 字符串反序列化为 Python 类：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> json</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        self<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> score</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">dict2student</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> Student<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">[</span><span class=\"token string\">'score'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>json_str <span class=\"token operator\">=</span> <span class=\"token string\">'&#123;\"name\": \"Bob\", \"age\": 20, \"score\": 88&#125;'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>stu <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>json_str<span class=\"token punctuation\">,</span> object_hook<span class=\"token operator\">=</span>dict2student<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">,</span> Student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr></table></figure><h3 id=\"进程和线程\"><a class=\"anchor\" href=\"#进程和线程\">#</a> 进程和线程</h3>\n<h4 id=\"多进程\"><a class=\"anchor\" href=\"#多进程\">#</a> 多进程</h4>\n<p>Unix/Linux 操作系统提供了一个  <code>fork()</code>  系统调用，它非常特殊。普通的函数调用，调用一次，返回一次，但是  <code>fork()</code>  调用一次，返回两次，因为操作系统自动把当前进程（称为父进程）复制了一份（称为子进程），然后，分别在父进程和子进程内返回。</p>\n<p>子进程永远返回 0，而父进程返回子进程的 ID。这样做的理由是，一个父进程可以 fork 出很多子进程，所以，父进程要记下每个子进程的 ID，而子进程只需要调用  <code>getppid()</code>  就可以拿到父进程的 ID。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Process (%s) start...'</span> <span class=\"token operator\">%</span> os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>pid <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>fork<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Only works on Unix/Linux/Mac</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span> pid <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I am child process (%s) and my parent is %s.'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>getppid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I (%s) just created a child process (%s).'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># Process (876) start...</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># I (876) just created a child process (877).</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># I am child process (877) and my parent is 876.</span></pre></td></tr></table></figure><p>Python 在 Windows 环境中是无法调用 fork 函数的，但是这并不意味着 Python 无法在 Windows 环境下编写多进程服务，因为它提供了一个跨平台版本的多进程模块  <code>multiprocessing</code>  ，这个模块提供了一个  <code>Process</code>  类来代表一个进程对象。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Process</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 子进程要执行的代码</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">run_proc</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Run child process %s (%s)...'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Parent process %s.'</span> <span class=\"token operator\">%</span> os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    p <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>run_proc<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Child process will start.'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    p<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    p<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># join () 方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步。</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Child process end.'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># Parent process 11284.</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># Child process will start.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># Run child process test (6740)...</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># Child process end.</span></pre></td></tr></table></figure><p>创建子进程时，只需要传入一个执行函数和函数的参数，并创建一个  <code>Process</code>  实例，用  <code>start()</code>  方法启动即可。</p>\n<p>但如果要启动大量的子进程，可以用进程池的方式批量创建子进程：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Pool</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> os<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">,</span> random</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">long_time_task</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Run task-%s (%s)...'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Task-%s runs %0.2f seconds.'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Parent process %s.'</span> <span class=\"token operator\">%</span> os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    p <span class=\"token operator\">=</span> Pool<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建进程池并指定大小</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        p<span class=\"token punctuation\">.</span>apply_async<span class=\"token punctuation\">(</span>long_time_task<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Waiting for all subprocesses done...'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 调用 join () 之前必须先调用 close ()，调用 close () 之后就不能继续添加新的 Process 了。</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    p<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'All subprocesses done.'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>Pool</code>  默认大小是 CPU 的核数，但也可以传入参数指定进程数，如果实际运行的进程数超出进程池大小，超出的进程将等待进程池有空闲后才会执行。</p>\n<p>很多时候，子进程并不是自身，而是一个外部进程。我们创建了子进程后，还需要控制子进程的输入和输出。 <code>subprocess</code>  模块可以让我们非常方便地启动一个子进程，然后控制其输入和输出。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> subprocess</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$ nslookup www.python.org'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>r <span class=\"token operator\">=</span> subprocess<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'nslookup'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'www.baidu.com'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Exit code:'</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Exit code: 0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># $ nslookup www.python.org</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># Server:\t\t192.168.1.1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># Address:\t192.168.1.1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># canonical name = dualstack.python.map.fastly.net</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># Name:\tpython.map.fastly.net</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># Addresses:  2a04:4e42:1a::223</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># \t  151.101.228.223</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># Aliases:  www.python.org</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># Exit code: 0</span></pre></td></tr></table></figure><p>如果子进程需要输入，可以使用  <code>communicate()</code>  方法实现：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> subprocess</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$ nslookup'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p <span class=\"token operator\">=</span> subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'nslookup'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stdin<span class=\"token operator\">=</span>subprocess<span class=\"token punctuation\">.</span>PIPE<span class=\"token punctuation\">,</span> stdout<span class=\"token operator\">=</span>subprocess<span class=\"token punctuation\">.</span>PIPE<span class=\"token punctuation\">,</span> stderr<span class=\"token operator\">=</span>subprocess<span class=\"token punctuation\">.</span>PIPE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>output<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>communicate<span class=\"token punctuation\">(</span><span class=\"token string\">b'set q=mx\\npython.org\\nexit\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'gbk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Exit code:'</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>returncode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># $ nslookup</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 默认服务器:  192.168.1.1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># Address:  192.168.1.1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># > > 服务器:  192.168.1.1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># Address:  192.168.1.1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># python.org   MX preference = 50, mail exchanger = mail.python.org</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># > </span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># Exit code: 0</span></pre></td></tr></table></figure><p>这里的代码相当于进行了如下操作：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/09/0644eb76cf69cdc495cdc81798bc4acd1631117532.png\" alt=\"Python子进程输入操作\" /></p>\n<p>通过上面的操作，我们已经能够自如地创建进程，但进程之间是需要进行通信的，操作系统提供了很多机制来实现进程间的通信。Python 的  <code>multiprocessing</code>  模块包装了底层的机制，提供了  <code>Queue</code> 、 <code>Pipes</code>  等多种方式来交换数据。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Process<span class=\"token punctuation\">,</span> Queue</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> os<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">,</span> random</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 写数据进程执行的代码:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Process to write: %s'</span> <span class=\"token operator\">%</span> os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Put %s to queue...'</span> <span class=\"token operator\">%</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 读数据进程执行的代码:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Process to read: %s'</span> <span class=\"token operator\">%</span> os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        value <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Get %s from queue.'</span> <span class=\"token operator\">%</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\"># 父进程创建 Queue，并传给各个子进程：</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    q <span class=\"token operator\">=</span> Queue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    pw <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>write<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    pr <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>read<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\"># 启动子进程 pw，写入:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    pw<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\"># 启动子进程 pr，读取:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    pr<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\"># 等待 pw 结束:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    pw<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\"># pr 进程里是死循环，无法等待其结束，只能强行终止:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    pr<span class=\"token punctuation\">.</span>terminate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\"># Process to write: 15180</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\"># Put A to queue...</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\"># Process to read: 18192</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\"># Get A from queue.</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\"># Put B to queue...</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\"># Get B from queue.</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\"># Put C to queue...</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># Get C from queue.</span></pre></td></tr></table></figure><blockquote>\n<p>在 Unix/Linux 下， <code>multiprocessing</code>  模块封装了  <code>fork()</code>  调用，使我们不需要关注  <code>fork()</code>  的细节。由于 Windows 不支持  <code>fork</code>  调用，因此， <code>multiprocessing</code>  需要 “模拟” 出  <code>fork</code>  的效果，父进程所有 Python 对象都必须通过 pickle 序列化再传到子进程去，所以，如果  <code>multiprocessing</code>  在 Windows 下调用失败了，要先考虑是不是 pickle 失败了。</p>\n</blockquote>\n<h4 id=\"多线程\"><a class=\"anchor\" href=\"#多线程\">#</a> 多线程</h4>\n<p>Python 的线程是真正的  <code>Posix Thread</code> ，而不是模拟出来的线程。</p>\n<p>Python 的标准库提供了两个模块： <code>_thread</code>  和  <code>threading</code> ，前者是低级模块，后者是高级模块，对前者进行了封装。</p>\n<p>在 Python 中，启动一个线程就是把一个函数传入并创建 Thread 实例，然后调用  <code>start()</code>  开始执行：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> time<span class=\"token punctuation\">,</span> threading</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 新线程执行的代码:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">loop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'thread %s is running...'</span> <span class=\"token operator\">%</span> threading<span class=\"token punctuation\">.</span>current_thread<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    n <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">while</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        n <span class=\"token operator\">=</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'thread %s >>> %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>threading<span class=\"token punctuation\">.</span>current_thread<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'thread %s ended.'</span> <span class=\"token operator\">%</span> threading<span class=\"token punctuation\">.</span>current_thread<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'thread %s is running...[main]'</span> <span class=\"token operator\">%</span> threading<span class=\"token punctuation\">.</span>current_thread<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>t <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>loop<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'LoopThread'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>t<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>t<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'thread %s ended.'</span> <span class=\"token operator\">%</span> threading<span class=\"token punctuation\">.</span>current_thread<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>所有进程都会默认启动一个线程，我们称之为主线程，主线程又可以启动新的线程，Python  <code>threading</code>  下的  <code>current_thread()</code>  函数会返回当前线程的实例。主线程实例名称默认为  <code>MainThread</code> ，子线程的名字可以在创建时指定。线程名称仅仅用于显示，没有实际意义，如果不指定子线程名称，Python 就自动给线程命名为  <code>Thread-1</code> ， <code>Thread-2</code>  ……</p>\n<p>多线程和多进程最大的不同在于，多进程中，同一个变量，各自有一份拷贝存在于每个进程中，互不影响，而多线程中，所有变量都由所有线程共享，所以，任何一个变量都可以被任何一个线程修改，因此，线程之间共享数据最大的危险在于多个线程同时改一个变量。</p>\n<p>在多线程环境中，线程之间的执行顺序并没有一定的规律，在不同的应用场景中，由于执行顺序的不同，极有可能产生与预期不符的执行结果。如果要确保执行结果的正确性，往往需要对共享操作进行加锁，这样就可以避免多个线程之间的修改冲突。在 Python 中，可以通过  <code>threading.Lock()</code>  来创建锁：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>balance <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>lock <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Lock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">change_it</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">global</span> balance</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    balance <span class=\"token operator\">=</span> balance <span class=\"token operator\">+</span> n</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    balance <span class=\"token operator\">=</span> balance <span class=\"token operator\">-</span> n</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">run_thread</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\"># 获取锁</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        lock<span class=\"token punctuation\">.</span>acquire<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            change_it<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\"># 释放锁</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            lock<span class=\"token punctuation\">.</span>release<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    t1 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>run_thread<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    t2 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>run_thread<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    t1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    t2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    t1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    t2<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>balance<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>多个线程会对同一把锁产生竞争，竞争成功的线程则允许执行被锁定的操作，未竞争成功的线程则等待获得锁的线程释放锁。</p>\n<blockquote>\n<p>关于锁的内容其实相当丰富，这里仅仅做最简要的说明。</p>\n</blockquote>\n<p>在 Python 中可以使用多线程，但其实并不能有效理由计算机的多核。如果一定要通过多线程利用多核，那只能通过 C 扩展来实现。</p>\n<p>不过，Python 虽然不能利用多线程实现多核任务，但可以通过多进程实现多核任务。多个进程有各自独立的  <code>GIL</code>  锁，互不影响。</p>\n<h4 id=\"threadlocal\"><a class=\"anchor\" href=\"#threadlocal\">#</a> ThreadLocal</h4>\n<p>在多线程环境下，相较于使用全局变量，一个线程使用自己的局部变量更加安全，因为局部变量只有自己可见，不会影响其他线程，而对全局变量的修改必须加锁进行。在多线程环境下，应当尽量减少使用全局变量。</p>\n<p>但是，局部变量的使用也存在一些问题，例如函数在多层调用时，传递参数会相当麻烦，为了解决这一问题，Python 引入了  <code>ThreadLocal</code>  对象。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 创建全局 ThreadLocal 对象:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>local_school <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 不同线程存储在 ThreadLocal 对象中的属性互不影响</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">process_student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\"># 获取当前线程关联的 student:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    std <span class=\"token operator\">=</span> local_school<span class=\"token punctuation\">.</span>student</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello, %s (in %s)'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>std<span class=\"token punctuation\">,</span> threading<span class=\"token punctuation\">.</span>current_thread<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">process_thread</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\"># 绑定 ThreadLocal 的 student:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    local_school<span class=\"token punctuation\">.</span>student <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    process_student<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    t1 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>process_thread<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'Thread-A'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    t2 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>process_thread<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'Thread-B'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    t1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    t2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    t1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    t2<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># Hello, Alice (in Thread-A)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># Hello, Bob (in Thread-B)</span></pre></td></tr></table></figure><blockquote>\n<p>可以将 ThreadLocal 类型的全局变量理解为一个 dict ，其内存根据不同线程，分别存放了不同线程下的对象信息，当再次从中获取值时，会自动判断当前是哪一个线程，并取出对应线程下的值。</p>\n</blockquote>\n<p><code>ThreadLocal</code>  最常用的地方就是为每个线程绑定一个数据库连接，HTTP 请求，用户身份信息等，这样一个线程的所有调用到的处理函数都可以非常方便地访问这些资源。</p>\n<p>一个  <code>ThreadLocal</code>  变量虽然是全局变量，但每个线程都只能读写自己线程的独立副本，互不干扰。</p>\n<h4 id=\"进程与线程对比\"><a class=\"anchor\" href=\"#进程与线程对比\">#</a> 进程与线程对比</h4>\n<p><span class=\"label danger\">❗️TODO</span> 此部分概念与其他语言没有任何区别，暂时略去。</p>\n<h4 id=\"分布式线程\"><a class=\"anchor\" href=\"#分布式线程\">#</a> 分布式线程</h4>\n<p>Python 的  <code>multiprocessing</code>  模块不但支持多进程，其中  <code>managers</code>  子模块还支持把多进程分布到多台机器上。一个服务进程可以作为调度者，依靠网络通信，可以将任务分布到其他多个进程中。由于  <code>managers</code>  模块封装很好，因此完全不必了解网络通信的细节，就可以很容易地编写分布式多进程程序。</p>\n<p>在多进程章节中，我们已经能够让多个进程通过  <code>Queue</code>  在同一台主机上进行通讯。而如果需要在多个主机上实现进程之间的通讯，则需要  <code>managers</code>  模块将 Queue 通过网络暴露出去，其他主机的进程就可以访问这个 Queue 了。</p>\n<p>创建并启动服务进程：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/env python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># -*- coding: utf-8 -*-</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> random<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">,</span> queue</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing<span class=\"token punctuation\">.</span>managers <span class=\"token keyword\">import</span> BaseManager</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 发送任务队列</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>task_queue <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>Queue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 接收结果队列</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>result_queue <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>Queue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 继承 BaseManager</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">QueueManager</span><span class=\"token punctuation\">(</span>BaseManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">return_task_queue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\"># global 用于函数内部，修改全局变量的值</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">global</span> task_queue</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> task_queue</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">return_result_queue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">global</span> result_queue</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> result_queue</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\"># 将两个 Queue 注册到网络上，callable 参数关联 Queue 对象</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\"># ！win10 中 callale 不对 lambda 匿名函数做处理</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    QueueManager<span class=\"token punctuation\">.</span>register<span class=\"token punctuation\">(</span><span class=\"token string\">'get_task_queue'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">callable</span><span class=\"token operator\">=</span>return_task_queue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    QueueManager<span class=\"token punctuation\">.</span>register<span class=\"token punctuation\">(</span><span class=\"token string\">'get_result_queue'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">callable</span><span class=\"token operator\">=</span>return_result_queue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\"># 绑定端口 5000，这 5000 怎么来的？两个文件中的端口一样就行！，设置验证码 abc</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\"># 通过 QueueManager 将 Queue 暴露出去</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    manager <span class=\"token operator\">=</span> QueueManager<span class=\"token punctuation\">(</span>address<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> authkey<span class=\"token operator\">=</span><span class=\"token string\">b'abc'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># authkey，保证通讯不被其他程序恶意干扰</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    manager<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    task <span class=\"token operator\">=</span> manager<span class=\"token punctuation\">.</span>get_task_queue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    result <span class=\"token operator\">=</span> manager<span class=\"token punctuation\">.</span>get_result_queue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\"># 放 10 个任务进去</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        n <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Put task %d...'</span> <span class=\"token operator\">%</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\"># 将数据放到任务队列</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        task<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\"># 取任务执行结果</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Try get results...'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\"># 从结果队列中取结果</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\"># 等待 10 是因为计算需要时间</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        r <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>timeout<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Result: %s'</span> <span class=\"token operator\">%</span> r<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\"># 关闭</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    manager<span class=\"token punctuation\">.</span>shutdown<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'master exit.'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>创建并启动工作进程：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/env python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># -*- coding: utf-8 -*-</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> time<span class=\"token punctuation\">,</span> sys<span class=\"token punctuation\">,</span> queue</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing<span class=\"token punctuation\">.</span>managers <span class=\"token keyword\">import</span> BaseManager</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">QueueManager</span><span class=\"token punctuation\">(</span>BaseManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    QueueManager<span class=\"token punctuation\">.</span>register<span class=\"token punctuation\">(</span><span class=\"token string\">'get_task_queue'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    QueueManager<span class=\"token punctuation\">.</span>register<span class=\"token punctuation\">(</span><span class=\"token string\">'get_result_queue'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    server_addr <span class=\"token operator\">=</span> <span class=\"token string\">'127.0.0.1'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Connect to server %s...'</span> <span class=\"token operator\">%</span> server_addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\"># 端口设置和 task_master.py 中一样</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    m <span class=\"token operator\">=</span> QueueManager<span class=\"token punctuation\">(</span>address<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>server_addr<span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> authkey<span class=\"token operator\">=</span><span class=\"token string\">b'abc'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\"># 连接网络</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    m<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    task <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span>get_task_queue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 如果不在同一台主机，必须通过 manager.get... 方式获得 Queue 接口</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    result <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span>get_result_queue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\"># 接收任务队列中的数据</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            n <span class=\"token operator\">=</span> task<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>timeout<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Run task %d*%d'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            r <span class=\"token operator\">=</span> <span class=\"token string\">'%d*%d=%d'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> n <span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\"># 放进结果队列</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            result<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">except</span> queue<span class=\"token punctuation\">.</span>Queue<span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'task queue is empty'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'work done'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>依次启动服务进程和工作进程，得到如下结果：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/09/4a6ff34f81b982ebe1c8a97074be21011631199550.png\" alt=\"image-20210909210504132\" /></p>\n<p>以上就是一个简单的 Master/Worker 模型。</p>\n<blockquote>\n<p>Queue 其实是存储在服务进程中的，并使用  <code>QueueManager</code>  来进行管理，工作进程通过注册的队列名称查找匹配到指定的队列，并从队列中获得传输的值。</p>\n<p>同时也需要注意，Queue 的作用是用来传递任务和接收结果，每个任务的描述数据量应当要尽量小。</p>\n</blockquote>\n<h3 id=\"正则表达式\"><a class=\"anchor\" href=\"#正则表达式\">#</a> 正则表达式</h3>\n<p>Python 提供  <code>re</code>  模块，包含所有正则表达式的功能，但需要注意正则表达式在 Python 中的转义，推荐使用  <code>r</code>  前缀以便忽略转义。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>res1 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span><span class=\"token string\">r'^\\d&#123;3&#125;\\-\\d&#123;3,8&#125;$'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'010-12345'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res1<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;re.Match object; span=(0, 9), match='010-12345'></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>res2 <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span><span class=\"token string\">r'^\\d&#123;3&#125;\\-\\d&#123;3,8&#125;$'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'010 12345'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res2<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># None</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a b   c'</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['a', 'b', '', '', 'c'] # 无法识别连续的空格</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">r'\\s+'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a b   c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['a', 'b', 'c']</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>phone <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入手机号：'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">if</span> re<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span><span class=\"token string\">r'^(13[0-9]|14[5|7]|15[0|1|2|3|4|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d&#123;8&#125;$'</span><span class=\"token punctuation\">,</span> phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'手机号验证通过！'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'手机号格式错误！'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>正则表达式能够帮助我们有效地对字符串进行格式验证，但对于使用场景的不同，有时候正则也并非是绝对的。</p>\n</blockquote>\n<p>在 Python 中使用正则表达式时，解释器会进行如下操作：</p>\n<ol>\n<li>编译正则表达式，如果正则表达式的字符串本身不合法，则会报错。</li>\n<li>用编译后的正则表达式去匹配字符串。</li>\n</ol>\n<h3 id=\"常用内建模块\"><a class=\"anchor\" href=\"#常用内建模块\">#</a> 常用内建模块</h3>\n<h4 id=\"datetime\"><a class=\"anchor\" href=\"#datetime\">#</a> datetime</h4>\n<p>datetime 是 Python 处理日期和时间的标准库。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime<span class=\"token punctuation\">,</span> timedelta</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>now <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2021-09-09 22:23:34.810674</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;class 'datetime.datetime'></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>dt <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">(</span><span class=\"token number\">2021</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 用指定日期时间创建 datetime</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2021-09-09 22:30:00</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">.</span>timestamp<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 1631197800.0 # 日期转时间戳，单位：秒</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>t <span class=\"token operator\">=</span> <span class=\"token number\">1631197800.0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">.</span>fromtimestamp<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2021-09-09 22:30:00 # 时间戳转时间</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">.</span>utcfromtimestamp<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2021-09-09 14:30:00 # UTC 时间</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 时间格式转换</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>cday <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>strptime<span class=\"token punctuation\">(</span><span class=\"token string\">'2021-9-7 18:19:59'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'%Y-%m-%d %H:%M:%S'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 字符串转时间</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>cday<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2021-09-07 18:19:59</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%a, %b %d %H:%M'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Thu, Sep 09 22:47 # 时间转字符串</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 日期加减</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2021-09-09 22:50:17.151719</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>now <span class=\"token operator\">+</span> timedelta<span class=\"token punctuation\">(</span>hours<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2021-09-10 08:50:17.151719</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> timedelta<span class=\"token punctuation\">(</span>days<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2021-09-08 22:50:17.151719</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>now <span class=\"token operator\">+</span> timedelta<span class=\"token punctuation\">(</span>days<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> hours<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2021-09-12 10:50:17.151719</span></pre></td></tr></table></figure><h4 id=\"collections\"><a class=\"anchor\" href=\"#collections\">#</a> collections</h4>\n<p>collections 是 Python 内建的一个集合模块，提供了许多有用的集合类。</p>\n<ol>\n<li>\n<p>namedtuple</p>\n<p>Python 提供了一个  <code>namedtuple</code>  函数，可以用来创建自定义的  <code>tuple</code>  对象，并且规定了 tuple 元素的个数，并可以用属性而不是索引来引用 tuple 的某个元素。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> namedtuple</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Point <span class=\"token operator\">=</span> namedtuple<span class=\"token punctuation\">(</span><span class=\"token string\">'Point'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p <span class=\"token operator\">=</span> Point<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">125</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 125</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> Point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Circle <span class=\"token operator\">=</span> namedtuple<span class=\"token punctuation\">(</span><span class=\"token string\">'Circle'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>c <span class=\"token operator\">=</span> Circle<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 5</span></pre></td></tr></table></figure><p>使用 namedtuple 可以很方便地表示一些坐标、点或某些数据集。</p>\n</li>\n<li>\n<p>deque</p>\n<p>由于 list 是线性存储，所以它在按索引查找时很快，但删除和修改时很慢，  <code>deque</code>  则是为了高效实现插入和删除操作的双向列表，适合用于队列和栈。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>q <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>q<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># deque(['a', 'b', 'c', 'x'])</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>q<span class=\"token punctuation\">.</span>appendleft<span class=\"token punctuation\">(</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># deque(['y', 'a', 'b', 'c', 'x'])</span></pre></td></tr></table></figure><blockquote>\n<p>deque 除了实现 list 的  <code>append()</code>  和  <code>pop()</code>  外，还支持  <code>appendleft()</code>  和  <code>popleft()</code> ，这样就可以非常高效地往头部添加或删除元素。</p>\n</blockquote>\n</li>\n<li>\n<p>defaultdict</p>\n<p>使用 dict 时，如果引用的 Key 不存在，就会抛出  <code>KeyError</code> 。如果希望 key 不存在时，返回一个默认值，就可以用  <code>defaultdict</code> ：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> defaultdict</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>dd <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'N/A'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dd<span class=\"token punctuation\">[</span><span class=\"token string\">'key1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dd<span class=\"token punctuation\">[</span><span class=\"token string\">'key1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># abc</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dd<span class=\"token punctuation\">[</span><span class=\"token string\">'key2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># N/A</span></pre></td></tr></table></figure><p>除了返回默认值之外，defaultdict 和 dict 没有其他任何区别。</p>\n</li>\n<li>\n<p>OrderedDict</p>\n<p>使用 dict 时，Key 是无序的，如果要保持 Key 的顺序，可以用  <code>OrderedDict</code> ：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> OrderedDict</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>od <span class=\"token operator\">=</span> OrderedDict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>od<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># OrderedDict ([('a', 2), ('b', 3), ('c', 1)]) # 有序</span></pre></td></tr></table></figure><p>注意： <code>OrderedDict</code>  的 Key 会按照插入的顺序排列，不是 Key 本身的排序。</p>\n</li>\n<li>\n<p>ChainMap</p>\n<p><code>ChainMap</code>  可以把一组 dict 串起来并组成一个逻辑上的 dict 。ChainMap 本身也是一个 dict，但是查找的时候，会按照顺序在内部的 dict 依次查找。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> ChainMap</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> os<span class=\"token punctuation\">,</span> argparse</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 构造缺省参数:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>defaults <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token string\">'color'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token string\">'user'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'guest'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 构造命令行参数:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>parser <span class=\"token operator\">=</span> argparse<span class=\"token punctuation\">.</span>ArgumentParser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'-u'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'--user'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'-c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'--color'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>namespace <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span>parse_args<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>command_line_args <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>k<span class=\"token punctuation\">:</span> v <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> <span class=\"token builtin\">vars</span><span class=\"token punctuation\">(</span>namespace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> v<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 组合成 ChainMap:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>combined <span class=\"token operator\">=</span> ChainMap<span class=\"token punctuation\">(</span>command_line_args<span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">,</span> defaults<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 打印参数:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'color=%s'</span> <span class=\"token operator\">%</span> combined<span class=\"token punctuation\">[</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user=%s'</span> <span class=\"token operator\">%</span> combined<span class=\"token punctuation\">[</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>运行结果：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>A:<span class=\"token punctuation\">\\</span>pycharm-workspace<span class=\"token punctuation\">\\</span>py-test<span class=\"token operator\">></span>python main.py</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">color</span><span class=\"token operator\">=</span>red</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">user</span><span class=\"token operator\">=</span>guest</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>A:<span class=\"token punctuation\">\\</span>pycharm-workspace<span class=\"token punctuation\">\\</span>py-test<span class=\"token operator\">></span>python main.py -u Chimoku</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token assign-left variable\">color</span><span class=\"token operator\">=</span>red</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token assign-left variable\">user</span><span class=\"token operator\">=</span>Chimoku</pre></td></tr></table></figure></li>\n<li>\n<p>Counter</p>\n<p>Counter 是一个简单的计数器，实际上它也是 dict 的一个子类。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 使用 Counter 统计字符出现的个数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> Counter</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>c <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> <span class=\"token string\">'programming'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    c<span class=\"token punctuation\">[</span>ch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">[</span>ch<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Counter(&#123;'r': 2, 'g': 2, 'm': 2, 'p': 1, 'o': 1, 'a': 1, 'i': 1, 'n': 1&#125;)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>c<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token string\">\"playing\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Counter(&#123;'g': 3, 'p': 2, 'r': 2, 'a': 2, 'm': 2, 'i': 2, 'n': 2, 'o': 1, 'l': 1, 'y': 1&#125;)</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"base64\"><a class=\"anchor\" href=\"#base64\">#</a> base64</h4>\n<p>Base64 是一种用 64 个字符来表示任意二进制数据的方法，Python 内置的  <code>base64</code>  可以直接进行 base64 的编解码：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> base64</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>en <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span><span class=\"token string\">b'binary\\x00string'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>en<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># b'YmluYXJ5AHN0cmluZw=='</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>de <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span><span class=\"token string\">b'YmluYXJ5AHN0cmluZw=='</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>de<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># b'binary\\x00string'</span></pre></td></tr></table></figure><p>由于标准的 Base64 编码后可能出现字符  <code>+</code>  和  <code>/</code> ，在 URL 中就不能直接作为参数，所以又有一种  <code>url safe</code>  的 base64 编码，其实就是把字符  <code>+</code>  和  <code>/</code>  分别变成  <code>-</code>  和  <code>_</code> ：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> base64</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>en_byte <span class=\"token operator\">=</span> <span class=\"token string\">b'i\\xb7\\x1d\\xfb\\xef\\xff'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>en2 <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span>en_byte<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>en2<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># b'abcd++//'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>uen <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>urlsafe_b64encode<span class=\"token punctuation\">(</span>en_byte<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>uen<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># b'abcd--__'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ude <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>urlsafe_b64decode<span class=\"token punctuation\">(</span>uen<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ude <span class=\"token operator\">==</span> en_byte<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr></table></figure><p>Base64 适用于小段内容的编码，比如数字证书签名、Cookie 的内容等，但是，由于  <code>=</code>  字符也可能出现在 Base64 编码中，但  <code>=</code>  用在 URL、Cookie 里面会造成歧义，所以，很多 Base64 编码后会把  <code>=</code>  去掉。</p>\n<p>Base64 是一种任意二进制到文本字符串的编码方法，常用于在 URL、Cookie、网页中传输少量二进制数据。</p>\n<h4 id=\"struct\"><a class=\"anchor\" href=\"#struct\">#</a> struct</h4>\n<p>在 Python 中并没有专门用于处理字节的数据类型，但是由于  <code>b'str'</code>  可以用来表示字节，所以，Python 通常用二进制字符串来表示字节数组。</p>\n<p>Python 提供了一个  <code>struct</code>  模块用来解决 bytes 和其他二进制数据类型之间的转换问题。struct 模块的 pack 函数把任意数据类型变成 bytes：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> struct</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token operator\">=</span> struct<span class=\"token punctuation\">.</span>pack<span class=\"token punctuation\">(</span><span class=\"token string\">'>I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10240099</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># >I 是处理指令，</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># b'\\x00\\x9c@c'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>un <span class=\"token operator\">=</span> struct<span class=\"token punctuation\">.</span>unpack<span class=\"token punctuation\">(</span><span class=\"token string\">'>IH'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'\\xf0\\xf0\\xf0\\xf0\\x80\\x80'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>un<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (4042322160, 32896)</span></pre></td></tr></table></figure><p>其中， <code>&gt;</code>  表示字节顺序是 big-endian，也就是网络序， <code>I</code>  表示 4 字节无符号整数。后面的参数个数要和处理指令一致。</p>\n<p>而  <code>unpack</code>  则是将 bytes 转换为相应的数据类型。</p>\n<p>尽管 Python 不适合编写底层操作字节流的代码，但在对性能要求不高的地方，利用  <code>struct</code>  将会提供很大的便利。</p>\n<h4 id=\"hashlib\"><a class=\"anchor\" href=\"#hashlib\">#</a> hashlib</h4>\n<p>Python 的 hashlib 提供了常见的摘要算法，如 MD5，SHA1 等等。</p>\n<p>摘要算法又称哈希算法、散列算法。它通过一个函数，把任意长度的数据转换为一个长度固定的数据串（通常用 16 进制的字符串表示）。</p>\n<p>摘要算法就是通过摘要函数  <code>f()</code>  对任意长度的数据  <code>data</code>  计算出固定长度的摘要  <code>digest</code> ，目的是为了发现原始数据是否被人篡改过。</p>\n<p>摘要算法之所以能指出数据是否被篡改过，就是因为摘要函数是一个单向函数，计算  <code>f(data)</code>  很容易，但通过 digest 反推 data 却非常困难。而且，对原始数据做一个 bit 的修改，都会导致计算出的摘要完全不同。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># MD5 摘要算法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> hashlib</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>md5 <span class=\"token operator\">=</span> hashlib<span class=\"token punctuation\">.</span>md5<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>md5<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token string\">'how to use md5 in python hashlib?'</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>md5<span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># d26a53750bc40b38b65a520292f69306</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 摘要算法支持将原始字符串进行分段计算，其计算结果不受影响</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>md5_2 <span class=\"token operator\">=</span> hashlib<span class=\"token punctuation\">.</span>md5<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>md5_2<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token string\">'how to use md5 '</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>md5_2<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token string\">'in python hashlib?'</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>md5_2<span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__eq__<span class=\"token punctuation\">(</span>md5<span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr></table></figure><p>MD5 是最常见的摘要算法，速度很快，生成结果是固定的 128 bit 字节，通常用一个 32 位的 16 进制字符串表示。</p>\n<p>另一种常见的摘要算法是 SHA1，调用 SHA1 和调用 MD5 完全类似：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> hashlib</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>sha1 <span class=\"token operator\">=</span> hashlib<span class=\"token punctuation\">.</span>sha1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sha1<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token string\">'how to use sha1 in '</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>sha1<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token string\">'python hashlib?'</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sha1<span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2c76b57293ce30acef38d98f6046927161b46a44</span></pre></td></tr></table></figure><p>SHA1 的结果是 160 bit 字节，通常用一个 40 位的 16 进制字符串表示。比 SHA1 更安全的算法是 SHA256 和 SHA512，不过越安全的算法不仅越慢，而且摘要长度更长。</p>\n<blockquote>\n<p>对于两个完全不同的数据，它们通过摘要算法计算出的结果是有可能一样的，但是这种几率十分小。</p>\n</blockquote>\n<p>MD5 算法经常应用在用户账号密码中，但是对于一些常规的高频的密码，通过 MD5 算法加密的结果也是固定的，为了保证用户的账号安全，可以在加密的时候对用户的密码进行加盐处理，这样能保证用户的密码通过加密后的结果不会与常规字符串加密后的结果相同。</p>\n<p>摘要算法在很多地方都有广泛的应用。要注意摘要算法不是加密算法，不能用于加密（因为无法通过摘要反推明文），只能用于防篡改，但是它的单向计算特性决定了可以在不存储明文口令的情况下验证用户口令。</p>\n<h4 id=\"hmac\"><a class=\"anchor\" href=\"#hmac\">#</a> hmac</h4>\n<p>Hmac（Keyed-Hashing for Message Authentication）通过一个标准算法，在计算哈希的过程中，将 key 混入计算过程中，和我们自定义的加 salt 算法不同，Hmac 算法针对所有哈希算法都通用，无论是 MD5 还是 SHA-1。采用 Hmac 替代我们自己的 salt 算法，可以使程序算法更标准化，也更安全。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> hmac</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>message <span class=\"token operator\">=</span> <span class=\"token string\">b'Hi, boy!'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>key <span class=\"token operator\">=</span> <span class=\"token string\">b'randomkey'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>h <span class=\"token operator\">=</span> hmac<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> digestmod<span class=\"token operator\">=</span><span class=\"token string\">'MD5'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>h<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token string\">b' how are you?'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>r <span class=\"token operator\">=</span> h<span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ae64cbf0742a13a1c8e2e3341779d2b3</span></pre></td></tr></table></figure><p>hmac 和普通 hash 算法非常类似。hmac 输出的长度和原始哈希算法的长度一致。但注意传入的 key 和 message 都是  <code>bytes</code>  类型， <code>str</code>  类型需要首先编码为  <code>bytes</code> 。</p>\n<h4 id=\"itertools\"><a class=\"anchor\" href=\"#itertools\">#</a> itertools</h4>\n<p>Python 的内建模块  <code>itertools</code>  提供了非常有用的用于操作迭代对象的函数。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> itertools</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 无限自然数序列</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>iter_num <span class=\"token operator\">=</span> itertools<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> iter_num<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># print Ctrl+C to stop</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 字符无限循环</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>iter_str <span class=\"token operator\">=</span> itertools<span class=\"token punctuation\">.</span>cycle<span class=\"token punctuation\">(</span><span class=\"token string\">'ABCD'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> iter_str<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># print Ctrl+C to stop</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 将指定内容重复指定次数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>iter_repeat <span class=\"token operator\">=</span> itertools<span class=\"token punctuation\">.</span>repeat<span class=\"token punctuation\">(</span><span class=\"token string\">'AB'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> iter_repeat<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># takewhile ()：从无限序列中根据条件截取有限序列</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>iter_takewhile <span class=\"token operator\">=</span> itertools<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>r <span class=\"token operator\">=</span> itertools<span class=\"token punctuation\">.</span>takewhile<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> iter_takewhile<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [1, 2, 3, 4, 5]</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># chain ()：将多个迭代对象串联起来</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>chin_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> itertools<span class=\"token punctuation\">.</span>chain<span class=\"token punctuation\">(</span><span class=\"token string\">'ABC'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'XYZ'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'O'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    chin_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>chin_list<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['A', 'B', 'C', 'X', 'Y', 'Z', 'O']</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\"># groupby ()：将迭代对象中连续的相同元素进行分组（可以指定规则）</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>list_group <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> group <span class=\"token keyword\">in</span> itertools<span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span><span class=\"token string\">'AaaBBbaAcC'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">lambda</span> c<span class=\"token punctuation\">:</span> c<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    list_sub <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    list_group<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>list_sub<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list_group<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [['A', 'Aaa'], ['B', 'BBb'], ['A', 'aA'], ['C', 'cC']]</span></pre></td></tr></table></figure><p>itertools 生成的迭代对象，其内部的元素只有在进行迭代的时候才会生成。</p>\n<h4 id=\"contextlib\"><a class=\"anchor\" href=\"#contextlib\">#</a> contextlib</h4>\n<p>在 Python 中，在进行文件读写后，需要对显式关闭文件，但为了使用方便，也可以使用  <code>with</code>  语句进行简化。但实际上，with 语句不只适用于 IO 操作，而是适用于任何正确实现上下文管理的对象，而上下文管理是通过  <code>__enter__</code>  和  <code>__exit__</code>  方法来实现的，如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Query</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__enter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Query start -->'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> self</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__exit__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> exc_type<span class=\"token punctuation\">,</span> exc_value<span class=\"token punctuation\">,</span> traceback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> exc_type<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'---- [Something Error] ----'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;-- Query end'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Query info about %s...'</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">with</span> Query<span class=\"token punctuation\">(</span><span class=\"token string\">'Baidu'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> q<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    q<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># Query start --></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># Query info about Baidu...</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># &lt;-- Query end</span></pre></td></tr></table></figure><p>对于需要进行上下文管理的对象，也可以使用 Python 的标准库  <code>contextlib</code>  进行简化书写：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> contextlib <span class=\"token keyword\">import</span> contextmanager</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Query</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Query info about %s...'</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token decorator annotation punctuation\">@contextmanager</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">create_query</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Query start -->'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">yield</span> Query<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 执行 with 语句块中的内容</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;-- Query end'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">with</span> create_query<span class=\"token punctuation\">(</span><span class=\"token string\">'Baidu'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> q<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    q<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># Query start --></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># Query info about Baidu...</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># &lt;-- Query end</span></pre></td></tr></table></figure><p>其中， <code>yield</code>  语句相当于调用执行了 with 语句块中的代码内容。yield 语句前后的代码，将分别在 with 语句块执行前后执行，它们之间的执行顺序为：</p>\n<ol>\n<li>with 语句执行 yield 之前的代码。</li>\n<li>yield 调用执行 with 语句块中的代码。</li>\n<li>执行 yield 之后的代码。</li>\n</ol>\n<p>如果一个对象没有实现上下文，那么它就不能用于 with 语句，但我们可以使用  <code>closing()</code>  来将普通对象变为上下文对象，例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> contextlib <span class=\"token keyword\">import</span> closing</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> urllib<span class=\"token punctuation\">.</span>request <span class=\"token keyword\">import</span> urlopen</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 获取 python 官网 html 内容</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">with</span> closing<span class=\"token punctuation\">(</span>urlopen<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.python.org'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> page<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> page<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>但其实，closing 函数在源码中的定义也很简单：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">closing</span><span class=\"token punctuation\">(</span>AbstractContextManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> thing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>thing <span class=\"token operator\">=</span> thing</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__enter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>thing</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__exit__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>exc_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        self<span class=\"token punctuation\">.</span>thing<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>它本质上也是定义了  <code>__enter__</code>  和  <code>__exit__</code>  方法使对象实现了上下文管理。</p>\n<h4 id=\"urllib\"><a class=\"anchor\" href=\"#urllib\">#</a> urllib</h4>\n<p>urllib 提供了一系列操作 URL 的功能，它可以模拟浏览器发送网络请求。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> contextlib <span class=\"token keyword\">import</span> closing</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> urllib <span class=\"token keyword\">import</span> request</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 获取百度首页 html 内容</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">with</span> closing<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>urlopen<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.baidu.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    data <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Status:'</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>reason<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> f<span class=\"token punctuation\">.</span>getheaders<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%s: %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Data:'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>同时，在发送请求时，也可以指定请求头信息：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> contextlib <span class=\"token keyword\">import</span> closing</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> urllib <span class=\"token keyword\">import</span> request</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 获取百度首页 html 内容（模拟 iPhone 的移动版）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>req <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">(</span><span class=\"token string\">'http://www.baidu.com/'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>req<span class=\"token punctuation\">.</span>add_header<span class=\"token punctuation\">(</span><span class=\"token string\">'User-Agent'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Mozilla/6.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/8.0 Mobile/10A5376e Safari/8536.25'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">with</span> closing<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>urlopen<span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Status:'</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>reason<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> f<span class=\"token punctuation\">.</span>getheaders<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%s: %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Data:'</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>如需模拟 post 请求，则需要将数据以 bytes 的形式传入，例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> contextlib <span class=\"token keyword\">import</span> closing</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> urllib <span class=\"token keyword\">import</span> request<span class=\"token punctuation\">,</span> parse</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Welcome to login xxx...'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>email <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Email: '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>passwd <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Password: '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>login_data <span class=\"token operator\">=</span> parse<span class=\"token punctuation\">.</span>urlencode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">,</span> passwd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>req <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.youhost.com/login'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">with</span> closing<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>urlopen<span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>login_data<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Status:'</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>reason<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> f<span class=\"token punctuation\">.</span>getheaders<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%s: %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Data:'</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"xml\"><a class=\"anchor\" href=\"#xml\">#</a> XML</h4>\n<p>操作 XML 有两种方法：DOM 和 SAX。DOM 会把整个 XML 读入内存，解析为树，因此占用内存大，解析慢，优点是可以任意遍历树的节点。SAX 是流模式，边读边解析，占用内存小，解析快，缺点是我们需要自己处理事件。</p>\n<p>在 Python 中使用 SAX 解析 XML 非常简洁，它通常会产生三个事件：</p>\n<ol>\n<li>start_element：xml 元素开始标签。</li>\n<li>char_data：xml 元素环绕内容。</li>\n<li>end_element：xml 元素结束标签。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> xml<span class=\"token punctuation\">.</span>parsers<span class=\"token punctuation\">.</span>expat <span class=\"token keyword\">import</span> ParserCreate</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">DefaultSaxHandler</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">start_element</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sax:start_element: %s, attrs: %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>attrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">end_element</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sax:end_element: %s'</span> <span class=\"token operator\">%</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">char_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sax:char_data: %s'</span> <span class=\"token operator\">%</span> text<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>xml <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">r'''&lt;?xml version=\"1.0\"?></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>&lt;ol></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    &lt;li>&lt;a href=\"/python\">Python&lt;/a>&lt;/li></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    &lt;li>&lt;a href=\"/java\">Java&lt;/a>&lt;/li></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>&lt;/ol></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>handler <span class=\"token operator\">=</span> DefaultSaxHandler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>parser <span class=\"token operator\">=</span> ParserCreate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>parser<span class=\"token punctuation\">.</span>StartElementHandler <span class=\"token operator\">=</span> handler<span class=\"token punctuation\">.</span>start_element</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>parser<span class=\"token punctuation\">.</span>EndElementHandler <span class=\"token operator\">=</span> handler<span class=\"token punctuation\">.</span>end_element</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>parser<span class=\"token punctuation\">.</span>CharacterDataHandler <span class=\"token operator\">=</span> handler<span class=\"token punctuation\">.</span>char_data</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>parser<span class=\"token punctuation\">.</span>Parse<span class=\"token punctuation\">(</span>xml<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>相比 JSON 而言，XML 较为复杂，组装数据也很不方便，推荐优先使用 JSON。</p>\n</blockquote>\n<h4 id=\"htmlparser\"><a class=\"anchor\" href=\"#htmlparser\">#</a> HTMLParser</h4>\n<p>HTML 本质上是 XML 的子集，但是 HTML 的语法没有 XML 那么严格，所以不能用标准的 DOM 或 SAX 来解析 HTML。Python 为此提供了 HTMLParser 来非常方便地解析 HTML。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> html<span class=\"token punctuation\">.</span>parser <span class=\"token keyword\">import</span> HTMLParser</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyHTMLParser</span><span class=\"token punctuation\">(</span>HTMLParser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">handle_starttag</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;%s>'</span> <span class=\"token operator\">%</span> tag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">handle_endtag</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;/%s>'</span> <span class=\"token operator\">%</span> tag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">handle_startendtag</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;%s/>'</span> <span class=\"token operator\">%</span> tag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">handle_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">handle_comment</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;!--'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> <span class=\"token string\">'-->'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">handle_entityref</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&amp;%s;'</span> <span class=\"token operator\">%</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">handle_charref</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&amp;#%s;'</span> <span class=\"token operator\">%</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>parser <span class=\"token operator\">=</span> MyHTMLParser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>parser<span class=\"token punctuation\">.</span>feed<span class=\"token punctuation\">(</span><span class=\"token triple-quoted-string string\">'''&lt;html></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>&lt;head>&lt;/head></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>&lt;body></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>&lt;!-- test html parser --></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    &lt;p>Some &lt;a href=\\\"#\\\">html&lt;/a> HTML&amp;nbsp;tutorial...&lt;br>END&lt;/p></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>&lt;/body>&lt;/html>'''</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>feed()</code>  方法可以多次调用，因此，对于一个 HTML 字符串，也可以进行分段处理。</p>\n<h3 id=\"常用第三方模块\"><a class=\"anchor\" href=\"#常用第三方模块\">#</a> 常用第三方模块</h3>\n<p>基本上 Python 所有第三方模块都会在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9weXBpLnB5dGhvbi5vcmcv\">PyPI - the Python Package Index</span> 进行注册，需要使用时，直接通过 pip 进行安装即可。</p>\n<h4 id=\"pillow\"><a class=\"anchor\" href=\"#pillow\">#</a> Pillow</h4>\n<p>PIL：Python Imaging Library。</p>\n<ol>\n<li>\n<p>安装 Pillow</p>\n<p>如果已经安装 Anaconda，那么 Pillow 可以直接使用，如果未安装 Anaconda，则需要执行命令  <code>pip install pillow</code>  进行安装。</p>\n</li>\n<li>\n<p>使用 Pillow 操作图像</p>\n<p>缩小图像并进行模糊处理：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image<span class=\"token punctuation\">,</span> ImageFilter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 打开一个 jpg 图像文件，注意是当前路径:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>im <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A:\\\\img\\\\test.jpg'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 获得图像尺寸:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>w<span class=\"token punctuation\">,</span> h <span class=\"token operator\">=</span> im<span class=\"token punctuation\">.</span>size</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Original image size: %sx%s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 缩放到 50%:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>im<span class=\"token punctuation\">.</span>thumbnail<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>w <span class=\"token operator\">//</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> h <span class=\"token operator\">//</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Resize image to: %sx%s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">//</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> h <span class=\"token operator\">//</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 应用模糊滤镜:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>im2 <span class=\"token operator\">=</span> im<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>ImageFilter<span class=\"token punctuation\">.</span>BLUR<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 把缩放后的图像用 jpeg 格式保存:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>im2<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string\">'A:\\\\img\\\\test2.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jpeg'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>除了缩放和模糊处理外，还可以进行如切片、旋转、滤镜、输出文字、调色板等一些列图像操作。</p>\n<p>生成验证码图片：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image<span class=\"token punctuation\">,</span> ImageDraw<span class=\"token punctuation\">,</span> ImageFont<span class=\"token punctuation\">,</span> ImageFilter</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 随机字母:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">rndChar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 随机颜色 1:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">rndColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 随机颜色 2:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">rndColor2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">127</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">127</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">127</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 240 x 60:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>width <span class=\"token operator\">=</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>height <span class=\"token operator\">=</span> <span class=\"token number\">60</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>image <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span><span class=\"token string\">'RGB'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># 创建 Font 对象:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>font <span class=\"token operator\">=</span> ImageFont<span class=\"token punctuation\">.</span>truetype<span class=\"token punctuation\">(</span><span class=\"token string\">'arial.ttf'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># 创建 Draw 对象:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>draw <span class=\"token operator\">=</span> ImageDraw<span class=\"token punctuation\">.</span>Draw<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># 填充每个像素:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">for</span> y <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        draw<span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fill<span class=\"token operator\">=</span>rndColor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\"># 输出文字:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    draw<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> t <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rndChar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> font<span class=\"token operator\">=</span>font<span class=\"token punctuation\">,</span> fill<span class=\"token operator\">=</span>rndColor2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\"># 模糊:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>image <span class=\"token operator\">=</span> image<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>ImageFilter<span class=\"token punctuation\">.</span>BLUR<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>image<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string\">'A:\\\\img\\\\captcha.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jpeg'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://img.xfc-exclave.com/2021/09/aefae28314fc57e0bdd4a2986c0eef9a1632739425.jpg\" alt=\"Python生成验证码\" /></p>\n<blockquote>\n<p>更多好玩的功能，参考官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9waWxsb3cucmVhZHRoZWRvY3Mub3Jn\">https://pillow.readthedocs.org</span></p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"requests\"><a class=\"anchor\" href=\"#requests\">#</a> requests</h4>\n<p>相比于 urllib 模块，requests 模块在处理 URL 资源时更加方便。</p>\n<p>如果已经安装 Anaconda，那么 requests 可以直接使用，如果未安装 Anaconda，则需要执行命令  <code>pip install requests</code>  进行安装。</p>\n<p>常用方法示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># GET 请求</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"http://www.baidu.com/s\"</span><span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'wd'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'python'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># https://www.baidu.com/s?wd=python</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>encoding<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ISO-8859-1（requests 自动检测编码）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 获取响应的 bytes 内容</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 处理 json 内容</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>r2 <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://v2.jinrishici.com/one.json'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 今日诗词 API</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r2<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 设置请求头</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>r3 <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"http://www.baidu.com/s\"</span><span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'wd'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'python'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'User-Agent'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r3<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># POST 请求（默认使用 application/x-www-form-urlencoded 编码）</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>r4 <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.test.com/login'</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'abc@example.com'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'password'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># POST 传递 JSON 数据</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>params <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'abc@example.com'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'password'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>r5 <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.test.com/login'</span><span class=\"token punctuation\">,</span> json<span class=\"token operator\">=</span>params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># POST 上传文件</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>upload_files <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'file'</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A:\\\\xls\\\\test.xls'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\"># 注意使用 rb 读取，保证文件完整</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>r6 <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.test.com/upload'</span><span class=\"token punctuation\">,</span> files<span class=\"token operator\">=</span>upload_files<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r6<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 获取响应头信息</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># Cookies 传送与接收、请求超时</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>cs <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>r7 <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.test.com/testCookies'</span><span class=\"token punctuation\">,</span> cookies<span class=\"token operator\">=</span>cs<span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">2.5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2.5 秒后超时</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">[</span><span class=\"token string\">'status'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"chardet\"><a class=\"anchor\" href=\"#chardet\">#</a> chardet</h4>\n<p>chardet 主要用于检测编码。</p>\n<p>如果已经安装 Anaconda，那么 chardet 可以直接使用，如果未安装 Anaconda，则需要执行命令  <code>pip install chardet</code>  进行安装。</p>\n<p>常用方法示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> chardet <span class=\"token keyword\">as</span> chardet</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ce <span class=\"token operator\">=</span> chardet<span class=\"token punctuation\">.</span>detect<span class=\"token punctuation\">(</span><span class=\"token string\">b'Hello, world!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ce<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &#123;'encoding': 'ascii', 'confidence': 1.0, 'language': ''&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>data <span class=\"token operator\">=</span> <span class=\"token string\">'一帷风动百虫绝，连月推山雪见归'</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'gbk'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>chardet<span class=\"token punctuation\">.</span>detect<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &#123;'encoding': 'GB2312', 'confidence': 0.99, 'language': 'Chinese'&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>data <span class=\"token operator\">=</span> <span class=\"token string\">'一帷风动百虫绝，连月推山雪见归'</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>chardet<span class=\"token punctuation\">.</span>detect<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &#123;'encoding': 'utf-8', 'confidence': 0.99, 'language': ''&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>data <span class=\"token operator\">=</span> <span class=\"token string\">'チンモクのブログ'</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'euc-jp'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>chardet<span class=\"token punctuation\">.</span>detect<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &#123;'encoding': 'EUC-JP', 'confidence': 0.99, 'language': 'Japanese'&#125;</span></pre></td></tr></table></figure><p>通过编码检测后，再进行内容解码，能够有效避免很多转码异常。</p>\n<h4 id=\"psutil\"><a class=\"anchor\" href=\"#psutil\">#</a> psutil</h4>\n<p>psutil: process and system utilities，可以用于获取系统信息，并且支持跨平台使用。</p>\n<p>如果已经安装 Anaconda，那么 psutil 可以直接使用，如果未安装 Anaconda，则需要执行命令  <code>pip install psutil</code>  进行安装。</p>\n<p>常用方法示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> psutil</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 获取 CPU 逻辑数量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>psutil<span class=\"token punctuation\">.</span>cpu_count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 8</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 获取 CPU 物理核心</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>psutil<span class=\"token punctuation\">.</span>cpu_count<span class=\"token punctuation\">(</span>logical<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 8</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 统计 CPU 的用户／系统／空闲时间</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>psutil<span class=\"token punctuation\">.</span>cpu_times<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 实现类似 top 命令的 CPU 使用率，每秒刷新一次</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>psutil<span class=\"token punctuation\">.</span>cpu_percent<span class=\"token punctuation\">(</span>interval<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> percpu<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 获取物理内存信息</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>psutil<span class=\"token punctuation\">.</span>virtual_memory<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># svmem(total=25701597184, available=17957904384, percent=30.1, used=7743692800, free=17957904384)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 获取交换内存信息</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>psutil<span class=\"token punctuation\">.</span>swap_memory<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># sswap(total=29459693568, used=12058066944, free=17401626624, percent=40.9, sin=0, sout=0)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 获取磁盘信息</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>psutil<span class=\"token punctuation\">.</span>disk_partitions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 磁盘分区信息</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>psutil<span class=\"token punctuation\">.</span>disk_usage<span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 磁盘使用情况</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>psutil<span class=\"token punctuation\">.</span>disk_io_counters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 磁盘 IO</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># 获取网络信息</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>psutil<span class=\"token punctuation\">.</span>net_io_counters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 获取网络读写字节／包的个数</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>psutil<span class=\"token punctuation\">.</span>net_if_addrs<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 获取网络接口信息</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>psutil<span class=\"token punctuation\">.</span>net_if_stats<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 获取网络接口状态</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>psutil<span class=\"token punctuation\">.</span>net_connections<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 获取当前网络连接信息</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># 获取进程信息</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>psutil<span class=\"token punctuation\">.</span>pids<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 获取所有进程</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>p <span class=\"token operator\">=</span> psutil<span class=\"token punctuation\">.</span>Process<span class=\"token punctuation\">(</span><span class=\"token number\">1300</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 获取指定进程</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 进程名称</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>cwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 进程工作目录</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>cmdline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 进程启动的命令行</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>ppid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 父进程 ID</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 父进程</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 子进程列表</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 进程状态</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>create_time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 进程创建时间</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>cpu_times<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 进程使用的 CPU 时间</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>memory_info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 进程使用的内存</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>connections<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 进程相关的网络连接</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>num_threads<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 进程的线程数量</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>threads<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 进程的所有线程</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 进程环境变量</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>p<span class=\"token punctuation\">.</span>terminate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 结束进程</span></pre></td></tr></table></figure><blockquote>\n<p>如在实际项目中需要查询相关功能，参考官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dpYW1wYW9sby9wc3V0aWw=\">https://github.com/giampaolo/psutil</span></p>\n</blockquote>\n<h3 id=\"virtualenv\"><a class=\"anchor\" href=\"#virtualenv\">#</a> virtualenv</h3>\n<p>如果在同一台主机上，需要使用到多个不同的 Python 运行环境，这时就需要使用  <code>virtualenv</code>  对 Python 环境进行隔离。</p>\n<p>安装 virtualenv：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ pip3 <span class=\"token function\">install</span> virtualenv</pre></td></tr></table></figure><h3 id=\"图形界面\"><a class=\"anchor\" href=\"#图形界面\">#</a> 图形界面</h3>\n<p>Python 支持多种图形界面的第三方库，包括但不限于：</p>\n<ul>\n<li>Tk</li>\n<li>wxWidgets</li>\n<li>Qt</li>\n<li>GTK</li>\n</ul>\n<p>此外，Python 也自带有支持 Tk 的  <code>Tkinter</code> ，无需安装任何包，就可以直接使用。</p>\n<blockquote>\n<p>Tk 是一个图形库，支持多个操作系统，使用 Tcl 语言开发，它会调用操作系统提供的本地 GUI 接口，完成最终的 GUI。而 Tkinter 则对访问 Tk 的接口进行了封装。</p>\n</blockquote>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/09/9781b3431d0c919dc04554e2670049781632925720.png\" alt=\"Python图形界面\" /></p>\n<h4 id=\"海龟绘图\"><a class=\"anchor\" href=\"#海龟绘图\">#</a> 海龟绘图</h4>\n<p>绘制长方形：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 导入 turtle 包的所有内容:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> turtle <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 设置笔刷宽度:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>width<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 前进:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>forward<span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 右转 90 度:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>right<span class=\"token punctuation\">(</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 笔刷颜色:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>pencolor<span class=\"token punctuation\">(</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>forward<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>right<span class=\"token punctuation\">(</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>pencolor<span class=\"token punctuation\">(</span><span class=\"token string\">'green'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>forward<span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>right<span class=\"token punctuation\">(</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>pencolor<span class=\"token punctuation\">(</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>forward<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>right<span class=\"token punctuation\">(</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># 调用 done () 使得窗口等待被关闭，否则将立刻关闭窗口</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>done<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>结合 Python 的逻辑判断，可以绘制复杂的图像，例如五个五角星：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> turtle <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">drawStar</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    pu<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    goto<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    pd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\"># set heading: 0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    seth<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        fd<span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        rt<span class=\"token punctuation\">(</span><span class=\"token number\">144</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    drawStar<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>done<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>使用递归还可以绘制复杂的图形，例如绘制一棵树：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> turtle <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 设置色彩模式是 RGB:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>colormode<span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>lt<span class=\"token punctuation\">(</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>lv <span class=\"token operator\">=</span> <span class=\"token number\">14</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>l <span class=\"token operator\">=</span> <span class=\"token number\">120</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>s <span class=\"token operator\">=</span> <span class=\"token number\">45</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>width<span class=\"token punctuation\">(</span>lv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 初始化 RGB 颜色:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>r <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>g <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>pencolor<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>penup<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>bk<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>pendown<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>fd<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">draw_tree</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">global</span> r<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> b</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\"># save the current pen width</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    w <span class=\"token operator\">=</span> width<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\"># narrow the pen width</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    width<span class=\"token punctuation\">(</span>w <span class=\"token operator\">*</span> <span class=\"token number\">3.0</span> <span class=\"token operator\">/</span> <span class=\"token number\">4.0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\"># set color:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    r <span class=\"token operator\">=</span> r <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    g <span class=\"token operator\">=</span> g <span class=\"token operator\">+</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    b <span class=\"token operator\">=</span> b <span class=\"token operator\">+</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    pencolor<span class=\"token punctuation\">(</span>r <span class=\"token operator\">%</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> g <span class=\"token operator\">%</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">%</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    l <span class=\"token operator\">=</span> <span class=\"token number\">3.0</span> <span class=\"token operator\">/</span> <span class=\"token number\">4.0</span> <span class=\"token operator\">*</span> l</pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    lt<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    fd<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">if</span> level <span class=\"token operator\">&lt;</span> lv<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        draw_tree<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> level <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    bk<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    rt<span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    fd<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">if</span> level <span class=\"token operator\">&lt;</span> lv<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        draw_tree<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> level <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    bk<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    lt<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token comment\"># restore the previous pen width</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    width<span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>speed<span class=\"token punctuation\">(</span><span class=\"token string\">\"fastest\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>draw_tree<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>done<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>运行最终显示效果：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/09/cc970c3e845202acb2f87328a1068eaa1632750998.png\" alt=\"Python海龟绘图-树\" /></p>\n<h3 id=\"网络编程\"><a class=\"anchor\" href=\"#网络编程\">#</a> 网络编程</h3>\n<h4 id=\"tcpip-简介\"><a class=\"anchor\" href=\"#tcpip-简介\">#</a> TCP/IP 简介</h4>\n<p>略。</p>\n<h4 id=\"tcp编程\"><a class=\"anchor\" href=\"#tcp编程\">#</a> TCP 编程</h4>\n<p>Socket 是网络编程的一个抽象概念。通常我们用一个 Socket 表示打开了一个网络链接，而打开一个 Socket 则需要知道目标计算机的 IP、端口和协议类型。</p>\n<p>创建一个基于 TCP 的 Socket 客户端连接：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 导入 socket 库:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> socket</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 创建一个 socket:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>s <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># AF_INET 指 IPv4 协议，AF_INET6 指 IPv6 协议。SOCK_STREAM 指定使用面向流的 TCP 协议</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 建立连接:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>s<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'www.test.com'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 参数为 tuple 类型</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 发送数据:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>s<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">b'GET / HTTP/1.1\\r\\nHost: www.test.com\\r\\nConnection: close\\r\\n\\r\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 接收数据:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token builtin\">buffer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\"># 每次最多接收 1k 字节:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    d <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> d<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token builtin\">buffer</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">break</span>  <span class=\"token comment\"># 当接收到空，退出接收</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>data <span class=\"token operator\">=</span> <span class=\"token string\">b''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 关闭连接:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>s<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># 自定义处理数据</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>header<span class=\"token punctuation\">,</span> html <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\r\\n\\r\\n'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># 把接收的数据写入文件:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>服务器端通常会打开一个固定的端口，用于监听所有的客户端连接。对于大量的客户端连接，需要对连接的 Socket 进行识别，一个 Socket 依赖 4 项：服务器地址、服务器端口、客户端地址、客户端端口来唯一确定一个 Socket。此外，服务器端需要具备同时相应多个客户端的能力，所以，每个连接都需要一个新的进程或者新的线程来处理。</p>\n<p>创建服务端：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> socket</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>s <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 监听端口:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>s<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 监听端口并指定等待连接的最大数量</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>s<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Waiting for connection...'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">tcplink</span><span class=\"token punctuation\">(</span>sock<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Accept new connection from %s:%s...'</span> <span class=\"token operator\">%</span> addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    sock<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">b'Welcome!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\"># 持续监听客户端消息</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        data <span class=\"token operator\">=</span> sock<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\"># 当客户端发送了 exit 时，断开连接</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> data <span class=\"token keyword\">or</span> data<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'exit'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        sock<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello, %s!'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    sock<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Connection from %s:%s closed.'</span> <span class=\"token operator\">%</span> addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\"># 接收一个新连接:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    sock<span class=\"token punctuation\">,</span> addr <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\"># 创建新线程来处理 TCP 连接:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\"># 每个连接都必须创建新线程（或进程）来处理，否则，单线程在处理连接的过程中，无法接受其他客户端的连接</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    t <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>tcplink<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>sock<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    t<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>可以创建客户端来对和上面的服务端进行通信：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>s <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 建立连接:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 接收欢迎消息:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> data <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string\">b'Li Bai'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'Du Fu'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'Ou Yangxiu'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\"># 发送数据:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    s<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>s<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">b'exit'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>s<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>注意：同一台主机，同一个端口，同一时间只能被一个 Socket 绑定。</p>\n</blockquote>\n<h4 id=\"udp编程\"><a class=\"anchor\" href=\"#udp编程\">#</a> UDP 编程</h4>\n<p>TCP 是建立可靠连接，并且通信双方都可以以流的形式发送数据。相对 TCP，UDP 则是面向无连接的协议。</p>\n<p>使用 UDP 协议时，不需要建立连接，只需要知道对方的 IP 和端口，就可以直接发数据包，但它不能保证接收方一定收到。</p>\n<p>虽然用 UDP 传输数据不可靠，但它的优点是和 TCP 比，速度快，对于不要求可靠到达的数据，就可以使用 UDP 协议。</p>\n<p>UDP 服务端示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> socket</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_DGRAM<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># SOCK_DGRAM 指定了这个 Socket 的类型是 UDP</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 绑定端口:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>s<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bind UDP on 9999...'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\"># 接收数据:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    data<span class=\"token punctuation\">,</span> addr <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>recvfrom<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 返回数据和客户端的地址与端口</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Received from %s:%s.'</span> <span class=\"token operator\">%</span> addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    s<span class=\"token punctuation\">.</span>sendto<span class=\"token punctuation\">(</span><span class=\"token string\">b'Hello, %s!'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>UDP 客户端示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> socket</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_DGRAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> data <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string\">b'Michael'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'Tracy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'Sarah'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\"># 发送数据:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    s<span class=\"token punctuation\">.</span>sendto<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\"># 接收数据:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>s<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在使用 UDP 进行通信时，服务端并不需要调用 listen 方法进行监听，而是直接接收来自客户端的数据，客户端也不需要调用 connect 来建立连接，直接通过 sendto 方法发送数据即可。</p>\n<p>UDP 与 TCP 最大的区别在于是否建立连接，也由此推导出 UDP 具有传输数据不可靠的特点。此外，UDP 和 TCP 的端口是互不冲突的，即它们可以同时使用同一个端口。</p>\n<h3 id=\"电子邮件\"><a class=\"anchor\" href=\"#电子邮件\">#</a> 电子邮件</h3>\n<h4 id=\"smtp-发送邮件\"><a class=\"anchor\" href=\"#smtp-发送邮件\">#</a> SMTP 发送邮件</h4>\n<p>SMTP 是发送邮件的协议，可以使用它来发送纯文本邮件、HTML 邮件以及带附件的邮件。Python 对 SMTP 支持有  <code>smtplib</code>  和  <code>email</code>  两个模块，email 负责构造邮件，smtplib 负责发送邮件。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> email <span class=\"token keyword\">import</span> encoders</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> email<span class=\"token punctuation\">.</span>header <span class=\"token keyword\">import</span> Header</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> email<span class=\"token punctuation\">.</span>mime<span class=\"token punctuation\">.</span>text <span class=\"token keyword\">import</span> MIMEText</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> email<span class=\"token punctuation\">.</span>utils <span class=\"token keyword\">import</span> parseaddr<span class=\"token punctuation\">,</span> formataddr</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> smtplib</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">_format_addr</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    name<span class=\"token punctuation\">,</span> addr <span class=\"token operator\">=</span> parseaddr<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> formataddr<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Header<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 输入 Email 地址和口令:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>from_addr <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'From: '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>password <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Password: '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 输入收件人地址:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>to_addr <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'To: '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 输入 SMTP 服务器地址:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>smtp_server <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SMTP server: '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>msg <span class=\"token operator\">=</span> MIMEText<span class=\"token punctuation\">(</span><span class=\"token string\">'君莫笑，我们蓝溪阁不是你的保姆！！！'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'plain'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>msg<span class=\"token punctuation\">[</span><span class=\"token string\">'From'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _format_addr<span class=\"token punctuation\">(</span><span class=\"token string\">'蓝溪阁 &lt;%s>'</span> <span class=\"token operator\">%</span> from_addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>msg<span class=\"token punctuation\">[</span><span class=\"token string\">'To'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _format_addr<span class=\"token punctuation\">(</span><span class=\"token string\">'叶修 &lt;%s>'</span> <span class=\"token operator\">%</span> to_addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>msg<span class=\"token punctuation\">[</span><span class=\"token string\">'Subject'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Header<span class=\"token punctuation\">(</span><span class=\"token string\">'来自蓝溪阁的声明'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>server <span class=\"token operator\">=</span> smtplib<span class=\"token punctuation\">.</span>SMTP<span class=\"token punctuation\">(</span>smtp_server<span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># SMTP 协议默认端口是 25</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>server<span class=\"token punctuation\">.</span>set_debuglevel<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 打印出和 SMTP 服务器交互的所有信息</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>server<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">(</span>from_addr<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 登录 SMTP 服务器</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>server<span class=\"token punctuation\">.</span>sendmail<span class=\"token punctuation\">(</span>from_addr<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>to_addr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span>as_string<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>server<span class=\"token punctuation\">.</span>quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>如果需要发送 html 内容，只需要传递 html 文本，并指定对应的类型参数即可：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>msg <span class=\"token operator\">=</span> MIMEText<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;html>&lt;body>&lt;h1>来自岚希阁某河的最新消息&lt;/h1>'</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token string\">'&lt;p>嘉世、霸图、蓝雨、蓝溪阁、薇草各大战队将在集结人马在&lt;a href=\"http://www.python.org\">这个地点&lt;/a>进行埋伏，野图BOSS是个陷进。&lt;/p>'</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token string\">'&lt;/body>&lt;/html>'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'html'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"pop3-收取邮件\"><a class=\"anchor\" href=\"#pop3-收取邮件\">#</a> POP3 收取邮件</h4>\n<p>收取邮件就是编写一个 MUA 作为客户端，从 MDA 把邮件获取到用户的电脑或者手机上。收取邮件最常用的协议是 POP 协议，目前版本号是 3，俗称 POP3。</p>\n<p>注意，POP3 协议收取的不是一个已经可以阅读的邮件本身，而是邮件的原始文本，还需要用 email 模块提供的各种类来解析原始文本，变成可阅读的邮件对象。</p>\n<p>通过 POP3 获取最新的一封邮件内容：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> poplib</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 输入邮件地址，口令和 POP3 服务器地址:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> email<span class=\"token punctuation\">.</span>header <span class=\"token keyword\">import</span> decode_header</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> email<span class=\"token punctuation\">.</span>parser <span class=\"token keyword\">import</span> Parser</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> email<span class=\"token punctuation\">.</span>utils <span class=\"token keyword\">import</span> parseaddr</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>email <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Email: '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>password <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Password: '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>pop3_server <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'POP3 server: '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 连接到 POP3 服务器:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>server <span class=\"token operator\">=</span> poplib<span class=\"token punctuation\">.</span>POP3<span class=\"token punctuation\">(</span>pop3_server<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 可以打开或关闭调试信息:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>server<span class=\"token punctuation\">.</span>set_debuglevel<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 可选：打印 POP3 服务器的欢迎文字:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">.</span>getwelcome<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 身份认证:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>server<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>server<span class=\"token punctuation\">.</span>pass_<span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># stat () 返回邮件数量和占用空间:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Messages: %s. Size: %s'</span> <span class=\"token operator\">%</span> server<span class=\"token punctuation\">.</span>stat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># list () 返回所有邮件的编号:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>resp<span class=\"token punctuation\">,</span> mails<span class=\"token punctuation\">,</span> octets <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># 可以查看返回的列表类似 [b'1 82923', b'2 2184', ...]</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>mails<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\"># 获取最新一封邮件，注意索引号从 1 开始:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>index <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>mails<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>resp<span class=\"token punctuation\">,</span> lines<span class=\"token punctuation\">,</span> octets <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span>retr<span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\"># lines 存储了邮件的原始文本的每一行，</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\"># 可以获得整个邮件的原始文本:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>msg_content <span class=\"token operator\">=</span> <span class=\"token string\">b'\\r\\n'</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\"># 稍后解析出邮件:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>msg <span class=\"token operator\">=</span> Parser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>parsestr<span class=\"token punctuation\">(</span>msg_content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># 解析邮件内容</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">decode_str</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    value<span class=\"token punctuation\">,</span> charset <span class=\"token operator\">=</span> decode_header<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">if</span> charset<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span>charset<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">return</span> value</pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">guess_charset</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    charset <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>get_charset<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">if</span> charset <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        content_type <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        pos <span class=\"token operator\">=</span> content_type<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'charset='</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">if</span> pos <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            charset <span class=\"token operator\">=</span> content_type<span class=\"token punctuation\">[</span>pos <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">return</span> charset</pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\"># indent 用于缩进显示:</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">print_info</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> indent<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">if</span> indent <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">for</span> header <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'From'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'To'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Subject'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            value <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token keyword\">if</span> value<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token keyword\">if</span> header<span class=\"token operator\">==</span><span class=\"token string\">'Subject'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                    value <span class=\"token operator\">=</span> decode_str<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                    hdr<span class=\"token punctuation\">,</span> addr <span class=\"token operator\">=</span> parseaddr<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                    name <span class=\"token operator\">=</span> decode_str<span class=\"token punctuation\">(</span>hdr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                    value <span class=\"token operator\">=</span> <span class=\"token string\">u'%s &lt;%s>'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%s%s: %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'  '</span> <span class=\"token operator\">*</span> indent<span class=\"token punctuation\">,</span> header<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>is_multipart<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        parts <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>get_payload<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">for</span> n<span class=\"token punctuation\">,</span> part <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>parts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%spart %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'  '</span> <span class=\"token operator\">*</span> indent<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%s--------------------'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'  '</span> <span class=\"token operator\">*</span> indent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            print_info<span class=\"token punctuation\">(</span>part<span class=\"token punctuation\">,</span> indent <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        content_type <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>get_content_type<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">if</span> content_type<span class=\"token operator\">==</span><span class=\"token string\">'text/plain'</span> <span class=\"token keyword\">or</span> content_type<span class=\"token operator\">==</span><span class=\"token string\">'text/html'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            content <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>get_payload<span class=\"token punctuation\">(</span>decode<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            charset <span class=\"token operator\">=</span> guess_charset<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token keyword\">if</span> charset<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                content <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span>charset<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%sText: %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'  '</span> <span class=\"token operator\">*</span> indent<span class=\"token punctuation\">,</span> content <span class=\"token operator\">+</span> <span class=\"token string\">'...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%sAttachment: %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'  '</span> <span class=\"token operator\">*</span> indent<span class=\"token punctuation\">,</span> content_type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>print_info<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token comment\"># 可以根据邮件索引号直接从服务器删除邮件:</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token comment\"># server.dele(index)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token comment\"># 关闭连接:</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>server<span class=\"token punctuation\">.</span>quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"数据库访问\"><a class=\"anchor\" href=\"#数据库访问\">#</a> 数据库访问</h3>\n<blockquote>\n<p>注意，相关的数据库环境，需要自行安装。</p>\n</blockquote>\n<h4 id=\"使用sqlite\"><a class=\"anchor\" href=\"#使用sqlite\">#</a> 使用 SQLite</h4>\n<p>SQLite 是一种嵌入式数据库，它的数据库就是一个文件。由于 SQLite 本身是 C 语言开发的，而且体积很小，所以，经常被集成到各种应用程序中，甚至在 iOS 和 Android 应用中都可以集成。在 Python 中也内置了 SQLite3，可以直接使用。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> sqlite3</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 1. 创建连接（数据库文件是 test.db，如果文件不存在，会自动在当前目录创建）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>conn <span class=\"token operator\">=</span> sqlite3<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token string\">'test.db'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 2. 创建一个游标 Cursor</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cursor <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>cursor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 3. 执行 SQL 语句（创建 user 表并添加数据）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cursor<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span><span class=\"token string\">'create table user (id varchar(20) primary key, name varchar(20))'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>cursor<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span><span class=\"token string\">'insert into user (id, name) values (\\'1\\', \\'Michael\\')'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>cursor<span class=\"token punctuation\">.</span>rowcount<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 在执行增删改操作时，通过 rowcount 返回影响的行数，可用于判断执行是否符合预期</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 4. 关闭游标 Cursor</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>cursor<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 5. 提交事务</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>conn<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 6. 关闭连接</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>conn<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>查询数据与添加数据大同小异：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> sqlite3</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>conn <span class=\"token operator\">=</span> sqlite3<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token string\">'test.db'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cursor <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>cursor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cursor<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span><span class=\"token string\">'select * from user where id=?'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>values <span class=\"token operator\">=</span> cursor<span class=\"token punctuation\">.</span>fetchall<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 通过 fetchall 获取到 list 类型的结果集，其内的每个元素都是一个 tuple，对应一行记录</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cursor<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>conn<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>conn<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [('1', 'Michael')]</span></pre></td></tr></table></figure><p>如果需要执行的 sql 语句中含有参数，则需要传入 tuple 类型的参数，并与 sql 语句中的  <code>?</code>  占位符进行匹配，从而构造完整的 sql 语句。如需了解更多更细致的 SQLite 知识，请另行学习。</p>\n<h4 id=\"使用mysql\"><a class=\"anchor\" href=\"#使用mysql\">#</a> 使用 MySQL</h4>\n<p>SQLite 的特点是轻量级、可嵌入，但不能承受高并发访问，适合桌面和移动应用。而 MySQL 是为服务器端设计的数据库，能承受高并发访问，同时占用的内存也远远大于 SQLite。</p>\n<p>MySQL 安装，自行百度。</p>\n<p>由于 MySQL 服务器以独立的进程运行，并通过网络对外服务，所以，需要支持 Python 的 MySQL 驱动来连接到 MySQL 服务器。使用如下命令安装驱动：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ pip <span class=\"token function\">install</span> mysql-connector-python --allow-external mysql-connector-python</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ pip <span class=\"token function\">install</span> mysql-connector <span class=\"token comment\"># 备选驱动</span></pre></td></tr></table></figure><p>MySQL 连接示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> mysql<span class=\"token punctuation\">.</span>connector</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 创建 MySQL 表并添加数据记录</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>conn <span class=\"token operator\">=</span> mysql<span class=\"token punctuation\">.</span>connector<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>user<span class=\"token operator\">=</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">,</span> database<span class=\"token operator\">=</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cursor <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>cursor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cursor<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span><span class=\"token string\">'create table user (id varchar(20) primary key, name varchar(20))'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 注意 MySQL 的占位符是 % s</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cursor<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span><span class=\"token string\">'insert into user (id, name) values (%s, %s)'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Michael'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>cursor<span class=\"token punctuation\">.</span>rowcount<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>conn<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 事务必须提交才能生效</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>cursor<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 查询数据</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>cursor <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>cursor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>cursor<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span><span class=\"token string\">'select * from user where id = %s'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>values <span class=\"token operator\">=</span> cursor<span class=\"token punctuation\">.</span>fetchall<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>cursor<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>conn<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>由于 Python 的  <code>DB-API</code>  定义都是通用的，所以，操作 MySQL 的数据库代码和 SQLite 类似。</p>\n</blockquote>\n<h4 id=\"使用sqlalchemy\"><a class=\"anchor\" href=\"#使用sqlalchemy\">#</a> 使用 SQLAlchemy</h4>\n<p><code>SQLAlchemy</code>  是 Python 中一个通过 ORM 操作数据库的框架。</p>\n<p>SQLAlchemy 对象关系映射器提供了一种方法，用于将用户定义的 Python 类与数据库表相关联，并将这些类（对象）的实例与其对应表中的行相关联。它包括一个透明地同步对象及其相关行之间状态的所有变化的系统，称为工作单元，以及根据用户定义的类及其定义的彼此之间的关系表达数据库查询的系统。它可以让我们使用类和对象的方式操作数据库，从而从繁琐的 sql 语句中解脱出来。</p>\n<p>安装 SQLAlchemy：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ pip <span class=\"token function\">install</span> sqlalchemy</pre></td></tr></table></figure><p>SQLAlchemy 操作数据库示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sqlalchemy <span class=\"token keyword\">import</span> Column<span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">,</span> create_engine<span class=\"token punctuation\">,</span> ForeignKey</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> sqlalchemy<span class=\"token punctuation\">.</span>orm <span class=\"token keyword\">import</span> sessionmaker<span class=\"token punctuation\">,</span> relationship</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> sqlalchemy<span class=\"token punctuation\">.</span>ext<span class=\"token punctuation\">.</span>declarative <span class=\"token keyword\">import</span> declarative_base</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 创建对象的基类:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Base <span class=\"token operator\">=</span> declarative_base<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 定义 User 对象:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>Base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\"># 表的名字:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    __tablename__ <span class=\"token operator\">=</span> <span class=\"token string\">'user'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\"># 表的结构:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> Column<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> primary_key<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    name <span class=\"token operator\">=</span> Column<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 一对多:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    books <span class=\"token operator\">=</span> relationship<span class=\"token punctuation\">(</span><span class=\"token string\">'Book'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span>Base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    __tablename__ <span class=\"token operator\">=</span> <span class=\"token string\">'book'</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> Column<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> primary_key<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    name <span class=\"token operator\">=</span> Column<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\"># “多” 的一方的 book 表是通过外键关联到 user 表的:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    user_id <span class=\"token operator\">=</span> Column<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ForeignKey<span class=\"token punctuation\">(</span><span class=\"token string\">'user.id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># 初始化数据库连接:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>engine <span class=\"token operator\">=</span> create_engine<span class=\"token punctuation\">(</span><span class=\"token string\">'mysql+mysqlconnector://root:password@localhost:3306/test'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\"># 创建 DBSession 类型:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>DBSession <span class=\"token operator\">=</span> sessionmaker<span class=\"token punctuation\">(</span>bind<span class=\"token operator\">=</span>engine<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># ------- 新增数据 -------</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\"># 创建 session 对象:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>session <span class=\"token operator\">=</span> DBSession<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\"># 创建新 User 对象:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>new_user <span class=\"token operator\">=</span> User<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token string\">'5'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\"># 添加到 session:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>session<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>new_user<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\"># 提交即保存到数据库:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>session<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># 关闭 session:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>session<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\"># ------- 查询数据 -------</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\"># 创建 Session:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>session <span class=\"token operator\">=</span> DBSession<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\"># 创建 Query 查询，filter 是 where 条件，最后调用 one () 返回唯一行，如果调用 all () 则返回所有行:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>user <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token operator\">==</span><span class=\"token string\">'5'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>one<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\"># 打印类型和对象的 name 属性:</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'type:'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name:'</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'books:'</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>books<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\"># 关闭 Session:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>session<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"web-开发\"><a class=\"anchor\" href=\"#web-开发\">#</a> Web 开发</h3>\n<h4 id=\"http-协议简介\"><a class=\"anchor\" href=\"#http-协议简介\">#</a> HTTP 协议简介</h4>\n<p>略。</p>\n<h4 id=\"html-简介\"><a class=\"anchor\" href=\"#html-简介\">#</a> HTML 简介</h4>\n<p>略。</p>\n<h4 id=\"wsgi-接口\"><a class=\"anchor\" href=\"#wsgi-接口\">#</a> WSGI 接口</h4>\n<p>WSGI：Web Server Gateway Interface。</p>\n<p>创建脚本文件 <span class=\"exturl\" data-url=\"aHR0cDovL2FwcGxpY2F0aW9uLnB5\">application.py</span>：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># application 函数需要由 WSGI 来调用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span>environ<span class=\"token punctuation\">,</span> start_response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    start_response<span class=\"token punctuation\">(</span><span class=\"token string\">'200 OK'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'text/html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Header 只能发送一次</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    body <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;h1>Hello, %s!&lt;/h1>'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>environ<span class=\"token punctuation\">[</span><span class=\"token string\">'PATH_INFO'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">or</span> <span class=\"token string\">'web'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>body<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>在同级目录下创建 <span class=\"exturl\" data-url=\"aHR0cDovL3NlcnZlci5weQ==\">server.py</span>：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 使用 Python 内置的 WSGI 服务器（不推荐，仅供开发测试时使用）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> wsgiref<span class=\"token punctuation\">.</span>simple_server <span class=\"token keyword\">import</span> make_server</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> application <span class=\"token keyword\">import</span> start</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 创建一个服务器，IP 地址为空，端口是 8000，处理函数是 application:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>httpd <span class=\"token operator\">=</span> make_server<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8000</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Serving HTTP on port 8000...'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 开始监听 HTTP 请求:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>httpd<span class=\"token punctuation\">.</span>serve_forever<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>启动 <span class=\"exturl\" data-url=\"aHR0cDovL3NlcnZlci5weQ==\">server.py</span> 并在浏览器访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDAw\">http://localhost:8000</span> ，可以正常访问，说明 web 服务启动成功。</p>\n<p>HTTP 请求的所有输入信息都可以通过  <code>environ</code>  获得，HTTP 响应的输出都可以通过  <code>start_response()</code>  加上函数返回值作为 Body。</p>\n<h4 id=\"使用-web-框架\"><a class=\"anchor\" href=\"#使用-web-框架\">#</a> 使用 Web 框架</h4>\n<p>Python 的 web 框架较多，最为主流的主要有以下几款：</p>\n<ol>\n<li>Flask</li>\n<li>Django</li>\n<li>Tornado</li>\n<li>Twisted</li>\n</ol>\n<p>知乎上有话题讨论这些框架：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIwNzA2MzMz\">https://www.zhihu.com/question/20706333</span></p>\n<blockquote>\n<p>这里演示如何使用 flask 框架来提供服务，其他框架的使用方法类似。</p>\n</blockquote>\n<p>安装：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ pip <span class=\"token function\">install</span> flask</pre></td></tr></table></figure><p>使用示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> request</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>app <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'&lt;h1>Home&lt;/h1>&lt;div>&lt;a href=\"/signin\">to login&lt;/a>&lt;/div>'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/signin'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">signin_form</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token triple-quoted-string string\">'''&lt;form action=\"/signin\" method=\"post\"></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>              &lt;p>&lt;input name=\"username\">&lt;/p></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>              &lt;p>&lt;input name=\"password\" type=\"password\">&lt;/p></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>              &lt;p>&lt;button type=\"submit\">Sign In&lt;/button>&lt;/p></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>              &lt;/form>'''</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/signin'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">signin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\"># 需要从 request 对象读取表单内容：</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'admin'</span> <span class=\"token keyword\">and</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'password'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">'&lt;h3>Hello, admin!&lt;/h3>'</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'&lt;h3>Bad username or password.&lt;/h3>&lt;br>&lt;p>redirect to &lt;a href=\"/signin\">login page&lt;/a>&lt;/p>'</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"使用模板\"><a class=\"anchor\" href=\"#使用模板\">#</a> 使用模板</h4>\n<p>在 web 开发中，MVC 是一种最常见的设计思想，Python 也同样支持 MVC 的设计模式。</p>\n<p>新建 <span class=\"exturl\" data-url=\"aHR0cDovL2FwcC5weQ==\">app.py</span>：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> render_template</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>app <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'home.html'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/signin'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">signin_form</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'form.html'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/signin'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">signin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    username <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    password <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span> username<span class=\"token operator\">==</span><span class=\"token string\">'admin'</span> <span class=\"token keyword\">and</span> password<span class=\"token operator\">==</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'signin-ok.html'</span><span class=\"token punctuation\">,</span> username<span class=\"token operator\">=</span>username<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'form.html'</span><span class=\"token punctuation\">,</span> message<span class=\"token operator\">=</span><span class=\"token string\">'Bad username or password'</span><span class=\"token punctuation\">,</span> username<span class=\"token operator\">=</span>username<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在 <span class=\"exturl\" data-url=\"aHR0cDovL2FwcC5weQ==\">app.py</span> 同级目录下创建文件夹 templates，并在其中添加 html 文件：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- form.html --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Please Sign In<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\"></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/signin<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>legend</span><span class=\"token punctuation\">></span></span>Please sign in:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>legend</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Sign In<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">&lt;!-- home.html --></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Home<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">font-style</span><span class=\"token punctuation\">:</span>italic</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>Home<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">&lt;!-- signin-ok.html --></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Welcome, <span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Welcome, <span class=\"token comment\"></span>!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>Flask 框架默认使用  <code>jinja2</code>  作为视图渲染模板。它使用  <code>&#123;&#123; name &#125;&#125;</code>  进行占位，表示一个需要替换的变量，如果需要使用循环、条件判断等指令语句，在 Jinja2 中则是使用  <code>&#123;% ... %&#125;</code>  进行表示。</p>\n<p>不同 web 框架指定使用的渲染模板各不相同，但它们基本上都是通过占位符进行匹配替换实现的模板动态生成，在原理上大同小异。</p>\n</blockquote>\n<h3 id=\"异步io\"><a class=\"anchor\" href=\"#异步io\">#</a> 异步 IO</h3>\n<p>关于 IO 的理论叙述，我已经在文章 <a href=\"/computer-science/java-learning-path/1-basic/01-java-basic/\">Java 基础知识大盘点</a>的 IO 章节有过详细的整理，尽管语言不同，但是基本原理和概念是完全一致的。</p>\n<h4 id=\"协程\"><a class=\"anchor\" href=\"#协程\">#</a> 协程</h4>\n<p>协程（Coroutine），又称微线程，纤程。</p>\n<p>协程其实就是一个子程序，但与普通子程序不同，协程在执行过程中，其子程序内部是可以中断的，让出执行权，等到适当的时候再继续执行。</p>\n<p>协程是单个线程执行，并非多线程，它的优势在于执行效率高，因为它是通过同一线程内部的多个子程序之间进行切换实现异步的，不会产生额外的线程开销。另外，协程由于只是单个线程，所以并不需要引入锁机制来写操作冲突。</p>\n<p>为了充分发挥协程的执行效率，通常会将协程和多进程结合使用，以便能够利用多核 CPU。</p>\n<p>协程示例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">consumer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    r <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        n <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> r</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> n<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[CONSUMER] Consuming %s...'</span> <span class=\"token operator\">%</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        r <span class=\"token operator\">=</span> <span class=\"token string\">'200 OK'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">produce</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    c<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 1. 在一个生成器函数未启动之前，是不能传递值进去的，需要执行 c.send (None) 或 next (c) 来返回生成器的第一个值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    n <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">while</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        n <span class=\"token operator\">=</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[PRODUCER] Producing %s...'</span> <span class=\"token operator\">%</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        r <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 启动生成器，并传入参数，接着 yield 语句继续执行</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[PRODUCER] Consumer return: %s'</span> <span class=\"token operator\">%</span> r<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    c<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 结束生成器的生命周期</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>c <span class=\"token operator\">=</span> consumer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>produce<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这一段代码的执行顺序大致如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 伪代码：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>produce<span class=\"token punctuation\">(</span>consumer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 1. 将 consumer 函数作为参数传递给 produce 函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>c<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2. 初始化生成器函数，进入 consumer 函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>r <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 进入 while True 循环</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>n <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> r  <span class=\"token comment\"># 3. 此时 r 为空，n 未定义，跳出 consumer 函数，并标记当前跳出点（假设为 A 点），继续执行 c.send (None) 后续代码</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>n <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 进入 while n &lt; 5 循环（第一轮循环）</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>n <span class=\"token operator\">=</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[PRODUCER] Producing %s...'</span> <span class=\"token operator\">%</span> n<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 此时 n=1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>r <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 4. 再次进入生成器，查找上次标记的点 A，并从点 A 开始继续执行代码（此时 n=1）</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 判断 if not n</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[CONSUMER] Consuming %s...'</span> <span class=\"token operator\">%</span> n<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 此时 n=1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>r <span class=\"token operator\">=</span> <span class=\"token string\">'200 OK'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>n <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> r  <span class=\"token comment\"># 5. 此时 r='200 OK'，n=1，跳出 consumer 函数，并标记当前跳出点（假设为 B 点），继续执行 c.send (n) 后续代码</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[PRODUCER] Consumer return: %s'</span> <span class=\"token operator\">%</span> r<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 此时 r='200 OK'</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 进入第二轮循环</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>n <span class=\"token operator\">=</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[PRODUCER] Producing %s...'</span> <span class=\"token operator\">%</span> n<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 此时 n=2</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>r <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 6. 再次进入生成器，查找上次标记的点 B，并从点 B 开始继续执行代码（此时 n=2）</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># 判断 if not n</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[CONSUMER] Consuming %s...'</span> <span class=\"token operator\">%</span> n<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 此时 n=2</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># ...</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># ...（按照这样的步骤循环，直到 while n &lt; 5 条件不满足）</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>c<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 结束生成器的生命周期</span></pre></td></tr></table></figure><h4 id=\"asyncio\"><a class=\"anchor\" href=\"#asyncio\">#</a> asyncio</h4>\n<p><code>asyncio</code>  的编程模型就是一个消息循环。从 asyncio 模块中直接获取一个  <code>EventLoop</code>  的引用，然后把需要执行的协程扔到 EventLoop 中执行，就实现了异步 IO。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> asyncio</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello! (%s)'</span> <span class=\"token operator\">%</span> threading<span class=\"token punctuation\">.</span>currentThread<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    r <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> asyncio<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 异步调用 asyncio.sleep (1)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bye-bye! (%s)'</span> <span class=\"token operator\">%</span> threading<span class=\"token punctuation\">.</span>currentThread<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 获取 EventLoop:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>loop <span class=\"token operator\">=</span> asyncio<span class=\"token punctuation\">.</span>get_event_loop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>tasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>hello<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> hello<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 执行 coroutine</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>loop<span class=\"token punctuation\">.</span>run_until_complete<span class=\"token punctuation\">(</span>asyncio<span class=\"token punctuation\">.</span>wait<span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>loop<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>对于这种异步操作，在  <code>3.8</code>  之前的 Python 旧版本中，其书写方式略有不同：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> asyncio</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token decorator annotation punctuation\">@asyncio<span class=\"token punctuation\">.</span>coroutine</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello! (%s)'</span> <span class=\"token operator\">%</span> threading<span class=\"token punctuation\">.</span>currentThread<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">yield</span> <span class=\"token keyword\">from</span> asyncio<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 异步调用 asyncio.sleep (1)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bye-bye! (%s)'</span> <span class=\"token operator\">%</span> threading<span class=\"token punctuation\">.</span>currentThread<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>loop <span class=\"token operator\">=</span> asyncio<span class=\"token punctuation\">.</span>get_event_loop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>tasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>hello<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> hello<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>loop<span class=\"token punctuation\">.</span>run_until_complete<span class=\"token punctuation\">(</span>asyncio<span class=\"token punctuation\">.</span>wait<span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>loop<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>使用这种方式，我们可以进行很多异步 IO，例如网络资源的访问操作：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> asyncio</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">wget</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wget %s...'</span> <span class=\"token operator\">%</span> host<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    connect <span class=\"token operator\">=</span> asyncio<span class=\"token punctuation\">.</span>open_connection<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    reader<span class=\"token punctuation\">,</span> writer <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> connect</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    header <span class=\"token operator\">=</span> <span class=\"token string\">'GET / HTTP/1.0\\r\\nHost: %s\\r\\n\\r\\n'</span> <span class=\"token operator\">%</span> host</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    writer<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">await</span> writer<span class=\"token punctuation\">.</span>drain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        line <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> reader<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> line <span class=\"token operator\">==</span> <span class=\"token string\">b'\\r\\n'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%s header > %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rstrip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\"># Ignore the body, close the socket</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    writer<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>loop <span class=\"token operator\">=</span> asyncio<span class=\"token punctuation\">.</span>get_event_loop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>tasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>wget<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> host <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'www.sina.com.cn'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'www.sohu.com'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'www.163.com'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>loop<span class=\"token punctuation\">.</span>run_until_complete<span class=\"token punctuation\">(</span>asyncio<span class=\"token punctuation\">.</span>wait<span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>loop<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>由示例可见，通过异步 IO，我们可以实现一个线程通过 coroutine 来并发完成多个任务。</p>\n<p>如果将 asyncio 用在服务器端，例如 Web 服务器，由于 HTTP 连接就是 IO 操作，因此可以用 单线程 +  <code>coroutine</code>  实现多用户的高并发支持。</p>\n<blockquote>\n<p>相关扩展内容：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWFscHl0aG9uLmNvbS9hc3luYy1pby1weXRob24=\">https://realpython.com/async-io-python</span></p>\n</blockquote>\n<h4 id=\"aiohttp\"><a class=\"anchor\" href=\"#aiohttp\">#</a> aiohttp</h4>\n<p>asyncio 实现了 TCP、UDP、SSL 等协议，aiohttp 则是基于 asyncio 实现的 HTTP 框架。</p>\n<p>安装 aiohttp ：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ pip <span class=\"token function\">install</span> aiohttp</pre></td></tr></table></figure><p>异步创建 TCP 服务：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> asyncio</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> aiohttp <span class=\"token keyword\">import</span> web</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">await</span> asyncio<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> web<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">(</span>body<span class=\"token operator\">=</span><span class=\"token string\">b'&lt;h1>Index&lt;/h1>'</span><span class=\"token punctuation\">,</span> content_type<span class=\"token operator\">=</span><span class=\"token string\">'text/html'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">await</span> asyncio<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    text <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;h1>hello, %s!&lt;/h1>'</span> <span class=\"token operator\">%</span> request<span class=\"token punctuation\">.</span>match_info<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> web<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">(</span>body<span class=\"token operator\">=</span>text<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> content_type<span class=\"token operator\">=</span><span class=\"token string\">'text/html'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    app <span class=\"token operator\">=</span> web<span class=\"token punctuation\">.</span>Application<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span>add_get<span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span>add_get<span class=\"token punctuation\">(</span><span class=\"token string\">'/hello/&#123;name&#125;'</span><span class=\"token punctuation\">,</span> hello<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    runner <span class=\"token operator\">=</span> web<span class=\"token punctuation\">.</span>AppRunner<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">await</span> runner<span class=\"token punctuation\">.</span>setup<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    site <span class=\"token operator\">=</span> web<span class=\"token punctuation\">.</span>TCPSite<span class=\"token punctuation\">(</span>runner<span class=\"token punctuation\">,</span> <span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">await</span> site<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Server started at http://127.0.0.1:8000...'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> site</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>loop <span class=\"token operator\">=</span> asyncio<span class=\"token punctuation\">.</span>get_event_loop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>loop<span class=\"token punctuation\">.</span>run_until_complete<span class=\"token punctuation\">(</span>init<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>loop<span class=\"token punctuation\">.</span>run_forever<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"项目实践\"><a class=\"anchor\" href=\"#项目实践\">#</a> 项目实践</h3>\n<h4 id=\"参考学习项目\"><a class=\"anchor\" href=\"#参考学习项目\">#</a> 参考学习项目</h4>\n<blockquote>\n<p>由于个人能力所限，这里的项目实战主要着重介绍 Python Web 相关项目，如后续有其他 Python 方向，将记录在单独的文章中。</p>\n</blockquote>\n<p>由于手动编写项目实战篇幅较大，而且也费时很长，这里提供几个开源项目进行学习，看懂这些代码，并且能够根据自身需要，对这些代码进行符合自己业务需求的修改，如果你仔细梳理过这些开源项目，相信你对于常规的 Python 项目开发，都能够得心应手。</p>\n<table>\n<thead>\n<tr>\n<th>项目名</th>\n<th>官网</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Django-Vue-Admin</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kamFuZ28tdnVlLWFkbWluLmNvbQ==\">https://django-vue-admin.com</span></td>\n<td>WEB 应用，基于 RuoYi</td>\n</tr>\n<tr>\n<td>Simple UI</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaW1wbGV1aS43MndvLmNvbS9zaW1wbGV1aQ==\">https://simpleui.72wo.com/simpleui</span></td>\n<td>WEB 应用，博客系统</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"自主开发项目\"><a class=\"anchor\" href=\"#自主开发项目\">#</a> 自主开发项目</h4>\n<p>学习完上面的基础知识，尝试用已掌握的知识开发一个自己的项目吧！</p>\n<p><span class=\"label danger\">❗️TODO</span> 待完善</p>\n<h3 id=\"文末总结\"><a class=\"anchor\" href=\"#文末总结\">#</a> 文末总结</h3>\n<div class=\"note info\">\n<p>跟着廖雪峰的官网教程过了一遍，除去实战部分，大约用了一个月的时间，总体来说感觉难度不是太大，大概是因为有三四年的 Java 开发经验垫底的缘故吧，一些知识上手感觉还是挺快的。但也有些部分是随意跳过了的，对于这些，我都是一旦梳理清了逻辑，就照搬了廖雪峰官网的代码作为记录。但以我自己的经验来看，这应该不是什么大问题，重要在于结合实际项目，零星的知识点太过于孤立，而且当接触了多种开发语言后，单独理解某一两个独立的知识点也是容易引起混淆的。最有效的方法还是学习了这些基础知识后，完完整整地应用到实际的项目中，这不仅可以帮助加深印象，也可以将各个知识点贯穿进行理解。而且在实际项目中，很多问题才会更加直观地呈现出来。</p>\n</div>\n<h3 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h3>\n<ul>\n<li>独立博客：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvMTAxNjk1OTY2MzYwMjQwMA==\">廖雪峰的官方网站</span></li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "Python入门教程",
                "python"
            ]
        },
        {
            "id": "https://www.chinmoku.cc/computer-science/java-learning-path/2-intermediate/webservice-tutorial/",
            "url": "https://www.chinmoku.cc/computer-science/java-learning-path/2-intermediate/webservice-tutorial/",
            "title": "WebService，如此而已",
            "date_published": "2021-08-28T02:38:51.000Z",
            "content_html": "<div class=\"note info\">\n<p>在我的开发生活中，其实使用到 WebService 的机会很少，毕竟现在流行 RESTful，JSON 替代 XML，RESTful 替代 WebService，这是很正常的现象，毕竟 XML 和 WebService 都太过于笨重，传输和处理效率低，但考虑到在某些复杂或特殊的业务场景中，WebService 仍旧有所应用，因此在这里整理了一下相关的知识内容，以便业务需要时能够快速回顾并应用。</p>\n</div>\n<h3 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h3>\n<h4 id=\"webservice-是什么\"><a class=\"anchor\" href=\"#webservice-是什么\">#</a> WebService 是什么</h4>\n<p><code>WebService</code>  是一种跨编程语言和跨操作系统平台的远程调用技术。</p>\n<ul>\n<li>WebService 是一个平台独立的，低耦合的，自包含的、基于可编程的 web 的应用程序，可使用开放的 XML （标准通用标记语言下的一个子集）标准来描述、发布、发现、协调和配置这些应用程序，用于开发分布式的互操作的应用程序。</li>\n<li>WebService 技术， 能使得运行在不同机器上的不同应用无须借助附加的、专门的第三方软件或硬件， 就可相互交换数据或集成。依据 WebService 规范实施的应用之间， 无论它们所使用的语言、 平台或内部协议是什么， 都可以相互交换数据。 WebService 是自描述、 自包含的可用网络模块， 可以执行具体的业务功能。Web Service 也很容易部署， 因为它们基于一些常规的产业标准以及已有的一些技术，诸如标准通用标记语言下的子集 XML 、 HTTP 。 WebService 减少了应用接口的花费。 WebService 为整个企业甚至多个组织之间的业务流程的集成提供了一个通用机制。</li>\n</ul>\n<h4 id=\"webservice-能做什么\"><a class=\"anchor\" href=\"#webservice-能做什么\">#</a> WebService 能做什么</h4>\n<ul>\n<li>不同系统、不同平台、不同语言之间的通信访问和远程调用。</li>\n<li>应用程序的集成，不同业务的整合。</li>\n</ul>\n<h4 id=\"官方定义\"><a class=\"anchor\" href=\"#官方定义\">#</a> 官方定义</h4>\n<ul>\n<li>Web 服务是一种服务导向架构的技术，通过标准的 Web 协议提供服务，目的是保证不同平台的应用服务可以互操作。</li>\n<li>表面上看 WebService 就是一个应用程序，它向外界暴露出一个能够通过 Web 进行调用的方法 API ，能用编程的方法通过 Web 调用来实现某个功能的应用程序。</li>\n<li>深层次上看 WebService 是一种新的 Web 应用程序分支，它们是自包含、自描述模块化的应用，可以在网络中被描述、发布、查找以及通过 Web 来调用。</li>\n</ul>\n<h4 id=\"webservice-的两种类型\"><a class=\"anchor\" href=\"#webservice-的两种类型\">#</a> WebService 的两种类型</h4>\n<ul>\n<li>SOAP 协议风格的 Webservice</li>\n<li>Restful 协议风格的 Webservice</li>\n</ul>\n<h4 id=\"webservice-结构图\"><a class=\"anchor\" href=\"#webservice-结构图\">#</a> WebService 结构图</h4>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/4e5893861abeda88598d10785a2d675f1629099543.png\" alt=\"WebService 结构图\" width=\"500px\" /></p>\n<h4 id=\"webservice-核心组件\"><a class=\"anchor\" href=\"#webservice-核心组件\">#</a> WebService 核心组件</h4>\n<ul>\n<li>XML 和 HTTP</li>\n<li>SOAP： 简单对象访问协议</li>\n<li>WSDL：WebService 描述语言</li>\n<li>UDDI：统一描述、发现和集成协议</li>\n</ul>\n<p><strong>SOAP</strong></p>\n<p>WebService 建好以后，你或者其他人就会去调用它。简单对象访问协议（SOAP）提供了标准的 RPC 方法来调用 WebService 。 SOAP 规范定义了 SOAP 消息的格式，以及怎样通过 HTTP 协议来使用 SOAP 。 SOAP 也是基于 XML（标准通用标记语言下的一个子集）和 XSD 的， XML 是 SOAP 的数据编码方式。</p>\n<p><strong>WSDL</strong></p>\n<p>WebService 描述语言 (WSDL) 是一个基于 XML（标准通用标记语言下的一个子集）的语言，用于描述 WebService 及其函数、参数和返回值。WSDL 是机器可阅读的，也是人可阅读的，一些最新的开发工具既能根据你的 WebService 生成 WSDL 文档，又能导入 WSDL 文档，生成调用相应 WebService 的代码。</p>\n<p><strong>UDDI</strong></p>\n<blockquote>\n<p>UDDI 是统一描述、发现和集成（Universal Description, Discovery, and Integration）的缩写。</p>\n<p>UDDI 是一种目录服务，通过它，企业可注册并搜索 WebServices。</p>\n<p>它是一个基于 XML 的跨平台的描述规范，可以使世界范围内的企业在互联网上发布自己所提供的服务。</p>\n<ul>\n<li>UDDI 指通用的描述、发现以及整合。</li>\n<li>UDDI 是一种用于存储有关 web services 的信息的目录。</li>\n<li>UDDI 是一种由 WSDL 描述的网络服务接口目录。</li>\n<li>UDDI 经由 SOAP 进行通迅。</li>\n<li>UDDI 被构建于 Microsoft .NET 平台之中。</li>\n</ul>\n</blockquote>\n<h3 id=\"webservice-主流框架\"><a class=\"anchor\" href=\"#webservice-主流框架\">#</a> WebService 主流框架</h3>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/558aebcc997a48fb3675db962ffb511a1629099658.png\" alt=\"WebService 主流框架\" width=\"500px\" /></p>\n<h4 id=\"axis\"><a class=\"anchor\" href=\"#axis\">#</a> AXIS</h4>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS94ZmlyZQ==\">axis（阿帕奇可扩展交互系统）_百度百科</span></p>\n<ul>\n<li>AXIS（Apache Extensible Interaction System）apache 可扩展交互系统</li>\n<li>AXIS 是一款开源的 WebService 运行引擎，本质上就是一个 SOAP 引擎，提供创建服务器端、客户端和网关 SOAP 操作的基本框架。</li>\n<li>但 AXIS 并不完全是一个 SOAP 引擎，它还是一个独立的 SOAP 服务器和一个嵌入 Servlet 引擎（例如 Tomcat）的服务器。</li>\n<li>AXIS 分为 1.x 系列和 2 系列，两个系列体系结构和使用上有较大的区别，相对而言，Axis1.x 更加稳定，文档也比较齐全。</li>\n<li>官网：<span class=\"exturl\" data-url=\"aHR0cDovL2F4aXMuYXBhY2hlLm9yZy8=\">http://axis.apache.org/</span></li>\n</ul>\n<h4 id=\"xfire\"><a class=\"anchor\" href=\"#xfire\">#</a> XFire</h4>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS94ZmlyZQ==\">xfire_百度百科</span></p>\n<blockquote>\n<p>XFire 是新一代的 Java Web 服务引擎，XFire 使得在 JavaEE 应用中发布 Web 服务变得轻而易举。和其他 Web 服务引擎相比，XFire 的配置非常简单，可以非常容易地和 Spring 集成，它使得 Java 开发人员终于可以获得和.Net 开发人员一样的开发效率。</p>\n<p>支持将 Web 服务绑定到 POJO、XMLBeans、JAXB1.1、JAXB2.0 和 Castor；</p>\n<p>支持基于 HTTP、JMS、XMPP 等多种协议访问 Web 服务；</p>\n<p>支持多种 Web 服务业界重要标准如 SOAP、WSDL、Web 服务寻址（WS-Addressing）、Web 服务安全（WS-Security）等；</p>\n<p>支持 JSR181，可以通过 JDK5 配置 Web 服务；</p>\n<p>高性能的 SOAP 实现；</p>\n<p>服务器端、客户端代码辅助生成；</p>\n<p>对 Spring、Pico、Plexus 等项目的支持等。</p>\n</blockquote>\n<ul>\n<li>官网：<span class=\"exturl\" data-url=\"aHR0cDovL3hmaXJlLmNvZGVoYXVzLm9yZy8=\">http://xfire.codehaus.org/</span></li>\n</ul>\n<h4 id=\"cxf\"><a class=\"anchor\" href=\"#cxf\">#</a> CXF</h4>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9DWEY=\">CXF_百度百科</span></p>\n<ul>\n<li>Apache CXF = Celtix + XFire</li>\n<li>CXF 继承了 Celtix 和 XFire 两大开源项目的精华，提供了对 JAX-WS 全面的支持，并且提供了多种 Binding 、DataBinding、Transport 以及各种 Format 的支持，并且可以根据实际项目的需要，采用代码优先（Code First）或者 WSDL 优先（WSDL First）来轻松地实现 Web Services 的发布和使用。</li>\n<li>官网：<span class=\"exturl\" data-url=\"aHR0cDovL2N4Zi5hcGFjaGUub3JnLw==\">http://cxf.apache.org/</span></li>\n</ul>\n<h3 id=\"案例\"><a class=\"anchor\" href=\"#案例\">#</a> 案例</h3>\n<h4 id=\"cxf-案例\"><a class=\"anchor\" href=\"#cxf-案例\">#</a> CXF 案例</h4>\n<ul>\n<li>\n<p>创建 maven 项目。</p>\n</li>\n<li>\n<p>添加依赖：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.apache.cxf/cxf-rt-frontend-jaxws --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.cxf<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>cxf-rt-frontend-jaxws<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.2.7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.apache.cxf/cxf-rt-transports-http-jetty --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.cxf<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>cxf-rt-transports-http-jetty<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.2.7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>创建实体对象</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>cxftest<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> description<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// getter and setter</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>创建 WebService 接口及实现</p>\n<p>HelloWorld.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>cxftest<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>jws<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebParam</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>jws<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebService</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@WebService</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@WebParam</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"text\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">sayHiToUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">SayHiToUserList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>HelloWorldImpl.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>cxftest<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LinkedHashMap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>jws<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebService</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@WebService</span><span class=\"token punctuation\">(</span>endpointInterface <span class=\"token operator\">=</span> <span class=\"token string\">\"com.xfc.cxftest.demo.HelloWorld\"</span><span class=\"token punctuation\">,</span> serviceName <span class=\"token operator\">=</span> <span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorldImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello \"</span> <span class=\"token operator\">+</span> text<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">sayHiToUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        users<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello \"</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">SayHiToUserList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span>userList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> u <span class=\"token operator\">:</span> userList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello \"</span> <span class=\"token operator\">+</span> u<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>创建服务端启动类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>cxftest<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>xml<span class=\"token punctuation\">.</span>ws<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Endpoint</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WebServiceApp</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"web service start\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">HelloWorldImpl</span> implementor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HelloWorldImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">String</span> address <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:8080/helloWorld\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Endpoint</span><span class=\"token punctuation\">.</span><span class=\"token function\">publish</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">,</span> implementor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"web service started\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>浏览器访问</p>\n<p>启动  <code>WebServiceApp.main()</code>  并在浏览器访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwL2hlbGxvV29ybGQ/d3NkbA==\">http://localhost:8080/helloWorld?wsdl</span> 查看是否显示 wsdl 。</p>\n</li>\n<li>\n<p>创建客户端启动类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>cxftest<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>cxf<span class=\"token punctuation\">.</span>jaxws<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JaxWsProxyFactoryBean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorldClient</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">JaxWsProxyFactoryBean</span> svr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JaxWsProxyFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        svr<span class=\"token punctuation\">.</span><span class=\"token function\">setServiceClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        svr<span class=\"token punctuation\">.</span><span class=\"token function\">setAddress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8080/helloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">HelloWorld</span> hw <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">)</span> svr<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tony\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setDescription</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>hw<span class=\"token punctuation\">.</span><span class=\"token function\">sayHiToUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>启动  <code>HelloWorldClient.main()</code>  并查看控制台打印信息。</p>\n</li>\n</ul>\n<h3 id=\"soap-协议-tcpipmoniter-监控\"><a class=\"anchor\" href=\"#soap-协议-tcpipmoniter-监控\">#</a> Soap 协议 + TCP/IPMoniter 监控</h3>\n<h4 id=\"soap-定义\"><a class=\"anchor\" href=\"#soap-定义\">#</a> SOAP 定义</h4>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclQUUlODAlRTUlOEQlOTUlRTUlQUYlQjklRTglQjElQTElRTglQUUlQkYlRTklOTclQUUlRTUlOEQlOEYlRTglQUUlQUU=\">简单对象访问协议_百度百科</span></p>\n<blockquote>\n<p>简单对象访问协议是交换数据的一种协议规范，是一种轻量的、简单的、基于 XML（标准通用标记语言下的一个子集）的协议，它被设计成在 WEB 上交换结构化的和固化的信息。</p>\n</blockquote>\n<h4 id=\"soap-协议组成\"><a class=\"anchor\" href=\"#soap-协议组成\">#</a> SOAP 协议组成</h4>\n<p>一条 SOAP 消息就是一个普通的 XML 文档，它包含下列元素：</p>\n<ul>\n<li>Envelope 元素，必有，可把此 XML 文档标识为一条 SOAP 消息。</li>\n<li>Header 元素，可选，包含头部信息。</li>\n<li>Body 元素，必有，包含所有的调用和响应信息。</li>\n<li>Fault 元素，可选，提供有关在处理此消息所发生错误的信息。</li>\n</ul>\n<p><strong>语法规则：</strong></p>\n<ul>\n<li>SOAP 消息必须用 XML 来编码</li>\n<li>SOAP 消息必须使用 SOAP Envelope 命名空间</li>\n<li>SOAP 消息必须使用 SOAP Encoding 命名空间</li>\n<li>SOAP 消息不能包含 DTD 引用</li>\n<li>SOAP 消息不能包含 XML 处理指令</li>\n</ul>\n<p><strong>SOAP 消息基本结构：</strong></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">soap:</span>Envelope</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>soap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/12/soap-envelope<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">soap:</span>encodingStyle</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/12/soap-encoding<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">soap:</span>Header</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 示例 --></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">soap:</span>Header</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">soap:</span>Body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 示例 --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">soap:</span>Fault</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">&lt;!-- 示例 --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">soap:</span>Fault</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">soap:</span>Body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">soap:</span>Envelope</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"wsdl-文件解析\"><a class=\"anchor\" href=\"#wsdl-文件解析\">#</a> WSDL 文件解析</h3>\n<h4 id=\"wsdl-报文结构\"><a class=\"anchor\" href=\"#wsdl-报文结构\">#</a> WSDL 报文结构</h4>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>definitions</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>types</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t  \t<span class=\"token comment\">&lt;!-- 定义 web service 使用的数据类型 --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>types</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>message</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 每个消息均由一个或多个部件组成。可以把它当做 java 中一个函数调用的参数。 --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>message</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>portType</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 它类似 Java 中的一个函数库（或一个模块、或一个类） --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>portType</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>binding</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 为每个端口定义消息格式和协议细节。 --></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>binding</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>definitions</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"wsdldefinitions\"><a class=\"anchor\" href=\"#wsdldefinitions\">#</a> wsdl:definitions</h4>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>definitions</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsd</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>wsdl</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.xmlsoap.org/wsdl/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>tns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://demo.cxftest.xfc.com/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>soap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.xmlsoap.org/wsdl/soap/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>ns1</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.xmlsoap.org/soap/http<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>HelloWorld<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">targetNamespace</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://demo.cxftest.xfc.com/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>definitions</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">标签</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">name</td>\n<td style=\"text-align:left\">我们 java 程序中服务接口的实现类，SEI 定义是：服务接口类 + Service 后缀，Service 自动追加</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">targetNamespace</td>\n<td style=\"text-align:left\">命名空间： 相当于 Java 里面的 package 它刚好是和我们 Java 定义中的包名相反</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">xmlns:tns</td>\n<td style=\"text-align:left\">相当于 Java 里面的 import， 包名反转</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"wsdltypes\"><a class=\"anchor\" href=\"#wsdltypes\">#</a> wsdl:types</h4>\n<p>用于定义在 java 服务接口中对应方法的输入参数及返回值类型。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>types</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>schema</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xs</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>tns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://demo.cxftest.xfc.com/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">elementFormDefault</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>unqualified<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">targetNamespace</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://demo.cxftest.xfc.com/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>element</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SayHiToUserList<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tns:SayHiToUserList<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>element</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SayHiToUserListResponse<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tns:SayHiToUserListResponse<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>element</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sayHi<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tns:sayHi<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>element</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sayHiResponse<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tns:sayHiResponse<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>element</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sayHiToUser<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tns:sayHiToUser<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>element</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sayHiToUserResponse<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tns:sayHiToUserResponse<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>complexType</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sayHiToUser<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>sequence</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>element</span> <span class=\"token attr-name\">minOccurs</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>arg0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tns:user<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">xs:</span>sequence</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">xs:</span>complexType</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>complexType</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>sequence</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>element</span> <span class=\"token attr-name\">minOccurs</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xs:string<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>element</span> <span class=\"token attr-name\">minOccurs</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xs:string<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">xs:</span>sequence</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">xs:</span>complexType</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">xs:</span>complexType</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sayHiToUserResponse<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">xs:</span>schema</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>types</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"wsdlmessage\"><a class=\"anchor\" href=\"#wsdlmessage\">#</a> wsdl:message</h4>\n<p>它述了 Web 服务生产者和消费者之间交换的数据。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>message</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sayHiToUser<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>part</span> <span class=\"token attr-name\">element</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tns:sayHiToUser<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>parameters<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>part</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>message</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>message</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sayHiToUserResponse<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>part</span> <span class=\"token attr-name\">element</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tns:sayHiToUserResponse<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>parameters<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>part</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>message</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li>\n<p>每个 Web 服务都有两条消息：输入和输出。</p>\n</li>\n<li>\n<p>输入描述 Web 服务的参数，输出描述 Web 服务的返回数据。</p>\n</li>\n<li>\n<p>每条消息包含零个或多个  <code>&lt;part&gt;</code>  参数，每个参数对应一个 Web 服务函数的参数。</p>\n</li>\n<li>\n<p>每个  <code>&lt;part&gt;</code>  参数与  <code>&lt;types&gt;</code>  容器元素中定义的具体类型相关联。</p>\n</li>\n</ul>\n<h4 id=\"wsdlporttype\"><a class=\"anchor\" href=\"#wsdlporttype\">#</a> wsdl:portType</h4>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>portType</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>HelloWorld<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>operation</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sayHiToUser<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>input</span> <span class=\"token attr-name\">message</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tns:sayHiToUser<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sayHiToUser<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>input</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>output</span> <span class=\"token attr-name\">message</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tns:sayHiToUserResponse<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sayHiToUserResponse<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>output</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>operation</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>portType</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>portType 相当于在 java 中定义的接口，operation 相当于在 java 接口中定义的方法。</p>\n<h4 id=\"wsdlbinding\"><a class=\"anchor\" href=\"#wsdlbinding\">#</a> wsdl:binding</h4>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>binding</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>HelloWorldSoapBinding<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tns:HelloWorld<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">soap:</span>binding</span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>document<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">transport</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.xmlsoap.org/soap/http<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>operation</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sayHiToUser<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">soap:</span>operation</span> <span class=\"token attr-name\">soapAction</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>document<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sayHiToUser<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">soap:</span>body</span> <span class=\"token attr-name\">use</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>literal<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>input</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>output</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sayHiToUserResponse<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">soap:</span>body</span> <span class=\"token attr-name\">use</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>literal<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>output</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>operation</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>binding</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>该元素提供了有关如何通过线路传输  <code>portType</code>  实际操作的具体细节。</p>\n<ul>\n<li>\n<p>绑定可以通过多种传输方式提供，包括 HTTP GET，HTTP POST 或 SOAP。</p>\n</li>\n<li>\n<p>绑定提供了有关用于传输  <code>portType</code>  操作的协议的具体信息。</p>\n</li>\n<li>\n<p>绑定提供服务所在的信息。</p>\n</li>\n<li>\n<p>对于 SOAP 协议，绑定是使用  <code>&lt;soap:binding&gt;</code>  ，表示传输是基于 HTTP 协议的 SOAP 消息。</p>\n</li>\n<li>\n<p>可以为单个  <code>portType</code>  指定多个绑定。</p>\n</li>\n</ul>\n<h4 id=\"wsdlservice\"><a class=\"anchor\" href=\"#wsdlservice\">#</a> wsdl:service</h4>\n<p>它负责将网络通信地址赋给一个具体的绑定。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>service</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>HelloWorld<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">wsdl:</span>port</span> <span class=\"token attr-name\">binding</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tns:HelloWorldSoapBinding<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>HelloWorldImplPort<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">soap:</span>address</span> <span class=\"token attr-name\">location</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://localhost:8080/helloWorld<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>port</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">wsdl:</span>service</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><code>port</code>  元素的绑定属性将服务的地址与 Web 服务中定义的绑定元素相关联。</p>\n<h3 id=\"jax-ws-工具\"><a class=\"anchor\" href=\"#jax-ws-工具\">#</a> JAX-WS 工具</h3>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9KQVgtV1M=\">JAX-WS_百度百科</span></p>\n<blockquote>\n<p>JAX-WS (Java API for XML Web Services) 规范是一组 XML web services 的 JAVA API，JAX-WS 允许开发者可以选择 RPC-oriented 或者 message-oriented 来实现自己的 web services。</p>\n</blockquote>\n<p>在上述项目中，我们已经用到 JAX-WS 工具，详见代码内容。</p>\n<h3 id=\"调用天气服务案例\"><a class=\"anchor\" href=\"#调用天气服务案例\">#</a> 调用天气服务案例</h3>\n<ol>\n<li>\n<p>浏览器访问天气接口</p>\n<p>访问：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy53ZWJ4bWwuY29tLmNuL1dlYlNlcnZpY2VzL1dlYXRoZXJXZWJTZXJ2aWNlLmFzbXg/d3NkbA==\">http://www.webxml.com.cn/WebServices/WeatherWebService.asmx?wsdl</span></p>\n</li>\n<li>\n<p>保存并修改 wsdl</p>\n<p>浏览器 CTRL+S 保存该接口的 xml 格式文件。</p>\n<p>使用编辑器打开该文件并全文替换  <code>&lt;s:element ref=&quot;s:schema&quot;/&gt; &lt;s:any /&gt;</code>  为  <code>&lt;s:any minOccurs=&quot;2&quot; maxOccurs=&quot;2&quot; /&gt;</code>  。</p>\n<p>替换完成后，将该文件另存为  <code>.wsdl</code>  格式的文件，例如  <code>WeatherWebService.wsdl</code>  ，推荐存放到项目 resources 目录下。</p>\n</li>\n<li>\n<p>生成代码</p>\n<p>在项目  <code>src &gt; main &gt; java</code>  目录下执行命令  <code>wsimport -s . E:\\idea-workspace\\test-weather\\src\\main\\resources\\WeatherWebService.wsdl</code>  ，如下图：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/10/6a203a0f0e9ef0e5c0bd15d4c298b6b31633529756.png\" alt=\"ws_weather_cmd\" /></p>\n<p>执行完成后，该项目 src &gt; main &gt; java 目录下即会生成天气接口相关文件。</p>\n</li>\n<li>\n<p>创建测试类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>testweather</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>com<span class=\"token punctuation\">.</span>webxml<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayOfString</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>com<span class=\"token punctuation\">.</span>webxml<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WeatherWebService</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>com<span class=\"token punctuation\">.</span>webxml<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WeatherWebServiceSoap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WebserviceTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 也可以使用 new WeatherWebService (url) 此方法可重新设置请求的地址 URL url=new URL (\"http://www.webxml.com.cn/WebServices/WeatherWebService.asmx?wsdl\")</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">WeatherWebService</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeatherWebService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">WeatherWebServiceSoap</span> weatherWebServiceSoap <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">getWeatherWebServiceSoap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//WeatherWebServiceSoap 为调用的实现类</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">ArrayOfString</span> strArray <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        strArray <span class=\"token operator\">=</span> weatherWebServiceSoap<span class=\"token punctuation\">.</span><span class=\"token function\">getWeatherbyCityName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成都\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>strArray<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>启动测试类并查看控制台。</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/10/7e597fe2f9529d092827f1b61cd5cb901633529781.png\" alt=\"ws_weather_result\" /></p>\n</li>\n</ol>\n<h3 id=\"restful-web-servicesjax-rs\"><a class=\"anchor\" href=\"#restful-web-servicesjax-rs\">#</a> RESTful Web Services（JAX-RS）</h3>\n<h4 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h4>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8yODdmODgzNmE5ZDQ=\">什么是 RESTful Web Services？</span></p>\n<blockquote>\n<p><strong>RESTful web services</strong> are built to work best on the Web. Representational State Transfer (REST) is an architectural style that specifies constraints, such as the uniform interface, that if applied to a web service induce desirable properties, such as performance, scalability, and modifiability, that enable services to work best on the Web. In the REST architectural style, data and functionality are considered resources and are accessed using <strong>Uniform Resource Identifiers (URIs)</strong>, typically links on the Web. The resources are acted upon by using a set of simple, well-defined operations. The REST architectural style constrains an architecture to a client/server architecture and is designed to use a stateless communication protocol, typically HTTP. In the REST architecture style, clients and servers exchange representations of resources by using a standardized interface and protocol.</p>\n<p>Restful web services 为的是在 Web 上工作的最好而创建的工具。Representational State Transfer (REST) 是一种指定约束的设计风格，例如统一接口，它如果应用到 webservice 上将带来一些合适的特性，例如性能，可扩展性和可修改性，这些属性能够使 services 在 Web 上工作的最好。使用 Rest 设计风格，数据和功能都是被慎重考虑过的资源并且是通过 Uniform Resource Identifiers (URIs) 来访问的。就像在 Web 上的链接。这些资源是按照一些简单并很好定义的的操作来采取行动的。Rest 设计风格约束客户端 / 服务端统一用一种样式并且被设计成用一种无状态的通信协议，例如 HTTP。在 Rest 的风格中，客户和服务端的交换代表资源用都在用标准的接口和协议。</p>\n</blockquote>\n<h4 id=\"jax-rs常用注解\"><a class=\"anchor\" href=\"#jax-rs常用注解\">#</a> JAX-RS 常用注解</h4>\n<ul>\n<li>@Path，标注资源类或者方法的相对路径。</li>\n<li>@GET，@PUT，@POST，@DELETE，标注方法是 HTTP 请求的类型。</li>\n<li>@Produces，标注返回的 MIME 媒体类型。</li>\n<li>@Consumes，标注可接受请求的 MIME 媒体类型。</li>\n<li>@PathParam，@QueryParam，@HeaderParam，@CookieParam，@MatrixParam，@FormParam，分别标注方法的参数来自于 HTTP 请求的不同位置。</li>\n</ul>\n<h4 id=\"使用案例\"><a class=\"anchor\" href=\"#使用案例\">#</a> 使用案例</h4>\n<h5 id=\"创建服务\"><a class=\"anchor\" href=\"#创建服务\">#</a> 创建服务</h5>\n<ul>\n<li>\n<p>pom.xml</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.apache.cxf/cxf-rt-frontend-jaxrs --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.cxf<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>cxf-rt-frontend-jaxrs<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.2.7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.apache.cxf/cxf-rt-transports-http-jetty --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.cxf<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>cxf-rt-transports-http-jetty<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.2.7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">&lt;!-- 没有这两个依赖会：No message body writer has been found for class com.hgx.web.service.restful.bean.Student, ContentType: application/json--></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.apache.cxf/cxf-rt-rs-extension-providers --></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.cxf<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>cxf-rt-rs-extension-providers<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.2.7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.codehaus.jettison/jettison --></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.codehaus.jettison<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jettison<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.4.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>Student.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>jaxrs<span class=\"token punctuation\">.</span>entity</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>ws<span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FormParam</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>xml<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">XmlRootElement</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@XmlRootElement</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@FormParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> number<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@FormParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@FormParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@FormParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"birth\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> birth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> number<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Date</span> birth<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> number<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>birth <span class=\"token operator\">=</span> birth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> number<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> number<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Date</span> <span class=\"token function\">getBirth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">return</span> birth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setBirth</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span> birth<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>birth <span class=\"token operator\">=</span> birth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Student&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token string\">\"number=\"</span> <span class=\"token operator\">+</span> number <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                <span class=\"token string\">\", name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token string\">\", age=\"</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                <span class=\"token string\">\", birth=\"</span> <span class=\"token operator\">+</span> birth <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                <span class=\"token string\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>StudentServer.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>jaxrs<span class=\"token punctuation\">.</span>server</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>jaxrs<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>ws<span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>ws<span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Instant</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@Path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/rest\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StudentServer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@GET</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/student/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Produces</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>APPLICATION_JSON<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span> <span class=\"token function\">getStudentById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">6666</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Instant</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>StudentServerMain.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>jaxrs</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>jaxrs<span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StudentServer</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>cxf<span class=\"token punctuation\">.</span>jaxrs<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JAXRSServerFactoryBean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StudentServerMain</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">JAXRSServerFactoryBean</span> jAXRSServerFactoryBean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JAXRSServerFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        jAXRSServerFactoryBean<span class=\"token punctuation\">.</span><span class=\"token function\">setAddress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8080/studentServce\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        jAXRSServerFactoryBean<span class=\"token punctuation\">.</span><span class=\"token function\">setResourceClasses</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StudentServer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        jAXRSServerFactoryBean<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"student server 启动\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>执行  <code>StudentServerMain.main()</code></p>\n<p>浏览器访问：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwL3N0dWRlbnRTZXJ2Y2UvcmVzdC9zdHVkZW50LzEy\">http://localhost:8080/studentServce/rest/student/12</span></p>\n</li>\n</ul>\n<h5 id=\"创建客户端\"><a class=\"anchor\" href=\"#创建客户端\">#</a> 创建客户端</h5>\n<ul number=\"222,\" name=\"'李四',\" age=\"19,\" birth=\"Tue\" Dec=\"\" 01=\"\" 05:14:00=\"\" CST=\"\" 2020=\"\">\n<li>\n<p>客户端 Get</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>jaxrs<span class=\"token punctuation\">.</span>client</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpEntity</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpResponse</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpGet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>impl<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CloseableHttpClient</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>impl<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpClientBuilder</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EntityUtils</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RestGetClientMain</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 1. 创建 HttpClient 的实例</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">CloseableHttpClient</span> httpClient <span class=\"token operator\">=</span> <span class=\"token class-name\">HttpClientBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 2. 创建某种连接方法的实例</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">HttpGet</span> httpGet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8080/studentServce/rest/student/12\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 3. 调用第一步中创建好的实例的 execute 方法来执行第二步中创建好的链接类实例</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">HttpResponse</span> httpResponse <span class=\"token operator\">=</span> httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>httpGet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 4. 读 response 获取 HttpEntity</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>httpResponse<span class=\"token punctuation\">.</span><span class=\"token function\">getStatusLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span>SC_OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token class-name\">HttpEntity</span> entity <span class=\"token operator\">=</span> httpResponse<span class=\"token punctuation\">.</span><span class=\"token function\">getEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 5. 对得到后的内容进行处理</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">EntityUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">,</span> <span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result = \"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token class-name\">EntityUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">consume</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>httpResponse<span class=\"token punctuation\">.</span><span class=\"token function\">getStatusLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 6. 释放连接。无论执行方法是否成功，都必须释放连接</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>执行结果：</p>\n<pre><code>result = &#123;&quot;student&quot;:&#123;&quot;age&quot;:20,&quot;birth&quot;:&quot;2020-11-30T15:02:47.325+08:00&quot;,&quot;name&quot;:&quot;张三&quot;,&quot;number&quot;:6666&#125;&#125;\n</code></pre>\n</li>\n<li>\n<p>客户端 Post</p>\n<p>修改服务端 StudentServer.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>jaxrs<span class=\"token punctuation\">.</span>server</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>jaxrs<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>ws<span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/rest\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StudentServer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@POST</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/student\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Consumes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"application/x-www-form-urlencoded\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@BeanParam</span> <span class=\"token class-name\">Student</span> student<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"success:\"</span> <span class=\"token operator\">+</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建 Post 客户端</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>jaxrs<span class=\"token punctuation\">.</span>client</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpEntity</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpResponse</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClientProtocolException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UrlEncodedFormEntity</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpPost</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>impl<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CloseableHttpClient</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>impl<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpClientBuilder</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BasicNameValuePair</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EntityUtils</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Instant</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RestPostClientMain</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClientProtocolException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">CloseableHttpClient</span> httpClient <span class=\"token operator\">=</span> <span class=\"token class-name\">HttpClientBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">HttpPost</span> httpPost <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpPost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8080/studentServce/rest/student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BasicNameValuePair</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BasicNameValuePair</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BasicNameValuePair</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0222\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BasicNameValuePair</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BasicNameValuePair</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"19\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BasicNameValuePair</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"birth\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Instant</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">HttpEntity</span> httpEntity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UrlEncodedFormEntity</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        httpPost<span class=\"token punctuation\">.</span><span class=\"token function\">setEntity</span><span class=\"token punctuation\">(</span>httpEntity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">HttpResponse</span> httpResponse <span class=\"token operator\">=</span> httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>httpPost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>httpResponse<span class=\"token punctuation\">.</span><span class=\"token function\">getStatusLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span>SC_OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token class-name\">HttpEntity</span> entity <span class=\"token operator\">=</span> httpResponse<span class=\"token punctuation\">.</span><span class=\"token function\">getEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">EntityUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">,</span> <span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"client result = \"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token class-name\">EntityUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">consume</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>httpResponse<span class=\"token punctuation\">.</span><span class=\"token function\">getStatusLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>执行结果：</p>\n<blockquote>\n<p>client result = success:Student</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"spring整合cxf\"><a class=\"anchor\" href=\"#spring整合cxf\">#</a> Spring 整合 CXF</h3>\n<ol>\n<li>\n<p>创建 maven 项目并添加依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.1.3.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-beans<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.1.3.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-tx<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.1.3.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-context<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.1.7.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-context-support<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.1.3.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.1.3.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-webmvc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.1.3.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-aop<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.1.3.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-aspects<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.1.3.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-jdbc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.1.3.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">&lt;!-- 添加 CXF dependency  --></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.apache.cxf/cxf-rt-frontend-jaxws --></span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.cxf<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>cxf-rt-frontend-jaxws<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.2.7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.apache.cxf/cxf-rt-transports-http --></span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.cxf<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>cxf-rt-transports-http<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.2.7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.apache.cxf/cxf-rt-frontend-jaxrs --></span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.cxf<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>cxf-rt-frontend-jaxrs<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.2.7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.apache.cxf/cxf-rt-transports-http-jetty --></span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.cxf<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>cxf-rt-transports-http-jetty<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.2.7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token comment\">&lt;!-- 没有这两个依赖会：No message body writer has been found for class com.hgx.web.service.restful.bean.Student, ContentType: application/json--></span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token comment\">&lt;!--https://mvnrepository.com/artifact/org.apache.cxf/cxf-rt-rs-extension-providers--></span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.cxf<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>cxf-rt-rs-extension-providers<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.2.7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.codehaus.jettison/jettison --></span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.codehaus.jettison<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jettison<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.4.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token comment\">&lt;!-- 解决 rest 风格的 api 没有 wadl--></span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.apache.cxf/cxf-rt-rs-service-description --></span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.cxf<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>cxf-rt-rs-service-description<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.2.7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/com.google.code.gson/gson --></span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.google.code.gson<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>gson<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.8.5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>创建实体对象</p>\n<p>Customer.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>entity</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Customer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// getter and setter</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>创建 HelloWorld 接口及其实现</p>\n<p>HelloWorld.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>cxf</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>jws<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebMethod</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>jws<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebParam</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>jws<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebResult</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>jws<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebService</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@WebService</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@WebMethod</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@WebResult</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"sayHelloResult\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@WebParam</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"userName\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@WebParam</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"userAge\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>HelloWorldImpl.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>cxf<span class=\"token punctuation\">.</span>impl</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>cxf<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>jws<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebMethod</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>jws<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebParam</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>jws<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebResult</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorldImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@WebMethod</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@WebResult</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"sayHelloResult\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@WebParam</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"userName\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@WebParam</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"userAge\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"spring say hello to: \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"age: \"</span> <span class=\"token operator\">+</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>创建服务处理类</p>\n<p>CustomerService.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>gson<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Gson</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Customer</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>ws<span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/crm\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomerService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@GET</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/customer/&#123;customer_id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Produces</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Customer</span> <span class=\"token function\">getCustomerById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"customer_id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> customer_id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Customer</span> customer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">(</span>customer_id<span class=\"token punctuation\">,</span> <span class=\"token string\">\"z3\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> customer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@POST</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/addcustomer\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Consumes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@Produces</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">addCustomer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> customer_json<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">Gson</span> gson <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Gson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">Customer</span> customer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Customer</span><span class=\"token punctuation\">)</span> gson<span class=\"token punctuation\">.</span><span class=\"token function\">fromJson</span><span class=\"token punctuation\">(</span>customer_json<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>customer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"success:  \"</span> <span class=\"token operator\">+</span> customer<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>配置 application-cxf.xml</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>xml version<span class=\"token operator\">=</span><span class=\"token string\">\"1.0\"</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">?</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>beans xmlns<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.springframework.org/schema/beans\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       xmlns<span class=\"token operator\">:</span>xsi<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       xmlns<span class=\"token operator\">:</span>jaxws<span class=\"token operator\">=</span><span class=\"token string\">\"http://cxf.apache.org/jaxws\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       xmlns<span class=\"token operator\">:</span>jaxrs<span class=\"token operator\">=</span><span class=\"token string\">\"http://cxf.apache.org/jaxrs\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       xsi<span class=\"token operator\">:</span>schemaLocation<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token keyword\">import</span> <span class=\"token namespace\">resource</span><span class=\"token operator\">=</span><span class=\"token string\">\"classpath:META-INF/cxf/cxf.xml\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">&lt;</span>jaxws<span class=\"token operator\">:</span>endpoint id<span class=\"token operator\">=</span><span class=\"token string\">\"helloworld\"</span> implementor<span class=\"token operator\">=</span><span class=\"token string\">\"com.xfc.cxf.impl.HelloWorldImpl\"</span> address<span class=\"token operator\">=</span><span class=\"token string\">\"/HelloWorld\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>jaxws<span class=\"token operator\">:</span>endpoint<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token operator\">&lt;</span>jaxrs<span class=\"token operator\">:</span>server id<span class=\"token operator\">=</span><span class=\"token string\">\"customerService\"</span> address<span class=\"token operator\">=</span><span class=\"token string\">\"/CustService\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token operator\">&lt;</span>jaxrs<span class=\"token operator\">:</span>serviceBeans<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token operator\">&lt;</span>bean <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"com.xfc.service.CustomerService\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>jaxrs<span class=\"token operator\">:</span>serviceBeans<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>jaxrs<span class=\"token operator\">:</span>server<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>beans<span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n<li>\n<p>配置 web.xml</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>web-app</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://xmlns.jcp.org/xml/ns/javaee<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3.1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 配置 Spring 配置文件的名称和位置 --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>context-param</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-name</span><span class=\"token punctuation\">></span></span>contextConfigLocation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-value</span><span class=\"token punctuation\">></span></span>classpath:application-cxf.xml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>context-param</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 启动 IOC 容器的 ServletContextListener --></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>listener</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>listener-class</span><span class=\"token punctuation\">></span></span>org.springframework.web.context.ContextLoaderListener<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>listener-class</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>listener</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">&lt;!--webservice --></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>display-name</span><span class=\"token punctuation\">></span></span>spring-cxf<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>display-name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>spring-cxf<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-class</span><span class=\"token punctuation\">></span></span>org.apache.cxf.transport.servlet.CXFServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-class</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-mapping</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>spring-cxf<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">></span></span>/*<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-mapping</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">&lt;!--webservice--></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>web-app</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>配置完成后通过 tomcat 容器启动项目。</p>\n</li>\n<li>\n<p>浏览器访问：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwL3NwcmluZ19jeGY=\">http://localhost:8080/spring_cxf</span></p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/10/437b032113df76249e16a45b7124569b1633529804.png\" alt=\"spring_cxf_view\" /></p>\n</li>\n</ol>\n<h3 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hneF9zdWl5dWVzdXN1L2FydGljbGUvZGV0YWlscy84ODkxODE5Mg==\">https://blog.csdn.net/hgx_suiyuesusu/article/details/88918192</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3dzLmFwYWNoZS5vcmc=\">http://ws.apache.org</span></li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "JAVA学习路线",
                "进阶篇",
                "java",
                "WebService"
            ]
        },
        {
            "id": "https://www.chinmoku.cc/computer-science/java-learning-path/2-intermediate/springcloud-tutorial/",
            "url": "https://www.chinmoku.cc/computer-science/java-learning-path/2-intermediate/springcloud-tutorial/",
            "title": "SpringCloud 教程（Finchley.RELEASE）",
            "date_published": "2021-08-26T01:19:24.000Z",
            "content_html": "<h2 id=\"服务的注册与发现eureka\"><a class=\"anchor\" href=\"#服务的注册与发现eureka\">#</a> 服务的注册与发现（Eureka）</h2>\n<h3 id=\"springcloud简介\"><a class=\"anchor\" href=\"#springcloud简介\">#</a> SpringCloud 简介</h3>\n<p>以下简介来自 SpringCloud 官网（<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLWNsb3VkJUVGJUJDJTg5\">https://spring.io/projects/spring-cloud）</span></p>\n<blockquote>\n<p>Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems (e.g. configuration management, service discovery, circuit breakers, intelligent routing, micro-proxy, control bus, one-time tokens, global locks, leadership election, distributed sessions, cluster state). Coordination of distributed systems leads to boiler plate patterns, and using Spring Cloud developers can quickly stand up services and applications that implement those patterns. They will work well in any distributed environment, including the developer’s own laptop, bare metal data centres, and managed platforms such as Cloud Foundry.</p>\n<p><code>quote from https://spring.io/projects/spring-cloud</code></p>\n</blockquote>\n<blockquote>\n<p>Spring Cloud 为开发人员提供了快速构建分布式系统中一些常见模式的工具（例如配置管理，服务发现，断路器，智能路由，微代理，控制总线）。分布式系统的协调导致了样板模式，使用 Spring Cloud 开发人员可以快速地支持实现这些模式的服务和应用程序。他们将在任何分布式环境中运行良好，包括开发人员自己的笔记本电脑，裸机数据中心，以及 Cloud Foundry 等托管平台。</p>\n<p><code>quote from https://www.springcloud.cc/spring-cloud-dalston.html</code></p>\n</blockquote>\n<h3 id=\"创建eureka服务注册中心及服务提供者\"><a class=\"anchor\" href=\"#创建eureka服务注册中心及服务提供者\">#</a> 创建 Eureka 服务注册中心及服务提供者</h3>\n<blockquote>\n<p>ps. 学习完 Eureka 之后，可以再了解一下 Consul。</p>\n</blockquote>\n<h4 id=\"创建maven主工程\"><a class=\"anchor\" href=\"#创建maven主工程\">#</a> 创建 maven 主工程</h4>\n<p>你可以选择从 https://start.spring.io/ 下载初始化项目。</p>\n<p>也可以 <code>new </code>  &gt;&gt;  <code>project </code>  &gt;&gt;  <code>Spring Initializr</code>  进行初始化项目。</p>\n<h4 id=\"创建eureka-server注册服务中心\"><a class=\"anchor\" href=\"#创建eureka-server注册服务中心\">#</a> 创建 Eureka Server 注册服务中心</h4>\n<p>1.1 创建 module 并选择 Eureka Server 依赖。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-netflix-eureka-server<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>1.2 在启动类中添加注解  <code>@EnableEurekaServer</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>eureka<span class=\"token punctuation\">.</span>server</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>netflix<span class=\"token punctuation\">.</span>eureka<span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableEurekaServer</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@EnableEurekaServer</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EurekaServerApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EurekaServerApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>1.3 配置文件  <code>application.yml</code></p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8761</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 通过 eureka.client.registerWithEureka：false 和 fetchRegistry：false 来表明自己是一个 eureka server.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">instance</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> localhost</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">registerWithEureka</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">fetchRegistry</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">serviceUrl</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token key atrule\">defaultZone</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//$<span class=\"token punctuation\">&#123;</span>eureka.instance.hostname<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">:</span>$<span class=\"token punctuation\">&#123;</span>server.port<span class=\"token punctuation\">&#125;</span>/eureka/</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> eurka<span class=\"token punctuation\">-</span>server</pre></td></tr></table></figure><p>1.4 启动注册服务中心</p>\n<p>​\t\t启动主类并访问  <code>http://localhost:8761/</code></p>\n<h4 id=\"创建eureka-client服务提供者\"><a class=\"anchor\" href=\"#创建eureka-client服务提供者\">#</a> 创建 Eureka Client 服务提供者</h4>\n<p>1.1 创建 module 并选择 Eureka Discovery Client 依赖。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-netflix-eureka-client<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>1.2 在启动类中添加注解  <code>@EnableEurekaClient</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>eureka<span class=\"token punctuation\">.</span>client</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>netflix<span class=\"token punctuation\">.</span>eureka<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableEurekaClient</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@EnableEurekaClient</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EurekaClientApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EurekaClientApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>1.3 配置文件  <code>application.yml</code></p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8762</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 指定当前服务名称</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> eureka<span class=\"token punctuation\">-</span>client<span class=\"token punctuation\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 指定 eureka-server</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">serviceUrl</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token key atrule\">defaultZone</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>8761/eureka/</pre></td></tr></table></figure><p>1.4 启动 Eureka Client</p>\n<p>​\t\t注意：启动 Eureka Client 时应当保证 Eureka Client 也处于启动状态。</p>\n<p>​\t\t启动主类并访问  <code>http://localhost:8761/</code>  进行查看。</p>\n<p>​\t\t提示信息：  <code>EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY'RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.</code>  参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2OTc1MzA3L2FydGljbGUvZGV0YWlscy84NjU2MzU5MA==\">https://blog.csdn.net/qq_26975307/article/details/86563590</span></p>\n<p>在  <code>Instances currently registered with Eureka</code>  列表中查看已注册的 Eureka 服务实例。</p>\n<h4 id=\"eureka服务注册成功\"><a class=\"anchor\" href=\"#eureka服务注册成功\">#</a> Eureka 服务注册成功</h4>\n<p>至此，一个 Eureka 服务即注册成功，同时注册多个 Eureka 服务，与 Eureka Client 方式相同，只须注意端口冲突即可。</p>\n<h2 id=\"服务消费者restribbon\"><a class=\"anchor\" href=\"#服务消费者restribbon\">#</a> 服务消费者（rest+ribbon）</h2>\n<p>在微服务架构中，业务都会被拆分成一个独立的服务，服务与服务的通讯是基于 http restful 的。Spring cloud 有两种服务调用方式，一种是 ribbon+restTemplate，另一种是 feign。</p>\n<h3 id=\"ribbon简介\"><a class=\"anchor\" href=\"#ribbon简介\">#</a> ribbon 简介</h3>\n<blockquote>\n<p>Ribbon is a client side IPC library that is battle-tested in cloud. It provides the following features</p>\n<ul>\n<li>\n<p>Load balancing</p>\n</li>\n<li>\n<p>Fault tolerance</p>\n</li>\n<li>\n<p>Multiple protocol (HTTP, TCP, UDP) support in an asynchronous and reactive model</p>\n</li>\n<li>\n<p>Caching and batching</p>\n<p>---- 摘自 https://github.com/Netflix/ribbon</p>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Spring Cloud Ribbon 是一个基于 HTTP 和 TCP 的客户端负载均衡工具，它基于 Netflix Ribbon 实现。通过 Spring Cloud 的封装，可以让我们轻松地将面向服务的 REST 模版请求自动转换成客户端负载均衡的服务调用。Spring Cloud Ribbon 虽然只是一个工具类框架，它不像服务注册中心、配置中心、API 网关那样需要独立部署，但是它几乎存在于每一个 Spring Cloud 构建的微服务和基础设施中。因为微服务间的调用，API 网关的请求转发等内容，实际上都是通过 Ribbon 来实现的，包括后续我们将要介绍的 Feign，它也是基于 Ribbon 实现的工具。</p>\n<p>---- 摘自 https://www.jianshu.com/p/1bd66db5dc46</p>\n</blockquote>\n<h3 id=\"准备工作\"><a class=\"anchor\" href=\"#准备工作\">#</a> 准备工作</h3>\n<p>根据 springcloud001 文档，同时创建 Eureka Server 和两个 Eureka Client。</p>\n<p>注意：除端口不同外，两个 Eureka Client 的代码完全相同，以不同端口来模拟负载均衡。</p>\n<h3 id=\"创建服务消费者\"><a class=\"anchor\" href=\"#创建服务消费者\">#</a> 创建服务消费者</h3>\n<h4 id=\"新建一个module并添加ribbon及eureka-client依赖\"><a class=\"anchor\" href=\"#新建一个module并添加ribbon及eureka-client依赖\">#</a> 新建一个 module，并添加 ribbon 及 eureka client 依赖。</h4>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-netflix-eureka-client<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-netflix-ribbon<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"配置文件\"><a class=\"anchor\" href=\"#配置文件\">#</a> 配置文件</h4>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>server:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  port: 8764</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>eureka:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  client:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    serviceUrl:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      defaultZone: http://localhost:8761/eureka/</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>spring:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  application:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    name: service-ribbon</pre></td></tr></table></figure><h4 id=\"配置启动类\"><a class=\"anchor\" href=\"#配置启动类\">#</a> 配置启动类</h4>\n<p>在启动类中添加  <code>@EnableEurekaClient</code>  及  <code>@EnableDiscoveryClient</code>  注解，并注入一个开启负载均衡的 RESTFul 模板。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>ribbon</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>discovery<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableDiscoveryClient</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>loadbalancer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LoadBalanced</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>netflix<span class=\"token punctuation\">.</span>eureka<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableEurekaClient</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestTemplate</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@EnableEurekaClient</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@EnableDiscoveryClient</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServiceRibbonApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServiceRibbonApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@LoadBalanced</span><span class=\"token comment\">// 开启负载均衡</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">RestTemplate</span> <span class=\"token function\">restTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"在eurekaclient的服务中编写接口\"><a class=\"anchor\" href=\"#在eurekaclient的服务中编写接口\">#</a> 在 EurekaClient 的服务中编写接口</h4>\n<p>这里直接在两个 EurekaClient 的启动类中编写 RESTFul 风格的接口即可，即修改启动类，如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>eureka<span class=\"token punctuation\">.</span>client</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Value</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>netflix<span class=\"token punctuation\">.</span>eureka<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableEurekaClient</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestParam</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@EnableEurekaClient</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EurekaClientApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EurekaClient2Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;server.port&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token class-name\">String</span> port<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> defaultValue <span class=\"token operator\">=</span> <span class=\"token string\">\"ErDong\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"hi \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\" ,this test api is from port: \"</span> <span class=\"token operator\">+</span> port<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"在ribbon模块中添加测试\"><a class=\"anchor\" href=\"#在ribbon模块中添加测试\">#</a> 在 ribbon 模块中添加测试</h4>\n<p>5.1 新建 TestService.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>ribbon<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestTemplate</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Auther: ErDong</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Email: xfc_exclave@163.com</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Date: 2019/12/27 0027 12:46</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">RestTemplate</span> restTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getForObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://EUREKA-CLIENT/test?name=\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>5.1 新建 TestController.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>ribbon<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>ribbon<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TestService</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestParam</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Auther: ErDong</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Email: xfc_exclave@163.com</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Date: 2019/12/27 0027 12:56</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token class-name\">TestService</span> testService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/test\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> testService<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"启动服务及测试负载均衡\"><a class=\"anchor\" href=\"#启动服务及测试负载均衡\">#</a> 启动服务及测试负载均衡</h3>\n<ol>\n<li>\n<p>分别启动 EurekaServer，两个 EurekaClient 及 ServiceRibbon。</p>\n</li>\n<li>\n<p>访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4NzYxLw==\">http://localhost:8761/</span> 已注册的服务实例。</p>\n<p>可以看到端口分别为  <code>8762</code>  和  <code>8763</code>  两个 <strong>EUREKA-CLIENT</strong> 实例，及一个端口为  <code>8764</code>  的 <strong>EUREKA-CLIENT</strong> 实例。</p>\n</li>\n<li>\n<p>负载均衡测试</p>\n<p>多次访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4NzY0L3Rlc3Q/bmFtZT10ZXN0VXNlcg==\">http://localhost:8764/test?name=testUser</span></p>\n<p>可以看到相应结果如下：</p>\n<p>hi testUser ,this test api is from port: 8762</p>\n<p>hi testUser ,this test api is from port: 8763</p>\n<p>hi testUser ,this test api is from port: 8762</p>\n<p>hi testUser ,this test api is from port: 8763</p>\n<p>hi testUser ,this test api is from port: 8762</p>\n<p>hi testUser ,this test api is from port: 8763</p>\n<p>……</p>\n</li>\n<li>\n<p>测试结论</p>\n<p>从测试结果我们可以看到，端口分别为 8762 何 8763 的两个 <strong>EUREKA-CLIENT</strong> 实例被轮流调用，即实现了负载均衡。</p>\n</li>\n</ol>\n<h2 id=\"服务消费者feign\"><a class=\"anchor\" href=\"#服务消费者feign\">#</a> 服务消费者（Feign）</h2>\n<p>在微服务架构中，业务都会被拆分成一个独立的服务，服务与服务的通讯是基于 http restful 的。Spring cloud 有两种服务调用方式，一种是 ribbon+restTemplate，另一种是 feign。</p>\n<h3 id=\"feign简介\"><a class=\"anchor\" href=\"#feign简介\">#</a> Feign 简介</h3>\n<blockquote>\n<p>Feign is a Java to HTTP client binder inspired by Retrofit, JAXRS-2.0, and WebSocket. Feign's first goal was reducing the complexity of binding Denominator uniformly to HTTP APIs regardless of ReSTfulness.</p>\n<p>---- 摘自 https://github.com/OpenFeign/feign</p>\n</blockquote>\n<blockquote>\n<p>Feign 是一个声明式的伪 Http 客户端，它使得写 Http 客户端变得更简单。使用 Feign，只需要创建一个接口并注解。它具有可插拔的注解特性，可使用 Feign 注解和 JAX-RS 注解。Feign 支持可插拔的编码器和解码器。Feign 默认集成了 Ribbon，并和 Eureka 结合，默认实现了负载均衡的效果。</p>\n<p>简而言之：</p>\n<ul>\n<li>Feign 采用的是基于接口的注解</li>\n<li>Feign 整合了 ribbon，具有负载均衡的能力</li>\n<li>整合了 Hystrix，具有熔断的能力</li>\n</ul>\n<p>---- 摘自 https://blog.csdn.net/forezp/article/details/81040965</p>\n</blockquote>\n<h3 id=\"准备工作-2\"><a class=\"anchor\" href=\"#准备工作-2\">#</a> 准备工作</h3>\n<p>根据 springcloud001 文档，同时创建 Eureka Server 和两个 Eureka Client。</p>\n<p>注意：除端口不同外，两个 Eureka Client 的代码完全相同，以不同端口来模拟负载均衡。</p>\n<h3 id=\"创建服务消费者-2\"><a class=\"anchor\" href=\"#创建服务消费者-2\">#</a> 创建服务消费者</h3>\n<h4 id=\"新建一个module并添加feign及eureka-client依赖\"><a class=\"anchor\" href=\"#新建一个module并添加feign及eureka-client依赖\">#</a> 新建一个 module，并添加 feign 及 eureka client 依赖。</h4>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-netflix-eureka-client<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-openfeign<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"配置文件-2\"><a class=\"anchor\" href=\"#配置文件-2\">#</a> 配置文件</h4>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">serviceUrl</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token key atrule\">defaultZone</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>8761/eureka/</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8765</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> service<span class=\"token punctuation\">-</span>feign</pre></td></tr></table></figure><h4 id=\"配置启动类-2\"><a class=\"anchor\" href=\"#配置启动类-2\">#</a> 配置启动类</h4>\n<p>在启动类中添加  <code>@EnableEurekaClient</code>   <code>@EnableFeignClients</code>   及  <code>@EnableDiscoveryClient</code>  注解开启 Feign 的功能。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>feign</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>discovery<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableDiscoveryClient</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>netflix<span class=\"token punctuation\">.</span>eureka<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableEurekaClient</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>openfeign<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableFeignClients</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@EnableEurekaClient</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@EnableDiscoveryClient</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@EnableFeignClients</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServiceFeignApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServiceFeignApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"定义一个feign接口\"><a class=\"anchor\" href=\"#定义一个feign接口\">#</a> 定义一个 Feign 接口</h4>\n<p><strong>注意：</strong> 此部分与 springcloud002 中的部分相同。</p>\n<p>这里直接在两个 EurekaClient 的启动类中编写 RESTFul 风格的接口即可，即修改启动类，如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>eureka<span class=\"token punctuation\">.</span>client</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Value</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>netflix<span class=\"token punctuation\">.</span>eureka<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableEurekaClient</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestParam</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@EnableEurekaClient</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EurekaClientApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EurekaClient2Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;server.port&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token class-name\">String</span> port<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> defaultValue <span class=\"token operator\">=</span> <span class=\"token string\">\"ErDong\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"hi \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\" ,this test api is from port: \"</span> <span class=\"token operator\">+</span> port<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"在feign模块中添加测试\"><a class=\"anchor\" href=\"#在feign模块中添加测试\">#</a> 在 feign 模块中添加测试</h4>\n<p>4.1 新建 TestService.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>feign<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>openfeign<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FeignClient</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestParam</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Auther: ErDong</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Email: xfc_exclave@163.com</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Date: 2019/12/27 0027 14:38</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"EUREKA-CLIENT\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 指定服务名称</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TestService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 指定服务方法及参数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/test\"</span><span class=\"token punctuation\">,</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>5.2 新建 TestController.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>feign<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>feign<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TestService</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestParam</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Auther: ErDong</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Email: xfc_exclave@163.com</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Date: 2019/12/27 0027 14:40</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token class-name\">TestService</span> testService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/test\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> testService<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"启动服务及测试负载均衡-2\"><a class=\"anchor\" href=\"#启动服务及测试负载均衡-2\">#</a> 启动服务及测试负载均衡</h3>\n<ol>\n<li>\n<p>分别启动 EurekaServer，两个 EurekaClient 及 ServiceFeign。</p>\n</li>\n<li>\n<p>访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4NzYxLw==\">http://localhost:8761/</span> 已注册的服务实例。</p>\n<p>可以看到端口分别为  <code>8762</code>  和  <code>8763</code>  两个 <strong>EUREKA-CLIENT</strong> 实例，及一个端口为  <code>8765</code>  的 <strong>SERVICE-FEIGN</strong> 实例。</p>\n</li>\n<li>\n<p>负载均衡测试</p>\n<p>多次访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4NzY1L3Rlc3Q/bmFtZT10ZXN0VXNlcg==\">http://localhost:8765/test?name=testUser</span></p>\n<p>可以看到相应结果如下：</p>\n<p>hi testUser ,this test api is from port: 8762</p>\n<p>hi testUser ,this test api is from port: 8763</p>\n<p>hi testUser ,this test api is from port: 8762</p>\n<p>hi testUser ,this test api is from port: 8763</p>\n<p>hi testUser ,this test api is from port: 8762</p>\n<p>hi testUser ,this test api is from port: 8763</p>\n<p>……</p>\n</li>\n<li>\n<p>测试结论</p>\n<p>从测试结果我们可以看到，端口分别为 8762 何 8763 的两个 <strong>EUREKA-CLIENT</strong> 实例被轮流调用，即实现了负载均衡。</p>\n</li>\n</ol>\n<h2 id=\"熔断器hystrix\"><a class=\"anchor\" href=\"#熔断器hystrix\">#</a> 熔断器（Hystrix）</h2>\n<p>在微服务架构中，根据业务来拆分成一个个的服务，服务与服务之间可以相互调用（RPC），在 Spring Cloud 可以用 RestTemplate+Ribbon 和 Feign 来调用。为了保证其高可用，单个服务通常会集群部署。由于网络原因或者自身的原因，服务并不能保证 100% 可用，如果单个服务出现问题，调用这个服务就会出现线程阻塞，此时若有大量的请求涌入，Servlet 容器的线程资源会被消耗完毕，导致服务瘫痪。服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成灾难性的严重后果，这就是服务故障的 “雪崩” 效应。为了解决这个问题，业界提出了熔断器（断路器）模型。</p>\n<h3 id=\"熔断器简介\"><a class=\"anchor\" href=\"#熔断器简介\">#</a> 熔断器简介</h3>\n<blockquote>\n<p>Hystrix is a latency and fault tolerance library designed to isolate points of access to remote systems, services and 3rd party libraries, stop cascading failure and enable resilience in complex distributed systems where failure is inevitable.</p>\n<p>---- 摘自 https://github.com/Netflix/hystrix</p>\n</blockquote>\n<blockquote>\n<p>Hystrix 中文介绍可参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC83NmRjNDU1MjM4MDc=\">https://www.jianshu.com/p/76dc45523807</span></p>\n</blockquote>\n<h3 id=\"准备工作-3\"><a class=\"anchor\" href=\"#准备工作-3\">#</a> 准备工作</h3>\n<p>根据 springcloud001 文档，同时创建 Eureka Server 和两个 Eureka Client。</p>\n<p>注意：除端口不同外，两个 Eureka Client 的代码完全相同，以不同端口来模拟负载均衡。</p>\n<h3 id=\"在ribbon中使用断路器\"><a class=\"anchor\" href=\"#在ribbon中使用断路器\">#</a> 在 ribbon 中使用断路器</h3>\n<p><strong>注意：</strong> 此部分内容基于 springcloud002 文档。</p>\n<h4 id=\"向-serice-ribbon-模块添加依赖\"><a class=\"anchor\" href=\"#向-serice-ribbon-模块添加依赖\">#</a> 向  <code>serice-ribbon</code>  模块添加依赖</h4>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-netflix-hystrix<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"配置启动类-3\"><a class=\"anchor\" href=\"#配置启动类-3\">#</a> 配置启动类</h4>\n<p>在启动类中添加  <code>@EnableHystrix</code>  注解开启 Hystrix 功能。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>ribbon</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>discovery<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableDiscoveryClient</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>loadbalancer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LoadBalanced</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>netflix<span class=\"token punctuation\">.</span>eureka<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableEurekaClient</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>netflix<span class=\"token punctuation\">.</span>hystrix<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableHystrix</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestTemplate</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@EnableEurekaClient</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@EnableDiscoveryClient</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@EnableHystrix</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServiceRibbonApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServiceRibbonApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@LoadBalanced</span><span class=\"token comment\">// 开启负载均衡</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token class-name\">RestTemplate</span> <span class=\"token function\">restTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"改写testservice\"><a class=\"anchor\" href=\"#改写testservice\">#</a> 改写 TestService</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>ribbon<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>netflix<span class=\"token punctuation\">.</span>hystrix<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>javanica<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HystrixCommand</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestTemplate</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Auther: ErDong</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Email: xfc_exclave@163.com</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Date: 2019/12/27 0027 12:46</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">RestTemplate</span> restTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 对当前方法创建熔断器的功能，并指定 fallbackMethod 熔断方法</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@HystrixCommand</span><span class=\"token punctuation\">(</span>fallbackMethod <span class=\"token operator\">=</span> <span class=\"token string\">\"testError\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getForObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://EUREKA-CLIENT/test?name=\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">//fallbackMethod 熔断方法</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testError</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"hi,\"</span><span class=\"token operator\">+</span>name<span class=\"token operator\">+</span><span class=\"token string\">\",sorry,error!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"启动服务及测试熔断器功能\"><a class=\"anchor\" href=\"#启动服务及测试熔断器功能\">#</a> 启动服务及测试熔断器功能</h4>\n<ol>\n<li>\n<p>分别启动 EurekaServer，两个 EurekaClient 及 ServiceRibbon。</p>\n</li>\n<li>\n<p>访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4NzYxLw==\">http://localhost:8761/</span> 已注册的服务实例。</p>\n<p>可以看到端口分别为  <code>8762</code>  和  <code>8763</code>  两个 <strong>EUREKA-CLIENT</strong> 实例，及一个端口为  <code>8764</code>  的 <strong>SERVICE-FEIGN</strong> 实例。</p>\n</li>\n<li>\n<p>熔断器功能测试</p>\n<p>多次访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4NzY0L3Rlc3Q/bmFtZT10ZXN0VXNlcg==\">http://localhost:8764/test?name=testUser</span></p>\n<p>可以看到相应结果如下：</p>\n<p>hi testUser ,this test api is from port: 8762</p>\n<p>hi testUser ,this test api is from port: 8763</p>\n<p>hi testUser ,this test api is from port: 8762</p>\n<p>hi testUser ,this test api is from port: 8763</p>\n<p>hi testUser ,this test api is from port: 8762</p>\n<p>hi testUser ,this test api is from port: 8763</p>\n<p>……</p>\n<p>此时断开端口为  <code>8763</code>  的 <strong>EUREKA-CLIENT</strong> 实例。</p>\n<p>再次进行多次访问，结果如下：</p>\n<p>hi,testUser,sorry,error!</p>\n<p>hi testUser ,this test api is from port: 8762</p>\n<p>hi,testUser,sorry,error!</p>\n<p>hi testUser ,this test api is from port: 8762</p>\n<p>hi testUser ,this test api is from port: 8762</p>\n<p>……</p>\n<p>此时再断开端口为  <code>8762</code>  的 <strong>EUREKA-CLIENT</strong> 实例。</p>\n<p>再次进行多次访问，结果如下：</p>\n<p>hi,testUser,sorry,error!</p>\n<p>hi,testUser,sorry,error!</p>\n<p>hi,testUser,sorry,error!</p>\n<p>hi,testUser,sorry,error!</p>\n<p>……</p>\n</li>\n<li>\n<p>测试结论</p>\n<p>从测试结果我们可以看到，端口分别为 8762 何 8763 的两个 <strong>EUREKA-CLIENT</strong> 实例在正常启用时，正常实现负载均衡，当其中某个服务实例出现故障时，客户端会进入 fallbackMethod 指定的熔断方法，直接返回一组字符串，而不是等待响应超时，这很好的控制了容器的线程阻塞。</p>\n</li>\n</ol>\n<h3 id=\"在feign中使用断路器\"><a class=\"anchor\" href=\"#在feign中使用断路器\">#</a> 在 feign 中使用断路器</h3>\n<p>Feign 是自带断路器的，在 D 版本的 Spring Cloud 之后，默认关闭。</p>\n<h4 id=\"向-serice-feign-模块添加依赖\"><a class=\"anchor\" href=\"#向-serice-feign-模块添加依赖\">#</a> 向  <code>serice-feign</code>  模块添加依赖</h4>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-netflix-hystrix<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"配置文件-3\"><a class=\"anchor\" href=\"#配置文件-3\">#</a> 配置文件</h4>\n<p>添加熔断器配置：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># feign 开启 hystrix 支持</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">feign</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">hystrix</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr></table></figure><h4 id=\"改写testservice-2\"><a class=\"anchor\" href=\"#改写testservice-2\">#</a> 改写 TestService</h4>\n<p>新建 TestService 接口的实现类 TestServiceHystric.java 作为熔断器。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>feign<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>hystric</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>feign<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TestService</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Auther: ErDong</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Email: xfc_exclave@163.com</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Date: 2019/12/27 0027 15:39</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestServiceHystric</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TestService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"hi,\"</span><span class=\"token operator\">+</span>name<span class=\"token operator\">+</span><span class=\"token string\">\",sorry,error!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 @FeignClient 注解中指定 fallback</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>feign<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>feign<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>hystric<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TestServiceHystric</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>openfeign<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FeignClient</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestParam</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Auther: ErDong</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Email: xfc_exclave@163.com</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Date: 2019/12/27 0027 14:38</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"EUREKA-CLIENT\"</span><span class=\"token punctuation\">,</span> fallback <span class=\"token operator\">=</span> <span class=\"token class-name\">TestServiceHystric</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 指定服务名称，指定熔断器</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TestService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 指定服务方法及参数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/test\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"启动服务及测试熔断器功能-2\"><a class=\"anchor\" href=\"#启动服务及测试熔断器功能-2\">#</a> 启动服务及测试熔断器功能</h4>\n<p>与 ribbon 中的测试方法相同。</p>\n<h2 id=\"路由网关zuul\"><a class=\"anchor\" href=\"#路由网关zuul\">#</a> 路由网关（zuul）</h2>\n<p>在微服务架构中，需要几个基础的服务治理组件，包括服务注册与发现、服务消费、负载均衡、断路器、智能路由、配置管理等，由这几个基础组件相互协作，共同组建了一个简单的微服务系统。</p>\n<p>在 Spring Cloud 微服务系统中，一种常见的负载均衡方式是，客户端的请求首先经过负载均衡（zuul、Ngnix），再到达服务网关（zuul 集群），然后再到具体的服。，服务统一注册到高可用的服务注册中心集群，服务的所有的配置文件由配置服务管理（下一篇文章讲述），配置服务的配置文件放在 git 仓库，方便开发人员随时改配置。</p>\n<h3 id=\"zuul简介\"><a class=\"anchor\" href=\"#zuul简介\">#</a> Zuul 简介</h3>\n<blockquote>\n<p>Zuul is the front door for all requests from devices and web sites to the backend of the Netflix streaming application. As an edge service application, Zuul is built to enable dynamic routing, monitoring, resiliency and security. It also has the ability to route requests to multiple Amazon Auto Scaling Groups as appropriate.</p>\n<p>---- 摘自 https://github.com/Netflix/zuul/wiki</p>\n</blockquote>\n<blockquote>\n<p>Zuul 的主要功能是路由转发和过滤器。路由功能是微服务的一部分，比如 /api/user 转发到到 user 服务，/api/shop 转发到到 shop 服务。zuul 默认和 Ribbon 结合实现了负载均衡的功能。</p>\n<p>zuul 有以下功能：</p>\n<ul>\n<li>Authentication</li>\n<li>Insights</li>\n<li>Stress Testing</li>\n<li>Canary Testing</li>\n<li>Dynamic Routing</li>\n<li>Service Migration</li>\n<li>Load Shedding</li>\n<li>Security</li>\n<li>Static Response handling</li>\n<li>Active/Active traffic management</li>\n</ul>\n<p>---- 摘自 https://blog.csdn.net/forezp/article/details/81041012</p>\n</blockquote>\n<h3 id=\"准备工作-4\"><a class=\"anchor\" href=\"#准备工作-4\">#</a> 准备工作</h3>\n<p>接续上一文档，在原有工程上添加新的模块。</p>\n<h3 id=\"创建zuul路由网关\"><a class=\"anchor\" href=\"#创建zuul路由网关\">#</a> 创建 zuul 路由网关</h3>\n<h4 id=\"新建一个module并添加zuul及eureka-client依赖\"><a class=\"anchor\" href=\"#新建一个module并添加zuul及eureka-client依赖\">#</a> 新建一个 module，并添加 zuul 及 eureka client 依赖。</h4>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-netflix-eureka-client<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-netflix-zuul<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"配置文件-4\"><a class=\"anchor\" href=\"#配置文件-4\">#</a> 配置文件</h4>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8769</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">serviceUrl</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token key atrule\">defaultZone</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>8761/eureka/</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> service<span class=\"token punctuation\">-</span>zuul</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 以 /api-a/ 开头的请求转发至 service-ribbon 服务</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 以 /api-b/ 开头的请求转发至 service-feign 服务</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token key atrule\">zuul</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token key atrule\">routes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">api-a</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /api<span class=\"token punctuation\">-</span>a/<span class=\"token important\">**</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token key atrule\">serviceId</span><span class=\"token punctuation\">:</span> service<span class=\"token punctuation\">-</span>ribbon</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token key atrule\">api-b</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /api<span class=\"token punctuation\">-</span>b/<span class=\"token important\">**</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token key atrule\">serviceId</span><span class=\"token punctuation\">:</span> service<span class=\"token punctuation\">-</span>feign</pre></td></tr></table></figure><h4 id=\"配置启动类-4\"><a class=\"anchor\" href=\"#配置启动类-4\">#</a> 配置启动类</h4>\n<p>在启动类中添加  <code>@EnableEurekaClient</code>  及  <code>@EnableZuulProxy</code>  开启 zuul 的功能。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>zuul</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>discovery<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableDiscoveryClient</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>netflix<span class=\"token punctuation\">.</span>eureka<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableEurekaClient</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>netflix<span class=\"token punctuation\">.</span>zuul<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableZuulProxy</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@EnableZuulProxy</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@EnableEurekaClient</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@EnableDiscoveryClient</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServiceZuulApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServiceZuulApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"启动服务及测试路由网关\"><a class=\"anchor\" href=\"#启动服务及测试路由网关\">#</a> 启动服务及测试路由网关</h4>\n<ol>\n<li>\n<p>分别启动 EurekaServer，两个 EurekaClient 及 ServiceRibbon。</p>\n</li>\n<li>\n<p>分别启动 ServiceRibbon 和 ServiceFeign 两个服务消费者。</p>\n</li>\n<li>\n<p>启动 ServiceZuul 网关。</p>\n</li>\n<li>\n<p>访问：</p>\n<p>多次访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4NzY5L2FwaS1hL3Rlc3Q/bmFtZT10ZXN0VXNlcg==\">http://localhost:8769/api-a/test?name=testUser</span></p>\n<p>结果如下：</p>\n<p>hi testUser ,this test api is from port: 8762</p>\n<p>hi testUser ,this test api is from port: 8763</p>\n<p>hi testUser ,this test api is from port: 8762</p>\n<p>hi testUser ,this test api is from port: 8763</p>\n<p>……</p>\n<p>多次访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4NzY5L2FwaS1iL3Rlc3Q/bmFtZT10ZXN0VXNlcg==\">http://localhost:8769/api-b/test?name=testUser</span></p>\n<p>结果如下：</p>\n<p>hi testUser ,this test api is from port: 8762</p>\n<p>hi testUser ,this test api is from port: 8763</p>\n<p>hi testUser ,this test api is from port: 8762</p>\n<p>hi testUser ,this test api is from port: 8763</p>\n<p>……</p>\n</li>\n<li>\n<p>测试结论</p>\n<p>zuul 起到路由的作用，它将不同请求分向不同的服务消费者进行处理。</p>\n</li>\n</ol>\n<h3 id=\"服务过滤\"><a class=\"anchor\" href=\"#服务过滤\">#</a> 服务过滤</h3>\n<p>zuul 不仅只是路由，并且还能过滤，做一些安全验证。</p>\n<h4 id=\"添加过滤器\"><a class=\"anchor\" href=\"#添加过滤器\">#</a> 添加过滤器</h4>\n<p>新建 TokenFilter.java，用于过滤 token。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>zuul<span class=\"token punctuation\">.</span>filter</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>netflix<span class=\"token punctuation\">.</span>zuul<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ZuulFilter</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>netflix<span class=\"token punctuation\">.</span>zuul<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Logger</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Auther: ErDong</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Email: xfc_exclave@163.com</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @Date: 2019/12/27 21:29</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TokenFilter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ZuulFilter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Logger</span> log <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TokenFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * filterType：返回一个字符串代表过滤器的类型，在 zuul 中定义了四种不同生命周期的过滤器类型，如下：</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * 1. pre：前置过滤器</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * 2. routing：路由之时</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * 3. post： 路由之后</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     * 4. rror：发送错误调用</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">filterType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"pre\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     * 过滤的顺序，数字越大，优先级越低</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">filterOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>     * 是否要进行过滤</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">shouldFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>     * 过滤器的具体逻辑</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token class-name\">RequestContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token class-name\">HttpServletRequest</span> request <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s >>> %s\"</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestURL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token class-name\">Object</span> accessToken <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>accessToken <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token is empty\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            ctx<span class=\"token punctuation\">.</span><span class=\"token function\">setSendZuulResponse</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            ctx<span class=\"token punctuation\">.</span><span class=\"token function\">setResponseStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token is empty\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"启动服务及测试路由过滤\"><a class=\"anchor\" href=\"#启动服务及测试路由过滤\">#</a> 启动服务及测试路由过滤</h4>\n<ol>\n<li>\n<p>访问</p>\n<p>访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4NzY5L2FwaS1hL3Rlc3Q/bmFtZT10ZXN0VXNlcg==\">http://localhost:8769/api-a/test?name=testUser</span></p>\n<p>结果：token is empty</p>\n<p>访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4NzY5L2FwaS1iL3Rlc3Q/bmFtZT10ZXN0VXNlcg==\">http://localhost:8769/api-b/test?name=testUser</span></p>\n<p>结果：token is empty</p>\n<p>访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4NzY5L2FwaS1hL3Rlc3Q/bmFtZT10ZXN0VXNlciZhbXA7dG9rZW49YWJj\">http://localhost:8769/api-a/test?name=testUser&amp;token=abc</span></p>\n<p>结果：hi testUser ,this test api is from port: 8762</p>\n<p>访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4NzY5L2FwaS1iL3Rlc3Q/bmFtZT10ZXN0VXNlciZhbXA7dG9rZW49YWJj\">http://localhost:8769/api-b/test?name=testUser&amp;token=abc</span></p>\n<p>结果：hi testUser ,this test api is from port: 8763</p>\n</li>\n<li>\n<p>测试结论</p>\n<p>zuul 实现了服务过滤。</p>\n</li>\n</ol>\n<h2 id=\"分布式配置中心spring-cloud-config\"><a class=\"anchor\" href=\"#分布式配置中心spring-cloud-config\">#</a> 分布式配置中心（Spring Cloud Config）</h2>\n<p>使用配置服务来保存各个服务的配置文件，即 Spring Cloud Config。</p>\n<h3 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h3>\n<blockquote>\n<p><code>Spring Cloud Config</code>  为分布式系统中的外部配置提供服务器和客户端支持。使用  <code>Config Server</code>  ，您可以在所有环境中管理应用程序的外部属性。客户端和服务器上的概念映射与  <code>Spring Environment</code>  和  <code>PropertySource</code>  抽象相同，因此它们与 Spring 应用程序非常契合，但可以与任何以任何语言运行的应用程序一起使用。随着应用程序通过从开发人员到测试和生产的部署流程，您可以管理这些环境之间的配置，并确定应用程序具有迁移时需要运行的一切。服务器存储后端的默认实现使用 git，因此它轻松支持标签版本的配置环境，以及可以访问用于管理内容的各种工具。可以轻松添加替代实现，并使用 Spring 配置将其插入。</p>\n<p>---- 摘自 https://www.springcloud.cc/spring-cloud-config.html</p>\n</blockquote>\n<blockquote>\n<p>在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件。在 Spring Cloud 中，有分布式配置中心组件 spring cloud config ，它支持配置服务放在配置服务的内存中（即本地），也支持放在远程 Git 仓库中。在 spring cloud config 组件中，分两个角色，一是 config server，二是 config client。<br />\n---- 摘自 https://blog.csdn.net/forezp/article/details/81041028</p>\n</blockquote>\n<h3 id=\"构建config-server\"><a class=\"anchor\" href=\"#构建config-server\">#</a> 构建 Config Server</h3>\n<h4 id=\"新建一个module并添加config-server依赖\"><a class=\"anchor\" href=\"#新建一个module并添加config-server依赖\">#</a> 新建一个 module，并添加 config server 依赖。</h4>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-config-server<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"配置文件-5\"><a class=\"anchor\" href=\"#配置文件-5\">#</a> 配置文件</h4>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8888</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 如果 Git 仓库为公开仓库，可以不填写用户名和密码</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">-</span>server</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token key atrule\">label</span><span class=\"token punctuation\">:</span> master <span class=\"token comment\"># 配置仓库的分支</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token key atrule\">git</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/forezp/SpringcloudConfig/ <span class=\"token comment\"># 配置 git 仓库地址</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          <span class=\"token key atrule\">searchPaths</span><span class=\"token punctuation\">:</span> respo <span class=\"token comment\"># 配置仓库路径</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 访问 git 仓库的用户名</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 访问 git 仓库的用户密码</span></pre></td></tr></table></figure><h4 id=\"配置启动类-5\"><a class=\"anchor\" href=\"#配置启动类-5\">#</a> 配置启动类</h4>\n<p>在启动类中添加  <code>@EnableConfigServer</code>  注解开启配置服务器的功能。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>server</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableConfigServer</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@EnableConfigServer</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConfigServerApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigServerApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"启动服务及测试configserver\"><a class=\"anchor\" href=\"#启动服务及测试configserver\">#</a> 启动服务及测试 ConfigServer</h4>\n<p>启动服务后，访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4ODg4L2NvbmZpZy1jbGllbnQtZGV2LnByb3BlcnRpZXM=\">http://localhost:8888/config-client-dev.properties</span></p>\n<p>结果：</p>\n<blockquote>\n<p>democonfigclient.message: hello spring io</p>\n<p>foo: foo version 21</p>\n</blockquote>\n<p>结论：配置服务中心可以从远程程序获取配置信息。</p>\n<p>http 请求地址和资源文件映射如下：</p>\n<blockquote>\n<p>/<ruby>application}/{profiles:.\\[<rp>(</rp><rt>-\\].</rt><rp>)</rp></ruby></p>\n<p label:.*=\"\">/{application}/{profiles}/</p>\n<p>/{application}-{profiles}.properties</p>\n<p>/{label}/{application}-{profiles}.properties</p>\n<p>{application}-{profiles}.json</p>\n<p>/{label}/{application}-{profiles}.json</p>\n<p>/{application}-{profiles}.yml 或 /{application}-{profiles}.yml</p>\n<p>/{label}/{application}-{profiles}.yml 或 /{label}/{application}-{profiles}.yml</p>\n</blockquote>\n<h3 id=\"构建config-client\"><a class=\"anchor\" href=\"#构建config-client\">#</a> 构建 Config Client</h3>\n<h4 id=\"新建一个module并添加config-client依赖\"><a class=\"anchor\" href=\"#新建一个module并添加config-client依赖\">#</a> 新建一个 module，并添加 config client 依赖。</h4>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-config<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"配置文件-6\"><a class=\"anchor\" href=\"#配置文件-6\">#</a> 配置文件</h4>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8881</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">-</span>client</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token key atrule\">label</span><span class=\"token punctuation\">:</span> master</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token key atrule\">profile</span><span class=\"token punctuation\">:</span> dev <span class=\"token comment\"># dev：开发环境，test：测试环境，pro：生产环境</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>8888/ <span class=\"token comment\"># 指明配置服务中心的网址</span></pre></td></tr></table></figure><h4 id=\"创建测试api\"><a class=\"anchor\" href=\"#创建测试api\">#</a> 创建测试 API</h4>\n<p>在启动类中添加 API。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>client</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Value</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConfigClientApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigClientApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;foo&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">String</span> foo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/getFoo\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getFoo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> foo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>启动并访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4ODgxL2dldEZvbw==\">http://localhost:8881/getFoo</span></p>\n<p>结果：foo version 21</p>\n<p>结论：config-client 从 config-server 获取了 foo 的属性，而 config-server 是从 git 仓库读取的。</p>\n<h3 id=\"高可用的分布式配置中心\"><a class=\"anchor\" href=\"#高可用的分布式配置中心\">#</a> 高可用的分布式配置中心</h3>\n<h4 id=\"改造config-server\"><a class=\"anchor\" href=\"#改造config-server\">#</a> 改造 config-server</h4>\n<ol>\n<li>\n<p>添加 eureka client 依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-netflix-eureka-client<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>修改配置文件</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8888</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">serviceUrl</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token key atrule\">defaultZone</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>8761/eureka/</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 如果 Git 仓库为公开仓库，可以不填写用户名和密码</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">-</span>server</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token key atrule\">label</span><span class=\"token punctuation\">:</span> master <span class=\"token comment\"># 配置仓库的分支</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token key atrule\">git</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/forezp/SpringcloudConfig/ <span class=\"token comment\"># 配置 git 仓库地址</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token key atrule\">searchPaths</span><span class=\"token punctuation\">:</span> respo <span class=\"token comment\"># 配置仓库路径</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 访问 git 仓库的用户名</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 访问 git 仓库的用户密码</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>主类添加  <code>@EnableEurekaClient</code>  注解</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"改造config-client\"><a class=\"anchor\" href=\"#改造config-client\">#</a> 改造 config-client</h4>\n<ol>\n<li>\n<p>添加 eureka client 依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-netflix-eureka-client<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>修改配置文件</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8881</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">serviceUrl</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token key atrule\">defaultZone</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>8761/eureka/</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">-</span>client</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token key atrule\">label</span><span class=\"token punctuation\">:</span> master</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token key atrule\">profile</span><span class=\"token punctuation\">:</span> dev <span class=\"token comment\"># dev：开发环境，test：测试环境，pro：生产环境</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token key atrule\">discovery</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token key atrule\">serviceId</span><span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">-</span>server <span class=\"token comment\"># 通过服务名指定配置服务中心（需要 config-server 和 config-client 都在服务注册中心注册）</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#      uri: http://localhost:8888/ # 通过网址指定配置服务中心</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>主类添加  <code>@EnableEurekaClient</code>  注解</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"启动并测试\"><a class=\"anchor\" href=\"#启动并测试\">#</a> 启动并测试</h4>\n<p>依次启动  <code>eureka-server</code>  ，  <code>config-server</code>  和  <code>config-client</code>  。</p>\n<p>访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4NzYxLw==\">http://localhost:8761/</span></p>\n<p>结果：可以看到  <code>config-server</code>  和  <code>config-client</code>  均注册到服务注册中心。</p>\n<p>访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4ODgxL2dldEZvbw==\">http://localhost:8881/getFoo</span></p>\n<p>结果：foo version 21</p>\n<p>结论： <code>config-server</code>  及  <code>config-client</code>  可以同时作为 EurekaClient 注册到服务注册中心，最终实现高可用。</p>\n<h2 id=\"消息总线spring-cloud-bus\"><a class=\"anchor\" href=\"#消息总线spring-cloud-bus\">#</a> 消息总线（Spring Cloud Bus）</h2>\n<p>Spring Cloud Bus 将分布式的节点用轻量的消息代理连接起来。它可以用于广播配置文件的更改或者服务之间的通讯，也可以用于监控。本文要讲述的是用 Spring Cloud Bus 实现通知微服务架构的配置文件的更改。</p>\n<h3 id=\"准备工作-5\"><a class=\"anchor\" href=\"#准备工作-5\">#</a> 准备工作</h3>\n<p>下载安装 Erlang 及 RabbitMQ。</p>\n<h3 id=\"改造config-client模块\"><a class=\"anchor\" href=\"#改造config-client模块\">#</a> 改造 config-client 模块</h3>\n<h4 id=\"依赖\"><a class=\"anchor\" href=\"#依赖\">#</a> 依赖</h4>\n<p>添加 bus-ampq 依赖。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-bus-amqp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-actuator<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"配置文件-7\"><a class=\"anchor\" href=\"#配置文件-7\">#</a> 配置文件</h4>\n<p>修改配置文件。</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8881</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">serviceUrl</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token key atrule\">defaultZone</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>8761/eureka/</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token key atrule\">management</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token key atrule\">endpoints</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">web</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token key atrule\">exposure</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token key atrule\">include</span><span class=\"token punctuation\">:</span> bus<span class=\"token punctuation\">-</span>refresh</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">-</span>client</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token key atrule\">label</span><span class=\"token punctuation\">:</span> master</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token key atrule\">profile</span><span class=\"token punctuation\">:</span> dev <span class=\"token comment\"># dev：开发环境，test：测试环境，pro：生产环境</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token key atrule\">discovery</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token key atrule\">serviceId</span><span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">-</span>server <span class=\"token comment\"># 通过服务名指定配置服务中心（需要 config-server 和 config-client 都在服务注册中心注册）</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">#      uri: http://localhost:8888/ # 通过网址指定配置服务中心</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token key atrule\">bus</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token key atrule\">trace</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token key atrule\">rabbitmq</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> localhost</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> guest</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5672</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> guest</pre></td></tr></table></figure><h4 id=\"启动类\"><a class=\"anchor\" href=\"#启动类\">#</a> 启动类</h4>\n<p>启动类中添加类注解  <code>@RefreshScope</code></p>\n<h3 id=\"启动服务及测试\"><a class=\"anchor\" href=\"#启动服务及测试\">#</a> 启动服务及测试</h3>\n<p>复制一份  <code>config-client</code>  ，端口改为 8882。</p>\n<p>依次启动  <code>eureka-server</code>  ，  <code>config-server</code>  及端口为 8881 和 8882 的两个  <code>config-client</code>  。</p>\n<p>访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4ODgxL2dldEZvbw==\">http://localhost:8881/getFoo</span></p>\n<p>访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4ODgyL2dldEZvbw==\">http://localhost:8882/getFoo</span></p>\n<p>返回结果均如下：</p>\n<blockquote>\n<p>foo version 3</p>\n</blockquote>\n<p>此时前往配置中心仓库修改 foo 配置为  <code>foo version 22</code></p>\n<p>访问 getFoo，返回结果仍为  <code>foo version 3</code></p>\n<p>使用 http 工具发送 POST 请求</p>\n<pre><code>http://localhost:8881/actuator/bus-refresh\n</code></pre>\n<p>查看  <code>config-server</code>  控制台，显示已从配置中心仓库中获取到最新的配置文件。</p>\n<p>再次访问 getFoo，返回结果如下：</p>\n<blockquote>\n<p>foo version 22</p>\n</blockquote>\n<p>结论：</p>\n<blockquote>\n<p>当 git 文件更改的时候，通过 pc 端用 post 向端口为 8882 的 config-client 发送请求 /bus/refresh／；此时 8882 端口会发送一个消息，由消息总线向其他服务传递，从而使整个微服务集群都达到更新配置文件。</p>\n</blockquote>\n<h2 id=\"服务链路追踪spring-cloud-sleuth\"><a class=\"anchor\" href=\"#服务链路追踪spring-cloud-sleuth\">#</a> 服务链路追踪（Spring Cloud Sleuth）</h2>\n<h3 id=\"简介-2\"><a class=\"anchor\" href=\"#简介-2\">#</a> 简介</h3>\n<blockquote>\n<p>Add sleuth to the classpath of a Spring Boot application (see below for Maven and Gradle examples), and you will see the correlation data being collected in logs, as long as you are logging requests.</p>\n<p>---- 摘自 https://github.com/spring-cloud/spring-cloud-sleuth</p>\n</blockquote>\n<p>Spring Cloud Sleuth 主要功能就是在分布式系统中提供追踪解决方案，并且兼容支持了 zipkin，你只需要在 pom 文件中引入相应的依赖即可。</p>\n<h3 id=\"构建server-zipkin\"><a class=\"anchor\" href=\"#构建server-zipkin\">#</a> 构建 server-zipkin</h3>\n<h4 id=\"下载-zipkin\"><a class=\"anchor\" href=\"#下载-zipkin\">#</a> 下载  <code>zipkin</code></h4>\n<p>下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kbC5iaW50cmF5LmNvbS9vcGVuemlwa2luL21hdmVuL2lvL3ppcGtpbi9qYXZhL3ppcGtpbi1zZXJ2ZXIv\">https://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/</span></p>\n<h4 id=\"运行\"><a class=\"anchor\" href=\"#运行\">#</a> 运行</h4>\n<blockquote>\n<p>java -jar D:\\jar\\zipkin\\zipkin-server-2.10.1-exec.jar</p>\n</blockquote>\n<h4 id=\"访问\"><a class=\"anchor\" href=\"#访问\">#</a> 访问</h4>\n<p>zipkin 默认端口为  <code>9411</code>  。</p>\n<p>浏览器访问：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo5NDEx\">http://localhost:9411</span></p>\n<h3 id=\"创建测试模块\"><a class=\"anchor\" href=\"#创建测试模块\">#</a> 创建测试模块</h3>\n<p>创建模块  <code>service-zipkin-test1</code>  和  <code>service-zipkin-test2</code>  。</p>\n<h4 id=\"创建模块并添加依赖\"><a class=\"anchor\" href=\"#创建模块并添加依赖\">#</a> 创建模块并添加依赖</h4>\n<p>添加 zipkin-client 依赖：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-zipkin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"配置文件-8\"><a class=\"anchor\" href=\"#配置文件-8\">#</a> 配置文件</h4>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8989</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> service<span class=\"token punctuation\">-</span>zipkin<span class=\"token punctuation\">-</span>test2</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">zipkin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">base-url</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span><span class=\"token number\">9411</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">sleuth</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token key atrule\">sampler</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token key atrule\">probability</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1.0</span></pre></td></tr></table></figure><h4 id=\"启动类-2\"><a class=\"anchor\" href=\"#启动类-2\">#</a> 启动类</h4>\n<p>模块  <code>service-zipkin-test1</code>  启动类：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>zipkin<span class=\"token punctuation\">.</span>test1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">brave<span class=\"token punctuation\">.</span>sampler<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Sampler</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestTemplate</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>logging<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Level</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>logging<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Logger</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServiceZipkinTest1Application</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> LOG <span class=\"token operator\">=</span> <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServiceZipkinTest1Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServiceZipkinTest1Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RestTemplate</span> restTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RestTemplate</span> <span class=\"token function\">getRestTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">callTest2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        LOG<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Level</span><span class=\"token punctuation\">.</span>INFO<span class=\"token punctuation\">,</span> <span class=\"token string\">\"interface of test1 application\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">return</span> restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getForObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8989/test2\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/info\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        LOG<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Level</span><span class=\"token punctuation\">.</span>INFO<span class=\"token punctuation\">,</span> <span class=\"token string\">\"application info of test1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"application info of test1\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Sampler</span> <span class=\"token function\">defaultSampler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Sampler</span><span class=\"token punctuation\">.</span>ALWAYS_SAMPLE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>模块  <code>service-zipkin-test2</code>  启动类：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>zipkin<span class=\"token punctuation\">.</span>test2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">brave<span class=\"token punctuation\">.</span>sampler<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Sampler</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestTemplate</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>logging<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Level</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>logging<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Logger</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServiceZipkinTest2Application</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServiceZipkinTest2Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> LOG <span class=\"token operator\">=</span> <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServiceZipkinTest2Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RestTemplate</span> restTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">callTest1Info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        LOG<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Level</span><span class=\"token punctuation\">.</span>INFO<span class=\"token punctuation\">,</span> <span class=\"token string\">\"interface of test2 application\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getForObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8988/info\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/info\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        LOG<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Level</span><span class=\"token punctuation\">.</span>INFO<span class=\"token punctuation\">,</span> <span class=\"token string\">\"application info of test2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"application info of test2\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RestTemplate</span> <span class=\"token function\">getRestTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Sampler</span> <span class=\"token function\">defaultSampler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Sampler</span><span class=\"token punctuation\">.</span>ALWAYS_SAMPLE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"访问测试\"><a class=\"anchor\" href=\"#访问测试\">#</a> 访问测试</h4>\n<ul>\n<li>\n<p>参考上文启动 server-zipkin 服务。</p>\n</li>\n<li>\n<p>启动模块  <code>service-zipkin-test1</code>  和  <code>service-zipkin-test2</code>  。</p>\n</li>\n<li>\n<p>访问：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4OTg5L3Rlc3QyJUVGJUJDJThDJUU4JUJGJTk0JUU1JTlCJTlFJUU3JUJCJTkzJUU2JTlFJTlDJUVGJUJDJTlB\">http://localhost:8989/test2，返回结果：</span></p>\n<blockquote>\n<p>application info of test1</p>\n</blockquote>\n</li>\n<li>\n<p>访问：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4OTg4L3Rlc3QxJUVGJUJDJThDJUU4JUJGJTk0JUU1JTlCJTlFJUU3JUJCJTkzJUU2JTlFJTlDJUVGJUJDJTlB\">http://localhost:8988/test1，返回结果：</span></p>\n<blockquote>\n<p>application info of test1</p>\n</blockquote>\n</li>\n<li>\n<p>访问：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo5NDExLyVFRiVCQyU4QyVFOCVCRiU5QiVFOCVBMSU4QyVFOCVCRiVCRCVFOCVCOCVBQQ==\">http://localhost:9411/，进行追踪</span></p>\n<p>即可在  <code>依赖</code>  中查看到两个工程模块之间的依赖关系。</p>\n</li>\n</ul>\n<h2 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZmFuZ3poaXBlbmcuY29tL3NwcmluZ2Nsb3VkLzIwMTgvMDgvMDEvc2MtZjEtZXVyZWthLmh0bWw=\">方志朋的专栏</span></li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "JAVA学习路线",
                "进阶篇",
                "java",
                "Spring Cloud"
            ]
        },
        {
            "id": "https://www.chinmoku.cc/computer-science/java-learning-path/1-basic/02-java-concurrency/",
            "url": "https://www.chinmoku.cc/computer-science/java-learning-path/1-basic/02-java-concurrency/",
            "title": "Java 并发编程知识整理",
            "date_published": "2021-08-25T11:37:53.000Z",
            "content_html": "<div class=\"note info\">\n<p>并发编程其实是一个很宏大的话题，并不是通过一两篇文章就能叙述详尽的。本文尽量涉及到并发编程的所有基础知识，但对于很多知识点，如果需要进行深入了解，仅仅通过本文仍是不够的。另外，有许多知识其实通过阅读源码的方式更加容易理解。推荐读者在阅读本文时，能够自己动手探究一下源码，这样能够深化认识，加深印象，而不至于仅仅停留在表面。</p>\n<p>温馨提示：本文内容较多，请合理安排时间。</p>\n</div>\n<h3 id=\"并发与并行\"><a class=\"anchor\" href=\"#并发与并行\">#</a> 并发与并行</h3>\n<h4 id=\"什么是并发\"><a class=\"anchor\" href=\"#什么是并发\">#</a> 什么是并发</h4>\n<p>在操作系统中，并发是指一个时间段中有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在同一个处理机上运行。</p>\n<h4 id=\"什么是并行\"><a class=\"anchor\" href=\"#什么是并行\">#</a> 什么是并行</h4>\n<p>并行（Parallel），在多核系统中，当一个 CPU 在执行一个进程时，另一个 CPU 可以执行另一个进程，两个进程互不抢占 CPU 资源，可以同时进行，这种方式我们称之为并行。只有在多 CPU 的情况中，才会发生并行。否则，看似同时发生的事情，其实都是并发执行的。</p>\n<h4 id=\"并发与并行的区别\"><a class=\"anchor\" href=\"#并发与并行的区别\">#</a> 并发与并行的区别</h4>\n<p>并发是指在一段时间内宏观上多个程序同时运行。并行指的是同一个时刻，多个任务确实真的在同时运行。</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/d4557b64ce08a0d34bc8d37930aa4b8c1629854956.png\" alt=\"7896890-1b1557d40f0b894c\" /></p>\n<h3 id=\"线程\"><a class=\"anchor\" href=\"#线程\">#</a> 线程</h3>\n<h4 id=\"线程的实现\"><a class=\"anchor\" href=\"#线程的实现\">#</a> 线程的实现</h4>\n<p>实现线程主要有三种方式：</p>\n<ol>\n<li>继承 Thread 类，并重写其 run 方法。</li>\n<li>实现 Runnable 接口，并实现其 run 方法。</li>\n<li>实现 Callable 接口，并实现其 call 方法。</li>\n</ol>\n<h4 id=\"线程的状态\"><a class=\"anchor\" href=\"#线程的状态\">#</a> 线程的状态</h4>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/59180430a0a2b17f23a35ceae19e67051629858658.jpg\" alt=\"线程状态的转换\" /></p>\n<ol>\n<li>\n<p>新建状态：<br />\n使用 new 关键字和 Thread 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 start () 这个线程。</p>\n</li>\n<li>\n<p>就绪状态：<br />\n当线程对象调用了 start () 方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待 JVM 里线程调度器的调度。</p>\n</li>\n<li>\n<p>运行状态：<br />\n如果就绪状态的线程获取 CPU 资源，就可以执行 run ()，此时线程便处于运行状态。处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态。</p>\n</li>\n<li>\n<p>阻塞状态：</p>\n<p>如果一个线程执行了 sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。可以分为三种：</p>\n<ul>\n<li>等待阻塞：运行状态中的线程执行 wait () 方法，使线程进入到等待阻塞状态。</li>\n<li>同步阻塞：线程在获取 synchronized 同步锁失败（因为同步锁被其他线程占用）。</li>\n<li>其他阻塞：通过调用线程的 sleep () 或 join () 发出了 I/O 请求时，线程就会进入到阻塞状态。当 sleep () 状态超时，join () 等待线程终止或超时，或者 I/O 处理完毕，线程重新转入就绪状态。</li>\n</ul>\n</li>\n<li>\n<p>死亡状态：<br />\n一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态。</p>\n</li>\n</ol>\n<h4 id=\"优先级\"><a class=\"anchor\" href=\"#优先级\">#</a> 优先级</h4>\n<p>Java 线程可以有优先级的设定，高优先级的线程比低优先级的线程有更高的几率得到执行。</p>\n<ol>\n<li>当线程的优先级没有指定时，所有线程都携带普通优先级。</li>\n<li>优先级可以用从 1-10 的范围指定。10 表示最高优先级，1 表示最低优先级，5 是普通优先级。</li>\n<li>优先级最高的线程在执行时被给予优先，但是不能保证线程在启动时就进入运行状态。</li>\n<li>与在线程池中等待运行机会的线程相比，当前正在运行的线程可能总是拥有更高的优先级。</li>\n<li>由调度程序决定哪一个线程被执行。</li>\n<li>setPriority () 用来设定线程的优先级。</li>\n<li>在线程开始方法被调用之前，线程的优先级应该被设定。</li>\n<li>可以使用常量，如 MIN_PRIORITY，MAX_PRIORITY，NORM_PRIORITY 来设定优先级。</li>\n</ol>\n<p>线程优先级具有继承性，A 线程启动 B 线程，B 线程的优先级和 A 线程的优先级是一样的。</p>\n<p>高优先级的线程总是大部分先执行完，并不是高优先级的完全先执行完。线程的优先级和执行顺序无关，优先级高的线程执行快。</p>\n<h4 id=\"线程调度\"><a class=\"anchor\" href=\"#线程调度\">#</a> 线程调度</h4>\n<p>Java 提供一个线程调度器来监视和控制 Runnable 状态的线程。线程的调度策略采用<mark>抢占式</mark>，优先级高的线程比优先级低的线程优先执行。在优先级相同的情况下，按照<ins>先到先服务</ins>的原则。每个 Java 程序都有一个默认的主线程，就是通过 JVM 启动的第一个线程。对于应用程序，主线程执行的是 main () 方法。对于 Applet 主线程是指浏览器加载并执行小应用程序的那一个线程。</p>\n<p>子线程是由应用程序创建的线程。</p>\n<p>还有一种线程称为守护线程（Daemon），这是一种用于监视其他线程工作的服务线程，优先级为最低。</p>\n<h4 id=\"创建线程的多种方式\"><a class=\"anchor\" href=\"#创建线程的多种方式\">#</a> 创建线程的多种方式</h4>\n<p>在 jdk1.5 之前，创建线程就只有两种方式，即继承 java.lang.Thread 类和实现 java.lang.Runnable 接口；而在 JDK1.5 以后，增加了两个创建线程的方式，即实现 java.util.concurrent.Callable 接口和线程池。</p>\n<p>创建线程方式：</p>\n<ul>\n<li>\n<p>继承 Thread 类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 设置线程名字</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main thread\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">MyThread</span> myThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        myThread<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"子线程:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 开启线程</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        myThread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyThread</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>实现 Runnable 接口</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RunnableTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 设置线程名字</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main thread:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyRunnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 提示：不要显式创建线程，请使用线程池。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        thread<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"子线程:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 开启线程</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyRunnable</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>实现 Callable 接口</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CallableTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 执行 Callable 方式，需要 FutureTask 实现实现，用于接收运算结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> futureTask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyCallable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>futureTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 提示：不要显式创建线程，请使用线程池。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 接收线程运算后的结果</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">Integer</span> sum <span class=\"token operator\">=</span> futureTask<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">ExecutionException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCallable</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            sum <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>自定义线程池【推荐】</p>\n<p>线程池提供了一个线程队列，队列中保存着所有等待状态的线程。避免了创建与销毁额外开销，提高了响应速度。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadPoolExecutorTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 核心线程数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> corePoolSize <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 最大线程数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> maximumPoolSize <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 超过 corePoolSize 线程数量的线程最大空闲时间</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">long</span> keepAliveTime <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 以秒为时间单位</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">TimeUnit</span> unit <span class=\"token operator\">=</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 创建工作队列，用于存放提交的等待执行任务</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span> workQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 创建线程池</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">ThreadPoolExecutor</span> threadPoolExecutor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span>corePoolSize<span class=\"token punctuation\">,</span> maximumPoolSize<span class=\"token punctuation\">,</span> keepAliveTime<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">,</span> workQueue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor<span class=\"token punctuation\">.</span>AbortPolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// ExecutorService threadPoolExecutor = Executors.newFixedThreadPool(10);</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">ThreadPool</span> threadPool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// 为线程池分配任务</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            threadPoolExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span>threadPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 关闭线程池</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        threadPoolExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadPool</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>阿里巴巴 Java 开发规范不推荐直接使用  <code>Executors.newFixedThreadPool()</code>  的方式创建线程池。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"守护线程\"><a class=\"anchor\" href=\"#守护线程\">#</a> 守护线程</h4>\n<p>在 Java 中有两类线程：用户线程、守护线程（也称为服务线程）。</p>\n<p>上文已提到，守护线程是一种用于监视其他线程工作的服务线程，因此，只要存在任何一个未结束的用户线程，守护线程就会一直运行，直到所有用户线程都结束后，守护线程才会随着 JVM 一同结束。用户线程与守护线程几乎没有区别，它们之间唯一的区别只在于线程退出的时机。</p>\n<p>守护线程并非只有虚拟机内部提供，用户在编写程序时也可以自己设置守护线程。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Thread</span> daemonThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>daemonThread<span class=\"token punctuation\">.</span><span class=\"token function\">setDaemon</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 设置线程为守护线程</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>daemonThread<span class=\"token punctuation\">.</span><span class=\"token function\">isDaemon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 判断线程是否是守护线程</span></pre></td></tr></table></figure><p>用户在设置守护线程时，应当注意：</p>\n<ol>\n<li><code>daemonThread.setDaemon(true)</code>  必须在  <code>thread.start()</code>  之前执行，否则会抛出 IllegalThreadStateException 异常，这是因为程序无法把一个正在运行的线程设置为守护线程。</li>\n<li>在守护线程中产生的新线程也是守护线程。</li>\n<li>并非所有的应用都可以分配给守护线程进行服务，如读写操作和计算逻辑。</li>\n</ol>\n<p>JRE 判断程序是否执行结束的标准是所有的前台线程（用户线程）是否执行完毕，而不关注后台线程（守护线程）的状态，所以经常会出现前台线程结束，程序就执行完毕，并关闭守护线程，但实际上守护线程并未执行完成。因此我们不应当用守护线程去访问固有资源，如文件、数据库等，因为它可能在任何时候发生中断。</p>\n<p>守护线程不依赖于终端，但是依赖于系统。</p>\n<p>守护线程的优先级比较低，垃圾回收线程就是一个经典的守护线程。</p>\n<h4 id=\"线程与进程\"><a class=\"anchor\" href=\"#线程与进程\">#</a> 线程与进程</h4>\n<ul>\n<li>\n<p>进程</p>\n<p>每个进程都有独立的代码和数据空间（进程上下文），进程间的切换会有较大的开销，一个进程包含一个或多个线程。（进程是资源分配的最小单位）</p>\n<p>多进程是指操作系统能同时运行多个任务（程序）。</p>\n</li>\n<li>\n<p>线程</p>\n<p>同一类线程共享代码和数据空间，每个线程有独立的运行栈和程序计数器，线程切换开销小。（线程是 cpu 调度的最小单位）</p>\n<p>多线程是指在同一程序中有多个顺序流在执行。</p>\n</li>\n</ul>\n<p>每个正在系统上运行的程序都是一个进程。每个进程包含一到多个线程。进程也可能是整个程序或者是部分程序的动态执行。线程是一组指令的集合，或者是程序的特殊段，它可以在程序里独立执行。</p>\n<p>在 Java 中，一个应用程序可以包含多个线程。每个线程执行特定的任务，并可与其他线程并发执行多线程使系统的空转时间最少，提高 CPU 利用率、多线程编程环境用方便的模型隐藏 CPU 在任务间切换的事实在 Java 程序启动时，一个线程立刻运行，该线程通常称为程序的主线程。</p>\n<p>主线程的重要性体现在两个方面：</p>\n<ol>\n<li>主线程是产生其他子线程的线程。</li>\n<li>通常主线程必须最后完成执行，因为它需要执行各种关闭动作。</li>\n</ol>\n<h4 id=\"线程的同步与互斥\"><a class=\"anchor\" href=\"#线程的同步与互斥\">#</a> 线程的同步与互斥</h4>\n<p>互斥是指不同线程通过竞争进入临界区（共享的数据和硬件资源），为了防止访问冲突，同一时间只允许一个访问者对其进行访问，具有唯一性和排它性。但互斥无法限制访问者对资源的访问顺序，即访问是无序的。</p>\n<p>线程的同步关系是指多个线程彼此合作，通过一定的逻辑关系来共同完成一个任务，它在互斥的基础上（大多数情况），通过其它机制实现访问者按照某种逻辑顺序对资源进行访问。</p>\n<p>同步其实已经实现了互斥，所以同步是一种更为复杂的互斥。互斥是一种特殊的同步。</p>\n<p>总的来说，同步与互斥的区别在于：</p>\n<ul>\n<li>互斥是通过竞争对资源的独占使用，线程彼此之间不需要知道对方的存在，执行顺序是一个乱序。</li>\n<li>同步是协调多个相互关联线程合作完成任务，彼此之间知道对方存在，执行顺序往往是有序的。</li>\n</ul>\n<blockquote>\n<p>同步与互斥的关系同样适用于描述不同进程之间的关系。</p>\n</blockquote>\n<h3 id=\"线程池\"><a class=\"anchor\" href=\"#线程池\">#</a> 线程池</h3>\n<p>线程池是一种多线程处理形式，处理过程中将任务添加到队列，然后在创建线程后自动启动这些任务。线程池线程都是后台线程。每个线程都使用默认的堆栈大小，以默认的优先级运行，并处于多线程单元中。</p>\n<p>使用线程池可以很好地提高性能，线程池在系统启动时即创建大量空闲的线程，程序将一个任务传给线程池，线程池就会启动一条线程来执行这个任务，执行结束以后，该线程并不会死亡，而是再次返回线程池中成为空闲状态，等待执行下一个任务。</p>\n<p><strong>为什么使用线程池？</strong></p>\n<p>多线程运行时间，系统不断的启动和关闭新线程，成本非常高，会过渡消耗系统资源，以及过渡切换线程的危险，从而可能导致系统资源的崩溃。使用线程池能很好地解决这一问题。</p>\n<h4 id=\"四种常见的线程池\"><a class=\"anchor\" href=\"#四种常见的线程池\">#</a> 四种常见的线程池</h4>\n<ol>\n<li>\n<p>CachedThreadPool</p>\n<p>缓存线程池，没有核心线程，普通线程数量为  <code>Integer.MAX_VALUE</code>  （可以理解为无限），线程闲置 60s 后回收，任务队列使用  <code>SynchronousQueue</code>  这种无容量的同步队列。<ins class=\"wavy\">适用于任务量大但耗时低的场景</ins>。</p>\n<p>使用示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 1. 创建缓存线程池</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">ExecutorService</span> cachedThreadPool <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newCachedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 2. 创建线程任务</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Runnable</span> task <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" ----> running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// use Lambda</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 3. 向线程池提交任务</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            cachedThreadPool<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>ScheduledThreadPool</p>\n<p>定时线程池，指定核心线程数量，普通线程数量无限，线程执行完任务立即回收，任务队列为延时阻塞队列。这是一个比较特别的线程池，<ins class=\"wavy\">适用于执行定时或周期性的任务</ins>。</p>\n<p>使用示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 1. 创建定时线程池</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">ScheduledExecutorService</span> scheduledThreadPool <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newScheduledThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 核心线程数：5</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 2. 创建线程任务</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Runnable</span> task <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" ----> running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// use Lambda</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 3. 向线程池提交任务</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        scheduledThreadPool<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 延迟 2s 后执行任务</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        scheduledThreadPool<span class=\"token punctuation\">.</span><span class=\"token function\">scheduleAtFixedRate</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>MILLISECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 延迟 50ms 后，每隔 2000ms 执行任务</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>SingleThreadPool</p>\n<p>单线程线程池。特点是线程池中只有一个线程（核心线程），线程执行完任务立即回收，使用有界阻塞队列（容量未指定，则使用默认值  <code>Integer.MAX_VALUE</code>  ）。</p>\n<p>使用示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 1. 创建单线程线程池</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">ExecutorService</span> singleThreadPool <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadScheduledExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 2. 创建线程任务</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Runnable</span> task <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" ----> running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// use Lambda</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 3. 向线程池提交任务</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        singleThreadPool<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>FixedThreadPool</p>\n<p>固定容量线程池，其特点是最大线程数就是核心线程数，意味着线程池<ins>只能创建核心线程</ins>，  <code>keepAliveTime</code>  为 0，即线程执行完任务立即回收。任务队列未指定容量，代表使用默认值  <code>Integer.MAX_VALUE</code>  。<ins class=\"wavy\">适用于需要控制并发线程的场景</ins>。</p>\n<p>使用示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 1. 创建固定容量线程池</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">ExecutorService</span> fixedThreadPool <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 2. 创建线程任务</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Runnable</span> task <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" ----> running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// use Lambda</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 3. 向线程池提交任务</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        fixedThreadPool<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"自己设计线程池\"><a class=\"anchor\" href=\"#自己设计线程池\">#</a> 自己设计线程池</h4>\n<p>线程池设计示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadPool</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> threadPoolSize<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 线程池大小</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span> tasks <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 任务容器</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        threadPoolSize <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 预先创建多个线程</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Create \"</span> <span class=\"token operator\">+</span> threadPoolSize <span class=\"token operator\">+</span> <span class=\"token string\">\" thread(s) and pre-start them:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> threadPoolSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">TaskConsumeThread</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread-\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            tasks<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">// 当有任务进入时，唤醒线程池中所有线程</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            tasks<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">TaskConsumeThread</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">TaskConsumeThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" is pre-started.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                            tasks<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    task <span class=\"token operator\">=</span> tasks<span class=\"token punctuation\">.</span><span class=\"token function\">removeLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    tasks<span class=\"token punctuation\">.</span><span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" received a task:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                task<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试调用：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">ThreadPool</span> pool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">Runnable</span> task <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" is dealing with it!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            pool<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"submit-和-execute\"><a class=\"anchor\" href=\"#submit-和-execute\">#</a> submit () 和 execute ()</h4>\n<p>线程池框架提供了两种方式提交任务，根据不同的业务需求选择不同的方式。</p>\n<p><code>execute()</code>  函数的定义：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Executor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>submit()</code>  函数的定义：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ExecutorService</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Executor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>submit () 和 execute () 的区别在于：</p>\n<ol>\n<li>\n<p>接收参数不同。</p>\n<p>execute () 只能接收 Runnable 类型的参数，而 submit () 函数还可以接受 Callable 类型参数。</p>\n</li>\n<li>\n<p>返回值不同。</p>\n<p>submit () 的所有方法都有返回值 Future，而 execute () 函数的返回值为空。</p>\n</li>\n<li>\n<p>异常处理。</p>\n<p>submit () 更方便对异常进行处理，它不会抛出异常而是把异常保存在成员变量中，在  <code>FutureTask.get</code>  阻塞获取的时候再把异常抛出来。而 execute () 直接抛出异常之后，线程就死掉了。</p>\n</li>\n</ol>\n<h4 id=\"线程池原理\"><a class=\"anchor\" href=\"#线程池原理\">#</a> 线程池原理</h4>\n<p>线程池状态：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/09/f95d6281993a721f4b2dd9d78991cfbd1631087693.jpg\" alt=\"线程池状态的转换\" /></p>\n<p>线程池和线程一样拥有自己的状态，在 ThreadPoolExecutor 类中定义了一个 volatile 变量通过 runState 来表示线程池的状态，线程池有五种状态，分别为 RUNNING、SHURDOWN、STOP、TIDYING、TERMINATED。</p>\n<ul>\n<li>线程池创建后处于 RUNNING 状态。</li>\n<li>调用 shutdown 后处于 SHUTDOWN 状态，此时线程池不能接受新的任务，会等待缓冲队列的任务完成。</li>\n<li>调用 shutdownNow 后处于 STOP 状态，线程池不能接受新的任务，并尝试终止正在执行的任务。</li>\n<li>当所有的任务已终止，线程池任务数量为 0 ，线程池会变为 TIDYING 状态，并且会执行钩子函数  <code>terminated()</code>  。</li>\n<li>当线程池处在 TIDYING 状态时，并执行完  <code>terminated()</code>  之后，线程池就会变更为 TERMINATED 状态。</li>\n</ul>\n<p>线程池原理：</p>\n<p>预先启动一些线程，线程无限循环从任务队列中获取一个任务进行执行，直到线程池被关闭。如果某个线程因为执行某个任务发生异常而终止，那么重新创建一个新的线程而已，如此反复。</p>\n<p>线程池工作流程：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/3fff712aeccffb2cc5f77a9b20c68b191630301653.jpg\" alt=\"线程池工作流程\" /></p>\n<p>执行逻辑说明：</p>\n<ol>\n<li>判断核心线程数是否已满，核心线程数大小和 corePoolSize 参数有关，未满则创建线程执行任务。</li>\n<li>若核心线程数已满，则判断队列是否已满，队列是否已满和 workQueue 参数有关，未满则加入队列中。</li>\n<li>若核心线程池和队列都已满，则判断线程池是否已满，线程池是否已满和 maximumPoolSize 参数有关，未满则创建线程执行任务。</li>\n<li>若核心线程池、队列和线程池都已满，则采用拒绝策略处理无法执执行的任务，拒绝策略和 handler 参数有关。</li>\n</ol>\n<h4 id=\"为什么不允许使用executors创建线程池\"><a class=\"anchor\" href=\"#为什么不允许使用executors创建线程池\">#</a> 为什么不允许使用 Executors 创建线程池</h4>\n<blockquote>\n<p>线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。</p>\n<p>quote from 《阿里巴巴 Java 开发手册》</p>\n</blockquote>\n<p>合理使用线程池可以带来以下好处：</p>\n<ol>\n<li>降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li>\n<li>提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</li>\n<li>提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配、调优和监控。</li>\n</ol>\n<p>一般来说线程池的创建最好通过  <code>new ThreadPoolExecutor</code>  来创建，这样方便控制参数。而使用 Executors 创建的线程池容易造成<ins class=\"wavy success\">内存溢出</ins>。</p>\n<p>记住线程池的工作流程，并且观察  <code>Executors.newCachedThreadPool()</code>  源代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ExecutorService</span> <span class=\"token function\">newCachedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                  <span class=\"token number\">60L</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                                  <span class=\"token keyword\">new</span> <span class=\"token class-name\">SynchronousQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当一个任务提交时，核心线程数为 0 ，则不创建核心线程，而  <code>SynchronousQueue</code>  是一个不存储元素的队列（可以理解为队列永远是满的），所以最终会创建非核心线程来执行任务。而对于非核心线程，会站其空闲 60s 后被回收，但  <code>Integer.MAX_VALUE</code>  又非常大，在资源有限的情况下，就容易导致内存溢出的异常。</p>\n<p>而 newSingleThreadExecutor 和 newFixedThreadPool 均是使用  <code>LinkedBlockingQueue</code>  队列，而这个队列的长度指定为  <code>Integer.MAX_VALUE</code>  ，即无界队列，因此往队列中可以插入无限多的任务，在资源有限的时候容易引起内存溢出的异常。</p>\n<p>总结：</p>\n<p>FixedThreadPool 和 SingleThreadExecutor，允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，导致内存溢出。</p>\n<p>CachedThreadPool，允许创建的线程数为 Integer.MAX_VALUE 可能会创建大量的线程，导致内存移出。</p>\n<p>解决方法：</p>\n<p>参考上文<strong>创建线程的多种方式</strong>部分。</p>\n<h3 id=\"线程安全\"><a class=\"anchor\" href=\"#线程安全\">#</a> 线程安全</h3>\n<h4 id=\"什么是线程安全\"><a class=\"anchor\" href=\"#什么是线程安全\">#</a> 什么是线程安全</h4>\n<blockquote>\n<p>多个线程访问同一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替执行，也不需要进行额外的同步，或者在调用方进行任何其他操作，调用这个对象的行为都可以获得正确的结果，那么这个对象就是线程安全的。</p>\n<p>或者说，一个类或者程序所提供的接口对于线程来说是原子操作或者多个线程之间的切换不会导致该接口的执行结果存在二义性，也就是说我们不用考虑同步的问题。</p>\n<p>quote from <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclQkElQkYlRTclQTglOEIlRTUlQUUlODklRTUlODUlQTg=\">百度百科_线程安全</span></p>\n</blockquote>\n<h4 id=\"多级缓存和一致性问题\"><a class=\"anchor\" href=\"#多级缓存和一致性问题\">#</a> 多级缓存和一致性问题</h4>\n<h5 id=\"什么是-cpu-缓存\"><a class=\"anchor\" href=\"#什么是-cpu-缓存\">#</a> 什么是 CPU 缓存</h5>\n<p>CPU 缓存是位于 CPU 与内存之间的临时存储器，它的容量比内存小的多，但是交换速度却比内存要快得多。CPU 缓存一般直接跟 CPU 芯片集成或位于主板总线互连的独立芯片上。</p>\n<p>随着硬件的发展，主存的读取速度远远跟不上 CPU 的频率，这样，在处理器时钟周期内，CPU 常常需要等待主存，因此导致 CPU 不必要的浪费。而 cache 的出现正是为了解决缓存 CPU 和主存之间的速度不匹配的问题。</p>\n<p>CPU 往往需要重复处理相同的数据、重复执行相同的指令，如果这部分数据、指令 CPU 能在 CPU 缓存中找到，CPU 就不需要从内存或硬盘中再读取数据、指令，从而减少了整机的响应时间。所以，缓存的意义满足以下两种<mark>局部性原理</mark>：</p>\n<ul>\n<li>时间局部性（Temporal Locality）：如果一个信息项正在被访问，那么在近期它很可能还会被再次访问。</li>\n<li>空间局部性（Spatial Locality）：如果一个存储器的位置被引用，那么将来他附近的位置也可能被引用。</li>\n</ul>\n<h5 id=\"cpu-的三级缓存\"><a class=\"anchor\" href=\"#cpu-的三级缓存\">#</a> CPU 的三级缓存</h5>\n<p>在 Windows 环境中查看主机的三级缓存：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/f3b032e86f5de9de162183a2387fc1801630310347.png\" alt=\"Windows查看三级缓存\" /></p>\n<p>随着多核 CPU 的发展，CPU 缓存通常分成了三个级别：  <code>L1</code>  ，  <code>L2</code>  ，  <code>L3</code>  。级别越小越接近 CPU，所以速度也更快，同时也代表着容量越小。在每个 CPU 内核上都存在两个一级缓存，一个是用于存储数据的 L1d Cache（Data Cache），另一个是用于存储指令的 L1i Cache（Instruction Cache）。以及缓存最小，也最接近 CPU，二三级则相对更大，距 CPU 也相对较远。一般来说，每级缓存的命中率大概都在 80% 左右，也就是说全部数据量的 80% 都可以在一级缓存中找到。剩下未命中的 20% 则从二级缓存中查找，如果三级缓存中都为找到，才从主存中读取。</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/8bb43d19c54087fee7fc3e01b1a049d21630310735.png\" alt=\"三级缓存示意图\" /></p>\n<blockquote>\n<p>如上图所示，一个核拥有两个 L1 缓存，一个 L2 缓存；在同一个 CPU 插槽之间的所有核共享一个 L3 缓存。</p>\n</blockquote>\n<p>带有高速缓存 CPU 执行计算的流程：</p>\n<ol>\n<li>将程序和数据从硬盘加载到内存中。</li>\n<li>将程序和数据从内存加载到缓存中（目前多三级缓存，数据加载顺序：L3 -&gt; L2 -&gt; L1）。</li>\n<li>CPU 将缓存中的数据加载到寄存器中，并进行运算。</li>\n<li>CPU 会将数据刷新回缓存，并在一定的时间周期之后刷新回内存。</li>\n</ol>\n<h5 id=\"缓存一致性协议mesi\"><a class=\"anchor\" href=\"#缓存一致性协议mesi\">#</a> 缓存一致性协议（MESI）</h5>\n<p>多核 CPU 情况下，存在多个 L1 缓存，要保证缓存数据的一致，不让数据产生混乱。其常见的解决方案是缓存一致性（MESI）。</p>\n<blockquote>\n<p>除了 MESI 之外，还有<ins>锁住总线</ins>也可用于保证缓存数据的一致。</p>\n</blockquote>\n<p>MESI （ <code>Modified Exclusive Shared Or Invalid</code> ）也成为伊利诺斯协议，它是一种广泛使用的支持写回策略的缓存一致性协议。为了保证多个 CPU 缓存中共享数据的一致性，定义了缓存行（Cache Line）四种状态，而 CPU 对缓存行的四种操作可能会产生不一致的状态，因此缓存控制器监听到本地操作和远程操作的时候，需要对地址一致的缓存行的状态进行一致性修改，从而保证数据在多个缓存之间保持一致性。</p>\n<blockquote>\n<p>缓存行（Cache Line）：它是存储缓存数据的单元，最常见的缓存行大小是 64 个字节。</p>\n<p>当多线程修改互相独立的变量时，如果这些变量共享同一个缓存行，就会无意中影响彼此的性能，这就是伪共享。</p>\n</blockquote>\n<p>MESI 中的每个缓存行都有 4 个状态，分别是  <code>Exclusive</code>  、  <code>Modified</code>  、  <code>Shared</code>  和  <code>Invalid</code>  。</p>\n<ol>\n<li>\n<p>Modified（修改）</p>\n<p>表示改缓存行中的内容被修改了，和内存中的数据不一致，数据只存在当前 Cache 中。</p>\n<p>缓存行必须时刻监听所有试图读取该缓存行相对就主存的操作，这种操作必须在缓存将该缓存行写回主存并将状态变成 S（共享）状态之前被延迟执行。</p>\n<p>当被写回主存之后，该缓存行的状态会变成独享（exclusive) 状态。</p>\n</li>\n<li>\n<p>Exclusive（独享、互斥）</p>\n<p>表示改缓存行中的数据和内存中的一致，数据只存在当前 Cache 中。</p>\n<p>缓存行也必须监听其它缓存读主存中该缓存行的操作，一旦有这种操作，该缓存行需要变成 S（共享）状态。</p>\n<p>当 CPU 修改该缓存行中内容时，该状态可以变成 Modified 状态。</p>\n</li>\n<li>\n<p>Shared（共享）</p>\n<p>表示该缓存行中单数据和内存中的一致，数据存在于多个 Cache 中。</p>\n<p>缓存行也必须监听其它缓存使该缓存行无效或者独享该缓存行的请求，并将该缓存行变成无效（Invalid）。</p>\n<p>当有一个 CPU 修改该缓存行时，其它 CPU 中该缓存行可以被作废（变成无效状态 Invalid）。</p>\n</li>\n<li>\n<p>Invalid（无效）</p>\n<p>表示该缓存行中的内容无效。</p>\n</li>\n</ol>\n<p>MESI 状态转换图：</p>\n<p class=\"gallery\"><img data-src=\"https://img.xfc-exclave.com/2021/09/0a434f9fe2eff4d10ea33a2e00ced5411630458713.jpg\" alt=\"MESI 状态转换图示一\" title=\"MESI 状态转换图示一\" /><br />\n<img data-src=\"https://img.xfc-exclave.com/2021/09/ba52990cfaaf1aefe8a2ac44b18d93fb1630469750.jpg\" alt=\"MESI 状态转换图示二\" title=\"MESI 状态转换图示二\" /></p>\n<h4 id=\"并发编程三大特性\"><a class=\"anchor\" href=\"#并发编程三大特性\">#</a> 并发编程三大特性</h4>\n<p>并发编程的目标是充分的利用处理器的每一个核，以达到最高的处理性能，原子性、可见性和有序性是 Java 并发编程的三大特性。</p>\n<p>要想并发程序正确地执行，必须要保证原子性、可见性以及有序性。只要有一个没有被保证，就有可能会导致程序运行不正确。</p>\n<ol>\n<li>\n<p>可见性</p>\n<p>可见性是指当一个线程修改了共享变量后，其他线程能够立即看见这个修改。</p>\n<p>CPU 中有一块缓存区叫做高速缓存，如果线程修改了某个变量的值，那么，程序会先将修改过的值放入缓存区，然后在满足一定条件时，该数据才会从缓存区同步到主存区。而只有同步到主存区后，其他线程才能 “看到” 这个修改后的值。</p>\n<p>要保证可见性，就需要使用  <code>volatile</code>  关键字，它会将高速缓存区中被修改的结果刷新到主存中，然后再读取主存中的数据，这里使用到一种机制，叫做<mark>总线嗅探机制</mark>。</p>\n<p>这里我尝试画了一张图，来解释如何保证可见性：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/09/01e093d709568b37f3731b541e49769c1630570044.jpg\" alt=\"总线嗅探机制工作图示\" width=\"450px\" /></p>\n<p>解释：</p>\n<p>总线嗅探机制会嗅探通过锁总线的数据，如果该数据只被一个核心引用，那么，该缓存行就会标记为独享状态（E），而当锁总线嗅探到多个线程同时引用该数据，那么 CPU 就会通过广播机制，通知所有引用该数据的核心，将对应的缓存行状态变更为共享状态（S），如果共享的数据被其中某一线程（核心）修改，那么此时，该数据相对于对其进行修改的线程来说，就会变更为修改状态（M），这时修改状态的数据刷新到主存区必然会再次经过锁总线，锁总线嗅探到数据发生了修改，就会再次通知其他所有引用该数据的核心，将各自原本引用数据对应的缓存行变更为无效状态（I）。而如果其他核心想要再次读取该数据，发现缓存行处于无效状态，就会重新从主内存中将这个变量加载到它们各自的缓存中。</p>\n<p>可见性是保障多线程操作中数据一致性和结果正确性的基石，多线程环境下影响变量可见性的因素：</p>\n<ul>\n<li>指令重排。</li>\n<li>线程调度（切换）。</li>\n<li>工作内存和主内存没有及时刷新。</li>\n</ul>\n<p>JVM 保障可见性的方法：final、volatile、锁。</p>\n</li>\n<li>\n<p>原子性</p>\n<p>原子操作是指一个操作不会被线程调度机制打断，一旦开始，就一直运行到结束，中间不会有任何线程切换。</p>\n<p>原子性可以保障读取到的某个属性的值是由一个线程写入的。 变量不会在同一时刻受到多个线程同时写入造成干扰。</p>\n<blockquote>\n<p>基本类型的单次读写操作是原子的，但是复合操作如：  <code>int i=0;i++</code>  ，就是非原子性的。</p>\n</blockquote>\n<p>原子性是拒绝多线程操作的，不论是多核还是单核，具有原子性的量，同一时刻只能有一个线程来对它进行操作！因此，在线程执行过程中，不允许其他并行线程对该变量进行读取和写入的操作。如果发生竞争，则其他线程必须等待。</p>\n<p>使用 volatile 关键字可以保证变量单次操作的原子性，但要想在多线程环境下保证原子性，volatile 却是无法保证复合操作的原子性的，这时就需要通过锁机制、 <code>synchronized</code>  来确保。</p>\n</li>\n<li>\n<p>有序性</p>\n<p>由于 CPU 计算速度的发展远远高于内存读写速度，因此出现性能浪费，但即使采用了高速缓存来抵消内存访问时带来的延迟，这种情况仍旧十分突出。因此，为了尽量减少 cache 的等待时间，CPU 采用了指令级并行重排序来提高执行效率，这也被称为 CPU 乱序执行，而有序性则是指程序指令按照预期的顺序执行而非乱序执行。</p>\n<p>虽然处理器会对指令进行重排序，但是它会保证程序最终结果会和代码顺序执行结果相同，这是因为处理器在进行重排序时是会考虑指令之间的数据依赖性，这样优化了效率，而且对单个线程的执行结果也不会产生影响。</p>\n<p>但是，在多线程环境下，指令重排序就无法保障执行结果的正确性了，这时就需要使用到 synchronized 关键字和 Lock 接口，它们都可以保证了多线程环境下线程间操作的有序性：</p>\n<ul>\n<li>synchronized 关键字是由 “一个变量在同一时刻只允许一条线程对其进行锁操作” 这条规则获得的，这条规则决定了持有同一个锁的两个同步块只能串行地进入。</li>\n<li>Lock 接口的作用域 synchronized 关键字相似，但它提供了更加广泛的锁定操作。</li>\n</ul>\n<blockquote>\n<p>volatile 关键字也是可以保证有序性的，因为它禁止了指令重排序。</p>\n</blockquote>\n</li>\n</ol>\n<p>关于三大特性，这篇文章也讲得很好：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNzM1MDE2\">【高并发】如何解决可见性和有序性问题？</span></p>\n<h4 id=\"指令重排结果的正确性\"><a class=\"anchor\" href=\"#指令重排结果的正确性\">#</a> 指令重排结果的正确性</h4>\n<h5 id=\"as-if-serial-语义\"><a class=\"anchor\" href=\"#as-if-serial-语义\">#</a> as-if-serial 语义</h5>\n<p><code>as-if-serial</code>  是指所有的指令都可以为了优化而被重排序，但是必须保证最终执行的结果和重排序之前的结果是一致的，其主要遵守的规则是<ins>重排序不破坏数据间的依赖关系</ins>。</p>\n<p>as-if-serial 有效地保证了单线程环境下指令重排序执行结果的正确性。</p>\n<h5 id=\"happens-before-原则\"><a class=\"anchor\" href=\"#happens-before-原则\">#</a> happens-before 原则</h5>\n<p>先行发生原则（ <code>happens-before</code> ）是  <code>JMM</code>  用来规定两个操作之间的偏序关系，这两个操作是可以跨线程的。happens-before 中确定了 8 条规则，如果两个操作之间的关系可以从其中推导出来，就说明这两个操作是有序的。</p>\n<p>happens-before 并不限制指令重排，但是需要保证指令重排结果与按 happens-before 关系来执行的结果一致。happens-before 原则保证了前后两个操作间不会被重排序且后者对前者的内存是可见的。</p>\n<p>happens-before 的八条原则：</p>\n<ol>\n<li>\n<p>程序次序规则（Program Order Rule）</p>\n<p>在一个线程内，按照控制流顺序，书写在前面的操作先行发生于书写在后面的操作。</p>\n<blockquote>\n<p>注意，这里说的是控制流顺序而不是程序代码顺序，因为要考虑到分支、循环等结构。</p>\n</blockquote>\n</li>\n<li>\n<p>管程锁定规则（Monitor Lock Rule）</p>\n<p>一个 unlock 操作先行发生于后面对同一个锁的 lock 操作。</p>\n<blockquote>\n<p>这里必须强调的是 “同一个锁”，而 “后面” 指的是时间上的先后顺序。</p>\n</blockquote>\n</li>\n<li>\n<p>volatile 变量规则（Volatile Variale Rule）</p>\n<p>对于一个 volatile 变量的写操作先行发生于这个变量的读操作。</p>\n<blockquote>\n<p>这里的 “后面” 同样是指时间上的先后。</p>\n</blockquote>\n</li>\n<li>\n<p>线程启动规则（Thread Start Rule）</p>\n<p>Thread 对象是  <code>start()</code>  方法先行发生于此线程的每一个动作。</p>\n</li>\n<li>\n<p>线程终止规则（Thread Termination Rule）</p>\n<p>线程中的所有操作都先行发生于对此线程的中止检测。</p>\n<blockquote>\n<p>我们可以通过  <code>Thread::join()</code>  方法是否结束、 <code>Thread::isAlive()</code>  的返回值等手段检测线程是否已经终止执行。</p>\n</blockquote>\n</li>\n<li>\n<p>线程中断规则（Thread Interruption Rule）</p>\n<p>对线程的 interrupt () 方法的调用先行发生于被中断线程的代码检测到中断事件的发生。</p>\n<blockquote>\n<p>可以通过  <code>Thread::interrupt()</code>  检测到是否有中断发生。</p>\n</blockquote>\n</li>\n<li>\n<p>对象终结规则（Finalizer Rule）</p>\n<p>一个对象的初始化完成（构造函数执行结束）先行发生于它的 finalize () 方法的开始。</p>\n</li>\n<li>\n<p>传递性（Transitivity）</p>\n<p>如果操作 A 先行发生于操作 B，操作 B 先行发生于操作 C，那么就可以得出操作 A 先行发生于操作 C 的结论。</p>\n<blockquote>\n<p>这一条规则是建立在前面 7 条规则基础上，满足任意一条即可使用。</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"锁\"><a class=\"anchor\" href=\"#锁\">#</a> 锁</h3>\n<p>锁与 synchronized 同步块一样，是一种线程同步机制。自 Java5 开始，  <code>java.util.concurrent.locks</code>  包提供了另一种方式实现线程同步机制 —— Lock 。</p>\n<h4 id=\"死锁-活锁和饥饿\"><a class=\"anchor\" href=\"#死锁-活锁和饥饿\">#</a> 死锁、活锁和饥饿</h4>\n<ol>\n<li>\n<p>死锁</p>\n<p>多个线程相互占用对方的资源的锁，而又相互等对方释放锁，此时若无外力干预，这些线程则一直处理阻塞的假死状态，形成死锁。</p>\n<p>死锁产生的四个必要条件：</p>\n<ol>\n<li>互斥性：线程对资源的占有是排他性的，一个资源只能被一个线程占有，直到释放。</li>\n<li>请求和保持条件：一个线程对请求被占有资源发生阻塞时，对已经获得的资源不释放。</li>\n<li>不剥夺：一个线程在释放资源之前，其他的线程无法剥夺占用。</li>\n<li>循环等待：发生死锁时，线程进入死循环，永久阻塞。</li>\n</ol>\n<p>死锁的原因：</p>\n<ol>\n<li>\n<p>竞争不可抢占性资源。</p>\n</li>\n<li>\n<p>竞争可消耗资源引起死锁。</p>\n</li>\n<li>\n<p>进程推进顺序不当。</p>\n<p>进程在运行过程中，请求和释放资源的顺序不当，也会导致产生进程死锁。</p>\n</li>\n</ol>\n<p>避免死锁的方法：</p>\n<ol>\n<li>破坏 “请求和保持” 条件。</li>\n<li>破坏 “不可抢占” 条件。</li>\n<li>破坏 “循环等待” 条件。</li>\n</ol>\n</li>\n<li>\n<p>活锁</p>\n<p>活锁与死锁正好相反，它是指多个线程相互拿到对方资源的锁之后，却又相互谦让，都主动将资源释放给别的线程使用，这样这个资源在多个线程之间跳动而又得不到执行，这就是活锁。</p>\n</li>\n<li>\n<p>饥饿</p>\n<p>对于不同优先级的多个线程，优先级高的线程能够插队并优先执行，但如果优先级高的线程一直抢占（或某一线程一直独占）优先级低线程的资源，就会导致优先级低线程无法得到执行，这就是饥饿。</p>\n</li>\n</ol>\n<p>死锁程序示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DeadLockDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Object</span> lockA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Object</span> lockB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>lockA<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" got lockA,  want LockB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>lockB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" got lockB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\": say Hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"线程-A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>lockB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" got lockB, want LockA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>lockA<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" got lockA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\": say Hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"线程-B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"公平锁与非公平锁\"><a class=\"anchor\" href=\"#公平锁与非公平锁\">#</a> 公平锁与非公平锁</h4>\n<p>公平锁是指多个线程在等待同一个锁时，必须按照申请锁的先后顺序来一次获得锁。</p>\n<p>相反的非公平锁是指多个线程获取锁的顺序并不是按照申请锁的顺序，有可能后申请的线程比先申请的线程优先获取锁。</p>\n<p>公平锁的好处是等待锁的线程不会饿死，但是整体效率相对低一些；非公平锁的好处是整体效率相对高一些，但是有些线程可能会饿死或者说很早就在等待锁，但要等很久才会获得锁。其中的原因是公平锁是严格按照请求锁的顺序来排队获得锁的，而非公平锁是可以抢占的，即如果在某个时刻有线程需要获取锁，而这个时候刚好锁可用，那么这个线程会直接抢占，而这时阻塞在等待队列的线程则不会被唤醒。</p>\n<p>对于 Java  <code>ReentrantLock</code>  而言，通过构造函数可指定该锁是否是公平锁，默认是非公平锁，例如： <code>new ReentrantLock(true)</code>  为公平锁。</p>\n<p>Synchronized 也是一种非公平锁，由于其并不像  <code>ReentrantLock</code>  是通过 AQS 的来实现线程调度，所以并没有任何办法使其变成公平锁。</p>\n<h4 id=\"共享锁与排他锁\"><a class=\"anchor\" href=\"#共享锁与排他锁\">#</a> 共享锁与排他锁</h4>\n<p>共享锁（Share Lock）又称读锁，是读取操作创建的锁。其他用户可以并发读取数据，但任何事务都不能对数据进行修改（获取数据上的排他锁），直到已释放所有共享锁。</p>\n<p>如果事务 T 对数据 A 加上共享锁后，则其他事务只能对 A 再加共享锁，不能加排他锁。获准共享锁的事务只能读数据，不能修改数据。</p>\n<p>当使用  <code>SELECT ... LOCK IN SHARE MODE;</code>  进行查询时，Mysql 会对查询结果中的每行都加共享锁，当没有其他线程对查询结果集中的任何一行使用排他锁时，可以成功申请共享锁，否则会被阻塞。其他线程也可以读取使用共享锁的表，而且这些线程读取的是同一个版本的数据。</p>\n<p>排他锁（Exclusive Lock）又称写锁，如果事务 T 对数据 A 加上排他锁后，则其他事务不能再对 A 加任任何类型的封锁。获准排他锁的事务既能读数据，又能修改数据。</p>\n<p>当使用  <code>SELECT ... FOR UPDATE</code>  进行查询时，Mysql 会对查询结果中的每行都加排他锁，当没有其他线程对查询结果集中的任何一行使用排他锁时，可以成功申请排他锁，否则会被阻塞。</p>\n<h4 id=\"乐观锁与悲观锁\"><a class=\"anchor\" href=\"#乐观锁与悲观锁\">#</a> 乐观锁与悲观锁</h4>\n<p>乐观锁与悲观锁不是指具体的什么类型的锁，而是指看待并发同步的角度（态度）。</p>\n<h5 id=\"悲观锁\"><a class=\"anchor\" href=\"#悲观锁\">#</a> 悲观锁</h5>\n<p>悲观锁指的是对数据被外界（包括本系统的其他事务和外部系统的事务）修改持保守态度，因此，在整个数据处理过程中，将数据处于锁定状态。</p>\n<p>当我们要对一个数据库中的一条数据进行修改的时候，为了避免同时被其他人修改，最好的办法就是直接对该数据进行加锁以防止并发。这种借助数据库锁机制在修改数据之前先锁定，再修改的方式被称之为悲观并发控制（又名 “悲观锁”，Pessimistic Concurrency Control，缩写 “PCC”）。如果一个事务执行的操作对某行数据应用了锁，那只有当这个事务把锁释放，其他事务才能够执行与该锁冲突的操作。</p>\n<p>悲观并发控制主要用于数据争用激烈的环境，以及发生并发冲突时使用锁保护数据的成本要低于回滚事务的成本的环境中。</p>\n<p>悲观锁的实现，往往依靠数据库提供的锁机制，在数据库中，悲观锁的流程如下：</p>\n<ol>\n<li>在对任意记录进行修改前，先尝试为该记录加上排他锁（exclusive locking）。</li>\n<li>如果加锁失败，说明该记录正在被修改，那么当前查询可能要等待或者抛出异常。</li>\n<li>如果成功加锁，那么就可以对记录做修改，事务完成后就会解锁。</li>\n<li>其间如果有其他对该记录做修改或加排他锁的操作，都会等待我们解锁或直接抛出异常。</li>\n</ol>\n<p><strong>在 MySQL InnoDB 中使用悲观锁：</strong></p>\n<blockquote>\n<p>要使用悲观锁，我们必须关闭 MySQL 数据库的自动提交属性，因为 MySQL 默认使用 autocommit 模式，也就是说，当你执行一个更新操作后，MySQL 会立刻将结果进行提交，关闭自动提交属性：  <code>set autocommit=0;</code>  。</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 0. 开始事务</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">begin</span><span class=\"token punctuation\">;</span><span class=\"token comment\">-- 或 begin work; 或 start transaction;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 1. 查询出商品信息</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token keyword\">status</span> <span class=\"token keyword\">from</span> t_goods <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">for</span> <span class=\"token keyword\">update</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 2. 根据商品信息生成订单</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> t_orders <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> goods_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 3. 修改商品 status 为 2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">update</span> t_goods <span class=\"token keyword\">set</span> <span class=\"token keyword\">status</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">-- 4. 提交事务</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">commit</span><span class=\"token punctuation\">;</span><span class=\"token comment\">-- 或 commit work;</span></pre></td></tr></table></figure><p>这种使用  <code>select ... for update</code>  的方式，通过开启排他锁的方式实现悲观锁是一种比较典型的悲观锁策略，如果出现并发修改操作，其他事务必须等待本次事务提交之后才能执行，这样就保证了当前数据不会被其他事务修改。</p>\n<blockquote>\n<p>注意：使用  <code>select ... for update</code>  会将数据锁住，但是我们需要注意一些锁的级别，MySQL InnoDB 默认使用行级锁，行级锁都是基于索引的，如果一条 SQL 语句用不到索引是不会使用行级锁的，就会使用表级锁把整张表锁住。</p>\n</blockquote>\n<p><strong>悲观锁的优缺点：</strong></p>\n<p>悲观并发控制实际上是 “先取锁再访问” 的保守策略，为数据处理的安全提供了保证。但是在效率方面，处理加锁的机制会让数据库产生额外的开销，还有增加产生死锁的机会；另外，在只读型事务处理中由于不会产生冲突，也没必要使用锁，这样做只能增加系统负载；还有会降低了并行性，一个事务如果锁定了某行数据，其他事务就必须等待该事务处理完才可以处理那行数。</p>\n<h5 id=\"乐观锁\"><a class=\"anchor\" href=\"#乐观锁\">#</a> 乐观锁</h5>\n<p>乐观并发控制（又名 “乐观锁”，Optimistic Concurrency Control，缩写 “OCC”）。</p>\n<p>乐观锁是相对悲观锁而言的，乐观锁假设认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则让返回用户错误的信息，让用户决定如何去做。</p>\n<p>相对于悲观锁，乐观锁在对数据库进行处理的时候，并不会使用数据库提供的锁机制。一般的实现乐观锁的方式就是记录数据版本。</p>\n<blockquote>\n<p>数据版本：为数据增加的一个版本标识。当读取数据时，将版本标识的值一同读出，数据每更新一次，同时对版本标识进行更新。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的版本标识进行比对，如果数据库表当前版本号与第一次取出来的版本标识值相等，则予以更新，否则认为是过期数据。</p>\n<p>实现数据版本有两种方式，第一种是使用版本号，第二种是使用时间戳。</p>\n</blockquote>\n<p><strong>使用版本号实现乐观锁：</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 1. 查询出商品信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">status</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">status</span><span class=\"token punctuation\">,</span> version<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> t_goods <span class=\"token keyword\">where</span> id<span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 2. 根据商品信息生成订单</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 3. 修改商品 status 为 2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">update</span> t_goods <span class=\"token keyword\">set</span> <span class=\"token keyword\">status</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>version<span class=\"token operator\">=</span>version<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token keyword\">where</span> id<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> version<span class=\"token operator\">=</span><span class=\"token comment\">#&#123;version&#125;;</span></pre></td></tr></table></figure><p>但是，使用乐观锁时，还需要注意进行粒度控制，如果并发率较高，则应当优化查询，减小乐观锁的粒度。</p>\n<p><strong>乐观锁的优缺点：</strong></p>\n<p>乐观并发控制相信事务之间的数据竞争的概率是比较小的，因此尽可能直接做下去，直到提交的时候才去锁定，所以不会产生任何锁和死锁。</p>\n<h5 id=\"乐观锁与悲观锁的选择\"><a class=\"anchor\" href=\"#乐观锁与悲观锁的选择\">#</a> 乐观锁与悲观锁的选择</h5>\n<p>对于乐观锁与悲观锁，需要根据实际的业务场景进行选择：</p>\n<ol>\n<li>乐观锁并未真正加锁，效率高。一旦锁的粒度掌握不好，更新失败的概率就会比较高，容易发生业务失败。</li>\n<li>悲观锁依赖数据库锁，效率低。更新失败的概率比较低。</li>\n</ol>\n<p>随着互联网三高架构的提出，悲观锁在生产环境中的应用频率越来越低。</p>\n<h4 id=\"阻塞锁与非阻塞锁\"><a class=\"anchor\" href=\"#阻塞锁与非阻塞锁\">#</a> 阻塞锁与非阻塞锁</h4>\n<ol>\n<li>\n<p>阻塞锁</p>\n<p>多个线程同时调用同一个方法时，所有线程都将排队等待。没有获得锁的线程进入阻塞状态进行等待，等待的线程在获得响应的信号（唤醒或时间）时，才可以进入线程的准备就绪状态，准备就绪状态的所有线程，通过竞争，进入运行状态。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 阻塞锁示例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Lock</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> isLocked <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>isLocked<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token comment\">// 当其他线程进来，即处于等待阻塞状态    </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        isLocked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        isLocked <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但是，当被调用的方法耗时较长且等待线程较多的时候，线程等待的时间就会很长，对于一些要求响应时间的系统来说，这种情况是不能容忍的，因此，需要让线程进入非阻塞状态，线程在未获取到锁时立刻返回，并告知用户稍后重试。</p>\n</li>\n<li>\n<p>非阻塞锁</p>\n<p>当多个线程竞争同一把锁时，其中某一线程成功获得锁，其他线程判断未获取到锁，则直接返回。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 非阻塞锁示例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Lock</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> isLocked <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isLocked<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token comment\">// 当没有拿到锁，立即返回，线程不阻塞</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        isLocked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        isLocked <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"自旋锁-互斥锁与读写锁\"><a class=\"anchor\" href=\"#自旋锁-互斥锁与读写锁\">#</a> 自旋锁、互斥锁与读写锁</h4>\n<h5 id=\"自旋锁\"><a class=\"anchor\" href=\"#自旋锁\">#</a> 自旋锁</h5>\n<p>在 Java 中，自旋锁是指尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁，这样的好处是减少线程上下文切换的消耗，缺点是循环会消耗 CPU。</p>\n<p>JDK6 中已经变为默认开启自旋锁，并且引入了自适应的自旋锁。自适应意味着自旋的时间不在固定了，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。</p>\n<p>自旋是在轻量级锁中使用的，在重量级锁中，线程不使用自旋。</p>\n<h5 id=\"互斥锁\"><a class=\"anchor\" href=\"#互斥锁\">#</a> 互斥锁</h5>\n<p>相交进程之间的关系主要有两种：同步和互斥。</p>\n<ul>\n<li>互斥，是指某一资源同时只允许一个访问者对其进行访问，具有唯一性和排它性。但互斥无法限制访问者对资源的访问顺序，即访问是无序的。</li>\n<li>同步，是指在互斥的基础上（大多数情况），通过其它机制实现访问者对资源的有序访问。在大多数情况下，同步已经实现了互斥，特别是所有写入资源的情况必定是互斥的。少数情况是指可以允许多个访问者同时访问资源。</li>\n</ul>\n<p>所谓互斥锁就是指一次最多只能有一个线程持有的锁。在 JDK 中 synchronized 和 JUC 的 Lock 就是互斥锁。</p>\n<p>互斥锁的特点：一次只能一个线程拥有互斥锁，其他线程只有等待。</p>\n<h5 id=\"读写锁\"><a class=\"anchor\" href=\"#读写锁\">#</a> 读写锁</h5>\n<p>读写锁实际是一种特殊的自旋锁，它把对共享资源的访问者划分成读者和写者，读者只对共享资源进行读访问，写者则需要对共享资源进行写操作。这种锁相对于自旋锁而言，能提高并发性，因为在多处理器系统中，它允许同时有多个读者来访问共享资源，最大可能的读者数为实际的逻辑 CPU 数。写者是排他性的，一个读写锁同时只能有一个写者或多个读者（与 CPU 数相关），但不能同时既有读者又有写者。</p>\n<p>在读写锁保持期间也是抢占失效的。如果读写锁当前没有读者，也没有写者，那么写者可以立刻获得读写锁，否则它必须自旋在那里，直到没有任何写者或读者；如果读写锁没有写者，那么读者可以立即获得该读写锁，否则读者必须自旋在那里，直到写者释放该读写锁。</p>\n<h4 id=\"类锁与对象锁\"><a class=\"anchor\" href=\"#类锁与对象锁\">#</a> 类锁与对象锁</h4>\n<h5 id=\"类锁\"><a class=\"anchor\" href=\"#类锁\">#</a> 类锁</h5>\n<p>类锁是加持在类上的，使用  <code>synchronized static</code>  或者  <code>synchronized(Xxx.class)</code>  方法使用的锁都是类锁，因为 class 和静态方法在系统中只会产生一份，所以在单系统环境中使用类锁是线程安全的。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestLock</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">methodName1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"类锁方式一\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">methodName2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TestLock</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"类锁方式二\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"对象锁\"><a class=\"anchor\" href=\"#对象锁\">#</a> 对象锁</h5>\n<p>synchronized 修饰非静态的方法和  <code>synchronized(this)</code>  使用的都是对象锁，一个系统可以有多个对象实例，所以使用对象锁不是线程安全的，除非保证一个系统该类型的对象只会创建一个（通常使用单例模式）才能保证线程安全。</p>\n<p>单例模式保证对象安全：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 单例模式 - 双重检查锁</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestLock</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">TestLock</span> testLock <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 私有化构造函数不允许 new 来产生对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TestLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 保证一个系统只会创建一个对象实例</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">TestLock</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>testLock <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TestLock</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>testLock <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    testLock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> testLock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"内置锁与显式锁\"><a class=\"anchor\" href=\"#内置锁与显式锁\">#</a> 内置锁与显式锁</h4>\n<p>在 Java 并发编程中，可以将锁分为两类：内置锁（隐式锁，sychronized）和显式锁（lock）。</p>\n<p>所谓的显示和隐式就是在使用的时候，使用者要不要手动写代码去获取锁和释放锁的操作。</p>\n<p>内置锁的使用：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 同步普通方法，其锁对象是：this</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>v <span class=\"token operator\">+=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 同步静态方法，其锁对象是：当前类的 Class 对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>v <span class=\"token operator\">-=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 同步代码块，其锁对象是：synchronized 所修饰的 obj</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">decrementAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">--</span>v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>显式锁的使用：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">ReentrantLock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 手动获取锁</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 手动释放锁</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在使用 lock 的时候，使用者需要手动的获取和释放锁，如果没有释放锁，就有可能导致出现死锁的现象，通常需要配合  <code>try/finally</code>  语句块来完成。</p>\n<p><strong>内置锁和显式锁的区别：</strong></p>\n<ol>\n<li>\n<p>使用方式不同。</p>\n</li>\n<li>\n<p>等待是否可中断：</p>\n<p>synchronized 不可中断，除非抛出异常或者正常运行完成。</p>\n<p>lock 可以中断，中断方式：</p>\n<ol>\n<li>调用设置超时方法  <code>tryLock(long timeout ,timeUnit unit)</code>  。</li>\n<li>调用  <code>lockInterruptibly()</code>  、  <code>interrupt()</code>  方法 。</li>\n</ol>\n</li>\n<li>\n<p>加锁时是否可以公平：</p>\n<p>synchronized 是非公平锁。</p>\n<p>lock 可以指定是否可以公平，默认为非公平所，指定方式：  <code>new ReentrantLock(true)</code>  ，true 表示公平锁。</p>\n</li>\n<li>\n<p>是否可以精确唤醒线程。</p>\n<p>synchronized 要么随机唤醒一个线程，要么是唤醒所有等待的线程。</p>\n<p>lock 可以用分组来实现唤醒需要唤醒的线程，它可以精确地唤醒线程。</p>\n</li>\n</ol>\n<h4 id=\"可重入锁与不可重入锁\"><a class=\"anchor\" href=\"#可重入锁与不可重入锁\">#</a> 可重入锁与不可重入锁</h4>\n<p>可重入锁也叫递归锁，是指在外层函数获得锁之后，内层递归函数仍然可以获取到该锁，即线程可以进入任何一个它已经拥有锁的代码块。在 JAVA 环境下 ReentrantLock 和 synchronized 都是可重入锁。可重入锁最大的作用是避免死锁。其实现原理是通过为每个锁关联一个请求计数器和一个占有它的线程，当计数为 0 时，认为锁是未被占有的；线程请求一个未被占有的锁时，JVM 将记录锁的占有者，并且将请求计数器置为 1 。如果同一个线程再次请求这个锁，计数器将递增；每次占用线程退出同步块，计数器值将递减。直到计数器为 0 时锁被释放。</p>\n<p>可重入锁在释放锁前，线程可再次进入锁方法，通过这种方式，可以保证在递归的环境下，不会出现死锁的现象。</p>\n<p>不可重入锁（自旋锁），线程在释放锁前不可再次进入锁方法，也就是说，获得一次锁就只能进入一次锁方法，再次进入则需要重新获取锁。</p>\n<h4 id=\"无锁-偏向锁-轻量级锁和重量级锁\"><a class=\"anchor\" href=\"#无锁-偏向锁-轻量级锁和重量级锁\">#</a> 无锁、偏向锁、轻量级锁和重量级锁</h4>\n<p>Java 中每个对象都可作为锁，锁有四种级别，按照量级从轻到重分为：无锁、偏向锁、轻量级锁和重量级锁，并且，锁只能升级不能降级。</p>\n<p>下图来源于网络，请点击放大进行查看：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/09/6906fc9714f23752e400c59c59003d551631003242.png\" alt=\"不同量级锁的获取流程\" /></p>\n<h5 id=\"无锁\"><a class=\"anchor\" href=\"#无锁\">#</a> 无锁</h5>\n<p>无锁是指线程通过无限循环来执行更新操作，如果执行成功就退出循环，如果执行失败（有其他线程更新了值），则继续执行，直到成功为止。CAS 操作就属于无锁。如果从性能的角度来看，无锁状态的性能是非常高的。</p>\n<h5 id=\"偏向锁\"><a class=\"anchor\" href=\"#偏向锁\">#</a> 偏向锁</h5>\n<p>引入偏向锁是为了在无多线程竞争的情况下尽量减少不必要的轻量级锁执行路径，因为轻量级锁的获取及释放依赖多次 CAS 原子指令，而偏向锁只需要在置换 ThreadID 的时候依赖一次 CAS 原子指令。</p>\n<p>当只有一个线程竞争锁时，我们既不需要阻塞，也不需要自旋，因为只有一个线程在竞争，我们只需要判断该偏向锁中的 ThreadID 是否为当前线程即可。如果是，就执行同步代码，反之，就尝试使用 CAS 修改 ThreadID，修改成功执行同步代码，不成功就将偏向锁膨胀为轻量级锁。</p>\n<h5 id=\"轻量级锁\"><a class=\"anchor\" href=\"#轻量级锁\">#</a> 轻量级锁</h5>\n<p>获取轻量锁的过程与偏向锁不同，竞争锁的线程首先需要拷贝对象头中的  <code>Mark Word</code>  到帧栈的锁记录中。拷贝成功后使用 CAS 操作尝试将对象的 Mark Word 更新为指向当前线程的指针。如果这个更新动作成功了，那么这个线程就拥有了该对象的锁。如果更新失败，那么意味着有多个线程在竞争。</p>\n<p>当竞争线程尝试占用轻量级锁失败多次之后（使用自旋）轻量级锁就会膨胀为重量级锁，重量级线程指针指向竞争线程，竞争线程也会阻塞，等待轻量级线程释放锁后唤醒。</p>\n<p>轻量级锁的前提假设是对于绝大部分的锁，在整个同步周期内都是不存在竞争的，通过 CAS 操作来避免时候互斥锁的开销。</p>\n<h5 id=\"重量级锁\"><a class=\"anchor\" href=\"#重量级锁\">#</a> 重量级锁</h5>\n<p>重量级锁的加锁、解锁过程和轻量级锁差不多，区别在于：重量级锁在竞争失败后，线程阻塞，释放锁后，唤醒阻塞的线程，不使用自旋锁，它不会那么消耗 CPU，所以适合用在同步块执行时间长的情况下。</p>\n<h4 id=\"compare-and-swap\"><a class=\"anchor\" href=\"#compare-and-swap\">#</a> Compare and Swap</h4>\n<blockquote>\n<p>CAS 是  <code>Compare and Swap</code>  的缩写，意为比较并转换，它是解决多线程并行情况下使用锁造成性能损耗的一种机制，CAS 操作包含三个操作数 —— 内存位置（V）、预期原值（A）和新值 (B)。如果内存位置的值与预期原值相匹配，那么处理器会自动将该位置值更新为新值。否则，处理器不做任何操作。无论哪种情况，它都会在 CAS 指令之前返回该位置的值。CAS 有效地说明了 “我认为位置 V 应该包含值 A；如果包含该值，则将 B 放到这个位置；否则，不要更改该位置，只告诉我这个位置现在的值即可。</p>\n<p>quote from <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9DQVMvMTYzNzk4MDE=\">百度百科_CAS</span></p>\n</blockquote>\n<h4 id=\"数据库相关锁机制\"><a class=\"anchor\" href=\"#数据库相关锁机制\">#</a> 数据库相关锁机制</h4>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/12/cd181f5eadb4aef1161b52d157626a561640618640.png\" alt=\"数据库相关的锁机制\" /></p>\n<h4 id=\"分布式锁\"><a class=\"anchor\" href=\"#分布式锁\">#</a> 分布式锁</h4>\n<blockquote>\n<p>分布式锁，是控制分布式系统之间同步访问共享资源的一种方式。 在分布式系统中，常常需要协调他们的动作。如果不同的系统或是同一个系统的不同主机之间共享了一个或一组资源，那么访问这些资源的时候，往往需要互斥来防止彼此干扰来保证一致性，在这种情况下，便需要使用到分布式锁。</p>\n<p>quote from <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLWhhbnMvJUU1JTg4JTg2JUU1JUI4JTgzJUU1JUJDJThGJUU5JTk0JTgx\">维基百科_分布式锁</span></p>\n</blockquote>\n<p>CAP 原则：任何一个分布式系统都无法同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance），最多只能同时满足两项。</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/12/9f6062e3cc60f3000ed37d2fd4aa50731640618654.png\" alt=\"CAP原则\" height=\"400px\" /></p>\n<p>也就是说单纯的 Java Api 并不能提供分布式锁的能力。目前主流的分布式锁主要有三种：数据库、缓存（Redis 等）、Zookeeper 等中间件。</p>\n<h5 id=\"基于数据库的实现\"><a class=\"anchor\" href=\"#基于数据库的实现\">#</a> 基于数据库的实现</h5>\n<ol>\n<li>\n<p>基于数据库表</p>\n<p>实现分布式锁最简单的方式，就是直接创建一张锁表，然后通过操作该表中的数据来实现。当我们要锁住某个方法或资源时，我们就在该表中增加一条记录，想要释放锁的时候就删除这条记录。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token punctuation\">`</span>methodLock<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'主键'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">`</span>method_name<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">''</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'锁定的方法名'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">`</span><span class=\"token keyword\">desc</span><span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'备注信息'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">`</span>update_time<span class=\"token punctuation\">`</span> <span class=\"token keyword\">timestamp</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span> <span class=\"token keyword\">ON</span> <span class=\"token keyword\">UPDATE</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'保存数据时间，自动生成'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">UNIQUE</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">`</span>uidx_method_name<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>method_name<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">USING</span> <span class=\"token keyword\">BTREE</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8 <span class=\"token keyword\">COMMENT</span><span class=\"token operator\">=</span><span class=\"token string\">'锁定中的方法'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>当我们想要锁住某个方法时，则执行如下 SQL ：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> methodLock<span class=\"token punctuation\">(</span>method_name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">desc</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'methodName'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'desc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在这里的示例中，由于对字段 method_name 进行了唯一性约束，所以，当多个请求调用 methodName 方法时，数据库会保证只有一个操作可以成功，那么我们就可以认为操作成功的那个线程获得了该方法的锁，可以执行方法体内容。当方法执行完毕之后，需要释放锁，则执行如下 SQL ：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">delete</span> <span class=\"token keyword\">from</span> methodLock <span class=\"token keyword\">where</span> method_name <span class=\"token operator\">=</span> <span class=\"token string\">'methodName'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>但这种实现方式存在较大问题：</p>\n<ul>\n<li>这把锁依赖与数据库的可用性，一旦数据库宕机就会导致业务不可用。</li>\n<li>这把锁没有失效时间，一旦解锁失败就会导致锁记录一直存在，其他线程无法再次获得锁。</li>\n<li>这把锁只能是非阻塞的，因为数据的插入操作一旦执行失败就会直接报错，而不会等待锁的释放。</li>\n<li>这把锁是非重入的，同一线程获得锁后，无法再次获得锁，因为数据库中已存在相同记录。</li>\n</ul>\n<p>当然，对于这些问题，也可以有针对性的方案，例如：数据库同步保证数据可用、定时任务防止锁滞留、循环重试使线程等待、记录额外信息实现锁重入。</p>\n</li>\n<li>\n<p>基于数据库排他锁</p>\n<p>除了通过增删表记录来实现分布式锁外，还可以借助数据中自带的锁来实现。</p>\n<p>在查询语句时增加  <code>for update</code>  ，数据库就会在查询的过程中为数据库表增加排他锁，当某条记录被加上排他锁之后，其他线程无法再在该行记录上增加排他锁。</p>\n<p>我们可以认为获得排它锁的线程即可获得分布式锁，当获取到锁之后，可以执行方法的业务逻辑，执行完方法之后，通过  <code>commit()</code>  提交事务，即可释放锁。</p>\n<blockquote>\n<p>这里特指 Mysql 的 InnoDB 引擎，只有通过索引进行检索的时候才会使用行级锁，否则会使用表级锁，如果希望使用行级锁，则需要给对应的字段添加唯一索引。</p>\n</blockquote>\n<p>相比增删表记录的方式实现分布式锁，这种方法可以有效地解决无法释放锁和锁阻塞的问题。</p>\n<p>但这里还可能存在另外一个问题，虽然我们对 method_name 使用了唯一索引，并且显示使用 for update 来使用行级锁。但是，MySql 会对查询进行优化，即便在条件中使用了索引字段，但是否使用索引来检索数据是由 MySQL 通过判断不同执行计划的代价来决定的，如果 MySQL 认为全表扫效率更高，比如对一些很小的表，它就不会使用索引，这种情况下 InnoDB 将使用表锁，而不是行锁。</p>\n<p>此外，我们要使用排他锁来进行分布式锁的 lock，那么一个排他锁长时间不提交，就会占用数据库连接。一旦类似的连接变得多了，就可能把数据库连接池撑爆。</p>\n</li>\n</ol>\n<h5 id=\"基于缓存的实现\"><a class=\"anchor\" href=\"#基于缓存的实现\">#</a> 基于缓存的实现</h5>\n<blockquote>\n<p>这里 redis 为例。</p>\n</blockquote>\n<p>使用 redis 缓存实现分布式锁，需要使用到如下命令：</p>\n<ol>\n<li>\n<p>setnx</p>\n<p><code>setnx key value</code>  当且仅当 key 不存在时，将 key 设置为 value 字符串，若设置成功，则返回 1 。若 key 已存在，则不进行操作直接返回 0 。</p>\n</li>\n<li>\n<p>expire</p>\n<p><code>expire key timeout</code>  为 key 设置一个超时时间，单位为 second ，超过这个时间会自动释放，可以避免死锁。</p>\n</li>\n<li>\n<p>delete</p>\n<p><code>delete key</code>  删除 key 。</p>\n</li>\n</ol>\n<p>redis 分布式锁实现的思想：</p>\n<ol>\n<li>获取锁的时候，使用 setnx 加锁，并使用 expire 命令为锁添加一个超时时间，超过该时间则自动释放锁，锁的 value 值为一个随机生成的 UUID，通过此在释放锁的时候进行判断。</li>\n<li>获取锁的时候还设置一个获取的超时时间，若超过这个时间则放弃获取锁。</li>\n<li>释放锁的时候，通过 UUID 判断是不是该锁，若是该锁，则执行 delete 进行锁释放。</li>\n</ol>\n<p>可以使用缓存来代替数据库来实现分布式锁，这个可以提供更好的性能，同时，很多缓存服务都是集群部署的，可以避免单点问题。并且很多缓存服务都提供了可以用来实现分布式锁的方法，比如 redis 的 setnx 方法。并且，这些缓存服务也都提供了对数据的过期自动删除的支持，可以直接设置超时时间来控制锁的释放。</p>\n<p>但缓存实现分布式锁也有其缺陷，即通过超时时间来控制锁的失效时间并不是十分靠谱。</p>\n<h5 id=\"基于-zookeeper-的实现\"><a class=\"anchor\" href=\"#基于-zookeeper-的实现\">#</a> 基于 Zookeeper 的实现</h5>\n<p><span class=\"label danger\">❗️TODO</span> 由于还不了解 zookeeper ，等详细了解之后再进行补充。</p>\n<h4 id=\"monitor\"><a class=\"anchor\" href=\"#monitor\">#</a> monitor</h4>\n<p>Monitor 其实是一种同步工具，或者说是同步机制，它通常被描述成一个对象，主要特点是：</p>\n<ol>\n<li>同步：对象内的所有方法都互斥的执行。同一个 Monitor 只有一个运行许可，任何线程进入任何一个方法都需要获取该许可，并在离开时归还。</li>\n<li>协作：Monitor 通常提供  <code>signal</code>  机制，允许正持有许可的线程暂时放弃许可，等待某个监视条件成立后，当前线程就可以通知正在等待这个条件的线程，让它可以重新获得运行许可。</li>\n</ol>\n<p>在 Monitor Object 模式中，主要有四种类型的参与者：</p>\n<ol>\n<li>监视者对象（Monitor Object）：负责公共的接口方法，这些公共的接口方法会在多线程的环境下被调用执行。</li>\n<li>同步方法：这些方法是监视者对象所定义的，它保证在任一事件内只有一个同步方法能够执行。</li>\n<li>监控锁（Monitor Lock）：每一个监视者对象都会拥有一把监视锁。</li>\n<li>监控条件（Monitor Condition）：同步方法使用监控锁和监控条件来决定方法是否需要阻塞或重新执行。</li>\n</ol>\n<p>实际上 Java Object 类本身就是监视者对象，Java 对于 Monitor Object 模式做了内建的支持。每个 Object 都带了一把看不见的锁，通常称为内部锁、 Monitor 锁，或者 Instrinsic Lock，这把锁就是监控锁，并且通过  <code>wait()</code> 、 <code>notify()</code> 、 <code>notifyAll()</code>  方法构成监控条件。</p>\n<blockquote>\n<p>关于 wait、notify、notifyAll 将在本文后续部分进行更加详细的说明。</p>\n</blockquote>\n<h3 id=\"锁的优化\"><a class=\"anchor\" href=\"#锁的优化\">#</a> 锁的优化</h3>\n<p>关于锁的优化的方法和思路，主要可以从两个层面进行，其一是在<ins>虚拟机层面</ins>对锁进行优化，它主要是在偏向锁、轻量级锁和重量级锁方面进行优化。而另一层面则是在开发者可控的<ins>代码层面</ins>进行优化，主要有以下几种思路和方法：</p>\n<ol>\n<li>\n<p>减少锁持有的时间。</p>\n<p>一个线程持有锁的时间越长，其他竞争线程等待的时间就越长，因此，为了提高锁的性能，只需要在必要时才进行同步，这样就能明显减小线程持有锁的时间。</p>\n<p>优化前的同步代码块：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">syncMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//... 其他代码片段</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">mutextMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//... 其他代码片段</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>优化后的同步代码块：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">syncMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//... 其他代码片段</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    \t<span class=\"token function\">mutextMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//... 其他代码片段</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>减小锁粒度。</p>\n<p>将大对象（这个对象可能会被很多线程访问），拆成小对象，大大增加并行度，降低锁竞争。降低了锁的竞争，偏向锁，轻量级锁成功率才会提高。</p>\n<p>最典型的减小锁粒度的案例就是  <code>ConcurrentHashMap</code>  ，他只锁住了 Hash 桶中的某一个桶，而不像 HashTable 一样锁住整个对象。</p>\n</li>\n<li>\n<p>锁分离。</p>\n<p>最常见的锁分离就是读写锁 ReadWriteLock，根据功能进行分离成读锁和写锁，这样读读不互斥，读写互斥，写写互斥，即保证了线程安全，又提高了性能。</p>\n<blockquote>\n<p>读写分离思想可以延伸，只要操作互不影响，锁就可以分离。</p>\n</blockquote>\n</li>\n<li>\n<p>锁粗化。</p>\n<p>为了保证多线程的执行效率，通常情况下会要求每个线程持有锁的时间尽量短，一旦使用完公共资源后，就应当立即释放锁。但是，也应当考虑不同的场景，如果一个线程对于同一个锁不断进行请求、同步和释放操作，其本身也会消耗宝贵的资源。</p>\n<p>优化前的同步代码块：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">syncMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 频繁获取锁</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token comment\">// ... do sth.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>优化后的同步代码块：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">syncMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 获取锁频率减小</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token comment\">// ... do sth.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>注意：锁粗化的操作，需要根据实际情况进行考虑，被纳入同一个锁进行处理的多个操作，应当尽量保证它们能够在较短的时间内执行完毕，否则就会导致其他竞争线程等待时间过长。</p>\n</blockquote>\n</li>\n<li>\n<p>锁消除。</p>\n<p>锁消除是在编译器级别进行的，在即时编译时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作。</p>\n<blockquote>\n<p>这些在即时编译时出现的不可能被共享的对象，不一定是我们在编写程序时为其进行了加锁的操作，也有可能是在 JDK 的实现中就包含有加锁的操作，比如  <code>Vector</code>  和  <code>StringBuffer</code>  类中的很多方法都是加锁的。当我们在一些不会有线程安全的情况下使用这些类的方法时，达到某些条件时，编译器会将锁消除来提高性能。</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"synchronized\"><a class=\"anchor\" href=\"#synchronized\">#</a> synchronized</h3>\n<p>synchronized 是 Java 中的关键字，在上文中介绍锁的相关概念时已经反复使用到，它是一种同步锁。它修饰的对象主要有以下几种：</p>\n<ol>\n<li>修饰代码块，被修饰的代码块称为同步语句块，其作用的范围是大括号括起来的代码，作用的对象是调用这个代码块的对象。</li>\n<li>修饰方法，被修饰的方法称为同步方法，其作用的范围是整个方法，作用的对象是调用这个方法的对象。</li>\n<li>修饰静态方法，其作用的范围是整个静态方法，作用的对象是这个类的所有对象。</li>\n<li>修饰类，其作用的范围是 synchronized 后面括号括起来的部分，作用主的对象是这个类的所有对象。</li>\n</ol>\n<h4 id=\"synchronized-的底层实现\"><a class=\"anchor\" href=\"#synchronized-的底层实现\">#</a> synchronized 的底层实现</h4>\n<p>针对一个 synchronized 修饰的代码块进行反编译，得到如下结果：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/09/4ab22003c06d96e69207a1b8e402df801631158386.png\" alt=\"同步代码块反编译结果\" /></p>\n<p>可以观察到， <code>synchronized</code>  关键字在经过 Javac 编译之后，会在同步块的前后形成  <code>monitorenter</code>  和  <code>monitorexit</code>  两个字节码指令。</p>\n<p>根据《Java 虚拟机规范》的要求：</p>\n<ul>\n<li>在执行  <code>monitorenter</code>  指令时，首先要去尝试获取对象的锁（获取对象锁的过程，其实是获取 monitor 对象的所有权的过程）。</li>\n<li>如果这个对象没被锁定，或者当前线程已经持有了那个对象的锁，就把锁的计数器的值增加一。</li>\n<li>而在执行  <code>monitorexit</code>  指令时会将锁计数器减一，一旦计数器的值为零，锁随即就被释放了。</li>\n<li>如果获取对象锁失败，那当前线程就应当被阻塞等待，直到请求锁定的对象被持有它的线程释放为止。</li>\n</ul>\n<p>由此可以看出 synchronized 的实现原理：synchronized 的语义底层是通过一个 monitor 的对象来完成，其实 wait/notify 等方法也依赖于 monitor 对象，这就是为什么只有在同步的块或者方法中才能调用 wait/notify 等方法，否则会抛出  <code>java.lang.IllegalMonitorStateException</code>  的异常的原因。</p>\n<blockquote>\n<p>synchronized 修饰的其他对象也是同理，尽管它们有可能并不是显式地调用 monitorenter 和 monitorexit 指令。</p>\n<p>反编译文件之所以有两个 monitorexit 指令，是因为它们分别用于正常退出和异常退出。</p>\n</blockquote>\n<h4 id=\"synchronized-与-lock-的关系\"><a class=\"anchor\" href=\"#synchronized-与-lock-的关系\">#</a> synchronized 与 lock 的关系</h4>\n<blockquote>\n<p>参考上文  <code>锁 &gt;&gt; 内置锁与显式锁</code>  部分。</p>\n</blockquote>\n<h4 id=\"不使用-synchronized-如何实现一个线程安全的单例\"><a class=\"anchor\" href=\"#不使用-synchronized-如何实现一个线程安全的单例\">#</a> 不使用 synchronized 如何实现一个线程安全的单例</h4>\n<p>借助 CAS（AtomicReference）实现单例模式：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AtomicReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">></span></span> INSTANCE <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">Singleton</span> instance <span class=\"token operator\">=</span> INSTANCE<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> instance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>INSTANCE<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>用 CAS 的好处在于不需要使用传统的锁机制来保证线程安全，CAS 是一种基于忙等待的算法，依赖底层硬件的实现，相对于锁它没有线程切换和阻塞的额外消耗，可以支持较大的并行度。<br />\nCAS 的一个重要缺点在于如果忙等待一直执行不成功（一直在死循环中），会对 CPU 造成较大的执行开销。</p>\n<h4 id=\"synchronized-和原子性-可见性和有序性之间的关系\"><a class=\"anchor\" href=\"#synchronized-和原子性-可见性和有序性之间的关系\">#</a> synchronized 和原子性、可见性和有序性之间的关系</h4>\n<ol>\n<li>\n<p>synchronized 与原子性</p>\n<p>在 Java 中，为了保证原子性，提供了两个高级的字节码指令  <code>monitorenter</code>  和  <code>monitorexit</code>  。这两个字节码指令，在 Java 中对应的关键字就是 synchronized 。</p>\n<p>通过 monitorenter 和 monitorexit 指令，可以保证被 synchronized 修饰的代码在同一时间只能被一个线程访问，在锁未释放之前，无法被其他线程访问到。因此，在 Java 中可以使用 synchronized 来保证方法和代码块内的操作是原子性的。</p>\n</li>\n<li>\n<p>synchronized 与可见性</p>\n<p>被 synchronized 修饰的代码，在开始执行时会加锁，执行完成后会进行解锁。而为了保证可见性，有这样一条规则：对一个变量解锁之前，必须先把此变量同步回主存中。这样解锁后，后续线程就可以访问到被修改后的值。</p>\n<p>所以，synchronized 关键字锁住的对象，其值是具有可见性的。</p>\n</li>\n<li>\n<p>synchronized 与有序性</p>\n<p>由于 synchronized 修饰的代码，同一时间只能被同一线程访问。那么也就是单线程执行的。所以，可以保证其有序性。</p>\n</li>\n</ol>\n<h3 id=\"volatile\"><a class=\"anchor\" href=\"#volatile\">#</a> volatile</h3>\n<p><code>volatile</code>  通常被比喻成 “轻量级的  <code>synchronized</code>  ”，也是 Java 并发编程中比较重要的一个关键字。和 synchronized 不同，volatile 是一个变量修饰符，只能用来修饰变量，无法修饰方法及代码块等。</p>\n<p>volatile 的用法比较简单，只需要在声明一个可能被多线程同时访问的变量时，使用 volatile 修饰即可：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> singleton<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> <span class=\"token function\">getSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singleton <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singleton <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> singleton<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"volatile-的实现原理\"><a class=\"anchor\" href=\"#volatile-的实现原理\">#</a> volatile 的实现原理</h4>\n<p>对于 volatile 变量，当对 volatile 变量进行写操作的时候，JVM 会向处理器发送一条 lock 前缀的指令，将这个缓存中的变量回写到系统主存中。而在多处理器下，但单纯写回到内存也并不能使其他处理器的缓存数据得到更新，为了保证各个处理器的缓存是一致的，就会实现缓存一致性协议。</p>\n<blockquote>\n<p><code>缓存一致性协议</code>  在前文中已有详细说明，此处不再赘述。</p>\n</blockquote>\n<p>总之，如果一个变量被 volatile 所修饰的话，在每次数据变化之后，其值都会被强制刷入主存。而其他处理器的缓存由于遵守了缓存一致性协议，也会把这个变量的值从主存加载到自己的缓存中，这就保证了一个 volatile 在并发编程中，其值在多个缓存中是可见的。</p>\n<h4 id=\"volatile-和原子性-可见性和有序性之间的关系\"><a class=\"anchor\" href=\"#volatile-和原子性-可见性和有序性之间的关系\">#</a> volatile 和原子性、可见性和有序性之间的关系</h4>\n<ol>\n<li>\n<p>volatile 与原子性</p>\n<p>要保证原子性，就需要通过字节码指令 monitorenter 和 monitorexit，但是 volatile 和这两个指令之间是没有任何关系的。所以，<mark>volatile 是不能保证原子性的</mark>。</p>\n<p>只有在部分场景中，可以使用 volatile 来代替 synchronized：</p>\n<ul>\n<li>运算结果并不依赖变量的当前值，或者能够确保只有单一的线程会修改变量的值。</li>\n<li>变量不需要与其他状态变量共同参与不变约束。</li>\n</ul>\n</li>\n<li>\n<p>volatile 与可见性</p>\n<p>Java 中的 volatile 关键字提供了一个功能，那就是被其修饰的变量在被修改后可以立即同步到主内存，被其修饰的变量在每次使用之前都从主内存刷新。因此，可以使用 volatile 来保证多线程操作时变量的可见性。</p>\n<p>关键词：缓存一致性协议，总线嗅探机制。</p>\n</li>\n<li>\n<p>volatile 与有序性</p>\n<p>volatile 可以禁止指令重排，这就保证了代码的程序会严格按照代码的先后顺序执行，这就保证了有序性。</p>\n<p>关键词：内存屏障。</p>\n</li>\n</ol>\n<h4 id=\"内存屏障\"><a class=\"anchor\" href=\"#内存屏障\">#</a> 内存屏障</h4>\n<p>内存屏障（Memory Barrier），也称内存栅栏（Memory Fence），内存栅障，屏障指令等，是一类同步屏障指令，是 CPU 或编译器在对内存随机访问的操作中的一个同步点，使得此点之前的所有读写操作都执行后才可以开始执行此点之后的操作。</p>\n<p>内存屏障要求达到当前执行点之前的所有操作，必须与主内存进行同步，才能够继续执行，而内存屏障之后的读操作都可以获得同步屏障之前的写操作的结果。因此，对于敏感的程序块，在写操作之后、读操作之前可以插入内存屏障。</p>\n<p>通过 volatile 标记，可以解决编译器层面的可见性与重排序问题。而内存屏障则解决了硬件层面的可见性与重排序问题。</p>\n<h4 id=\"jvm-指令重排和-cpu-指令重排\"><a class=\"anchor\" href=\"#jvm-指令重排和-cpu-指令重排\">#</a> JVM 指令重排和 CPU 指令重排</h4>\n<p><span class=\"label warning\">🔔 ​FIXME</span> 暂未找到相关资料，网上大多都是将 CPU 和编译器的指令重排一并讨论，但并未说明两者区别。可以确定的是，CPU 指令重排是在硬件层面实现的，它在出厂时就已设置完成。而 JVM 指令重排是在 Java 虚拟机层面进行的。两者实现的方式基本相同。</p>\n<blockquote>\n<p>由于缺乏相关资料，这一部分内容有所缺失，如果后续有了更加明确的了解，将会补充。如果读者朋友们有所补充，欢迎留言。</p>\n</blockquote>\n<h4 id=\"synchronized-与-volatile\"><a class=\"anchor\" href=\"#synchronized-与-volatile\">#</a> synchronized 与 volatile</h4>\n<blockquote>\n<p>synchronized 关键字能保证并发编程中不会出现原子性、可见性和有序性问题，而 volatile 只能保证可见性和有序性。那么，volatile 有什么存在的必要呢？</p>\n</blockquote>\n<p>synchronized 本质上是一种加锁机制，但所有的锁都存在以下缺点：</p>\n<ol>\n<li>\n<p>有性能损耗</p>\n<p>尽管 JDK 曾对 synchronized 进行了诸如适应性自旋、锁消除、锁粗化、轻量级锁和偏向锁等优化，但它仍旧存在一定的性能损耗。并且，这些方法都是通过避免对 Monitor 进行加锁当方法来控制的，但是并非所有情况都能通过这种方法进行优化，况且，优化行为本身也需要一定的耗时。</p>\n<p>总之，加锁和解锁的过程是需要一定的时耗的。而 volatile 变量读操作的性能和普通变量几乎无差别，而 volatile 写操作由于需要插入内存屏障所以会慢一些，但即便如此，volatile 插入内存屏障的开销在大多数场景下也比锁的开销要低。</p>\n</li>\n<li>\n<p>产生阻塞</p>\n<p>synchronized 实现的锁本质上是一种阻塞锁，也就是说多个线程要排队访问同一个共享对象。</p>\n<p>而 volatile 是 Java 虚拟机提供的一种轻量级同步机制，他是基于内存屏障实现的。说到底，他并不是锁，所以他不会有 synchronized 带来的阻塞和性能损耗的问题。</p>\n</li>\n</ol>\n<p>此外，volatile 的另外一个好处是禁止指令重排，在有些情况下，需要结合使用 volatile 和 synchronized 才能达到最大的性能效果。</p>\n<h3 id=\"线程相关方法\"><a class=\"anchor\" href=\"#线程相关方法\">#</a> 线程相关方法</h3>\n<h4 id=\"start-与-run\"><a class=\"anchor\" href=\"#start-与-run\">#</a> start 与 run</h4>\n<p>应当使用  <code>Thread</code>  类中的  <code>start()</code>  方法来启动一个线程。</p>\n<ol>\n<li>\n<p>start 方法</p>\n<p>Java 线程通过 start 方法来启动，通过这个方法实现了多线程的运行，它无须等待 run 方法体代码执行完毕，就可以直接继续执行后续代码。通过 start 方法来启动一个线程，这时这个线程处于就绪（可运行）状态，并没有真正运行，一旦这个线程获得了 CPU 时间片，它才开始执行 run 方法，这里的 run 方法称为线程体，它包含了要执行的这个线程的内容，run 方法运行结束，线程即终止。</p>\n</li>\n<li>\n<p>run 方法</p>\n<p>run 方法只是 Thread 类中的一个普通方法，如果直接调用该方法，程序就只会有一个主线程运行，其执行路径只有一条，并且程序要等待 run 方法体执行完毕后才会执行后续代码。如果使用 run 方法来启动线程，它就是同步执行，而非异步，如果这样启动一个线程，那么就失去了线程的意义。</p>\n</li>\n</ol>\n<h4 id=\"sleep-与-wait\"><a class=\"anchor\" href=\"#sleep-与-wait\">#</a> sleep 与 wait</h4>\n<p>在多线程环境中， <code>Thread.sleep(long)</code>  和  <code>Thread.wait(long)</code>  都可以在程序的调用处将线程阻塞指定毫秒数并返回，但是它们之间也有如下不同：</p>\n<ol>\n<li>\n<p>使用限制</p>\n<p>使用 sleep 方法可以让让当前线程休眠，时间一到当前线程继续往下执行，在任何地方都能使用，但需要捕获  <code>InterruptedException</code>  异常。</p>\n<p>而使用 wait 方法则必须放在 synchronized 块里面，同样需要捕获 InterruptedException 异常，并且需要获取对象的锁。</p>\n</li>\n<li>\n<p>使用场景</p>\n<p>sleep 一般用于当前线程休眠，或者轮循暂停操作，wait 则多用于多线程之间的通信。</p>\n</li>\n<li>\n<p>所属类</p>\n<p>sleep 是 Thread 类的静态本地方法，wait 则是 Object 类的本地方法。</p>\n<blockquote>\n<p>sleep 是让当前线程休眠，不涉及到对象类，也不需要获得对象的锁，所以是线程类的方法。wait 是让获得对象锁的线程实现等待，前提是要楚获得对象的锁，所以是类的方法。</p>\n</blockquote>\n</li>\n<li>\n<p>释放锁</p>\n<p>wait 可以释放当前线程对 lock 对象锁的持有，而 sleep 则不会。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Object</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        lock<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>线程切换</p>\n<p>sleep 会让出 CPU 执行时间且强制上下文切换，而 wait 则不一定，wait 后可能还是有机会重新竞争到锁继续执行的。</p>\n</li>\n</ol>\n<h4 id=\"notify-与-notifyall\"><a class=\"anchor\" href=\"#notify-与-notifyall\">#</a> notify 与 notifyAll</h4>\n<p><code>notify()</code>  和  <code>notifyAll()</code>  方法都是用来唤醒  <code>wait</code>  的线程。</p>\n<ul>\n<li>如果线程调用了对象的 wait 方法，那么线程便会处于该对象的等待池中，等待池中的线程不会去竞争该对象的锁。</li>\n<li>当有线程调用了对象的 notifyAll 方法或 notify 方法，被唤醒的的线程便会进入该对象的锁池中，锁池中的线程会去竞争该对象锁。</li>\n<li>优先级高的线程竞争到对象锁的概率大，假若某线程没有竞争到该对象锁，它还会留在锁池中，唯有线程再次调用 wait 方法，它才会重新回到等待池中。</li>\n</ul>\n<p>所谓唤醒线程，其实可以说是将线程由等待池移动到锁池，notify 只会唤醒（移动）某一个线程（具体是哪个由 JVM 决定），notifyAll 则会唤醒（移动）所有等待的线程。</p>\n<blockquote>\n<p>“notify 可能会导致死锁，而 notifyAll 则不会。” 注意，这句话并不完全准确，notify 可能导致的问题和死锁十分相似，并非真正意义上的死锁。</p>\n</blockquote>\n<p>notify 可能会导致的问题（可称其为生产者消费者问题）：</p>\n<p>这里假定有几种对象，分别是：</p>\n<ul>\n<li>生产者：负责生产资源，生产的资源将放入到公共资源池中。</li>\n<li>消费者：负责消费资源，消费的资源将从公共资源池中移出。</li>\n<li>公共资源池：有限容量，负责临时存放资源。</li>\n<li>等待池：生产者和消费者的临时等待区。</li>\n</ul>\n<p>当消费速度大于生产速度时，公共资源池中的资源很快就会被消耗空，此时消费者若是发现公共资源池中没有资源，消费者就会进入等待池中。同样，当生产速度大于消费速度时，公共资源池中的容量很快就会被占满，此时生产者若是发小公共资源池中没有可用空间，生产者就会进入等待池中。</p>\n<p>如果以上两种情况都先后出现，那么，等待池中就会同时存在生产者和消费者。</p>\n<p>当公共资源池为空时，生产者生产出新的资源，就会通知等待池的对象继续消费，但此时等待池中既有生产者也有消费者，如果使用 notify 通知，那么被唤醒的对象可能仍然是生产者，如果多次唤醒的都是生产者，最终导致生产者过剩，公共资源池占满，那么，此时所有生产者也将进入等待池。这时的情况就是：公共资源池占满，但无人消费，生产者因为资源池占满，也无法继续生产。</p>\n<p>同理，当公共资源池占满时，消费者消费一定资源后，资源池出现空闲，想要通知等待池的生产者继续生产，但如果接收到通知的始终都是消费者，那么，公共资源池最终将被耗空，此时等待池的生产者没有被通知继续生产，消费者又没有可继续消费的资源，那么此时就出现了这种情况：公共资源池为空，但无人生产，消费者因为资源池为空，也无法继续消费。</p>\n<p>出现上面的问题是因为使用了 notify 通知，它不会识别线程类型，并且只会唤醒某一个线程，但如果使用 notifyAll 来进行通知，将会唤醒所有线程，那么，无论是在资源占满还是资源耗空单情况下，都会有新唤醒的生产者或消费者进行处理，而不会导致生产者和消费者同时罢工的情况。</p>\n<p>如何解决生产者与消费者问题？可以参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xkeDE5OTgwMTA4L2FydGljbGUvZGV0YWlscy84MTcwNzc1MQ==\">这篇文章</span>。</p>\n<h3 id=\"threadlocal\"><a class=\"anchor\" href=\"#threadlocal\">#</a> ThreadLocal</h3>\n<p><code>ThreadLocal</code>  被称为线程变量，意思是 ThreadLocal 中填充的变量属于当前线程，该变量对其他线程而言是隔离的，也就是说该变量是当前线程独有的变量。ThreadLocal 为变量在每个线程中都创建了一个副本，那么每个线程可以访问自己内部的副本变量。</p>\n<p>对于同一个 ThreadLocal 所包含的对象，在不同的线程中有不同的副本，且该副本只能由当前线程使用，多线程之间并不共享。</p>\n<p>ThreadLocal 提供了线程本地的实例。它与普通变量的区别在于，每个使用该变量的线程都会初始化一个完全独立的实例副本。ThreadLocal 变量通常使用  <code>private static</code>  进行修饰。当一个线程结束时，它所使用的所有 ThreadLocal 相对的实例副本都可被回收。</p>\n<p>总的来说，ThreadLocal 适用于变量在线程间隔离而在方法或类间共享的场景。</p>\n<h4 id=\"threadlocal-与-synchronized-区别\"><a class=\"anchor\" href=\"#threadlocal-与-synchronized-区别\">#</a> ThreadLocal 与 synchronized 区别</h4>\n<p><code>ThreadLocal&lt;T&gt;</code>  其实是与线程绑定的一个变量。ThreadLocal 和 Synchonized 都用于解决多线程并发访问，但是它们之间却有本质上的区别：</p>\n<ol>\n<li>Synchronized 用于线程间的数据共享，而 ThreadLocal 则<ins>用于线程间的数据隔离</ins>。</li>\n<li>Synchronized 是利用锁的机制，使变量或代码块在某一时该只能被一个线程访问，而 ThreadLocal 为每一个线程都提供了变量的副本，使得每个线程在某一时间访问到的并不是同一个对象，这样就隔离了多个线程对数据的数据共享。</li>\n</ol>\n<p>向 ThreadLocal 存储数据，实际上是存储在它内部的 Map 中，并且 ThreadLocal 会将这个 Map 关联到当前线程。</p>\n<h4 id=\"threadlocal-的使用\"><a class=\"anchor\" href=\"#threadlocal-的使用\">#</a> ThreadLocal 的使用</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadLocalDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> threadLocal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doRemove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">+</span> <span class=\"token string\">\" remove \"</span> <span class=\"token operator\">+</span> threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" from ThreadLocal.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Set vlaueA into ThreadLocal.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">ThreadLocalDemo</span><span class=\"token punctuation\">.</span>threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Set vlaueB into ThreadLocal.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token class-name\">ThreadLocalDemo</span><span class=\"token punctuation\">.</span>threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token function\">doRemove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread-B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ThreadLocal after remove: \"</span> <span class=\"token operator\">+</span> threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 执行结果：</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// Set vlaueA into ThreadLocal.</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// Set vlaueB into ThreadLocal.</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// Thread-B remove value B from ThreadLocal.</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// ThreadLocal after remove: null</span></pre></td></tr></table></figure><p>从示例中可以观察到，两个线程之间分别保留有各自线程的 ThreadLocal 副本，线程之间对 ThreadLocal 副本的修改互不影响。</p>\n<h4 id=\"threadlocal-原理\"><a class=\"anchor\" href=\"#threadlocal-原理\">#</a> ThreadLocal 原理</h4>\n<p>可以通过查看 ThreadLoal 相关方法当源码来理解它的实现原理：</p>\n<ol>\n<li>\n<p>ThreadLocal 的 set 方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ThreadLocal.set () 源码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">ThreadLocalMap</span> map <span class=\"token operator\">=</span> <span class=\"token function\">getMap</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">createMap</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">ThreadLocalMap</span> <span class=\"token function\">getMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">.</span>threadLocals<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">createMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span> t<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> firstValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    t<span class=\"token punctuation\">.</span>threadLocals <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadLocalMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> firstValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到，ThreadLocal 的 set 方法，其内部会创建一个  <code>ThreadLocalMap</code>  对象（或从当前线程获取），并将当前线程的作为 key ，将传入的内容作为 value 进行存储。</p>\n</li>\n<li>\n<p>ThreadLocal 的 get 方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ThreadLocal.get () 源码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">ThreadLocalMap</span> map <span class=\"token operator\">=</span> <span class=\"token function\">getMap</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">ThreadLocalMap<span class=\"token punctuation\">.</span>Entry</span> e <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">getEntry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">T</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span>e<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">setInitialValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> <span class=\"token function\">setInitialValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">T</span> value <span class=\"token operator\">=</span> <span class=\"token function\">initialValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token class-name\">ThreadLocalMap</span> map <span class=\"token operator\">=</span> <span class=\"token function\">getMap</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token function\">createMap</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>从这里可以看到，ThreadLocal 的 get 方法，实际上是从 ThreadLocal 内部的 ThreadLocalMap 中根据当前线程作为 key 进行取值。</p>\n</li>\n<li>\n<p>ThreadLocal 的 remove 方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ThreadLocal.remove () 源码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">ThreadLocalMap</span> m <span class=\"token operator\">=</span> <span class=\"token function\">getMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        m<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>ThreadLocal 的 remove 方法，也是直接根据当前线程删除其对应在 ThreadLocalMap 中的数据。</p>\n</li>\n</ol>\n<blockquote>\n<p>ThreadLocal 的源码很容易读懂，如果时间足够，推荐直接读一下源码，更容易理解。</p>\n</blockquote>\n<h4 id=\"threadlocal-底层数据结构\"><a class=\"anchor\" href=\"#threadlocal-底层数据结构\">#</a> ThreadLocal 底层数据结构</h4>\n<p>上面提到，ThreadLocal 本质上是将当前线程作为 key ，传入的值作为 value 存储在一个 ThreadLocalMap 中，而 ThreadLocalMap 的部分源码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ThreadLocalMap 部分源码内容</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> table<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadLocalMap</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Entry</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WeakReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">/** The value associated with this ThreadLocal. */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> k<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            value <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">ThreadLocalMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> firstKey<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> firstValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    table <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">[</span>INITIAL_CAPACITY<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> firstKey<span class=\"token punctuation\">.</span>threadLocalHashCode <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>INITIAL_CAPACITY <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span>firstKey<span class=\"token punctuation\">,</span> firstValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    size <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">setThreshold</span><span class=\"token punctuation\">(</span>INITIAL_CAPACITY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到，ThreadLocalMap 内部使用的是一个继承于 WeakReference 的 Entry 来存储数据的。</p>\n<h4 id=\"threadlocal-导致内存泄露\"><a class=\"anchor\" href=\"#threadlocal-导致内存泄露\">#</a> ThreadLocal 导致内存泄露</h4>\n<p>如果 ThreadLocal 使用不当，可能会导致内存泄露。</p>\n<p>ThreadLocalMap 是 ThreadLocal 的内部类，它没有实现 Map 接口，而是用独立的方式实现了 Map 的功能，其内部的 Entry 也独立实现。</p>\n<p>和 HashMap 的最大的不同在于，ThreadLocalMap 结构非常简单，没有 next 引用，也就是说 ThreadLocalMap 中解决 Hash 冲突的方式并非链表的方式，而是采用<strong>线性探测的方式</strong>。在 ThreadLocalMap 中，虽然也是用 Entry 来保存结构数据，但是这个 Entry 中 key 只能是 ThreadLocal 对象。而这个 Entry 继承自  <code>WeakReference</code>  （弱引用，生命周期只能存活到下一次 GC 前），但是只有 key 是弱引用，而 value 是强引用，这就导致 ThreadLocal 在没有外部对象强引用时，当发生 GC 时，使用弱引用的 key 会被回收，而使用强引用的 value 则会存活下来。</p>\n<p>当线程没有结束，但是 ThreadLocal 已被回收，就可能导致线程中存在  <code>ThreadLocalMap&lt;null, Object&gt;</code>  的键值对，从而造成内存泄露。</p>\n<p>简单来说，ThreadLocal 可能导致内存泄露，是因为 ThreadLocalMap 的 key 使用了弱引用，而 value 使用到是强引用。</p>\n<p>使用 ThreadLocal 时，为了防止内存泄露，通常有两种手段：</p>\n<ol>\n<li>使用完线程共享变量后，显示调用  <code>ThreadLocalMap.remove()</code>  方法来清除线程共享变量。</li>\n<li>JDK 建议 ThreadLocal 定义为  <code>private static</code> ，这样 ThreadLocal 的弱引用问题则不存在了。</li>\n</ol>\n<h4 id=\"threadlocal-常见使用场景\"><a class=\"anchor\" href=\"#threadlocal-常见使用场景\">#</a> ThreadLocal 常见使用场景</h4>\n<p>ThreadLocal 适用于如下两种场景：</p>\n<ol>\n<li>每个线程需要有自己单独的实例。</li>\n<li>实例需要在多个方法中共享，但不希望被多线程共享。</li>\n</ol>\n<p><strong>场景一：存储用户 Session</strong></p>\n<p><strong>场景二：数据库连接，处理数据库事务</strong></p>\n<p><strong>场景三：数据跨层传递</strong></p>\n<p><strong>场景四：Spring 使用 ThreadLocal 解决线程安全问题</strong></p>\n<p>Spring 采用 Threadlocal 的方式，来保证单个线程中的数据库操作使用的是同一个数据库连接，同时，采用这种方式可以使业务层使用事务时不需要感知并管理 connection 对象，通过传播级别，巧妙地管理多个事务配置之间的切换，挂起和恢复。</p>\n<p>Spring 框架里面就是用的 ThreadLocal 来实现这种隔离，主要是在 TransactionSynchronizationManager 这个类里面。</p>\n<h3 id=\"并发包\"><a class=\"anchor\" href=\"#并发包\">#</a> 并发包</h3>\n<p><code>JUC</code>  （java.util.concurrent）是 Java 并发编程的核心包，这个包的主要结构如下：</p>\n<ul>\n<li>atomic：原子包。基础数据类型的原子操作类型包，对基础类型进行了封装，用于基础类型并发下的原子计算。</li>\n<li>lock：锁包。多线程处理相同数据时，使用锁来保证数据库的准确性的最常用的方式，这个包下是锁相关的类。</li>\n<li>其他类：JDK 原生中把其他类合并存放，并未区分类包。</li>\n</ul>\n<p>并发包详细内容，可以参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzgvZG9jcy9hcGkvaW5kZXguaHRtbA==\"> Java8 API</span></p>\n<h4 id=\"同步容器与并发容器\"><a class=\"anchor\" href=\"#同步容器与并发容器\">#</a> 同步容器与并发容器</h4>\n<p>同步容器：通过 synchronized 关键字修饰的容器，保证同一时刻内只有一个线程在使用容器，从而使得容器线程安全。</p>\n<p>并发容器：允许多线程同时使用容器，并且保证线程安全。而为了达到尽可能提高并发，JUC 采用了多种优化方式来提高并发容器的执行效率，核心的就是：锁、CAS（无锁）、COW（读写分离）、分段锁。</p>\n<p>常用的同步容器：</p>\n<ol>\n<li>\n<p>Vector</p>\n<p>Vector 和 ArrayList 一样实现了 List 接口，其对于数组的各种操作和 ArrayList 一样，区别在于 Vertor 在可能出现线程不安全的所有方法都用 synchronized 进行了修饰。</p>\n</li>\n<li>\n<p>Stack</p>\n<p>Stack 是 Vertor 的子类，Stack 实现的是先进后出的栈。在出栈入栈等操作都进行了 synchronized 修饰。</p>\n</li>\n<li>\n<p>HashTable</p>\n<p>HashTable 实现了 Map 接口，它实现的功能 HashMap 基本一致（HashTable 不可存 null，而 HashMap 的键和值都可以存 null）。区别在于 HashTable 使用了 synchronized 修饰了方法。</p>\n</li>\n<li>\n<p>Collections 提供的同步集合类</p>\n<ul>\n<li><code>List list = Collections.synchronizedList(new ArrayList())</code></li>\n<li><code>Set set = Collections.synchronizedSet(new HashSet())</code></li>\n<li><code>Map map = Collections.synchronizedMap(new HashMap())</code></li>\n</ul>\n<p>Collections 通过代理模式对原本的操作加上了 synchronized 同步，而 synchronized 的同步粒度太大，导致在多线程处理的效率很低。所以在 JDK1.5 的时候推出了并发包下的并发容器，来应对多线程下容器处理效率低的问题。</p>\n</li>\n</ol>\n<p>常用的并发容器：</p>\n<ol>\n<li>\n<p>CopyOnWriteArrayList</p>\n<p>CopyOnWriteArrayList 相当于实现了线程安全的 ArrayList，它的机制是在对容器有写入操作时，copy 出一份副本数组，完成操作后将副本数组引用赋值给容器。底层是通过 ReentrantLock 来保证同步。但它通过牺牲容器的一致性来换取容器的高并发效率（在 copy 期间读到的是旧数据）。所以不能在需要强一致性的场景下使用。</p>\n</li>\n<li>\n<p>CopyOnWriteArraySet</p>\n<p>CopyOnWriteArraySet 和 CopyOnWriteArrayList 原理一样，它是实现了 CopyOnWrite 机制的 Set 集合。</p>\n</li>\n<li>\n<p>ConcurrentHashMap</p>\n<p>ConcurrentHashMap 相当于实现了线程安全的 HashMap。其中的 key 是无序的，并且 key 和 value 都不能为 null。在 JDK8 之前， ConcurrentHashMap 采用了分段锁机制来提高并发效率，只有在操作同一分段的键值对时才需要加锁。到了 JDK8 之后，摒弃了锁分段机制，改为利用 CAS 算法。</p>\n</li>\n<li>\n<p>ConcurrentSkipListMap</p>\n<p>ConcurrentSkipListMap 相当于实现了线程安全的 TreeMap。其中的 key 是有序的，并且 key 和 value 都不能为 null。它采用的跳跃表的机制来替代红黑树。为什么不继续使用红黑树呢？因为红黑树在插入或删除节点的时候需要旋转调整，导致需要控制的粒度较大。而跳跃表使用的是链表，利用无锁 CAS 机制实现高并发线程安全。</p>\n</li>\n<li>\n<p>ConcurrentSkipListSet</p>\n<p>ConcurrentSkipListSet 和 ConcurrentSkipListMap 原理一样，它是实现了高并发线程安全的 TreeSet。</p>\n</li>\n</ol>\n<p>常用的 Queue 类型：</p>\n<ol>\n<li>\n<p>ArrayBlockingQueue</p>\n<p>ArrayBlockingQueue 是采用数组实现的有界阻塞线程安全队列。如果向已满的队列继续塞入元素，将导致当前的线程阻塞。如果向空队列获取元素，那么将导致当前线程阻塞。采用 ReentrantLock 来保证在并发情况下的线程安全。</p>\n</li>\n<li>\n<p>LinkedBlockingQueue</p>\n<p>LinkedBlockingQueue 是一个基于单向链表的、范围任意的（其实是有界的）、FIFO 阻塞队列。访问与移除操作是在队头进行，添加操作是在队尾进行，并分别使用不同的锁进行保护，只有在可能涉及多个节点的操作才同时对两个锁进行加锁。</p>\n</li>\n<li>\n<p>PriorityBlockingQueue</p>\n<p>PriorityBlockingQueue 是一个支持优先级的无界阻塞队列。默认情况下元素采用自然顺序升序排列，也可以自定义类实现  <code>compareTo()</code>  方法来指定元素排序规则。</p>\n</li>\n<li>\n<p>DelayQueue</p>\n<p>DelayQueue 是一个内部使用优先级队列实现的无界阻塞队列。同时元素节点数据需要等待多久之后才可被访问。取数据队列为空时等待，有数据但延迟时间未到时超时等待。</p>\n</li>\n<li>\n<p>SynchronousQueue</p>\n<p>SynchronousQueue 没有容量，是一个不存储元素的阻塞队列，会直接将元素交给消费者，必须等队列中的添加元素被消费后才能继续添加新的元素。相当于一条容量为 1 的传送带。</p>\n</li>\n<li>\n<p>LinkedTransferQueue</p>\n<p>LinkedTransferQueue 是一个有链表组成的无界传输阻塞队列。它集合了 ConcurrentLinkedQueue、SynchronousQueue、LinkedBlockingQueue 等优点。具体机制较为复杂。</p>\n</li>\n<li>\n<p>LinkedBlockingDeque</p>\n<p>LinkedBlockingDeque 是一个由链表结构组成的双向阻塞队列。所谓双向队列指的是可以从队列的两端插入和移出元素。</p>\n</li>\n<li>\n<p>ConcurrentLinkedQueue</p>\n<p>上面的七种队列类型都是阻塞型，而 ConcurrentLinkedQueue 则是线程安全的无界非阻塞队列，其底层数据结构是使用单向链表实现，入队和出队操作都是使用 CAS 来保证线程安全。</p>\n</li>\n</ol>\n<h4 id=\"thread\"><a class=\"anchor\" href=\"#thread\">#</a> Thread</h4>\n<p>Thread 类是 Java 中的线程类，它实现了 Runnable 接口，在 Thread 类中，关系到线程运行状态的有以下几个方法：</p>\n<ol>\n<li>\n<p>start</p>\n<p>用于启动一个线程。</p>\n</li>\n<li>\n<p>run</p>\n<p>这个方法不需要用户来调用，当通过 start 方法启动线程后，线程在获得 CPU 时间片时，会自动执行 run 方法。注意，继承 Thread 类必须重写 run 方法，方法体中定义要执行的任务内容。</p>\n</li>\n<li>\n<p>sleep</p>\n<p>相当于让线程睡眠，交出 CPU，让 CPU 去执行其他任务，但需要注意，sleep 方法并不会释放锁。</p>\n<p>当线程睡眠时间满后，不一定会立即得到执行，因为此时可能 CPU 正在执行其他的任务。所以说调用 sleep 方法相当于让线程进入阻塞状态。</p>\n</li>\n<li>\n<p>yield</p>\n<p>调用 yield 方法会让当前线程交出 CPU 权限，让 CPU 去执行其他的线程。它跟 sleep 方法类似，同样不会释放锁。但是 yield 不能控制具体的交出 CPU 的时间，另外，yield 方法只能让拥有相同优先级的线程有获取 CPU 执行时间的机会。</p>\n<p>注意，调用 yield 方法并不会让线程进入阻塞状态，而是让线程重回就绪状态，它只需要等待重新获取 CPU 执行时间，这一点是和 sleep 方法不一样的。</p>\n</li>\n<li>\n<p>join</p>\n<p>实际上调用 join 方法是调用了 Object 的 wait 方法，wait 方法会让线程进入阻塞状态，并且会释放线程占有的锁，并交出 CPU 执行权限，由于 wait 方法会让线程释放对象锁，所以 join 方法同样会让线程释放对一个对象持有的锁。</p>\n</li>\n<li>\n<p>interrupt</p>\n<p>单独调用 interrupt 方法可以使得处于阻塞状态的线程抛出一个异常，因此，它可以用来中断一个正处于阻塞状态的线程；另外，可以通过 interrupt 方法和  <code>isInterrupted()</code>  方法来停止正在运行的线程。</p>\n</li>\n<li>\n<p>stop：已废弃，它是一个不安全的方法。</p>\n</li>\n<li>\n<p>destory：已废弃。</p>\n</li>\n</ol>\n<h4 id=\"runnable\"><a class=\"anchor\" href=\"#runnable\">#</a> Runnable</h4>\n<p>Runnable 接口是线程辅助类，仅定义了一个方法 run 方法。</p>\n<p>Runnable 的使用方法：</p>\n<ol>\n<li>实现 Runnable 接口。</li>\n<li>重写 run 方法。</li>\n<li>创建 runnable 实例。</li>\n<li>创建 Thread 实例。</li>\n<li>将 Runnable 实例放入 Thread 实例中。</li>\n<li>通过线程实例控制线程的行为，在运行时会调用 Runnable 接口中的 run 方法。</li>\n</ol>\n<blockquote>\n<p>注意：Java 中真正能创建新线程的只有 Thread 类对象，通过实现 Runnable 的方式，最终还是通过 Thread 类对象来创建线程。</p>\n</blockquote>\n<h4 id=\"callable\"><a class=\"anchor\" href=\"#callable\">#</a> Callable</h4>\n<p>参考前文 <code>创建线程的多种方式</code> 部分。</p>\n<h4 id=\"reentrantlock\"><a class=\"anchor\" href=\"#reentrantlock\">#</a> ReentrantLock</h4>\n<p>参考前文 <code>可重入锁与不可重入锁</code> 部分。</p>\n<h4 id=\"reentrantreadwritelock\"><a class=\"anchor\" href=\"#reentrantreadwritelock\">#</a> ReentrantReadWriteLock</h4>\n<p>ReentrantReadWriteLock 是 Lock 的另一种实现方式，从前文我们已经知道 ReentrantLock 是一个排他锁，同一时间只允许一个线程访问，而 ReentrantReadWriteLock 允许多个读线程同时访问，但不允许写线程和读线程、写线程和写线程同时访问。</p>\n<p>参考前文 <code>自旋锁、互斥锁与读写锁</code> 部分。</p>\n<h4 id=\"atomic\"><a class=\"anchor\" href=\"#atomic\">#</a> Atomic*</h4>\n<h4 id=\"semaphore\"><a class=\"anchor\" href=\"#semaphore\">#</a> Semaphore</h4>\n<p><code>Semaphore</code>  通常被称为信号量，可以用来控制同时访问特定资源的线程数量，通过协调各个线程，以保证合理的使用资源。</p>\n<p>它主要有以下常用方法：</p>\n<ul>\n<li><code>acquire()</code> ：获取一个令牌，在获取到令牌、或者被其他线程调用中断之前线程一直处于阻塞状态。</li>\n<li><code>acquire(int permits)</code> ：获取一个令牌，在获取到令牌、或者被其他线程调用中断、或超时之前线程一直处于阻塞状态。</li>\n<li><code>acquireUninterruptibly()</code> ：获取一个令牌，在获取到令牌之前线程一直处于阻塞状态（忽略中断）。</li>\n<li><code>tryAcquire()</code> ：尝试获得令牌，返回获取令牌成功或失败，不阻塞线程。</li>\n<li><code>tryAcquire(long timeout, TimeUnit unit)</code> ：尝试获得令牌，在超时时间内循环尝试获取，直到尝试获取成功或超时返回，不阻塞线程。</li>\n<li><code>release()</code> ：释放一个令牌，唤醒一个获取令牌不成功的阻塞线程。</li>\n<li><code>hasQueuedThreads()</code> ：等待队列里是否还存在等待线程。</li>\n<li><code>getQueueLength()</code> ：获取等待队列里阻塞的线程数。</li>\n<li><code>drainPermits()</code> ：清空令牌把可用令牌数置为 0，返回清空令牌的数量。</li>\n<li><code>availablePermits()</code> ：返回可用的令牌数量。</li>\n</ul>\n<p>Semaphore 的实现原理：</p>\n<p>Semaphore 提供了两个构造方法，用于对其进行初始化：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Semaphore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token keyword\">permits</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    sync <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NonfairSync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">permits</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * permits：信号数量</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * fair：是否是公平锁（默认非公平）</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Semaphore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token keyword\">permits</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> fair<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    sync <span class=\"token operator\">=</span> fair <span class=\"token operator\">?</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FairSync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">permits</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NonfairSync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">permits</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>通过 acquire 方法获取信号时，其内部会调用 AQS 中的  <code>acquireSharedInterruptibly()</code>  方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// java.util.concurrent.Semaphore.class</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    sync<span class=\"token punctuation\">.</span><span class=\"token function\">acquireSharedInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// java.util.concurrent.locks.AbstractQueuedSynchronizer.class</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">acquireSharedInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">tryAcquireShared</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">doAcquireSharedInterruptibly</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个方法会调用  <code>tryAcquireShared()</code>  尝试获取信号，如果没有获取到信号，则会将当前线程加入等待队列并挂起。而 Semaphore 的内部类 NonfairSync 和 FairSync 都对 tryAcquireShared 方法进行了重写：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Sync</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractQueuedSynchronizer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">nonfairTryAcquireShared</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> acquires<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">int</span> available <span class=\"token operator\">=</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">int</span> remaining <span class=\"token operator\">=</span> available <span class=\"token operator\">-</span> acquires<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>remaining <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token function\">compareAndSetState</span><span class=\"token punctuation\">(</span>available<span class=\"token punctuation\">,</span> remaining<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">return</span> remaining<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NonfairSync</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Sync</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2694183684443567898L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">NonfairSync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token keyword\">permits</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">permits</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> <span class=\"token function\">tryAcquireShared</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> acquires<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">nonfairTryAcquireShared</span><span class=\"token punctuation\">(</span>acquires<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FairSync</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Sync</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">2014338818796000944L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token class-name\">FairSync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token keyword\">permits</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">permits</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> <span class=\"token function\">tryAcquireShared</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> acquires<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hasQueuedPredecessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">int</span> available <span class=\"token operator\">=</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">int</span> remaining <span class=\"token operator\">=</span> available <span class=\"token operator\">-</span> acquires<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>remaining <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token function\">compareAndSetState</span><span class=\"token punctuation\">(</span>available<span class=\"token punctuation\">,</span> remaining<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token keyword\">return</span> remaining<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这时，公平锁与非公平锁在实现上有所区别，非公平锁直接使用 CAS 来尝试获取信号。而公平锁则会先调用  <code>hasQueuedPredecessors()</code>  方法，判断队列中是否有等待线程，如果队列中没有等待线程，才会使用 CAS 尝试获取信号，如果有则返回 -1，这时 acquire 就会继续执行  <code>doAcquireSharedInterruptibly()</code>  方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doAcquireSharedInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Node</span> node <span class=\"token operator\">=</span> <span class=\"token function\">addWaiter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">.</span>SHARED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">boolean</span> failed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">final</span> <span class=\"token class-name\">Node</span> p <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">predecessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token function\">tryAcquireShared</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token function\">setHeadAndPropagate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// help GC</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    failed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">shouldParkAfterFailedAcquire</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token function\">parkAndCheckInterrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>failed<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token function\">cancelAcquire</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个方法主要进行了以下逻辑：</p>\n<ol>\n<li>封装一个 Node 节点，并加入队列尾部。</li>\n<li>在无限循环中，如果当前节点是头节点，就尝试获取信号。</li>\n<li>如果不是头节点，在经过节点状态判断后，挂起当前线程。</li>\n</ol>\n<p>而  <code>semaphore.release()</code>  释放信号则经历了如下逻辑：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// java.util.concurrent.Semaphore.class</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    sync<span class=\"token punctuation\">.</span><span class=\"token function\">releaseShared</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// java.util.concurrent.locks.AbstractQueuedSynchronizer.class</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">releaseShared</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">tryReleaseShared</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">doReleaseShared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// java.util.concurrent.Semaphore.class</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryReleaseShared</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> releases<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">int</span> current <span class=\"token operator\">=</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">int</span> next <span class=\"token operator\">=</span> current <span class=\"token operator\">+</span> releases<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">&lt;</span> current<span class=\"token punctuation\">)</span> <span class=\"token comment\">// overflow</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Maximum permit count exceeded\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compareAndSetState</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到，释放信号时也是使用 CAS 算法，并且将可用信号 state 加一。</p>\n<h4 id=\"countdownlatch\"><a class=\"anchor\" href=\"#countdownlatch\">#</a> CountDownLatch</h4>\n<p><code>CountDownLatch</code>  是一个同步工具类，用来协调多个线程之间的同步，或者说起到线程之间的通信。</p>\n<p>CountDownLatch 能够使一个线程在等待另外一些线程完成各自工作之后，再继续执行，它使用一个计数器进行实现，计数器初始值为线程的数量。当每一个线程完成自己任务后，计数器的值就会减一。当计数器的值为 0 时，表示所有的线程都已经完成一些任务，然后在 CountDownLatch 上等待的线程就可以恢复执行接下来的任务。</p>\n<p>CountDownLatch 的用法：</p>\n<ol>\n<li>\n<p>某一线程在开始运行前等待 n 个线程执行完毕。</p>\n<p>通过  <code>new CountDownLatch(n)</code>  来初始化计数器，每当有一个任务线程执行完毕，就执行  <code>countdownLatch.countDown()</code>  将计数器减一，当计数器的值变为 0 时，在 CountDownLatch 上  <code>await()</code>  的线程就会被唤醒。</p>\n<p>一个典型应用场景就是启动一个服务时，主线程需要等待多个组件加载完毕，之后再继续执行。</p>\n</li>\n<li>\n<p>实现多个线程开始执行任务的最大并行性。</p>\n<p>这里需要强调的是并行性，而不是并发。其做法是初始化一个共享的  <code>new CountDownLatch(1)</code>  ，多个线程在开始执行任务前，首先  <code>countdownlatch.await()</code> ，当主线程调用  <code>countdownLatch.countDown()</code>  时，计算器变为 0 ，多个线程就会被同时唤醒，并开始并行执行任务。</p>\n<blockquote>\n<p>有点类似于多个线程进行赛跑，当初始化  <code>new CountDownLatch(1)</code>  时，相当于参与赛跑的运动员（线程）进入预备状态，当执行  <code>countdownLatch.countDown()</code>  就相当于发号枪响起，多个运动员（线程）就开始赛跑。</p>\n</blockquote>\n</li>\n</ol>\n<p>CountDownLatch 的不足：它是一次性的，计算器的值只能在构造方法中初始化一次，之后没有任何机制再次对其设置值，当 CountDownLatch 使用完毕后，它不能再次被使用。</p>\n<p>CountDownLatch 使用示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CountdownLatchTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">ExecutorService</span> service <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">CountDownLatch</span> latch <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CountDownLatch</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">Runnable</span> runnable <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"子线程【\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"】开始执行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"子线程【\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"】执行完毕\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    latch<span class=\"token punctuation\">.</span><span class=\"token function\">countDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            service<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>runnable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主线程\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"等待子线程执行完成...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            latch<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 阻塞当前线程，等待所有子线程执行完毕</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"子线程执行完毕。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主线程【\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"】开始执行...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"concurrenthashmap\"><a class=\"anchor\" href=\"#concurrenthashmap\">#</a> ConcurrentHashMap</h4>\n<p>ConcurrentHashMap 通常会与 HashMap 和 HashTable 放在一起进行比较。</p>\n<p>在非并发环境下，我们通常使用 HashMap 来作为存储 key/value 的容器，但是，HashMap 在多线程环境下却是存在线程安全问题的，而要处理这个问题，主要有以下几种方式：</p>\n<ol>\n<li>\n<p>使用  <code>Collections.synchronizedmap(new HashMap&lt;&gt;())</code>  。</p>\n<p>它其实是对 HashMap 的一个包装，但是这种方式只适用于并发量较小的情况。它返回一个  <code>SynchronizedMap</code>  对象，而在这个对象中的所有操作，都被  <code>synchronized</code>  关键字修饰，并且每个方法获取的都是同一把锁 mutex，因此，所有操作之间是互斥的，从而减少了并发量。</p>\n<p>同理，对于 List 和 Set，Collections 也提供了类似的方法，参见上文 <code>同步容器与并发容器</code> 部分。</p>\n</li>\n<li>\n<p>使用 HashTable。</p>\n<p>HashTable 是一个线程安全的类，它使用 synchronized 来锁住整张 Hash 表来实现线程安全，即每次锁住整张表让线程独占。</p>\n</li>\n<li>\n<p>使用 ConcurrentHashMap。</p>\n<p>前两者在实现上均使用了 synchronized 关键字，性能和效率上都明显低于 ConcurrentHashMap，ConcurrentHashMap 允许多个修改操作并发进行，其关键在于使用了锁分离技术。它使用了多个锁来控制对 hash 表的不同部分进行的修改。ConcurrentHashMap 内部使用段（Segment）来表示这些不同的部分，每个段其实就是一个小的 Hashtable，它们有自己的锁。只要多个修改操作发生在不同的段上，它们就可以并发进行。</p>\n<p>有些方法需要跨段，比如  <code>size()</code>  和  <code>containsValue()</code> ，它们可能需要锁定整个表而而不仅仅是某个段，这需要<ins>按顺序</ins>（按顺序防止了死锁）锁定所有段，操作完毕后，又按顺序释放所有段的锁。</p>\n</li>\n</ol>\n<p>ConcurrentHashMap 实现原理：</p>\n<p>ConcurrentHashMap 使用<ins>分段锁技术</ins>，将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问，能够实现真正的并发访问。</p>\n<p>其中，Segment 继承了 ReentrantLock，表明每个段都可以当做一个锁，这样对每个段中的数据需要进行同步操作的话都是使用每个 Segment 容器对象自身的锁来实现的。只有需要对全局进行改变时才会锁定所有的段。</p>\n<blockquote>\n<p>虽然 ConcurrentHashMap 的底层数据结构，和方法的实现细节和 HashMap 大体一致，但两者在类结构上却没有任何关联。</p>\n</blockquote>\n<h4 id=\"executors\"><a class=\"anchor\" href=\"#executors\">#</a> Executors</h4>\n<p>Executor、Executors、ExecutorService 之间的关系：</p>\n<ul>\n<li>Executors 是 JUC 包下的一个类，主要用于提供线程池相关的操作，它提供了一系列工厂方法用于创建线程池，返回的线程池都实现了 ExecutorService 接口。Executors 可用于创建四类线程池，这在前文 <code>四种常见的线程池</code> 部分已有详细说明。</li>\n<li>而 Executor 则是 Java 线程池的超级接口，它提供一个  <code>void execute(Runnable command)</code>  方法，这个接口我们一般不直接使用，而是用它的继承接口 ExecutorService。</li>\n<li>ExecutorService 接口继承自 Executor ，它有两个实现类，分别是：ThreadPoolExecutor 和 ScheduledThreadPoolExecutor 。</li>\n</ul>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/09/a8b242b059f223b91f679504809658de1631547853.png\" alt=\"Executor相关类图\" /></p>\n<h3 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h3>\n<blockquote>\n<p>参考内容来源于网络，本文不保证参考链接的长期有效性，以及参考内容的原创性。</p>\n</blockquote>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2hvbGxpc2NodWFuZy5naXRlZS5pby90b2JldG9wamF2YWVy\">Java 工程师成神之路</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaG9sbGlzY2h1YW5nLmNvbS9hcmNoaXZlcy85MzQ=\">https://www.hollischuang.com/archives/934</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoaW1pc28vYXJ0aWNsZS9kZXRhaWxzLzg5NjQ0MTQ=\">https://blog.csdn.net/shimiso/article/details/8964414</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjk4MTQxOS9hcnRpY2xlL2RldGFpbHMvODYxNjIwNzE=\">https://blog.csdn.net/weixin_42981419/article/details/86162071</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211X3dpbmQvYXJ0aWNsZS9kZXRhaWxzLzExMzgwNjY4MA==\">https://blog.csdn.net/mu_wind/article/details/113806680</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaC0tZC9wLzE0MTc5MTQ0Lmh0bWw=\">https://www.cnblogs.com/h--d/p/14179144.html</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZDI0Ni5jb20vYXJ0aWNsZS8xNTc2MDcwOTI1NDY0\">https://ld246.com/article/1576070925464</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC85YzVhN2QyMWMwMmY=\">https://www.jianshu.com/p/9c5a7d21c02f</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ob25leXBwcy5jb20vamF2YS9sb2Nrcy1pbi1qYXZh\">https://honeypps.com/java/locks-in-java</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaG9sbGlzY2h1YW5nLmNvbS9hcmNoaXZlcy8xNzE2\">https://www.hollischuang.com/archives/1716</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC82ZmU0YmMzMzc0YTI=\">https://www.jianshu.com/p/6fe4bc3374a2</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaG9sbGlzY2h1YW5nLmNvbS9hcmNoaXZlcy8zOTI4\">https://www.hollischuang.com/archives/3928</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA0NDUzMDEvYXJ0aWNsZS9kZXRhaWxzLzExMTMyMjU2OQ==\">https://blog.csdn.net/u010445301/article/details/111322569</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9teS5vc2NoaW5hLm5ldC9ob3NlZS9ibG9nLzYzOTM1Mg==\">https://my.oschina.net/hosee/blog/639352</span></li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "JAVA学习路线",
                "基础篇",
                "java"
            ]
        },
        {
            "id": "https://www.chinmoku.cc/computer-science/java-learning-path/1-basic/01-java-basic/",
            "url": "https://www.chinmoku.cc/computer-science/java-learning-path/1-basic/01-java-basic/",
            "title": "JAVA 基础知识大盘点",
            "date_published": "2021-08-24T11:37:53.000Z",
            "content_html": "<div class=\"note info\">\n<p>注意，本文并非是面向初学者的学习教程，而是面向拥有一定基础（入门），或初级、中级 JAVA 开发人员，而整理出的一些 JAVA 基础相关的<span class=\"label primary\">关键性知识</span>，因此，部分知识点只会提出要点梗概，而不会关注具体代码示例和实现。本文的主要目的在于帮助已掌握相关知识的开发者们快速地进行知识回顾。</p>\n</div>\n<h2 id=\"面向对象\"><a class=\"anchor\" href=\"#面向对象\">#</a> 面向对象</h2>\n<p>Java 技术体系包括：</p>\n<ol>\n<li>Java 程序设计语言</li>\n<li>各种硬件平台上的 Java 虚拟机实现</li>\n<li>Class 文件格式</li>\n<li>Java 类库 API</li>\n<li>来自商业机构和开源社区的第三方 Java 类库</li>\n</ol>\n<h3 id=\"什么是面向对象\"><a class=\"anchor\" href=\"#什么是面向对象\">#</a> 什么是面向对象？</h3>\n<h4 id=\"面向过程\"><a class=\"anchor\" href=\"#面向过程\">#</a> 面向过程</h4>\n<p>面向过程 (Procedure Oriented) 是一种以过程为中心的编程思想。这些都是以什么正在发生为主要目标进行编程，不同于面向对象的是谁在受影响。与面向对象相对应的，即存在于早期版本 C 语言中的面向过程。面向过程开发的过程，有点类似于树状调用函数，树状的根节点主程序对函数进行层层调用。</p>\n<p><strong>面向过程的问题</strong></p>\n<ul>\n<li>\n<p>复用性不佳：</p>\n<p>按过程来的话，不同过程中相似的代码也不好进行复用，前半段的过程中用到的逻辑，在后半段再次使用的话需要再写一遍，如果是相同的逻辑，修改也会出现很多复杂问题。</p>\n</li>\n<li>\n<p>扩展性不易</p>\n<p>相同的逻辑，如果要有两份相似逻辑，那在面向过程中，就很多时候需要写两份。</p>\n</li>\n<li>\n<p>耦合度高</p>\n<p>面向过程很难将内容剥离开。</p>\n</li>\n</ul>\n<h4 id=\"面向对象-2\"><a class=\"anchor\" href=\"#面向对象-2\">#</a> 面向对象</h4>\n<p>面向对象 (Object Oriented，OO) 是一种对现实世界理解和抽象的方法，是计算机编程技术发展到一定阶段后的产物。面向对象的编程方式使得每一个类都只做一件事。</p>\n<h4 id=\"面向对象的三大基本特征\"><a class=\"anchor\" href=\"#面向对象的三大基本特征\">#</a> 面向对象的三大基本特征</h4>\n<ul>\n<li>\n<p><strong>封装</strong></p>\n<p>封装，也就是把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。</p>\n</li>\n<li>\n<p><strong>继承</strong></p>\n<p>继承是指这样一种能力：它可以使用现有类的所有功能，并在无需重新编写原来类的情况下对这些功能进行扩展。通过继承创建的新类称为「子类」或「派生类」，被继承的类称为「基类」、「父类」或「超类」。要实现继承，可以通过 <strong>继承和组合</strong> 来实现。</p>\n</li>\n<li>\n<p><strong>多态</strong></p>\n<p>多态性是允许你将父对象设置成为和一个或更多的他的子对象相等的技术，赋值之后，父对象就可以根据当前赋值给它的子对象的特性以不同的方式运作。简单说就是一句话：允许将子类类型的指针赋值给父类类型的指针。<br />\n实现多态，有两种方式，覆盖和重载。两者的区别在于：<strong>覆盖在运行时决定</strong>，<strong>重载是在编译时决定</strong>。<strong>并且覆盖和重载的机制不同</strong>。在 Java 中，重载方法的签名必须不同于原先方法的，但对于覆盖签名必须相同。</p>\n</li>\n</ul>\n<h4 id=\"java如何实现平台无关\"><a class=\"anchor\" href=\"#java如何实现平台无关\">#</a> Java 如何实现平台无关</h4>\n<p>平台无关性就是一种语言在计算机上的运行不受平台的约束，一次编译，到处执行（Write Once ,Run Anywhere）。对于 Java 的平台无关性的支持，就像对安全性和网络移动性的支持一样，是分布在整个 Java 体系结构中的。其中扮演者重要的角色的有 Java 语言规范、Class 文件、Java 虚拟机（JVM）等。</p>\n<h4 id=\"jvm还支持哪些语言\"><a class=\"anchor\" href=\"#jvm还支持哪些语言\">#</a> JVM 还支持哪些语言</h4>\n<ul>\n<li>Kotlin</li>\n<li>Clojure</li>\n<li>Groovy</li>\n<li>JRuby</li>\n<li>Jython</li>\n<li>Scala</li>\n</ul>\n<h3 id=\"值传递\"><a class=\"anchor\" href=\"#值传递\">#</a> 值传递</h3>\n<ul>\n<li>\n<p>形式参数：</p>\n<p>是在定义函数名和函数体的时候使用的参数，目的是用来接收调用该函数时传入的参数。</p>\n</li>\n<li>\n<p>实际参数：</p>\n<p>在调用有参函数时，主调函数和被调函数之间有数据传递关系。在主调函数中调用一个函数时，函数名后面括号中的参数称为 “实际参数”。</p>\n</li>\n</ul>\n<h4 id=\"值传递-2\"><a class=\"anchor\" href=\"#值传递-2\">#</a> 值传递</h4>\n<p>在方法被调用时，实参通过形参把它的内容副本传入方法内部，此时形参接收到的内容是实参值的一个拷贝，因此在方法内对形参的任何操作，都仅仅是对这个副本的操作，不影响原始值的内容。</p>\n<h4 id=\"引用传值\"><a class=\"anchor\" href=\"#引用传值\">#</a> 引用传值</h4>\n<p>“引用” 也就是指向真实内容的地址值，在方法调用时，实参的地址通过方法调用被传递给相应的形参，在方法体内，形参和实参指向同一块内存地址，对形参的操作会影响的真实内容。</p>\n<h4 id=\"为什么说java中只有值传递\"><a class=\"anchor\" href=\"#为什么说java中只有值传递\">#</a> 为什么说 Java 中只有值传递</h4>\n<p>Java 中的引用传递其实还是值传递的，只不过对于对象参数，值的内容是对象的引用。简单点说，Java 中的传递，是值传递，而这个值，实际上是对象的引用。所以我们可以说 Java 的传递是按共享传递，或者说 Java 中的传递是值传递。</p>\n<h3 id=\"三大基本特征\"><a class=\"anchor\" href=\"#三大基本特征\">#</a> 三大基本特征</h3>\n<p>封装、继承、多态是 Java 面向对象的三大基本特征。</p>\n<h4 id=\"什么是多态\"><a class=\"anchor\" href=\"#什么是多态\">#</a> 什么是多态</h4>\n<blockquote>\n<p>见  <code>面向对象</code>  部分。</p>\n</blockquote>\n<ul>\n<li>\n<p>方法重写与重载</p>\n<table>\n<thead>\n<tr>\n<th>区别</th>\n<th>重载</th>\n<th>重写</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>英文</td>\n<td>Overload</td>\n<td>Override</td>\n</tr>\n<tr>\n<td>目的</td>\n<td>增加程序的可读性</td>\n<td>提供其超级类已经提供的方法的特定实现</td>\n</tr>\n<tr>\n<td>范围</td>\n<td>发生在一个类中</td>\n<td>发生在继承类中</td>\n</tr>\n<tr>\n<td>参数</td>\n<td>参数必须不同</td>\n<td>参数必须相同</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<h4 id=\"java的继承与实现\"><a class=\"anchor\" href=\"#java的继承与实现\">#</a> Java 的继承与实现</h4>\n<ul>\n<li>\n<p><strong>继承</strong></p>\n<p>继承是从已有的类中派生出新的类，新的类能吸收已有类的数据属性和行为，并能扩展新的能力。Java 继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。继承只能单继承。</p>\n</li>\n<li>\n<p><strong>实现</strong></p>\n<p>如果多个类处理的目标是一样的，但是处理的方法方式不同，那么就定义一个接口，也就是一个标准，让他们的实现这个接口，各自实现自己具体的处理方法来处理那个目标。实现可以多实现。</p>\n</li>\n</ul>\n<h4 id=\"构造函数\"><a class=\"anchor\" href=\"#构造函数\">#</a> 构造函数</h4>\n<p>构造函数可以叫做构造器，它的函数名与类名相同，不用定义返回值类型，也没有具体的返回值。构造函数是在构建创造对象时调用函数，作用是可以给对象进行初始化，创建对象都必须要通过构造函数初始化。</p>\n<ul>\n<li>\n<p>默认构造函数</p>\n<p>一个类中如果没有定义过构造函数，那么该类会有一个默认的空参数构造函数。如果在类中定义了指定的构造函数，那么该类中的默认构造函数就没有了。</p>\n</li>\n</ul>\n<h4 id=\"变量\"><a class=\"anchor\" href=\"#变量\">#</a> 变量</h4>\n<ul>\n<li>\n<p>类变量</p>\n<p>静态变量即类变量，位于方法区，为所有对象共享，共享一份内存，一旦静态变量被修改，其他对象均对修改可见，故线程非安全。类变量又称全局变量或静态变量，需要使用 static 关键字修饰。类级变量在类定义后就已经存在，占用内存空间，可以通过类名来访问，不需要实例化。</p>\n</li>\n<li>\n<p>成员变量</p>\n<ol>\n<li>成员变量定义在类中，在整个类中都可以被访问。</li>\n<li>成员变量随着对象的建立而建立，随着对象的消失而消失，存在于对象所在的堆内存中。</li>\n<li>成员变量有默认初始化值。</li>\n<li>实例化后才会分配内存空间，才能访问。</li>\n</ol>\n<blockquote>\n<p>成员变量 = 基本数据类型变量 + 实例变量。</p>\n<p>实例变量：单例模式（只有一个对象实例存在）线程非安全，非单例线程安全。</p>\n</blockquote>\n</li>\n<li>\n<p>局部变量</p>\n<p>因为局部变量存在于方法内部，不会与其他线程共享，即不会存在并发问题，因此是线程安全带。这种解决问题的技术也叫做线程封闭。</p>\n<ol>\n<li>局部变量只定义在局部范围内，如：函数内，语句内等，只在所属的区域有效。</li>\n<li>局部变量存在于栈内存中，作用的范围结束，变量空间会自动释放。</li>\n<li>局部变量没有默认初始化值。</li>\n</ol>\n</li>\n</ul>\n<p>在使用变量时需要遵循 <strong>就近原则</strong> ，首先在局部范围查找，接着在成员位置找。</p>\n<h4 id=\"作用域\"><a class=\"anchor\" href=\"#作用域\">#</a> 作用域</h4>\n<p>在 Java 中，变量的作用域分为四个级别：类级、对象实例级、方法级、块级。</p>\n<p>成员变量或方法的作用域</p>\n<ul>\n<li><strong>public</strong> 表明该成员变量或者方法对所有类或者对象都是可见的，所有类或者对象都可以直接访问。</li>\n<li><strong>private</strong> 表明该成员变量或者方法是私有的，只有当前类对其具有访问权限，除此之外的类或者对象都没有访问权限。</li>\n<li><strong>protected</strong> 表明该成员变量或者方法只对自己及其子类可见，即自己和子类具有访问权限。除此之外的都没有访问权限。</li>\n<li><strong>default</strong> 表明该成员变量或者方法对自己或者与其位于同一包内的类可见。若父类和子类位于同一包内，则子类对于父类的 default 成员变量或者方法具有访问权限，若位于不同包内，则没有访问权限。</li>\n</ul>\n<h3 id=\"五大基本原则\"><a class=\"anchor\" href=\"#五大基本原则\">#</a> 五大基本原则</h3>\n<p>面向对象遵循五大基本原则：</p>\n<ol>\n<li>\n<p>单一职责原则</p>\n<p>SRP（Single Responsibility Principle），是指一个类的功能单一，可以看做是低耦合高内聚思想的延伸。</p>\n</li>\n<li>\n<p>开放封闭原则</p>\n<p>OCP（Open-Close Principle），在设计一个类或者一个模块，在扩展性方便应当是开放的，而在更改性方面，则应当是封闭的。</p>\n</li>\n<li>\n<p>里氏替换原则</p>\n<p>LSP（Liskov Substitution Principle），任何基类可以出现的地方，子类一定可以出现。</p>\n</li>\n<li>\n<p>依赖倒置原则</p>\n<p>DIP（Dependency Inversion Principle），高层次的模块不应该依赖于低层次的模块，他们都应该依赖于抽象。抽象不应该依赖于具体实现，具体实现应该依赖于抽象。</p>\n</li>\n<li>\n<p>接口隔离原则</p>\n<p>ISP（Interface Segregation Principle），接口端不应该依赖它不需要的接口，一个类对另一个类的依赖应该建立在最小的接口上。</p>\n</li>\n</ol>\n<h2 id=\"java-基础\"><a class=\"anchor\" href=\"#java-基础\">#</a> Java 基础</h2>\n<h3 id=\"基本数据类型\"><a class=\"anchor\" href=\"#基本数据类型\">#</a> 基本数据类型</h3>\n<p>变量就是申请内存来存储值。也就是说，当创建变量的时候，需要在内存中申请空间。内存管理系统根据变量的类型为变量分配存储空间，分配的空间只能用来储存该类型数据。因此，通过定义不同类型的变量，可以在内存中储存整数、小数或者字符。Java 语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。</p>\n<h4 id=\"8种基本数据类型\"><a class=\"anchor\" href=\"#8种基本数据类型\">#</a> 8 种基本数据类型</h4>\n<h5 id=\"整数型\"><a class=\"anchor\" href=\"#整数型\">#</a> 整数型</h5>\n<ul>\n<li>byte</li>\n<li>int</li>\n<li>short</li>\n<li>long</li>\n</ul>\n<h5 id=\"浮点型\"><a class=\"anchor\" href=\"#浮点型\">#</a> 浮点型</h5>\n<p>通常的浮点型数据在不声明的情况下都是 double 型的，如果要表示一个数据时 float 型的，可以在数据后面加上  <code>F</code>  。浮点型的数据是不能完全精确的，有时候在计算时可能出现小数点最后几位出现浮动，这时正常的。</p>\n<ul>\n<li>\n<p>float</p>\n<p>float：单精度，在计算机中存储占用 4 字节，也 32 位，有效位数为 7 位。</p>\n</li>\n<li>\n<p>double</p>\n<p>double：双精度，在计算机中存储占用 8 字节，64 位，有效位数为 16 位。</p>\n</li>\n</ul>\n<h5 id=\"字符型\"><a class=\"anchor\" href=\"#字符型\">#</a> 字符型</h5>\n<ul>\n<li>\n<p>char</p>\n<p>char 有以下的初始化方式：</p>\n<ul>\n<li>\n<p>char ch = 'a'; // 可以是汉字，因为是 Unicode 编码</p>\n</li>\n<li>\n<p>char ch = 1010; // 可以是十进制数、八进制数、十六进制数等等。</p>\n</li>\n<li>\n<p>char ch = '\\0'; // 可以用字符编码来初始化，如：'\\0' 表示结束符，它的 ASCII 码是 0，这句话的意思和 ch = 0 是一个意思。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"布尔型\"><a class=\"anchor\" href=\"#布尔型\">#</a> 布尔型</h5>\n<ul>\n<li>\n<p>boolean</p>\n<p>例：boolean flag = false;</p>\n</li>\n</ul>\n<h5 id=\"基本数据类型对比\"><a class=\"anchor\" href=\"#基本数据类型对比\">#</a> 基本数据类型对比</h5>\n<table>\n<thead>\n<tr>\n<th>数据类型名称</th>\n<th>占用字节</th>\n<th>位数</th>\n<th>默认值</th>\n<th>取值范围</th>\n<th>封装器类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>byte</td>\n<td>1</td>\n<td>8</td>\n<td>0</td>\n<td>-2^7 - 2^7-1[-128～127]</td>\n<td>Byte</td>\n</tr>\n<tr>\n<td>short</td>\n<td>2</td>\n<td>16</td>\n<td>0</td>\n<td>-2^15 - 2^15-1</td>\n<td>Short</td>\n</tr>\n<tr>\n<td>int</td>\n<td>4</td>\n<td>32</td>\n<td>0</td>\n<td>-2^31 - 2^31-1</td>\n<td>Integer</td>\n</tr>\n<tr>\n<td>long</td>\n<td>8</td>\n<td>64</td>\n<td>0L</td>\n<td>-2^63 - 2^63-1</td>\n<td>Long</td>\n</tr>\n<tr>\n<td>float</td>\n<td>4</td>\n<td>32</td>\n<td>0.0f</td>\n<td>-2^31 - 2^31-1</td>\n<td>Float</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8</td>\n<td>64</td>\n<td>0.0d</td>\n<td>-2^63 - 2^63-1</td>\n<td>Double</td>\n</tr>\n<tr>\n<td>char</td>\n<td>2</td>\n<td>16</td>\n<td>'\\u0000'</td>\n<td>0 - 2^16-1</td>\n<td>Character</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>1</td>\n<td>8</td>\n<td>false</td>\n<td>true、false</td>\n<td>Boolean</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"3种引用数据类型\"><a class=\"anchor\" href=\"#3种引用数据类型\">#</a> 3 种引用数据类型</h4>\n<p>基本数据类型和引用数据类型的区别主要在存储方式上，基本数据类型在被创建时，在栈上给其划分一块内存，将数值直接存储在栈上；引用数据类型在被创建时，首先要在栈上给其引用（句柄）分配一块内存，而对象的具体信息都存储在堆内存上，然后由栈上面的引用指向堆中对象的地址。</p>\n<ul>\n<li>类（对象）</li>\n<li>接口</li>\n<li>数组</li>\n</ul>\n<h3 id=\"自动拆装箱\"><a class=\"anchor\" href=\"#自动拆装箱\">#</a> 自动拆装箱</h3>\n<p>自动类型转换时，转换前的数据类型的位数低于转换后的数据类型。</p>\n<blockquote>\n<p>低  -------------------------------------------------------------&gt;  高</p>\n<p>byte,short,char—&gt; int —&gt; long—&gt; float —&gt; double</p>\n</blockquote>\n<p>数据类型转换必须满足如下规则：</p>\n<ul>\n<li>\n<p>不能对 boolean 类型进行类型转换。</p>\n</li>\n<li>\n<p>不能把对象类型转换成不相关类的对象。</p>\n</li>\n<li>\n<p>由大到小会丢失精度：在把容量大的类型转换为容量小的类型时必须使用强制类型转换。</p>\n<p>强制类型转换</p>\n<ul>\n<li>条件是转换的数据类型必须是兼容的。</li>\n<li>格式：(type) value type 是要强制类型转换后的数据类型</li>\n</ul>\n</li>\n<li>\n<p>转换过程中可能导致溢出或损失精度，例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">128</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">byte</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span>i<span class=\"token punctuation\">;</span><span class=\"token comment\">// -128</span></pre></td></tr></table></figure></li>\n<li>\n<p>浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入。</p>\n</li>\n</ul>\n<h4 id=\"包装类型\"><a class=\"anchor\" href=\"#包装类型\">#</a> 包装类型</h4>\n<p>包装类型使得基本数据类型中的变量具有了类中对象的特征。基本数据类型，使用起来非常方便，但是没有对应的方法来操作这些基本类型的数据，可以使用一个类，把基本数据类型的数据装起来，这个类叫做包装类（wrapper）。这样我们可以调用类中的方法。</p>\n<h4 id=\"基本类型\"><a class=\"anchor\" href=\"#基本类型\">#</a> 基本类型</h4>\n<blockquote>\n<p>见基本数据类型部分</p>\n</blockquote>\n<h4 id=\"自动拆装箱-2\"><a class=\"anchor\" href=\"#自动拆装箱-2\">#</a> 自动拆装箱</h4>\n<p>自动装箱时编译器调用  <code>valueOf</code>  方法将原始类型值转换成对象，同时自动拆箱时，编译器通过调用类似  <code>intValue()</code>  ， <code>doubleValue()</code>  这类的方法将对象转换成原始类型值。</p>\n<ul>\n<li>\n<p>装箱（基本类型 -&gt; 包装类）</p>\n<p>通过包装类的构造器实现装箱（JDK1.5 之前）</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Integer</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>通过字符串参数构造包装类对象实现装箱</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Float</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4.56\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Long</span> l <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// NumberFormatException</span></pre></td></tr></table></figure><p>自动装箱（JDK1.5 之后）</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Integer</span> i <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 自动装箱</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 相当于编译器自动作以下的语法编译：Integer i = Integer.valueOf (100);</span></pre></td></tr></table></figure></li>\n<li>\n<p>拆箱（包装类 -&gt; 基本类型）</p>\n<p>调用包装类中的  <code>.xxxValue()</code>  方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Integer</span> t <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 此时 t 就是一个包装类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//128</span></pre></td></tr></table></figure><p>自动拆箱</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Integer</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 自动装箱 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 自动拆箱，实际上执行了 int t = i.intValue ();</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"integer的缓存机制\"><a class=\"anchor\" href=\"#integer的缓存机制\">#</a> Integer 的缓存机制</h4>\n<p>Integer 与 Integer 比较的时候，由于直接赋值的时候会进行自动装箱。那么这里就需要注意两个问题</p>\n<ol>\n<li>Integer 进行自动装箱时，为其赋值处于区间 [-128, 127] 的整数时，数值将会直接被缓存在  <code>IntegerCache</code>  中，而当进行赋值操作时，不会创建新的 Integer 对象，而是从缓存中获取已经创建好的 Integer 对象。</li>\n<li>而当数值处于区间 [-128, 127] 的整数之外时，程序内部则会直接使用  <code>new Integer()</code>  的方式来创建 Integer 对象。</li>\n</ol>\n<h3 id=\"string\"><a class=\"anchor\" href=\"#string\">#</a> String</h3>\n<h4 id=\"字符串的不可变性\"><a class=\"anchor\" href=\"#字符串的不可变性\">#</a> 字符串的不可变性</h4>\n<p>字符串的底层是使用数组存储的，数组的长度是不可变的，且使用 final 和 private 进行修饰，不能直接修改，String 也没有提供直接修改的方法。因此 String 一旦被创建，则不能被修改，所谓的修改也只是创建了新的对象。字符串常量对象存储在常量池中，常量池中的字符串是不会重复的。</p>\n<h4 id=\"jdk6-和-jdk7-中-substring-的原理及区别\"><a class=\"anchor\" href=\"#jdk6-和-jdk7-中-substring-的原理及区别\">#</a> JDK6 和 JDK7 中 substring 的原理及区别</h4>\n<ul>\n<li>\n<p>JDK6 中的 substring</p>\n<p>在 JDK6 中，String 类包含三个成员变量：  <code>char value[]</code>  ，  <code>int offset</code>  ，  <code>int count</code>  。他们分别用来存储真正的字符数组，数组的第一个位置索引以及字符串中包含的字符个数。当调用 substring 方法的时候，会创建一个新的 string 对象，但是这个 string 的值仍然指向堆中的同一个字符数组。这两个对象中只有 count 和 offset 的值是不同的。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// JDK 6</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> value<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>offset <span class=\"token operator\">=</span> offset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> beginIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> endIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//check boundary</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>offset <span class=\"token operator\">+</span> beginIndex<span class=\"token punctuation\">,</span> endIndex <span class=\"token operator\">-</span> beginIndex<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>JDK 6 中的 substring 导致的问题</strong></p>\n<p>如果你有一个很长很长的字符串，但是当你使用 substring 进行切割的时候你只需要很短的一段。这可能导致性能问题，因为你需要的只是一小段字符序列，但是你却引用了整个字符串（因为这个非常长的字符数组一直在被引用，所以无法被回收，就可能导致内存泄露）。在 JDK 6 中，一般用以下方式来解决该问题，原理其实就是生成一个新的字符串并引用他。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>JDK7 中的 substring</p>\n<p>在 JDK7 中，substring 方法会在堆内存中创建一个新的数组，substring 使用 <code>new String</code>  创建了一个新字符串，避免对老字符串的引用。从而解决了内存泄露问题。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// JDK 7</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> value<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//check boundary</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> offset <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> beginIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> endIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//check boundary</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> subLen <span class=\"token operator\">=</span> endIndex <span class=\"token operator\">-</span> beginIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> beginIndex<span class=\"token punctuation\">,</span> subLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"replacefirst-replaceall-replace区别\"><a class=\"anchor\" href=\"#replacefirst-replaceall-replace区别\">#</a> replaceFirst、replaceAll、replace 区别</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Replace</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"my.test.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//replace 将字符串中的。都替换为 #</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//replaceAll 用到了正则表达式，其中。是任意字符的意思，所以结果是字符串全部替换为#</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">replaceFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//replaceFirst 用到了正则表达式， 其中。是任意字符的意思，所以第一个字符被 #号代替</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">replaceFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\.\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 正则表达式中双杠是原生字符串的意思，所以结果是字符串中第一个。被 #代替得到</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"string对的重载\"><a class=\"anchor\" href=\"#string对的重载\">#</a> String 对 [+] 的重载</h4>\n<p>Java 中实际没有运算符的重载，但是对 String 对象而言，它是可以直接 <code>+</code>  将两个 String 对象的字符串值相加。乍看起来这是对  <code>+</code>  的重载，但我们可以通过 class 文件看出，这只是 JVM 做的语法糖。</p>\n<p>通过反编译的方式，不难发现，其实 String 对  <code>+</code>  的支持其实就是使用了 StringBuilder 以及他的 append 和 toString 两个方法。</p>\n<h4 id=\"字符串拼接的几种方式和区别\"><a class=\"anchor\" href=\"#字符串拼接的几种方式和区别\">#</a> 字符串拼接的几种方式和区别</h4>\n<ul>\n<li>\n<p>+</p>\n<p>Java 中的  <code>+</code>  实际上是先构建一个  <code>StringBuilder</code>  对象，然后使用  <code>append()</code>  方法拼接字符串，最后调用  <code>toString()</code>  方法生成字符串，简单来说，其实现原理是使用  <code>StringBuilder.append</code>  。</p>\n</li>\n<li>\n<p>concat</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> otherLen <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>otherLen <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> len <span class=\"token operator\">+</span> otherLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    str<span class=\"token punctuation\">.</span><span class=\"token function\">getChars</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>concat</code>  实现字符串拼接，首先是创建了一个字符数组，长度是已有字符串和待拼接字符串的长度之和，再把两个字符串的值复制到新的字符数组中，并使用这个字符数组创建一个新的 String 对象并返回。</p>\n</li>\n<li>\n<p>StringBuilder.append</p>\n<p>和 String 类类似，StringBuilder 类也封装了一个字符数组，与 String 不同的是，它并不是 final 的，所以他是可以修改的。另外，与 String 不同，字符数组中不一定所有位置都已经被使用，它有一个实例变量，表示数组中已经使用的字符个数。StringBuilder 的 append 方法会直接拷贝字符到内部的字符数组中，如果字符数组长度不够，会进行扩展。</p>\n</li>\n<li>\n<p>StringBuffer.append</p>\n<p>StringBuffer 和 StringBuilder 类似，最大的区别就是 StringBuffer 是线程安全的，其 append 方法使用 synchronized 进行声明，说明是一个线程安全的方法。而 StringBuilder 则不是线程安全的。</p>\n</li>\n<li>\n<p>StringUtils.join</p>\n<p>其实也是通过  <code>StringBuilder</code>  来实现的。</p>\n</li>\n</ul>\n<p><strong>总结</strong></p>\n<ol>\n<li>如果不是在循环体中进行字符串拼接的话，直接使用  <code>+</code>  就好了。</li>\n<li>如果在并发场景中进行字符串拼接的话，要使用  <code>StringBuffer</code>  来代替  <code>StringBuilder</code>  。</li>\n</ol>\n<h4 id=\"stringvalueof-和-integertostring-的区别\"><a class=\"anchor\" href=\"#stringvalueof-和-integertostring-的区别\">#</a> String.valueOf 和 Integer.toString 的区别</h4>\n<p><code>String.valueOf</code>  和  <code>Integer.toString</code>  没有区别，因为前者内部是通过后者实现的。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"switch-对-string-的支持\"><a class=\"anchor\" href=\"#switch-对-string-的支持\">#</a> switch 对 String 的支持</h4>\n<p><strong>其实 swich 只支持一种数据类型，那就是整型，其他数据类型都是转换成整型之后再使用 switch 的。</strong></p>\n<ul>\n<li>\n<p>switch 对 int 的判断是直接比较整数的值。</p>\n</li>\n<li>\n<p>switch 对 char 类型进行比较的时候，实际上比较的是 ascii 码，编译器会把 char 型变量转换成对应的 int 型变量。</p>\n</li>\n<li>\n<p>switch 对字符串的 switch 是通过  <code>equals()</code>  和  <code>hashCode()</code>  方法来实现的。</p>\n</li>\n</ul>\n<h4 id=\"字符串池string-pool\"><a class=\"anchor\" href=\"#字符串池string-pool\">#</a> 字符串池（String Pool）</h4>\n<p>字符串池的优点就是避免了相同内容的字符串的创建，节省了内存，省去了创建相同字符串的时间，同时提升了性能；另一方面，字符串池的缺点就是牺牲了 JVM 在常量池中遍历对象所需要的时间，不过其时间成本相比而言比较低。</p>\n<h4 id=\"常量池\"><a class=\"anchor\" href=\"#常量池\">#</a> 常量池</h4>\n<p>常量池在 java 用于保存在编译期已确定的，已编译的 class 文件中的一份数据。它包括了关于类，方法，接口等中的常量，也包括字符串，执行器产生的常量也会放入常量池，故认为常量池是 JVM 的一块特殊的内存空间。</p>\n<h4 id=\"intern\"><a class=\"anchor\" href=\"#intern\">#</a> intern</h4>\n<p>intern () 方法返回字符串对象的规范化表示形式。它遵循以下规则：对于任意两个字符串 s 和 t，当且仅当 s.equals (t) 为 true 时，s.intern () == t.intern () 才为 true。</p>\n<p>当字符串调用  <code>intern()</code>  方法时，这个方法会首先检查字符串池中是否存在该字符串，如果存在，则返回该字符串的引用；如果不存在，则将这个字符串添加到字符串池中，并返回这个字符串的引用。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> str3 <span class=\"token operator\">=</span> <span class=\"token string\">\"ab\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">String</span> str4 <span class=\"token operator\">=</span> str1 <span class=\"token operator\">+</span> str2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">String</span> str5 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ab\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str5<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true 比较字符串的值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str5 <span class=\"token operator\">==</span> str3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false 比较内存地址，str5 使用 new String 方式创建了新的字符串对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str5<span class=\"token punctuation\">.</span><span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> str3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true intern 先行检查字符串是否能存在</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str5<span class=\"token punctuation\">.</span><span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> str4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false str4 使用 + 号，相当于新创建了字符串对象</span></pre></td></tr></table></figure><h3 id=\"关键字\"><a class=\"anchor\" href=\"#关键字\">#</a> 关键字</h3>\n<ul>\n<li>transient</li>\n<li>instanceof</li>\n<li>volatile</li>\n<li>synchronized</li>\n<li>final</li>\n<li>static</li>\n<li>const</li>\n</ul>\n<h3 id=\"集合类\"><a class=\"anchor\" href=\"#集合类\">#</a> 集合类</h3>\n<h4 id=\"java-集合类图\"><a class=\"anchor\" href=\"#java-集合类图\">#</a> Java 集合类图</h4>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/9880d75c8d57964e3e91fb7d216bc7cd1629097816.gif\" alt=\"java集合类图\" /></p>\n<p>注：图中  <code>LinkIterator</code>  应为  <code>ListIterator</code></p>\n<h4 id=\"常用集合类的使用\"><a class=\"anchor\" href=\"#常用集合类的使用\">#</a> 常用集合类的使用</h4>\n<p><span class=\"label danger\">❗️TODO</span> 待完善</p>\n<h4 id=\"arraylist-linklist-和-vector-的区别\"><a class=\"anchor\" href=\"#arraylist-linklist-和-vector-的区别\">#</a> ArrayList、LinkList 和 Vector 的区别</h4>\n<p>ArrayList 和 Vector 都是基于数组实现的，而 LinkedList 则是基于双向链表实现的。（查询块，增删慢）</p>\n<ul>\n<li>Arraylist 的实现原理是采用一个动态对象数组实现的，默认构造方法创建一个空数组，它在第一次添加元素时候，扩展容量为 10，之后的扩充算法：原来数组大小 + 原来数组的一半（也就是 1.5 倍）。</li>\n<li>Vector 的实现原理也是采用一个动态对象数组实现的，只不过它的默认构造方法创建一个大小为 10 的对象数组，与 Arraylist 不同的是， 在缺省的情况下，增长原数组长度的一倍（也就是 2 倍）。</li>\n<li>而对 ArrayList 和 Vector 要进行增删操作的时候，需要移动修改元素后面的所有元素，所以增删的开销比较大，对增删操作的执行效率低。</li>\n<li>为了防止数组动态扩充过多，建议创建 ArrayList 或者 Vector 时，给定初始容量。</li>\n<li>Arraylist 多线程中使用不安全，适合在单线程访问时使用，效率较高，而 Vector 线程安全，适合在多线程访问时使用，效率较低。</li>\n</ul>\n<p>而对于 LinkedList 来说，增加和删除元素方便，增加或删除一个元素，仅需处理结点间的引用即可。但是查询不方便，需要一个个对比，无法根据下标直接查找。（增删块，查询慢），同时，LinkedList 也是非线程安全的。</p>\n<blockquote>\n<p>扩展搜索：<span class=\"blue\">ArrayList 和 Vector 的扩容机制</span>、<span class=\"blue\">单向链表、双向链表</span> 。</p>\n</blockquote>\n<h4 id=\"synchronizedlist-和-vector-的区别\"><a class=\"anchor\" href=\"#synchronizedlist-和-vector-的区别\">#</a> SynchronizedList 和 Vector 的区别</h4>\n<p>SynchronizedList 和 Vector 最主要的区别：</p>\n<ol>\n<li>SynchronizedList 有很好的扩展和兼容功能。他可以将所有的 List 的子类转成线程安全的类。</li>\n<li>使用 SynchronizedList 的时候，进行遍历时要手动进行同步处理。</li>\n<li>SynchronizedList 可以指定锁定的对象。</li>\n</ol>\n<h4 id=\"hashmap-hashtable-concurrenthashmap区别\"><a class=\"anchor\" href=\"#hashmap-hashtable-concurrenthashmap区别\">#</a> HashMap、HashTable、ConcurrentHashMap 区别</h4>\n<ul>\n<li>HashTable 中的方法是同步的，而 HashMap 中的方法在默认情况下是非同步的。在多线程并发的环境下，可以直接使用 HashTable，但是要使用 HashMap 的话就要自己增加同步处理了。</li>\n<li>在继承关系上，HashTable 是基于陈旧的 Dictionary 类继承来的。 HashMap 继承的抽象类 AbstractMap 实现了 Map 接口。</li>\n<li>HashTable 中，key 和 value 都不允许出现 null 值，否则会抛出 NullPointerException 异常。 HashMap 中，null 可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为 null。</li>\n<li>在扩容机制上，HashTable 中的 hash 数组初始大小是 11，增加的方式是 old*2+1。HashMap 中 hash 数组的默认大小是 16，而且一定是 2 的指数。</li>\n<li>HashTable 直接使用对象的 hashCode。 HashMap 重新计算 hash 值。</li>\n<li>Hashtable、HashMap 都使用了 Iterator。而由于历史原因，Hashtable 还使用了 Enumeration 的方式 。 HashMap 实现 Iterator，支持 fast-fail，Hashtable 的 Iterator 遍历支持 fast-fail，用 Enumeration 不支持 fast-fail。</li>\n</ul>\n<p><strong>HashMap 和 ConcurrentHashMap 的区别？</strong></p>\n<p>ConcurrentHashMap 和 HashMap 的实现方式不一样，虽然都是使用桶数组实现的，但是还是有区别，ConcurrentHashMap 对桶数组进行了分段，而 HashMap 并没有。</p>\n<p>ConcurrentHashMap 在每一个分段上都用锁进行了保护。HashMap 没有锁机制。所以，前者线程安全的，后者不是线程安全的。</p>\n<h4 id=\"set和list的区别\"><a class=\"anchor\" href=\"#set和list的区别\">#</a> Set 和 List 的区别</h4>\n<p>List,Set 都是继承自 Collection 接口。都是用来存储一组相同类型的元素的。</p>\n<p>List 特点：元素有放入顺序，元素可重复 。</p>\n<p>Set 特点：元素无放入顺序，元素不可重复。</p>\n<h4 id=\"set如何保证元素不重复\"><a class=\"anchor\" href=\"#set如何保证元素不重复\">#</a> Set 如何保证元素不重复</h4>\n<p>在 Java 的 Set 体系中，根据实现方式不同主要分为两大类。HashSet 和 TreeSet。</p>\n<ol>\n<li>TreeSet 是二叉树实现的，Treeset 中的数据是自动排好序的，不允许放入 null 值</li>\n<li>HashSet 是哈希表实现的，HashSet 中的数据是无序的，可以放入 null，但只能放入一个 null，两者中的值都不能重复，就如数据库中唯一约束。</li>\n</ol>\n<p>在 HashSet 中，基本的操作都是有 HashMap 底层实现的，因为 HashSet 底层是用 HashMap 存储数据的。当向 HashSet 中添加元素的时候，首先计算元素的 hashcode 值，然后通过扰动计算和按位与的方式计算出这个元素的存储位置，如果这个位置位空，就将元素添加进去；如果不为空，则用 equals 方法比较元素是否相等，相等就不添加，否则找一个空位添加。</p>\n<p>TreeSet 的底层是 TreeMap 的 keySet ()，而 TreeMap 是基于红黑树实现的，红黑树是一种平衡二叉查找树，它能保证任何一个节点的左右子树的高度差不会超过较矮的那棵的一倍。</p>\n<p>TreeMap 是按 key 排序的，元素在插入 TreeSet 时 compareTo () 方法要被调用，所以 TreeSet 中的元素要实现 Comparable 接口。TreeSet 作为一种 Set，它不允许出现重复元素。TreeSet 是用 compareTo () 来判断重复元素的。</p>\n<h4 id=\"java8中stream相关用法\"><a class=\"anchor\" href=\"#java8中stream相关用法\">#</a> Java8 中 stream 相关用法</h4>\n<p>Stream 使用一种类似用 SQL 语句从数据库查询数据的直观方式来提供一种对 Java 集合运算和表达的高阶抽象。</p>\n<p>Stream API 可以极大提高 Java 程序员的生产力，让程序员写出高效率、干净、简洁的代码。</p>\n<p>这种风格将要处理的元素集合看作一种流，流在管道中传输，并且可以在管道的节点上进行处理，比如筛选，排序，聚合等。</p>\n<p>Stream 有以下特性及优点：</p>\n<ul>\n<li>无存储。Stream 不是一种数据结构，它只是某种数据源的一个视图，数据源可以是一个数组，Java 容器或 I/O channel 等。</li>\n<li>为函数式编程而生。对 Stream 的任何修改都不会修改背后的数据源，比如对 Stream 执行过滤操作并不会删除被过滤的元素，而是会产生一个不包含被过滤元素的新 Stream。</li>\n<li>惰式执行。Stream 上的操作并不会立即执行，只有等到用户真正需要结果的时候才会执行。</li>\n<li>可消费性。Stream 只能被 “消费” 一次，一旦遍历过就会失效，就像容器的迭代器那样，想要再次遍历必须重新生成。</li>\n</ul>\n<p>和以前的 Collection 操作不同， Stream 操作还有两个基础的特征：</p>\n<ul>\n<li><strong>Pipelining</strong>: 中间操作都会返回流对象本身。 这样多个操作可以串联成一个管道， 如同流式风格（fluent style）。 这样做可以对操作进行优化， 比如延迟执行 (laziness) 和短路 ( short-circuiting)。</li>\n<li><strong>内部迭代</strong>： 以前对集合遍历都是通过 Iterator 或者 For-Each 的方式，显式的在集合外部进行迭代， 这叫做外部迭代。 Stream 提供了内部迭代的方式， 通过访问者模式 (Visitor) 实现。</li>\n</ul>\n<p><strong>示例</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Java8Tester</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"使用 Java 7: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 计算空字符串</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> strings <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"efg\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abcd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jkl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"列表: \"</span> <span class=\"token operator\">+</span> strings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">long</span> count <span class=\"token operator\">=</span> <span class=\"token function\">getCountEmptyStringUsingJava7</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"空字符数量为: \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        count <span class=\"token operator\">=</span> <span class=\"token function\">getCountLength3UsingJava7</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"字符串长度为 3 的数量为: \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 删除空字符串</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> filtered <span class=\"token operator\">=</span> <span class=\"token function\">deleteEmptyStringsUsingJava7</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"筛选后的列表: \"</span> <span class=\"token operator\">+</span> filtered<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 删除空字符串，并使用逗号把它们合并起来</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">String</span> mergedString <span class=\"token operator\">=</span> <span class=\"token function\">getMergedStringUsingJava7</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">,</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"合并字符串: \"</span> <span class=\"token operator\">+</span> mergedString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> numbers <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 获取列表元素平方数</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> squaresList <span class=\"token operator\">=</span> <span class=\"token function\">getSquares</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"平方数列表: \"</span> <span class=\"token operator\">+</span> squaresList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> integers <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"列表: \"</span> <span class=\"token operator\">+</span> integers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"列表中最大的数 : \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getMax</span><span class=\"token punctuation\">(</span>integers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"列表中最小的数 : \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span>integers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"所有数之和 : \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span>integers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"平均数 : \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getAverage</span><span class=\"token punctuation\">(</span>integers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"随机数: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 输出 10 个随机数</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">Random</span> random <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"使用 Java 8: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"列表: \"</span> <span class=\"token operator\">+</span> strings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        count <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>string <span class=\"token operator\">-></span> string<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"空字符串数量为: \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        count <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>string <span class=\"token operator\">-></span> string<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"字符串长度为 3 的数量为: \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        filtered <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>string <span class=\"token operator\">-></span> <span class=\"token operator\">!</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"筛选后的列表: \"</span> <span class=\"token operator\">+</span> filtered<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        mergedString <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>string <span class=\"token operator\">-></span> <span class=\"token operator\">!</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">joining</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"合并字符串: \"</span> <span class=\"token operator\">+</span> mergedString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        squaresList <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-></span> i <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">distinct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Squares List: \"</span> <span class=\"token operator\">+</span> squaresList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"列表: \"</span> <span class=\"token operator\">+</span> integers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token class-name\">IntSummaryStatistics</span> stats <span class=\"token operator\">=</span> integers<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mapToInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">summaryStatistics</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"列表中最大的数 : \"</span> <span class=\"token operator\">+</span> stats<span class=\"token punctuation\">.</span><span class=\"token function\">getMax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"列表中最小的数 : \"</span> <span class=\"token operator\">+</span> stats<span class=\"token punctuation\">.</span><span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"所有数之和 : \"</span> <span class=\"token operator\">+</span> stats<span class=\"token punctuation\">.</span><span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"平均数 : \"</span> <span class=\"token operator\">+</span> stats<span class=\"token punctuation\">.</span><span class=\"token function\">getAverage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"随机数: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        random<span class=\"token punctuation\">.</span><span class=\"token function\">ints</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token comment\">// 并行处理</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        count <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">parallelStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>string <span class=\"token operator\">-></span> string<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"空字符串的数量为: \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getCountEmptyStringUsingJava7</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> strings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> string <span class=\"token operator\">:</span> strings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getCountLength3UsingJava7</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> strings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> string <span class=\"token operator\">:</span> strings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">deleteEmptyStringsUsingJava7</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> strings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> filteredList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> string <span class=\"token operator\">:</span> strings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                filteredList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token keyword\">return</span> filteredList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getMergedStringUsingJava7</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> strings<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> separator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token class-name\">StringBuilder</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> string <span class=\"token operator\">:</span> strings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>                stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>                stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>separator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token class-name\">String</span> mergedString <span class=\"token operator\">=</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        <span class=\"token keyword\">return</span> mergedString<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> mergedString<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getSquares</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> numbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> squaresList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> number <span class=\"token operator\">:</span> numbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>            <span class=\"token class-name\">Integer</span> square <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> number<span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>squaresList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>                squaresList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        <span class=\"token keyword\">return</span> squaresList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMax</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> numbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>            <span class=\"token class-name\">Integer</span> number <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>                max <span class=\"token operator\">=</span> number<span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> numbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>        <span class=\"token keyword\">int</span> min <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>            <span class=\"token class-name\">Integer</span> number <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> min<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>                min <span class=\"token operator\">=</span> number<span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>        <span class=\"token keyword\">return</span> min<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span> numbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>            sum <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAverage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> numbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"apache集合处理工具类的使用\"><a class=\"anchor\" href=\"#apache集合处理工具类的使用\">#</a> apache 集合处理工具类的使用</h4>\n<p><span class=\"label danger\">❗️TODO</span> 待完善</p>\n<p>Commons Collections 增强了 Java Collections Framework。它提供了几个功能，使收集处理变得容易。它提供了许多新的接口，实现和实用程序。Commons Collections 的主要功能如下：</p>\n<ol>\n<li>Bag - Bag 界面简化了每个对象具有多个副本的集合。</li>\n<li>BidiMap - BidiMap 接口提供双向映射，可用于使用值使用键或键查找值。</li>\n<li>MapIterator - MapIterator 接口提供简单而容易的迭代迭代。</li>\n<li>Transforming Decorators - 转换装饰器可以在将集合添加到集合时更改集合的每个对象。</li>\n<li>Composite Collections - 在需要统一处理多个集合的情况下使用复合集合。</li>\n<li>Ordered Map - 有序地图保留添加元素的顺序。</li>\n<li>Ordered Set - 有序集保留了添加元素的顺序。</li>\n<li>Reference map - 参考图允许在密切控制下对键 / 值进行垃圾收集。</li>\n<li>Comparator implementations - 可以使用许多 Comparator 实现。</li>\n<li>Iterator implementations - 许多 Iterator 实现都可用。</li>\n<li>Adapter Classes - 适配器类可用于将数组和枚举转换为集合。</li>\n<li>Utilities - 实用程序可用于测试测试或创建集合的典型集合论属性，例如 union，intersection。 支持关闭。</li>\n</ol>\n<h4 id=\"不同jdk版本中的hashmap\"><a class=\"anchor\" href=\"#不同jdk版本中的hashmap\">#</a> 不同 JDK 版本中的 HashMap</h4>\n<p><span class=\"label danger\">❗️TODO</span> 待完善</p>\n<h4 id=\"collection-和-collections-的区别\"><a class=\"anchor\" href=\"#collection-和-collections-的区别\">#</a> Collection 和 Collections 的区别</h4>\n<ul>\n<li><code>java.util.Collection</code>  是一个集合接口。它提供了对集合对象进行基本操作的通用接口方法。Collection 接口的意义是为各种具体的集合提供了最大化的统一操作方式。</li>\n<li><code>java.util.Collections</code>  是一个包装类。它包含有各种有关集合操作的静态多态方法。此类不能实例化，就像一个工具类，服务于 Java 的 Collection 框架。</li>\n</ul>\n<h4 id=\"arraysaslist-获得的-list-使用时需注意什么\"><a class=\"anchor\" href=\"#arraysaslist-获得的-list-使用时需注意什么\">#</a> Arrays.asList 获得的 List 使用时需注意什么</h4>\n<ul>\n<li>\n<p>asList 得到的只是一个 Arrays 的内部类，一个原来数组的视图 List，因此如果对它进行增删操作会报错。</p>\n<p>这是因为 Arrays.asList () 方法返回的 ArrayList 不是 java.util 包下的，而是 java.util.Arrays.ArrayList 。这个内部类没有实现 add ()、remove () 方法，而是直接使用它的父类 AbstractList 的相应方法。而这个方法中相关的 set，add 和 remove 方法均返回  <code>throw new UnsupportedOperationException();</code>  。</p>\n</li>\n<li>\n<p>用 ArrayList 的构造器可以将其转变成真正的 ArrayList。</p>\n</li>\n</ul>\n<h4 id=\"enumeration-和-iterator-的区别\"><a class=\"anchor\" href=\"#enumeration-和-iterator-的区别\">#</a> Enumeration 和 Iterator 的区别</h4>\n<ul>\n<li>\n<p>函数接口不同</p>\n<p>Enumeration 只有 2 个函数接口。通过 Enumeration，我们只能读取集合的数据，而不能对数据进行修改。</p>\n<p>Iterator 只有 3 个函数接口。Iterator 除了能读取集合的数据之外，也能数据进行删除操作。</p>\n</li>\n<li>\n<p>Iterator 支持 fail-fast 机制，而 Enumeration 不支持。</p>\n<p>Enumeration 是 JDK 1.0 添加的接口。使用到它的函数包括 Vector、Hashtable 等类，这些类都是 JDK 1.0 中加入的，Enumeration 存在的目的就是为它们提供遍历接口。Enumeration 本身并没有支持同步，而在 Vector、Hashtable 实现 Enumeration 时，添加了同步。</p>\n<p>而 Iterator 是 JDK 1.2 才添加的接口，它也是为了 HashMap、ArrayList 等集合提供遍历接口。Iterator 是支持 fail-fast 机制的：当多个线程对同一个集合的内容进行操作时，就可能会产生 fail-fast 事件。</p>\n</li>\n</ul>\n<blockquote>\n<p>注意：Enumeration 迭代器只能遍历 Vector、Hashtable 这种古老的集合，因此通常不要使用它，除非在某些极端情况下，不得不使用 Enumeration，否则都应该选择 Iterator 迭代器。</p>\n</blockquote>\n<h4 id=\"fail-fast和fail-safe\"><a class=\"anchor\" href=\"#fail-fast和fail-safe\">#</a> fail-fast 和 fail-safe</h4>\n<p><strong>fail-fast</strong></p>\n<p>在系统设计中，快速失效系统是一种可以立即报告任何可能表明故障情况的系统。快速失效系统通常设计用于停止正常操作，而不是试图继续可能存在缺陷的过程。这种设计通常会在操作中的多个点检查系统的状态，因此可以及早检测到任何故障。快速失效模块的职责是检测错误，然后让系统的下一个最高级别处理错误。</p>\n<p>fail-fast 机制可以预先识别出一些错误情况，一方面可以避免执行复杂的其他代码，另外一方面，这种异常情况被识别之后也可以针对性的做一些单独处理。</p>\n<p>但值得注意的是，Java 的集合类中运用了 fail-fast 机制进行设计，一旦使用不当，触发 fail-fast 机制设计的代码，就会发生非预期情况。</p>\n<p>我们通常说的 Java 中的 fail-fast 机制，默认指的是 Java 集合的一种错误检测机制。当多个线程对部分集合进行结构上的改变的操作时，有可能会产生 fail-fast 机制，这个时候就会抛出 ConcurrentModificationException。如在 foreach 循环中对某些集合元素进行元素进行 remove/add 操作。</p>\n<p>在 foreach 进行 add/remove 操作出现异常的原因：</p>\n<blockquote>\n<p>foreach 使用了增强 for 循环，而在增强 for 循环中，集合遍历是通过 iterator 进行的，但是元素的 add/remove 却是直接使用的集合类自己的方法。这就导致 iterator 在遍历的时候，会发现有一个元素在自己不知不觉的情况下就被删除 / 添加了，就会抛出一个 ConcurrentModificationException 异常，用来提示用户，可能发生了并发修改！但实际上这里并没有真的发生并发，只是 Iterator 使用了 fail-fast 的保护机制，只要他发现有某一次修改是未经过自己进行的，那么就会抛出异常。</p>\n</blockquote>\n<p><strong>fail-safe</strong></p>\n<p>为了避免触发 fail-fast 机制，导致异常，我们可以使用 Java 中提供的一些采用了 fail-safe 机制的集合类。这样的集合容器在遍历时不是直接在集合内容上访问的，而是先复制原有集合内容，在拷贝的集合上进行遍历。</p>\n<p><code>java.util.concurrent</code>  包下的容器都是 fail-safe 的，可以在多线程下并发使用，并发修改。同时也可以在 foreach 中进行 add/remove 。fail-safe 集合的所有对集合的修改都是先拷贝一份副本，然后在副本集合上进行的，并不是直接对原集合进行修改。并且这些修改方法，如 add/remove 都是通过加锁来控制并发的。</p>\n<p>但是，虽然基于拷贝内容的优点是避免了 ConcurrentModificationException，但同样地，迭代器并不能访问到修改后的内容。</p>\n<p>CopyOnWriteArrayList 中 add/remove 等写方法是需要加锁的，目的是为了避免 Copy 出 N 个副本出来，导致并发写。但是，CopyOnWriteArrayList 中的读方法是没有加锁的。这样做的好处是我们可以对 CopyOnWrite 容器进行并发的读，当然，这里读到的数据可能不是最新的。因为写时复制的思想是通过延时更新的策略来实现数据的最终一致性的，并非强一致性。</p>\n<p>但对于在循环中进行 add/remove 操作时，我们可以使用普通的 for 循环，因为普通 for 循环并没有用到 Iterator 的遍历，所以压根就没有进行 fail-fast 的检验。</p>\n<h4 id=\"copy-on-write\"><a class=\"anchor\" href=\"#copy-on-write\">#</a> Copy-On-Write</h4>\n<p>Copy-On-Write 简称 COW，是一种用于程序设计中的优化策略。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容 Copy 出去形成一个新的内容然后再改，这是一种延时懒惰策略。</p>\n<p>CopyOnWrite 容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行 Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。</p>\n<p>所以 CopyOnWrite 容器是一种读写分离的思想，读和写不同的容器。而 Vector 在读写的时候使用同一个容器，读写互斥，同时只能做一件事儿。</p>\n<h4 id=\"copyonwritearraylist-concurrentskiplistmap\"><a class=\"anchor\" href=\"#copyonwritearraylist-concurrentskiplistmap\">#</a> CopyOnWriteArrayList、ConcurrentSkipListMap</h4>\n<p>从 JDK1.5 开始 Java 并发包里提供了两个使用 CopyOnWrite 机制实现的并发容器，它们是 CopyOnWriteArrayList 和 CopyOnWriteArraySet。CopyOnWrite 容器非常有用，可以在非常多的并发场景中使用到。</p>\n<p><strong>CopyOnWriteArrayList</strong></p>\n<p>CopyOnWriteArrayList 的整个 add 操作都是在锁的保护下进行的。也就是说 add 方法是线程安全的。CopyOnWrite 并发容器常用于读多写少的并发场景。</p>\n<p>和 ArrayList 不同的是，CopyOnWriteArrayList 具有以下特性：</p>\n<ul>\n<li>支持高效率并发且是线程安全的</li>\n<li>因为通常需要复制整个基础数组，所以可变操作（add ()、set () 和 remove () 等等）的开销很大</li>\n<li>迭代器支持 hasNext (), next () 等不可变操作，但不支持可变 remove () 等操作</li>\n<li>使用迭代器进行遍历的速度很快，并且不会与其他线程发生冲突。在构造迭代器时，迭代器依赖于不变的数组快照。</li>\n</ul>\n<p><strong>ConcurrentSkipListMap</strong></p>\n<p>ConcurrentSkipListMap 是一个内部使用跳表，并且支持排序和并发的一个 Map，是线程安全的。（一般很少会被用到，也是一个比较偏门的数据结构）</p>\n<p>ConcurrentSkipListMap 和 ConcurrentHashMap 的主要区别：</p>\n<ul>\n<li>底层实现方式不同。ConcurrentSkipListMap 底层基于跳表。ConcurrentHashMap 底层基于 Hash 桶和红黑树。</li>\n<li>ConcurrentHashMap 不支持排序。ConcurrentSkipListMap 支持排序。</li>\n</ul>\n<h3 id=\"枚举\"><a class=\"anchor\" href=\"#枚举\">#</a> 枚举</h3>\n<h4 id=\"枚举的用法\"><a class=\"anchor\" href=\"#枚举的用法\">#</a> 枚举的用法</h4>\n<p>在 Java 枚举出现之前，表示枚举类型的通常模式是声明一组 int 常量来表示。这种方法在编译时，无法校验该类型的合法性，并且在获取枚举值时，可读性差。因此，从  <code>Java1.5</code>  发行版本开始，就提出了枚举类型，作为替代的解决方案，可以避免 <code>int</code>  和 <code>String</code>  枚举模式的缺点，并提供了许多额外的好处。</p>\n<p>枚举类型（ <code>enum type</code> ）是指由一组固定的常量组成合法的类型。 <code>Java</code>  中由关键字 <code>enum</code>  来定义一个枚举类型。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Color</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    RED<span class=\"token punctuation\">,</span> GREEN<span class=\"token punctuation\">,</span> BLANK<span class=\"token punctuation\">,</span> YELLOW<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"枚举的实现\"><a class=\"anchor\" href=\"#枚举的实现\">#</a> 枚举的实现</h4>\n<p>枚举类本质上是一个继承自 Enum 的类，并且使用关键字 final 进行修饰。当我们使用 enmu 来定义一个枚举类型的时候，编译器会自动帮我们创建一个 final 类型的类继承 Enum 类，所以枚举类型不能被继承。</p>\n<h4 id=\"枚举与单例\"><a class=\"anchor\" href=\"#枚举与单例\">#</a> 枚举与单例</h4>\n<p><span class=\"label danger\">❗️TODO</span> 待完善</p>\n<h4 id=\"enum类\"><a class=\"anchor\" href=\"#enum类\">#</a> Enum 类</h4>\n<p>我们使用 enum 定义的枚举，其实现方式就是通过继承 Enum 类实现的。当我们使用 enmu 来定义一个枚举类型的时候，编译器会自动帮我们创建一个 final 类型的类继承 Enum 类，所以枚举类型不能被继承。</p>\n<p>java.lang.Enum 类的定义如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Constable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> ordinal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"java枚举如何比较\"><a class=\"anchor\" href=\"#java枚举如何比较\">#</a> Java 枚举如何比较</h4>\n<p>java 枚举值在比较时使用  <code>==</code>  和  <code>equals</code>  方法没有区别，两个随便用都是一样的效果。因为枚举 Enum 类的 equals 方法默认实现就是通过 == 来比较的；</p>\n<p>类似的 Enum 的 compareTo 方法比较的是 Enum 的 ordinal 顺序大小；</p>\n<p>类似的还有 Enum 的 name 方法和 toString 方法一样都返回的是 Enum 的 name 值。</p>\n<h4 id=\"switch对枚举的支持\"><a class=\"anchor\" href=\"#switch对枚举的支持\">#</a> switch 对枚举的支持</h4>\n<p>Java 1.7 之前 switch 参数可用类型为 short、byte、int、char，枚举类型之所以能使用其实是编译器层面实现的</p>\n<p>编译器会将枚举 switch 转换为类似下面的形式：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token class-name\">Status</span><span class=\"token punctuation\">.</span>START<span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>所以其实质还是 int 参数类型。</p>\n<h4 id=\"枚举的序列化如何实现\"><a class=\"anchor\" href=\"#枚举的序列化如何实现\">#</a> 枚举的序列化如何实现</h4>\n<p><span class=\"label danger\">❗️TODO</span> 待完善</p>\n<h4 id=\"枚举的线程安全性问题\"><a class=\"anchor\" href=\"#枚举的线程安全性问题\">#</a> 枚举的线程安全性问题</h4>\n<p>编译器会将我们创建的枚举类中的属性及方法声明为 static 修饰，而当一个 Java 类第一次被真正使用到的时候静态资源被初始化、Java 类的加载和初始化过程都是线程安全的。所以，创建一个 enum 类型是线程安全的。</p>\n<h3 id=\"io\"><a class=\"anchor\" href=\"#io\">#</a> IO</h3>\n<p>Bit 是最小的二进制单位 ，是计算机的操作部分。取值 0 或者 1</p>\n<p>Byte（字节）是计算机操作数据的最小单位由 8 位 bit 组成 取值（-128~127）</p>\n<p>Char（字符）是用户的可读写的最小单位，在 Java 里面由 16 位 bit 组成 取值（0~65535）</p>\n<h4 id=\"字符流-字节流\"><a class=\"anchor\" href=\"#字符流-字节流\">#</a> 字符流、字节流</h4>\n<p>字节流，用于操作 byte（字节）类型数据，主要操作类是 OutputStream、InputStream 的子类；不用缓冲区，直接对文件本身操作。</p>\n<p>字符流，用于操作 char（字符）字符类型数据，主要操作类是 Reader、Writer 的子类；使用缓冲区缓冲字符，不关闭流就不会输出任何内容。</p>\n<p>整个 IO 包实际上分为字节流和字符流，但是除了这两个流之外，还存在一组字节流 - 字符流的转换类。</p>\n<p>OutputStreamWriter：是 Writer 的子类，将输出的字符流变为字节流，即将一个字符流的输出对象变为字节流输出对象。</p>\n<p>InputStreamReader：是 Reader 的子类，将输入的字节流变为字符流，即将一个字节流的输入对象变为字符流的输入对象。</p>\n<h4 id=\"输入流-输出流\"><a class=\"anchor\" href=\"#输入流-输出流\">#</a> 输入流、输出流</h4>\n<p>输入、输出以存储数据的介质作为参照物，如果是把对象读入到介质中，这就是输入。从介质中向外读数据，这就是输出。所以，输入流是把数据写入存储介质的。输出流是从存储介质中把数据读取出来。</p>\n<h4 id=\"同步-异步-阻塞-非阻塞\"><a class=\"anchor\" href=\"#同步-异步-阻塞-非阻塞\">#</a> 同步、异步、阻塞、非阻塞</h4>\n<p>同步和异步是针对应用程序和内核交互而言的，也可理解为 <strong>被调用者（系统）</strong> ，如果是同步，在被调用时会立即执行要做的事。如果是异步，在被调用时不保证会立即执行要做的事，但是保证会去做，而做完之后再通知调用者。</p>\n<p>阻塞和非阻塞是针对于进程在访问数据的时候，也可理解为 <strong>调用者（程序）</strong> ，如果是阻塞，发出调用后，要一直等待返回结果。如果是非阻塞，在发出调用后不需要等待，可以去做自己的事情。</p>\n<h4 id=\"linux-5种io模型\"><a class=\"anchor\" href=\"#linux-5种io模型\">#</a> Linux 5 种 IO 模型</h4>\n<p>在理解 5 种 I/O 模型前，我们需要先明确一点，不管是网络 IO 还是磁盘 IO，对于读操作而言，都是等到网络的某个数据分组到达后（即<mark>数据准备阶段</mark>），将数据<ins>拷贝到内核空间的缓冲区中</ins>，再从内核空间<ins>拷贝到用户空间的缓冲区</ins>。</p>\n<p>基于这一点，这里我们通过假设一个点餐的生活场景来理解 5 种 I/O 模型，如下图所示：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/2bebc3152c645587b021c6c6b9e3db891629350846.jpeg\" alt=\"IO模型场景图解\" /></p>\n<h4 id=\"bio-nio和aio的区别-用法和原理\"><a class=\"anchor\" href=\"#bio-nio和aio的区别-用法和原理\">#</a> BIO、NIO 和 AIO 的区别、用法和原理</h4>\n<ul>\n<li>\n<p>BIO（Blocking I/O）</p>\n<p>同步阻塞 I/O 模式，数据的读取写入必须阻塞在一个线程内等待其完成。BIO 适用于连接数目比较小且固定的架构，对服务器资源要求高，并发局限于应用中。</p>\n</li>\n<li>\n<p>NIO（New I/O）</p>\n<p>同步非阻塞 I/O 模式，它是基于事件驱动思想来完成的，其服务器实现模式为一个请求一个通道，即客户端发送的连接请求都会注册到<ins class=\"dot\">多路复用器</ins>上，多路复用器轮询到连接有 I/O 请求时才启动一个线程进行处理。</p>\n<p>这种方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，并发局限于应用中，编程复杂。</p>\n<p>NIO 中有以下几种重要角色：</p>\n<ol>\n<li>缓冲区 Buffer</li>\n<li>通道 Channel</li>\n<li>多路复用器 Selector</li>\n</ol>\n</li>\n<li>\n<p>AIO（Asynchronous I/O）</p>\n<p>异步非阻塞 I/O 模式，在进行读写操作时，只须直接调用 API 的读写方法即可。一个有效请求对应一个线程，客户端的 IO 请求都是 OS 先完成了再通知服务器应用去启动线程进行处理。</p>\n</li>\n</ul>\n<h4 id=\"netty\"><a class=\"anchor\" href=\"#netty\">#</a> Netty</h4>\n<p>Netty 是一个非阻塞 I/O 客户端 - 服务器框架，主要用于开发 Java 网络应用程序，如协议服务器和客户端。异步事件驱动的网络应用程序框架和工具用于简化网络编程，例如 TCP 和 UDP 套接字服务器。Netty 包括了反应器编程模式的实现。</p>\n<p>除了作为异步网络应用程序框架，Netty 还包括了对 HTTP、HTTP2、DNS 及其他协议的支持，涵盖了在 Servlet 容器内运行的能力、对 WebSockets 的支持、与 Google Protocol Buffers 的集成、对 SSL/TLS 的支持以及对用于 SPDY 协议和消息压缩的支持。</p>\n<p>主要优点：提供异步的、事件驱动的网络应用程序框架和工具。</p>\n<p>详细使用参考官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9uZXR0eS5pby93aWtpL2luZGV4Lmh0bWw=\">https://netty.io/wiki/index.html</span></p>\n<h3 id=\"反射\"><a class=\"anchor\" href=\"#反射\">#</a> 反射</h3>\n<p>反射机制指的是程序在运行时能够获取自身的信息。在 Java 中，只要给定类的名字，那么就可以通过反射机制来获得类的所有属性和方法。</p>\n<p>主要由以下的类来实现反射机制（这些类都位于  <code>java.lang.reflect</code>  包中）：</p>\n<ol>\n<li>Class 类：代表一个类。</li>\n<li>Field 类：代表类的成员变量（成员变量也称为类的属性）。</li>\n<li>Method 类：代表类的方法。</li>\n<li>Constructor 类：代表类的构造方法。</li>\n<li>Array 类：提供了动态创建数组，以及访问数组的元素的静态方法。</li>\n</ol>\n<h4 id=\"反射与工厂模式\"><a class=\"anchor\" href=\"#反射与工厂模式\">#</a> 反射与工厂模式</h4>\n<p>工厂模式有三种：</p>\n<ol>\n<li>\n<p>简单工厂模式</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token class-name\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Aodi</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Aodi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Aotuo</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Aotuo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Factory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Car</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> className<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Aodi\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Aodi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Aotuo\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Aotuo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">Car</span> car <span class=\"token operator\">=</span> <span class=\"token class-name\">Factory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Aodi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\"><span class=\"token namespace\">car<span class=\"token punctuation\">.</span></span>Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>工厂方法模式</p>\n<p>简单工厂模式引入 Java 反射机制后，变为工厂方法模式。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token class-name\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Aodi</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Aodi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Aotuo</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Aotuo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Factory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Car</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> className<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">Car</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            instance <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">Car</span> car <span class=\"token operator\">=</span> <span class=\"token class-name\">Factory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sample.Aodi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\"><span class=\"token namespace\">car<span class=\"token punctuation\">.</span></span>Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>抽象工厂模式</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 抽象产品</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token class-name\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 具体产品</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Aodi</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Aodi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 具体产品</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Aotuo</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Aotuo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 抽象工厂</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">CarFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token class-name\">Car</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 具体工厂</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">AodiFactory</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">CarFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Car</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Aodi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">// 具体工厂</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">AotuoFactory</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">CarFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Car</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Aotuo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token class-name\">CarFactory</span> carFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AodiFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">Car</span> audi <span class=\"token operator\">=</span> carFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\"><span class=\"token namespace\">audi<span class=\"token punctuation\">.</span></span>Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<p>其实，  <code>Spring IoC</code>  就是工厂模式 + Java 的反射机制的实际应用。</p>\n<h4 id=\"反射有什么用\"><a class=\"anchor\" href=\"#反射有什么用\">#</a> 反射有什么用</h4>\n<ul>\n<li>在运行时判断任意一个对象所属的类。</li>\n<li>在运行时判断任意一个类所具有的成员变量和方法。</li>\n<li>在运行时任意调用一个对象的方法。</li>\n<li>在运行时构造任意一个类的对象。</li>\n</ul>\n<h4 id=\"class类\"><a class=\"anchor\" href=\"#class类\">#</a> Class 类</h4>\n<p>Java 的 Class 类是 java 反射机制的基础，通过 Class 类我们可以获得关于一个类的相关信息。</p>\n<p>Java.lang.Class 是一个比较特殊的类，它用于封装被装入到 JVM 中的类（包括类和接口）的信息。当一个类或接口被装入的 JVM 时便会产生一个与之关联的 java.lang.Class 对象，可以通过这个 Class 对象对被装入类的详细信息进行访问。</p>\n<p>虚拟机为每种类型管理一个独一无二的 Class 对象。也就是说，每个类（型）都有一个 Class 对象。运行程序时，Java 虚拟机 (JVM) 首先检查是否所要加载的类对应的 Class 对象是否已经加载。如果没有加载，JVM 就会根据类名查找.class 文件，并将其 Class 对象载入。</p>\n<blockquote>\n<p>如果精力允许，可以看看  <code>java.lang.reflect</code>  包下内的源码。</p>\n</blockquote>\n<h3 id=\"动态代理\"><a class=\"anchor\" href=\"#动态代理\">#</a> 动态代理</h3>\n<p>代理模式为其他对象提供了一个代理，以控制对某个对象访问，代理类为被代理类预处理消息、过滤消息并在此之后将消息转发给被代理类，之后还能进行消息的后置处理。代理类和被代理类通常会存在关联关系（即持有被代理对象的引用），代理类本身不实现服务，而是通过调用被代理类中的方法来提供服务。</p>\n<h4 id=\"java-三种代理模式\"><a class=\"anchor\" href=\"#java-三种代理模式\">#</a> Java 三种代理模式</h4>\n<h5 id=\"静态代理\"><a class=\"anchor\" href=\"#静态代理\">#</a> 静态代理</h5>\n<p>静态代理示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">HelloInterface</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HelloInterface</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Chinmoku!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloProxy</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HelloInterface</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">HelloInterface</span> helloInterface <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Before invoke sayHello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            helloInterface<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After invoke sayHello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">HelloProxy</span> helloProxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HelloProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        helloProxy<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 执行结果：</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// Before invoke sayHello</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// Hello Chinmoku!</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// After invoke sayHello</span></pre></td></tr></table></figure><p>静态代理需要代理对象和目标对象实现一样的接口。</p>\n<p>其优点在于，它可以在不修改目标对象的前提下扩展目标对象的功能。</p>\n<p>而由于代理对象要实现与目标对象一致的接口，这会产生过多的代理类，另一方面，一旦接口的方法进行了更新，目标对象与代理对象都要进行修改，简单来说，<mark>静态代理的缺点在于冗余和不易维护</mark>。</p>\n<h5 id=\"动态代理-2\"><a class=\"anchor\" href=\"#动态代理-2\">#</a> 动态代理</h5>\n<p>动态代理利用了 JDK API ，动态地在内存中构建代理对象，从而实现对目标对象的代理功能。因此动态代理又被称为 JDK 代理或接口代理。</p>\n<p>静态代理与动态代理的区别主要在于：</p>\n<ol>\n<li>静态代理在编译时就已经实现，编译完成后代理类是一个实际的 class 文件。</li>\n<li>动态代理是在运行时动态生成的，即编译完成后没有实际的 class 文件，而是<mark>在运行时动态生成类字节码</mark>，并加载到 JVM 中。</li>\n</ol>\n<p>动态代理对象不需要实现接口，但是要求目标对象必须实现接口，否则不能使用动态代理。</p>\n<p>动态代理示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvocationHandler</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">HelloInterface</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HelloInterface</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Chinmoku!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DynamicProxy</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">InvocationHandler</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> object<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">DynamicProxy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>object <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> proxy<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Method</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Before invoke sayHello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After invoke sayHello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">HelloInterface</span> hello <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">InvocationHandler</span> h <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DynamicProxy</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">HelloInterface</span> proxy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloInterface</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">.</span><span class=\"token function\">newProxyInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloInterface</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">HelloInterface</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        proxy<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">// 执行结果：</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">// Before invoke sayHello</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">// Hello Chinmoku!</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">// After invoke sayHello</span></pre></td></tr></table></figure><h5 id=\"cglib-代理\"><a class=\"anchor\" href=\"#cglib-代理\">#</a> Cglib 代理</h5>\n<p>JDK 代理要求被代理对象是一个接口的实现类，如果被代理对象没有实现任何接口，就可以通过 Cglib 进行代理。Cglib 是针对类来实现代理的，他的原理是对指定的目标生成一个子类，并覆盖其中的方法实现增强。但由于其使用继承方式实现，因此，它无法对 final 关键词修饰的类进行代理。</p>\n<blockquote>\n<p>Cglib 既可以为实现接口的类进行代理，也可以为没有实现接口的类进行代理。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cglib<span class=\"token punctuation\">.</span>proxy<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Enhancer</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cglib<span class=\"token punctuation\">.</span>proxy<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MethodInterceptor</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cglib<span class=\"token punctuation\">.</span>proxy<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MethodProxy</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Chinmoku!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloServiceCglibProxy</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MethodInterceptor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> target<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">HelloServiceCglibProxy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> target<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getProxyInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token class-name\">Enhancer</span> en <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Enhancer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            en<span class=\"token punctuation\">.</span><span class=\"token function\">setSuperclass</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            en<span class=\"token punctuation\">.</span><span class=\"token function\">setCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">return</span> en<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">intercept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> object<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Method</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arg2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MethodProxy</span> proxy<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Before invoke sayHello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After invoke sayHello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">Hello</span> target <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">HelloServiceCglibProxy</span> proxyFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HelloServiceCglibProxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">Hello</span> proxy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Hello</span><span class=\"token punctuation\">)</span>proxyFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getProxyInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        proxy<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">// 执行结果：</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">// Before invoke sayHello</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">// Hello Chinmoku!</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">// After invoke sayHello</span></pre></td></tr></table></figure><h4 id=\"动态代理和反射的关系\"><a class=\"anchor\" href=\"#动态代理和反射的关系\">#</a> 动态代理和反射的关系</h4>\n<p>动态代理实现了  <code>java.lang.reflect.InvocationHandler</code>  接口，而  <code>java.lang.reflect.Proxy</code>  作为其实例，它提供了一个  <code>newProxyInstance()</code>  方法，通过这个方法，程序可以将需要被代理的对象信息传递到  <code>InvocationHandler</code>  这个处理器上。</p>\n<p>反射的主要作用是：</p>\n<ol>\n<li>动态地创建类的实例，并将类绑定到现有的对象中，或从现有的对象中获取类型。</li>\n<li>应用程序需要在运行时从某个特定的程序集中载入一个特定的类。</li>\n</ol>\n<p>而动态代理则是根据对象在内存中加载的 Class 类创建运行时类对象，从而调用代理类方法和属性。简单来说，<mark>动态代理是基于 Java 反射机制实现的</mark>。</p>\n<h4 id=\"aop\"><a class=\"anchor\" href=\"#aop\">#</a> AOP</h4>\n<p>Java 是一种面向对象的编程语言，它用对象、属性和行为来描述一个简单的事物，并引入了封装、继承、多态的概念，使其具备了描述复杂事物的能力。但当它需要为一些分散对象的公共行为进行描述时，就会显得相当乏力（不是不能），因此就出现了面向切面编程（AOP）的思想，它使用一种被称为横切（cross-cutting）的技术，它将一系列（纵向发展的）行为（横向）剖解开来，并为其织入代理对象，以达到为这些复杂的行为提取出公共行为的目的，这种公共行为在 AOP 思想中被称为切面（Aspect），而这种公共行为，往往是与主要行为（即业务逻辑）无关或关联性极低的行为，比如日志记录、权限控制、性能监控、缓存优化、事务管理等。AOP 将这些非业务性而又至关重要的代码提取出来，极大地减少了代码的重复和耦合，并且有利于维护。</p>\n<p>需要特别强调的是，AOP 和 OOP 一样，它并不是某种特定的技术，而是一种编程思想，它弥补了 OOP 思想的不足之处，我们可以说 AOP 是 OOP 的补充和完善。</p>\n<p>简单来说，动态地将代码切入到类的指定方法、指定位置上的编程思想，就是切面编程。</p>\n<blockquote>\n<p>注意：Spring AOP 是在运行时生成并织入（weave）代理对象的，但并非所有的 AOP 实现方式都是如此，也有的可以在编译期或类加载期织入，比如 AspectJ 。</p>\n</blockquote>\n<h5 id=\"aop-相关概念\"><a class=\"anchor\" href=\"#aop-相关概念\">#</a> AOP 相关概念</h5>\n<ol>\n<li>\n<p>切面（Aspect）</p>\n<p>切面由切入点和通知组成，它既包含了横切逻辑的定义，也包括了切入点的定义。</p>\n<p>可以简单地认为，使用 @Aspect 注解的类就是切面。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LogAspect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>目标对象（Target）</p>\n<p>目标对象指将要被增强的对象，即包含主业务逻辑的类对象。或者说是被一个或者多个切面所通知的对象。</p>\n</li>\n<li>\n<p>连接点（JoinPoint）</p>\n<p>程序执行过程中明确的点，如方法的调用或特定的异常被抛出。连接点由两个信息确定：</p>\n<ul>\n<li>方法（表示程序执行点，即在哪个目标方法）</li>\n<li>相对点（表示方位，即目标方法的什么位置，比如调用前，后等）</li>\n</ul>\n<p>简单来说，连接点就是被拦截到的程序执行点，因为 Spring 只支持方法类型的连接点，所以在 Spring 中连接点就是被拦截到的方法。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pointcut()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 这个 JoinPoint 参数就是连接点</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>切入点（PointCut）</p>\n<p>切入点是对连接点进行拦截的条件定义。切入点表达式如何和连接点匹配是 AOP 的核心，Spring 缺省使用 AspectJ 切入点语法。</p>\n<p>一般认为，所有的方法都可以认为是连接点，但是我们并不希望在所有的方法上都添加通知，而切入点的作用就是提供一组规则（使用 AspectJ pointcut expression language 来描述）来匹配连接点，给满足规则的连接点添加通知。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.chinmoku.test.aop.service..*(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pointcut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>通知（Advice）</p>\n<p>通知是指拦截到连接点之后要执行的代码，Spring AOP 框架以拦截器来实现通知模型，并维护一个以连接点为中心的拦截器链。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// @Before 说明这是一个前置通知，log 函数中是要前置执行的代码，JoinPoint 是连接点，</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pointcut()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>通知类型：</p>\n<ul>\n<li>前置通知</li>\n<li>环绕通知</li>\n<li>后置通知</li>\n<li>异常通知</li>\n<li>最终通知</li>\n</ul>\n</li>\n<li>\n<p>织入（weave）</p>\n<p>织入是将切面和业务逻辑对象连接起来，并创建通知代理的过程。织入可以在编译时，类加载时和运行时完成。在编译时进行织入就是静态代理，而在运行时进行织入则是动态代理。</p>\n</li>\n<li>\n<p>增强器（Advisor）</p>\n<p>Advisor 是切面的另外一种实现，能够将通知以更为复杂的方式织入到目标对象中，是将通知包装为更复杂切面的装配器。Advisor 由切入点和 Advice 组成。</p>\n</li>\n</ol>\n<h3 id=\"序列化\"><a class=\"anchor\" href=\"#序列化\">#</a> 序列化</h3>\n<ul>\n<li>\n<p>什么是序列化与反序列化？</p>\n<p>序列化，简单来说，就是将对象转化成字节序列的过程。用于对象的传输，和持久化。</p>\n<p>反序列化则与序列化相反，它是将字节序列转换成对象的过程。</p>\n</li>\n<li>\n<p>为什么要进行序列化？</p>\n<p>当俩个进程进行远程通信时，可以相互发送各种类型的数据，而这些数据都会以二进制的形式在网络上传送。而 Java 进程在进行通信时，则需要将 Java 对象转换为二进制，这种转换的过程，则是序列化的过程，而将其还原则是反序列化的过程。</p>\n<p>另外，由于一般 Java 对象的生命周期比 JVM 短，而在实际的开发中，我们需要在 JVM 停止后能够继续持有对象，这个时候就需要用到序列化技术将对象持久到磁盘或数据库。</p>\n</li>\n</ul>\n<p>JDK 中的序列化步骤：</p>\n<ol>\n<li>\n<p>创建一个对象输出流，它可以包装一个其它类型的目标输出流，如文件输出流：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ObjectOutputStream</span> outputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\object.out\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>通过对象输出流的  <code>writeObject()</code>  方法写对象：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>outputStream<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"male\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<p>JDK 中的反序列化步骤：</p>\n<ol>\n<li>\n<p>创建一个对象输入流，它可以包装一个其它类型输入流，如文件输入流：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ObjectInputStream</span> ois<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"object.out\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>通过对象输出流的  <code>readObject()</code>  方法读取对象：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">)</span> ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>为了正确读取数据，完成反序列化，必须保证向对象输出流写对象的顺序与从对象输入流中读对象的顺序一致。</p>\n</blockquote>\n<p>注：static 和 transient 字段不能被序列化。</p>\n<h4 id=\"序列化底层原理\"><a class=\"anchor\" href=\"#序列化底层原理\">#</a> 序列化底层原理</h4>\n<p><span class=\"label danger\">❗️TODO</span> 待完善</p>\n<h4 id=\"serialversionuid\"><a class=\"anchor\" href=\"#serialversionuid\">#</a> serialVersionUID</h4>\n<p><code>serialVersionUID</code>  适用于 Java 的序列化机制。简单来说，Java 的序列化机制是通过判断类的 serialVersionUID 来验证版本一致性的。在进行反序列化时，JVM 会把传来的字节流中的 serialVersionUID 与本地相应实体类的 serialVersionUID 进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常，即是 InvalidCastException 。</p>\n<p>serialVersionUID 有两种显示的生成方式：</p>\n<ol>\n<li>\n<p>默认的 1L</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>根据类名、接口名、成员方法及属性等来生成一个 64 位的哈希字段</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> xxxxL<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<p>当实现  <code>java.io.Serializable</code>  接口的类没有显式地定义一个 serialVersionUID 变量时候，Java 序列化机制会根据编译的 Class 自动生成一个 serialVersionUID 作序列化版本比较用，这种情况下，如果 Class 文件（类名，方法明等）没有发生变化（增加空格，换行，增加注释等等），就算再编译多次，serialVersionUID 也不会变化的。</p>\n<p>如果我们不希望通过编译来强制划分软件版本，即实现序列化接口的实体能够兼容先前版本，就需要显式地定义一个名为 serialVersionUID，类型为 long 的变量，不修改这个变量值的序列化实体都可以相互进行串行化和反串行化。</p>\n<h4 id=\"序列化与单例模式\"><a class=\"anchor\" href=\"#序列化与单例模式\">#</a> 序列化与单例模式</h4>\n<p>序列化和反序列化会影响破坏单例模式，这是因为反序列化的时候会去反射调用对象的无参构造方法。</p>\n<p>解决方法：</p>\n<p>只要在 Singleton 类中定义  <code>readResolve</code>  就可以解决序列化和反序列化对单例模式的破坏。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> singleton<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> <span class=\"token function\">getSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singleton <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singleton <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> singleton<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">readResolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> singleton<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>更加详细的解释，可参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaG9sbGlzY2h1YW5nLmNvbS9hcmNoaXZlcy8xMTQ0\">https://www.hollischuang.com/archives/1144</span></p>\n<h4 id=\"protobuf\"><a class=\"anchor\" href=\"#protobuf\">#</a> ProtoBuf</h4>\n<p><code>ProtoBuf</code>  （Google Protocol Buffers）是一种灵活，高效，自动化机制的结构数据序列化方法，可类比 XML ，但是它比 XML 更小、更快、更为简单。你可以定义数据的结构，然后使用 ProtoBuf 生成的源代码轻松的在各种数据流中使用各种语言进行编写和读取结构数据。你甚至可以更新数据结构，而不破坏根据旧数据结构编译而成并且已部署的程序。</p>\n<table>\n<thead>\n<tr>\n<th>对比方面</th>\n<th>XML</th>\n<th>JSON</th>\n<th>ProtoBuf</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数据结构</td>\n<td>一般复杂</td>\n<td>简单</td>\n<td>比较复杂</td>\n</tr>\n<tr>\n<td>数据存储方式</td>\n<td>文本</td>\n<td>文本</td>\n<td>二进制</td>\n</tr>\n<tr>\n<td>数据存储大小</td>\n<td>大</td>\n<td>一般</td>\n<td>小</td>\n</tr>\n<tr>\n<td>解析效率</td>\n<td>慢</td>\n<td>一般</td>\n<td>快</td>\n</tr>\n<tr>\n<td>跨语言支持</td>\n<td>非常多</td>\n<td>多</td>\n<td>一般</td>\n</tr>\n<tr>\n<td>学习成本</td>\n<td>比较繁琐</td>\n<td>简单</td>\n<td>一般</td>\n</tr>\n<tr>\n<td>开发成本</td>\n<td>一般</td>\n<td>低</td>\n<td>一般</td>\n</tr>\n</tbody>\n</table>\n<p>ProtoBuf 文件以  <code>.proto</code>  作为后缀名，下面是一个简单的 ProtoBuf 文件内容示例：</p>\n<figure class=\"highlight protobuf\"><figcaption data-lang=\"Protocol Buffers\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">syntax</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"proto3\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">message</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">required</span> <span class=\"token builtin\">string</span> name <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">required</span> <span class=\"token builtin\">int32</span> id <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">optional</span> <span class=\"token builtin\">string</span> email <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">enum</span> <span class=\"token class-name\">PhoneType</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    MOBILE <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    HOME <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    WORK <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">message</span> <span class=\"token class-name\">PhoneNumber</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">required</span> <span class=\"token builtin\">string</span> number <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">optional</span> <span class=\"token positional-class-name class-name\">PhoneType</span> type <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">[</span><span class=\"token annotation\">default</span> <span class=\"token operator\">=</span> HOME<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">repeated</span> <span class=\"token positional-class-name class-name\">PhoneNumber</span> phone <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"为什么说序列化并不安全\"><a class=\"anchor\" href=\"#为什么说序列化并不安全\">#</a> 为什么说序列化并不安全</h4>\n<p>因为序列化的对象数据转换为二进制，并且完全可逆。在 RMI 调用时，所有 private 字段的数据都以明文二进制的形式出现在网络的套接字上，</p>\n<p>更加深入的理解，可参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9mYTkxMmNlMDQyNmY=\">https://www.jianshu.com/p/fa912ce0426f</span></p>\n<h3 id=\"注解\"><a class=\"anchor\" href=\"#注解\">#</a> 注解</h3>\n<h4 id=\"元注解\"><a class=\"anchor\" href=\"#元注解\">#</a> 元注解</h4>\n<p>元注解，即定义其他注解的注解。元注解有四个：</p>\n<ul>\n<li>@Target（表示该注解可以用于什么地方）</li>\n<li>@Retention（表示在什么级别保存该注解信息）</li>\n<li>@Documented（将此注解包含再 javadoc 中）</li>\n<li>@Inherited（允许子类继承父类中的注解）</li>\n</ul>\n<h4 id=\"自定义注解\"><a class=\"anchor\" href=\"#自定义注解\">#</a> 自定义注解</h4>\n<p>除了元注解，都是自定义注解。通过元注解定义出来的注解。如我们常用的 Override 、Autowire 等。 日常开发中也可以自定义一个注解，这些都是自定义注解。</p>\n<h4 id=\"java中常用注解使用\"><a class=\"anchor\" href=\"#java中常用注解使用\">#</a> Java 中常用注解使用</h4>\n<ul>\n<li>@Override 表示当前方法覆盖了父类的方法</li>\n<li>@Deprecation 表示方法已经过时，方法上有横线，使用时会有警告。</li>\n<li>@SuppressWarnings 表示关闭一些警告信息 (通知 java 编译器忽略特定的编译警告)</li>\n<li>@SafeVarargs (jdk1.7 更新) ：专门为抑制 “堆污染” 警告提供的。</li>\n<li>@FunctionalInterface (jdk1.8 更新) ：用来指定某个接口必须是函数式接口，否则就会编译出错。</li>\n</ul>\n<h4 id=\"注解与反射的结合\"><a class=\"anchor\" href=\"#注解与反射的结合\">#</a> 注解与反射的结合</h4>\n<p>注解与反射结合使用示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>FIELD<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">MyAnnotation</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token annotation punctuation\">@MyAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\">Field</span> field <span class=\"token operator\">=</span> <span class=\"token class-name\">MyBean</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取成员变量 value</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            field<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 将 value 设置成可访问的</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyAnnotation</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 判断成员变量是否有注解</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token class-name\">MyAnnotation</span> myAnnotation <span class=\"token operator\">=</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyAnnotation</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取定义在成员变量中的注解 MyAnnotation</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> myAnnotation<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取定义在 MyBean 的 MyAnnotation 里面属性值</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token class-name\">MyBean</span> myBean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                field<span class=\"token punctuation\">.</span><span class=\"token function\">setInt</span><span class=\"token punctuation\">(</span>myBean<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 将注解的值 20 可以赋给成员变量 value</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>myBean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 验证结果</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"spring常用注解\"><a class=\"anchor\" href=\"#spring常用注解\">#</a> Spring 常用注解</h4>\n<ul>\n<li>@Configuration 把一个类作为一个 IoC 容器，它的某个方法头上如果注册了 @Bean，就会作为这个 Spring 容器中的 Bean。</li>\n<li>@Scope 注解 作用域</li>\n<li>@Lazy (true) 表示延迟初始化</li>\n<li>@Service 用于标注业务层组件</li>\n<li>@Controller 用于标注控制层组件 @Repository 用于标注数据访问组件，即 DAO 组件。</li>\n<li>@Component 泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。</li>\n<li>@Scope 用于指定 scope 作用域的（用在类上）</li>\n<li>@PostConstruct 用于指定初始化方法（用在方法上）</li>\n<li>@PreDestory 用于指定销毁方法（用在方法上）</li>\n<li>@DependsOn 定义 Bean 初始化及销毁时的顺序</li>\n<li>@Primary 自动装配时当出现多个 Bean 候选者时，被注解为 @Primary 的 Bean 将作为首选者，否则将抛出异常</li>\n<li>@Autowired 默认按类型装配，如果我们想使用按名称装配，可以结合 @Qualifier 注解一起使用。如下：</li>\n<li>@Autowired @Qualifier (&quot;personDaoBean&quot;) 存在多个实例配合使用</li>\n<li>@Resource 默认按名称装配，当找不到与名称匹配的 bean 才会按类型装配。</li>\n<li>@PostConstruct 初始化注解</li>\n<li>@PreDestroy 摧毁注解，默认，单例，启动就加载</li>\n</ul>\n<h3 id=\"jms\"><a class=\"anchor\" href=\"#jms\">#</a> JMS</h3>\n<blockquote>\n<p>关于 JMS 及其实现，这里仅提出梗要，更多详细内容将记录在 Java 高级篇相关文章内。</p>\n</blockquote>\n<h4 id=\"什么是java消息服务\"><a class=\"anchor\" href=\"#什么是java消息服务\">#</a> 什么是 Java 消息服务</h4>\n<p><code>JMS</code>  即 Java 消息服务（Java Message Server）应用程序接口，它是 Java 平台中关于面向消息中间件（MOM）的 API，用于两个应用程序之间，或分布式系统中发送消息，进行异步通信，Java 消息服务是一个与具体平台无关的 API，绝大多数 MOM 提供商都对 JMS 提供支持。</p>\n<h4 id=\"jms消息传送模型\"><a class=\"anchor\" href=\"#jms消息传送模型\">#</a> JMS 消息传送模型</h4>\n<p>JMS 具有两种通信模式：</p>\n<ol>\n<li>Point-to-Point Messaging Domain（点对点通信模型）</li>\n<li>Publish/Subscribe Messaging Domain（发布 / 订阅通信模型）</li>\n</ol>\n<h4 id=\"jms-编程模型\"><a class=\"anchor\" href=\"#jms-编程模型\">#</a> JMS 编程模型</h4>\n<p>JMS 编程模型由以下主体构成：</p>\n<ul>\n<li>ConnectionFactory：连接工厂（创建连接）</li>\n<li>Connection：连接（创建会话）</li>\n<li>Session：会话（创建目的地、生产者、消费者、消息）</li>\n<li>Destination：目的地（消息发送目标）</li>\n<li>MessageProducer：消息生产者（发送消息）</li>\n<li>MessageConsumer：消息消费者（消费消息）</li>\n<li>Message：消息（内容主体）</li>\n</ul>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/4cd1c84d75eea9166690e8fa2b7180101629451502.png\" alt=\"JMS编程模型关系图\" /></p>\n<h4 id=\"常用的-jms-实现\"><a class=\"anchor\" href=\"#常用的-jms-实现\">#</a> 常用的 JMS 实现</h4>\n<ul>\n<li>ActiveMQ</li>\n<li>RabbitMQ</li>\n<li>RocketMQ</li>\n</ul>\n<blockquote>\n<p>注意：kafka 不是 JMS 的实现。</p>\n</blockquote>\n<h3 id=\"jmx\"><a class=\"anchor\" href=\"#jmx\">#</a> JMX</h3>\n<p>JMX 全称为 Java Management Extensions，它是一个 Java 平台的管理和监控接口。它最常用到的就是对于 JVM 的监测和管理，比如 JVM 内存、CPU 使用率、线程数、垃圾收集情况等等。另外，还可以用作日志级别的动态修改，比如 log4j 就支持 JMX 方式动态修改线上服务的日志级别。最主要的还是被用来做各种监控工具，如 Spring Boot Actuator、JConsole、VisualVM 等。</p>\n<p>为了标准化管理和监控，Java 平台使用 JMX 作为管理和监控的标准接口，任何程序，只要按 JMX 规范访问这个接口，就可以获取所有管理与监控信息。</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/42dfc37951bf02f361fc0111444eaaa81629705067.jpg\" alt=\"JMS架构图示\" /></p>\n<p>JMX 把所有被管理的资源都称为 MBean（Managed Bean），这些 MBean 全部由 MBeanServer 管理，如果要访问 MBean，可以通过 MBeanServer 对外提供的访问接口，例如通过 RMI 或 HTTP 访问。</p>\n<p>使用 JMX 不需要安装任何额外组件，也不需要第三方库，因为 MBeanServer 已经内置在 JavaSE 标准库中了。JavaSE 还提供了一个  <code>jconsole</code>  程序，用于通过 RMI 连接到 MBeanServer，这样就可以管理整个 Java 进程。</p>\n<p>JVM 会把自身的各种资源以 MBean 注册到 JMX 中，同时，程序自己的配置、监控信息也可以作为 MBean 注册到 JMX，这样，管理程序就可以直接控制程序暴露的 MBean。</p>\n<p>JMX 中 MBean 有 DynamicMBean 和 StandardMBean 两类，前者动态组装一个监控对象，较为复杂，但更为灵活，不需要监控类继承 * MBean 接口，后者简单。</p>\n<p>应用程序使用 JMX 只需要两步：</p>\n<ol>\n<li>编写 MBean 提供管理接口和监控数据；</li>\n<li>注册 MBean（在 Spring 应用中，这一步将自动完成）。</li>\n</ol>\n<p>示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>management<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MBeanServer</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>management<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectName</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>management<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ManagementFactory</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloJMX</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HelloJMXMBean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloJMX, \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printHello</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> whoName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloJMX, it is \"</span> <span class=\"token operator\">+</span> whoName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">MBeanServer</span> server <span class=\"token operator\">=</span> <span class=\"token class-name\">ManagementFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPlatformMBeanServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">ObjectName</span> helloName <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"george:name=HelloJMX\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        server<span class=\"token punctuation\">.</span><span class=\"token function\">registerMBean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HelloJMX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> helloName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>启动示例程序，然后在终端启动一个  <code>JConsole</code>  ，并连接该示例程序的进程，监控窗口如下：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/08b5de3bc7fd84487e707c854ce726911629710955.png\" alt=\"JConsole监控窗口\" /></p>\n<blockquote>\n<p>启动 jconsole 方法：在终端执行命令  <code>jconsole</code>  即可。</p>\n</blockquote>\n<p>Java 监控相关软件包：</p>\n<ul>\n<li>java.lang.management.*</li>\n<li>javax.management.*</li>\n</ul>\n<p>更多内容，请阅读：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvMTI1MjU5OTU0ODM0Mzc0NC8xMjgyMzg1Njg3NjA5Mzc4\">https://www.liaoxuefeng.com/wiki/1252599548343744/1282385687609378</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xNjY1MzA0NDI=\">https://zhuanlan.zhihu.com/p/166530442</span></li>\n</ul>\n<h3 id=\"泛型\"><a class=\"anchor\" href=\"#泛型\">#</a> 泛型</h3>\n<p>Java 泛型（generics）是 JDK 5 中引入的⼀个新特性， 允许在定义类和接口的时候使用类型参数 。</p>\n<p>声明的类型参数在使用时用具体的类型来替换。 泛型最主要的应⽤是在 JDK 5 中的新集合类框架中。</p>\n<p>泛型最⼤的好处是可以提⾼代码的复用性。 以 List 接口为例，我们可以将 String、Integer 等类型放⼊ List 中，如不用泛型，存放 String 类型要写⼀个 List 接口，存放 Integer 要写另外⼀个 List 接口，泛型可以很好的解决这个问题。</p>\n<h4 id=\"泛型与继承\"><a class=\"anchor\" href=\"#泛型与继承\">#</a> 泛型与继承</h4>\n<h4 id=\"类型擦除\"><a class=\"anchor\" href=\"#类型擦除\">#</a> 类型擦除</h4>\n<p>Java 语言的泛型采用的是擦除法实现的伪泛型，泛型信息（类型变量、参数化类型）编译之后通通被除掉了。使用擦除法的好处就是实现简单、并且能够向后兼容，运行期也能够节省一些类型所占的内存空间。而擦除法的坏处就是，通过这种机制实现的泛型远不如真泛型灵活和强大。Java 选取这种方法是一种折中，因为 Java 最开始的版本是不支持泛型的，为了兼容以前的库而不得不使用擦除法。</p>\n<p>泛型类型只有在静态类型检查期间才出现，在此之后，程序中的所有泛型类型都将被擦除，替换成它们非泛型上界。</p>\n<p>可以简单理解为：类型擦除即是将 Java 泛型代码转换为普通 Java 代码。</p>\n<p>类型擦除的主要过程：</p>\n<ol>\n<li>将所有的泛型参数用其最左边界（最顶级的父类型）类型替换。</li>\n<li>移除所有的类型参数。</li>\n</ol>\n<h4 id=\"泛型中的ktveobject\"><a class=\"anchor\" href=\"#泛型中的ktveobject\">#</a> 泛型中的 KTVE?object</h4>\n<ul>\n<li>K 代表 Key 的意思。</li>\n<li>T 代表一般的任何类。</li>\n<li>V 代表 Value 的意思，通常与 K 一起配合使用。</li>\n<li>E 代表 Element 的意思，或者 Exception 异常的意思。</li>\n<li>? 通配符， 代表某种确定的类型，但是又有不确定性。 比如  <code>&lt;? extends Collection&gt;</code>  不确定类型，确定实现了 Collection 接口。能确定上限，或确定下限。</li>\n<li>object 超类，需要强制类型转换，编译时可能类型不一致导致报错。</li>\n</ul>\n<h4 id=\"限定通配符和非限定通配符\"><a class=\"anchor\" href=\"#限定通配符和非限定通配符\">#</a> 限定通配符和非限定通配符</h4>\n<ul>\n<li>\n<p><code>&lt;?&gt;</code>  被称为非限定通配符，可以用任意类型来替代。</p>\n</li>\n<li>\n<p><code>&lt;? extends T&gt;</code>  被称为有上限的限定通配符，泛型类型必须为 T 或 T 的子类。</p>\n<p>extends 被称为上界限定符。</p>\n</li>\n<li>\n<p><code>&lt;? super T&gt;</code>  被称为有下限的限定通配符，泛型类型必须为 T 或 T 的父类。</p>\n<p>super 被称为下界限定符。</p>\n</li>\n</ul>\n<h4 id=\"list-list和listobject\"><a class=\"anchor\" href=\"#list-list和listobject\">#</a> List、List&lt;?&gt; 和 List&lt;Object&gt;</h4>\n<ol>\n<li>\n<p>List&lt;Object&gt; 和 List 的区别</p>\n<p>原始类型 List 和带参数类型  <code>List&lt;Object&gt;</code>  之间的主要区别是，在编译时编译器不会对原始类型进行类型安全检查，却会对带参数的类型进行检查。它们之间的第二点区别是，你可以把任何带参数的类型传递给原始类型 List，但却不能把 List 传递给接受  <code>List&lt;Object&gt;</code>  的方法，因为会产生编译错误。</p>\n</li>\n<li>\n<p>List&lt;Object&gt; 和 List&lt;?&gt; 的区别</p>\n<p><code>List&lt;?&gt;</code>  是一个未知类型的 List，而  <code>List&lt;Object&gt;</code>  其实是任意类型的 List。你可以把 <code>List&lt;String&gt;</code>  ，  <code>List&lt;Integer&gt;</code>  赋值给  <code>List&lt;?&gt;</code>  ，却不能把  <code>List&lt;String&gt;</code>  赋值给  <code>List&lt;Object&gt;</code>  。</p>\n</li>\n</ol>\n<h3 id=\"单元测试\"><a class=\"anchor\" href=\"#单元测试\">#</a> 单元测试</h3>\n<blockquote>\n<p>单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。对于单元测试中单元的含义，一般来说，要根据实际情况去判定其具体含义，Java 里单元指一个类，图形化的软件中可以指一个窗口或一个菜单等。总的来说，单元就是人为规定的最小的被测功能模块。单元测试是在软件开发过程中要进行的最低级别的测试活动，软件的独立单元将在与程序的其他部分相隔离的情况下进行测试。</p>\n<p>quote from <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOEQlOTUlRTUlODUlODMlRTYlQjUlOEIlRTglQUYlOTU=\">百度百科_单元测试</span></p>\n</blockquote>\n<p>注：本文对单元测试相关内容归类为了解性知识（但其实这部分知识点应用频率也不算太低，总之，根据个人情况吧），这里仅作简要说明，如果想要了解更多内容，可以查看这一部分推荐的相关链接。</p>\n<p>关于单元测试的讨论，可以看这一片知乎帖子：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI4NzI5MjYx\">https://www.zhihu.com/question/28729261</span></p>\n<h4 id=\"junit\"><a class=\"anchor\" href=\"#junit\">#</a> JUnit</h4>\n<p>JUnit 是一个 Java 编程语言的单元测试框架，是截止目前 Java 单元测试领域最流行的框架。</p>\n<p>关于 JUnit5 介绍，可以阅读：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMTE3MDY2Mzk=\">https://zhuanlan.zhihu.com/p/111706639</span></p>\n<h4 id=\"mock\"><a class=\"anchor\" href=\"#mock\">#</a> Mock</h4>\n<p>Mock 通常是指，在测试一个对象 A 时，我们构造一些假的对象来模拟与 A 之间的交互，而这些 Mock 对象的行为是我们事先设定且符合预期。通过这些 Mock 对象来测试 A 在正常逻辑，异常逻辑或压力情况下工作是否正常。</p>\n<p>引入 Mock 最大的优势在于：Mock 的行为固定，它确保当你访问该 Mock 的某个方法时总是能够获得一个没有任何逻辑的直接就返回的预期结果。</p>\n<h4 id=\"mockito\"><a class=\"anchor\" href=\"#mockito\">#</a> Mockito</h4>\n<p>Mockio 是一款 Java Mock 测试工具。</p>\n<p>关于 Mockio ，可以参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYm9kaGl0cmVlL3AvOTQ1NjUxNS5odG1s\">https://www.cnblogs.com/bodhitree/p/9456515.html</span></p>\n<h4 id=\"内存数据库h2\"><a class=\"anchor\" href=\"#内存数据库h2\">#</a> 内存数据库（h2）</h4>\n<p>H2 是一个开源的嵌入式（非嵌入式设备）数据库引擎，它是一个用 Java 开发的类库，可直接嵌入到应用程序中，与应用程序一起打包发布，不受平台限制。</p>\n<p>Java H2 数据库连接示例：</p>\n<ol>\n<li>\n<p>下载启动</p>\n<p>下载地址：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5oMmRhdGFiYXNlLmNvbS9odG1sL2Rvd25sb2FkLmh0bWw=\">http://www.h2database.com/html/download.html</span></p>\n<p>运行脚本文件  <code>h2.bat</code></p>\n</li>\n<li>\n<p>在测试项目中添加依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.h2database<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>h2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.4.190<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>编写测试文件</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>h2<span class=\"token punctuation\">.</span>tools<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Server</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">H2Demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Server</span> server<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> port <span class=\"token operator\">=</span> <span class=\"token string\">\"8082\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> dbDir <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:h2:tcp://192.168.0.36/~/test\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> user <span class=\"token operator\">=</span> <span class=\"token string\">\"sa\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">startServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"正在启动h2...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            server <span class=\"token operator\">=</span> <span class=\"token class-name\">Server</span><span class=\"token punctuation\">.</span><span class=\"token function\">createTcpServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"-tcpPort\"</span><span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"启动h2出错：\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">stopServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>server <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"正在关闭h2...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            server<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"关闭成功.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">useH2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"org.h2.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token class-name\">Connection</span> conn <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>dbDir<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token class-name\">Statement</span> stat <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\">// insert data</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">//            stat.execute(\"CREATE TABLE TEST(NAME VARCHAR)\");</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            stat<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"INSERT INTO TEST VALUES('Hello World')\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">// use data</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token class-name\">ResultSet</span> result <span class=\"token operator\">=</span> stat<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select name from test \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">++</span> <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            result<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            stat<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            conn<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token class-name\">H2Demo</span> h2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">H2Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\">//        h2.startServer();</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        h2<span class=\"token punctuation\">.</span><span class=\"token function\">useH2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\">//        h2.stopServer();</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==END==\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"正则表达式\"><a class=\"anchor\" href=\"#正则表达式\">#</a> 正则表达式</h3>\n<p>正则表达式描述了一种字符串匹配的模式，可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p>\n<p>正则表达式在线工具：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jLnJ1bm9vYi5jb20vZnJvbnQtZW5kLzg1NA==\">https://c.runoob.com/front-end/854</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3Rvb2wuY2hpbmF6LmNvbS9yZWdleA==\">http://tool.chinaz.com/regex</span></li>\n</ul>\n<h3 id=\"常用的java工具库\"><a class=\"anchor\" href=\"#常用的java工具库\">#</a> 常用的 Java 工具库</h3>\n<h4 id=\"commonslang\"><a class=\"anchor\" href=\"#commonslang\">#</a> commons.lang</h4>\n<p>在  <code>org.apache.commons.lang</code>  包中提供了一些有用的包含 static 方法的 Util 类。除了 6 个 Exception 类和 2 个已经 deprecated 的数字类之外，commons.lang 包共包含了 17 个实用的类：</p>\n<ul>\n<li>ArrayUtils – 用于对数组的操作，如添加、查找、删除、子数组、倒序、元素类型转换等；</li>\n<li>BitField – 用于操作位元，提供了一些方便而安全的方法；</li>\n<li>BooleanUtils – 用于操作和转换 boolean 或者 Boolean 及相应的数组；</li>\n<li>CharEncoding – 包含了 Java 环境支持的字符编码，提供是否支持某种编码的判断；</li>\n<li>CharRange – 用于设定字符范围并做相应检查；</li>\n<li>CharSet – 用于设定一组字符作为范围并做相应检查；</li>\n<li>CharSetUtils – 用于操作 CharSet；</li>\n<li>CharUtils – 用于操作 char 值和 Character 对象；</li>\n<li>ClassUtils – 用于对 Java 类的操作，不使用反射；</li>\n<li>ObjectUtils – 用于操作 Java 对象，提供 null 安全的访问和其他一些功能；</li>\n<li>RandomStringUtils – 用于生成随机的字符串；</li>\n<li>SerializationUtils – 用于处理对象序列化，提供比一般 Java 序列化更高级的处理能力；</li>\n<li>StringEscapeUtils – 用于正确处理转义字符，产生正确的 Java、JavaScript、HTML、XML 和 SQL 代码；</li>\n<li>StringUtils – 处理 String 的核心类，提供了相当多的功能；</li>\n<li>SystemUtils – 在 java.lang.System 基础上提供更方便的访问，如用户路径、Java 版本、时区、操作系统等判断；</li>\n<li>Validate – 提供验证的操作，有点类似 assert 断言；</li>\n<li>WordUtils – 用于处理单词大小写、换行等。</li>\n</ul>\n<blockquote>\n<p>选择记住一些常用的就行。</p>\n</blockquote>\n<h4 id=\"guava-libraries\"><a class=\"anchor\" href=\"#guava-libraries\">#</a> guava-libraries</h4>\n<p>Guava-Libraries 是一套来自 Google 的核心 Java 库，其中包括新的集合类型（如 multimap 和 multiset）、不可变的集合、图库，以及并发、I/O、散列、缓存、基元、字符串等实用工具！它被广泛用于 Google 内部的大多数 Java 项目，也被许多其他公司广泛使用。</p>\n<p>Guava 的好处：</p>\n<ul>\n<li>标准化 - Guava 库是由谷歌托管。</li>\n<li>高效 - 可靠，快速和有效的扩展 JAVA 标准库</li>\n<li>优化 - Guava 库经过高度的优化。</li>\n<li>函数式编程 - 增加 JAVA 功能和处理能力。</li>\n<li>实用程序 - 提供了经常需要在应用程序开发的许多实用程序类。</li>\n<li>验证 - 提供标准的故障安全验证机制。</li>\n<li>最佳实践 - 强调最佳的做法。</li>\n</ul>\n<p>本部分内容参考自：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tdWxhbm9zLm9zY2hpbmEubmV0L3AvZ3VhdmE=\">https://mulanos.oschina.net/p/guava</span></p>\n<h4 id=\"netty-2\"><a class=\"anchor\" href=\"#netty-2\">#</a> netty</h4>\n<p><span class=\"label danger\">❗️TODO</span> 待完善</p>\n<h3 id=\"api-spi\"><a class=\"anchor\" href=\"#api-spi\">#</a> API &amp; SPI</h3>\n<h4 id=\"api\"><a class=\"anchor\" href=\"#api\">#</a> API</h4>\n<blockquote>\n<p>API（Application Programming Interface，应用程序接口）是一些预先定义的接口（如函数、HTTP 接口），或指软件系统不同组成部分衔接的约定。用来提供应用程序与开发人员基于某软件或硬件得以访问的一组例程，而又无需访问源码，或理解内部工作机制的细节。</p>\n<p>quote from <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9BUEk=\">百度百科_API</span></p>\n</blockquote>\n<h4 id=\"spi\"><a class=\"anchor\" href=\"#spi\">#</a> SPI</h4>\n<p>SPI 全称 Service Provider Interface，是 Java 提供的一套用来被第三方实现或者扩展的 API，它可以用来启用框架扩展和替换组件。</p>\n<p>如何定义 SPI 及 SPI 的实现原理，参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vb3NreWhnL3AvMTA4MDAwNTEuaHRtbA==\">https://www.cnblogs.com/oskyhg/p/10800051.html</span></p>\n<h4 id=\"api与spi的关系和区别\"><a class=\"anchor\" href=\"#api与spi的关系和区别\">#</a> API 与 SPI 的关系和区别</h4>\n<p>API 描述的是可以直接使用的方法，达到某种功能的实现。可以简单的理解为服务方暴露自己的服务供客户方调用。比如 Java 的 api 文档，服务方是 JDK，客户方就是 Java 开发人员。API 由开发人员调用。</p>\n<p>SPI：服务方提供的不在是提供具体的方法，而是提供对象的接口，客户方需要实现接口， 然后服务方调用客户方的接口实现类，再来实现客户的某种功能。SPI 是框架接口规范，需要框架开发人员实现。</p>\n<p>但有时候，API 和 SPI 是分不清的，比如 Connection 接口，Driver 接口等。</p>\n<h3 id=\"异常\"><a class=\"anchor\" href=\"#异常\">#</a> 异常</h3>\n<h4 id=\"异常类型\"><a class=\"anchor\" href=\"#异常类型\">#</a> 异常类型</h4>\n<p><img data-src=\"http://image.mamicode.com/info/201904/20190426211659356277.png\" alt=\"异常分类结构图\" /></p>\n<p>上图简要展示了异常类实现的结构图（并非全部），除此之外，用户也可以自定义异常实现。</p>\n<ol>\n<li>Throwable 是 Java 异常的根类，所有的异常都是从 Throwable 继承而来的。</li>\n<li>Throwable 有两个子类，Error 和 Exception。</li>\n</ol>\n<h4 id=\"正确处理异常\"><a class=\"anchor\" href=\"#正确处理异常\">#</a> 正确处理异常</h4>\n<p>代码中的异常处理其实是对可检查异常的处理，主要有以下几个要点：</p>\n<ol>\n<li>\n<p>通过  <code>try&#123;&#125;catch()&#123;&#125;</code>  语句块处理异常。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 可能出现异常的程序代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExceptionName</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 捕获异常后的处理</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>通过  <code>throw/throws</code>  抛出异常交由上层处理。</p>\n<p>除了及时捕获并处理异常外，程序也可以选择暂不处理，而是交给上一层，但必须保证某一层代码要处理该异常。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ArithmeticException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------- method divide() exception ----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> numerator<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> denominator<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ArithmeticException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> numerator <span class=\"token operator\">/</span> denominator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>关键字  <code>finally</code>  的使用。</p>\n<p>finally 关键字用来创建在 try 代码块后面执行的代码块，无论是否发生异常，finally 代码块中的代码总会被执行。在 finally 代码块中，尝用于运行清理类型等收尾善后性质的语句。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tyr <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 可能出现异常的程序代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExceptionName</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 捕获异常后的处理</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 无论是否出现异常，都需要执行的代码</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"自定义异常\"><a class=\"anchor\" href=\"#自定义异常\">#</a> 自定义异常</h4>\n<p>在 Java 中要想创建自定义异常，需要继承 Throwable 或者他的子类 Exception。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBusinessException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 根据需要重写构造方法及异常处理内部逻辑</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyBusinessException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyBusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyBusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Throwable</span> cause<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> cause<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyBusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> cause<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>cause<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"error-和-exception\"><a class=\"anchor\" href=\"#error-和-exception\">#</a> Error 和 Exception</h4>\n<p>Error 是程序无法处理的错误，表示运行程序中较严重的问题，它们在应用程序控制和处理范围之外，而且绝大多数是程序运行时不允许出现的状况（是处理不到的），对于设计合理的应用程序，即使确实发生了错误，本质也不应该试图去处理它所引起的异常状况。</p>\n<p>Exception 是程序本身可以处理的异常。异常处理通常指针对这种类型异常处理，包括非检查异常（编译器不要求强制处理的异常）和检查异常（编译器要求处理的异常）。</p>\n<ul>\n<li>\n<p>Checked Exception</p>\n<p>所有可检查的异常都是需要在代码中处理的。它们的发生是可以预测的，正常的一种情况，可以合理的处理。除了 RuntimeException 及其子类以外，都是可检查的异常。</p>\n</li>\n<li>\n<p>Unchecked Exception</p>\n<p>RuntimeException 及其子类都是非检查异常。比如 NPE 空指针异常，除数为 0 的算数异常 ArithmeticException 等等，这种异常是运行时发生，无法预先捕捉处理的。</p>\n</li>\n</ul>\n<h4 id=\"异常链\"><a class=\"anchor\" href=\"#异常链\">#</a> 异常链</h4>\n<p>当 A 方法调用 B 方法时，B 方法抛出异常，而 A 方法期望抛出一个新的异常，这时则会用到异常链进行处理。</p>\n<p>异常链示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExceptionChainTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * paly () 抛出【你未遵守公司规定】的异常</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * work () 调用 paly ()，捕获【你在玩手机】的异常，并且包装成运行时异常，继续抛出</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * main () 调用 work ()，尝试捕获 work () 方法抛出的异常</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">ExceptionChainTest</span> ct <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExceptionChainTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            ct<span class=\"token punctuation\">.</span><span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token function\">paly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BusinessException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\">RuntimeException</span> newExc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----> Please comply with company regulations\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            newExc<span class=\"token punctuation\">.</span><span class=\"token function\">initCause</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">throw</span> newExc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">paly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BusinessException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----> Exception: Do not play mobile phones during working hours!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">BusinessException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"try-with-resource\"><a class=\"anchor\" href=\"#try-with-resource\">#</a> try-with-resource</h4>\n<p><code>try-with-resource</code>  是 jdk1.7 引入的语法糖，它使得关闭资源操作无需层层嵌套在 finally。要使用  <code>try-with-resource</code>  ，必须先实现 AutoCloseable 接口，其中包含了一个无返回值的 close 方法，Java 与第三方许多类和接口，均实现或扩展了 AutoCloseable 接口，因此开发时不需要显示地重复声明实现。</p>\n<p>例如一段实现文件拷贝的代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TryWithResourceTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token class-name\">BufferedInputStream</span> bis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"in.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token class-name\">BufferedOutputStream</span> bos <span class=\"token operator\">=</span> <span class=\"token class-name\">BufferedOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=</span> bis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                bos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>注：使用 try-with-resource 时，不需要手动关闭资源。而事实上，它只是一种语法糖，程序在编译时，会还原出真正的包含有 finally 关闭资源相关逻辑的代码块。</p>\n</blockquote>\n<h4 id=\"finally和return的执行顺序\"><a class=\"anchor\" href=\"#finally和return的执行顺序\">#</a> finally 和 return 的执行顺序</h4>\n<p>如果 try 中有 return 语句， 那么 finally 中的代码还是会执⾏。因为 return 表⽰的是要整个⽅法体返回， 所以，<mark>finally 中的语句会在 return 之前执⾏</mark>。</p>\n<p>但是，在 return 前执行的 finally 块中对数据进行更新的效果，会因为引用类型和值类型而不同。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 操作引用类型（无效）</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 操作值类型（有效）</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"时间处理\"><a class=\"anchor\" href=\"#时间处理\">#</a> 时间处理</h3>\n<h4 id=\"时区\"><a class=\"anchor\" href=\"#时区\">#</a> 时区</h4>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/c6ccf8487f42cf1d65568fcbf84497b21629790347.jpeg\" alt=\"世界时区划分\" /></p>\n<p>时区划分是高中地理基本知识。如果对时区等基本概念和原理不清楚，可以简单了解下：</p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlqaWFoYW8uYmFpZHUuY29tL3M/aWQ9MTY3ODgyNzA1MjE4NjUxMjQ0Mg==\">https://baijiahao.baidu.com/s?id=1678827052186512442</span></p>\n<p>对于日常开发而言，你只需要简单记住以下几点即可：</p>\n<ol>\n<li>时区分为十一个东时区、十一个西时区、一个中时区和一个东西十二时区。</li>\n<li>伦敦处于中时区（本初子午线）。</li>\n<li>北京时间是东八区时间。</li>\n<li>两地之间每相距一个时区，时间相差一小时。</li>\n</ol>\n<h4 id=\"冬时令和夏时令\"><a class=\"anchor\" href=\"#冬时令和夏时令\">#</a> 冬时令和夏时令</h4>\n<p>夏令时、冬令时的出现，是为了充分利用夏天的日照，所以时钟要往前拨快一小时，冬天再把表往回拨一小时。其中夏令时从 3 月第二个周日持续到 11 月第一个周日。</p>\n<ul>\n<li>冬令时： 北京和洛杉矶时差：16 北京和纽约时差：13</li>\n<li>夏令时： 北京和洛杉矶时差：15 北京和纽约时差：12</li>\n</ul>\n<h4 id=\"时间戳\"><a class=\"anchor\" href=\"#时间戳\">#</a> 时间戳</h4>\n<p>时间戳（timestamp），一个能表示一份数据在某个特定时间之前已经存在的、 完整的、 可验证的数据，通常是一个字符序列，唯一地标识某一刻的时间。</p>\n<p>时间戳是指格林威治时间 1970 年 01 月 01 日 00 时 00 分 00 秒（北京时间 1970 年 01 月 01 日 08 时 00 分 00 秒）起至现在的总秒数。通俗的讲， 时间戳是一份能够表示一份数据在一个特定时间点已经存在的完整的可验证的数据。</p>\n<h4 id=\"java中时间api\"><a class=\"anchor\" href=\"#java中时间api\">#</a> Java 中时间 API</h4>\n<ol>\n<li>\n<p>java.lang.System</p>\n<p>System 类提供的  <code>currentTimeMillis()</code>  用来返回当前时间与 1970 年 1 月 1 日 0 时 0 分 0 秒之间以毫秒为单位的时间差。</p>\n</li>\n<li>\n<p>java.util.Date</p>\n<p>相关方法当基本用法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"date = \"</span> <span class=\"token operator\">+</span> date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Date</span> date2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">1629791405786L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"date2 = \"</span> <span class=\"token operator\">+</span> date2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">long</span> time <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"time = \"</span> <span class=\"token operator\">+</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    date<span class=\"token punctuation\">.</span><span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"date = \"</span> <span class=\"token operator\">+</span> date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>注意区分  <code>java.util.Date</code>  与  <code>java.sql.Date</code>  。</p>\n</blockquote>\n</li>\n<li>\n<p>java.text.SimpleDateFormat</p>\n<p>这个类主要用来进行时间格式转换，例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">String</span> strDateFormat <span class=\"token operator\">=</span> <span class=\"token string\">\"yyyy-MM-dd HH:mm:ss\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">SimpleDateFormat</span> sdf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span>strDateFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sdf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>java.util.Calendar</p>\n<p>这是一个日历类。日历字段包含 YEAR、MONTH、DAY_OF_MONTH、HOUR 等，它们都是 Calendar 类的静态常量。</p>\n<p>计算时间差示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">LocalDate</span> now <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">LocalDate</span> localDate <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Period</span> period <span class=\"token operator\">=</span> <span class=\"token class-name\">Period</span><span class=\"token punctuation\">.</span><span class=\"token function\">between</span><span class=\"token punctuation\">(</span>localDate<span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>period<span class=\"token punctuation\">.</span><span class=\"token function\">getYears</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>period<span class=\"token punctuation\">.</span><span class=\"token function\">getMonths</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>period<span class=\"token punctuation\">.</span><span class=\"token function\">getDays</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>period<span class=\"token punctuation\">.</span><span class=\"token function\">withYears</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"格林威治时间\"><a class=\"anchor\" href=\"#格林威治时间\">#</a> 格林威治时间</h4>\n<p>格林尼治平时（英语：Greenwich Mean Time，GMT）是指位于英国伦敦郊区的皇家格林尼治天文台当地的平太阳时，因为本初子午线被定义为通过那里的经线。</p>\n<p>格林尼治平时基于天文观测本身的缺陷，已经被原子钟报时的协调世界时（UTC）所取代。</p>\n<p>一般使用 GMT+8 表示中国的时间，是因为中国位于东八区，时间上比格林威治时间快 8 个小时。</p>\n<h4 id=\"cetutcgmtcst几种常见时间的含义和关系\"><a class=\"anchor\" href=\"#cetutcgmtcst几种常见时间的含义和关系\">#</a> CET，UTC，GMT，CST 几种常见时间的含义和关系</h4>\n<p><strong>CET</strong> 欧洲中部时间（英語：Central European Time，CET）是比世界标准时间（UTC）早一个小时的时区名称之一。它被大部分欧洲国家和部分北非国家采用。冬季时间为 UTC+1，夏季欧洲夏令时为 UTC+2。</p>\n<p><strong>UTC</strong> 协调世界时，又称世界标准时间或世界协调时间，简称 UTC，从英文 “Coordinated Universal Time”／法文 “Temps Universel Cordonné” 而来。台湾采用 CNS 7648 的《资料元及交换格式–资讯交换–日期及时间的表示法》（与 ISO 8601 类似）称之为世界统一时间。中国大陆采用 ISO 8601-1988 的国标《数据元和交换格式信息交换日期和时间表示法》（GB/T 7408）中称之为国际协调时间。协调世界时是以原子时秒长为基础，在时刻上尽量接近于世界时的一种时间计量系统。</p>\n<p><strong>GMT</strong> 格林尼治标准时间（旧译格林尼治平均时间或格林威治标准时间；英语：Greenwich Mean Time，GMT）是指位于英国伦敦郊区的皇家格林尼治天文台的标准时间，因为本初子午线被定义在通过那里的经线。</p>\n<p><strong>CST</strong> 北京时间，China Standard Time，又名中国标准时间，是中国的标准时间。在时区划分上，属东八区，比协调世界时早 8 小时，记为 UTC+8，与中华民国国家标准时间（旧称 “中原标准时间”）、香港时间和澳门时间和相同。</p>\n<p><strong>关系</strong></p>\n<p>CET=UTC/GMT + 1 小时 CST=UTC/GMT +8 小时 CST=CET+9</p>\n<h4 id=\"simpledateformat-的线程安全问题\"><a class=\"anchor\" href=\"#simpledateformat-的线程安全问题\">#</a> SimpleDateFormat 的线程安全问题</h4>\n<blockquote>\n<p>【强制】SimpleDateFormat 是线程不安全的类，一般不要定义为 static 变量，如果定义为 static，必须加锁，或者使用 DateUtils 工具类。</p>\n<p>正例：注意线程安全，使用 DateUtils 。亦推荐如下处理：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ThreadLoal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DateFormat</span><span class=\"token punctuation\">></span></span> df <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DateFormat</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">DateFormat</span> <span class=\"token function\">initialValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>quote from 《阿里巴巴 Java 开发手册》</p>\n</blockquote>\n<p>引起 SimpleDateFormat 线程安全问题的原因：</p>\n<p>SimpleDateFormat 中的 format 方法在执行过程中，会使用一个成员变量 calendar 来保存时间。如果我们在声明 SimpleDateFormat 的时候，使用的是 static 定义的。那么这个 SimpleDateFormat 就是一个共享变量，随之，SimpleDateFormat 中的 calendar 也就可以被多个线程访问到。一个线程在执行  <code>clendar.setTime</code>  方法时，并不能保证不影响到他线程执行  <code>clendar.getTime</code>  。</p>\n<p>除了 format 方法以外，SimpleDateFormat 的 parse 方法也有同样的问题。所以，不要把 SimpleDateFormat 作为一个共享变量使用。</p>\n<p>解决这个问题的方法有很多，常见有以下几种处理方式：</p>\n<ol>\n<li>\n<p>将  <code>SimpleDateFormat</code>  作为局部变量使用。</p>\n</li>\n<li>\n<p>为共享变量添加同步锁。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>simpleDateFormat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>使用 ThreadLocal</p>\n<p>见上文提及的《阿里巴巴 Java 开发手册》。</p>\n</li>\n<li>\n<p>使用 DateTimeFormatter</p>\n<p>Java8+ 可以使用 DateTimeFormatter 代替 SimpleDateFormat，这是一个线程安全的格式化工具类。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 解析日期</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> dateStr <span class=\"token operator\">=</span> <span class=\"token string\">\"2016年10月25日\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">DateTimeFormatter</span> formatter <span class=\"token operator\">=</span> <span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy年MM月dd日\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">LocalDate</span> date <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>dateStr<span class=\"token punctuation\">,</span> formatter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 日期转换为字符串</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span> now <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">DateTimeFormatter</span> format <span class=\"token operator\">=</span> <span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy年MM月dd日 hh:mm a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">String</span> nowStr <span class=\"token operator\">=</span> now <span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>nowStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"java-8中的时间处理\"><a class=\"anchor\" href=\"#java-8中的时间处理\">#</a> Java 8 中的时间处理</h4>\n<p>在 Java8 之前的版本中，日期时间 API 存在诸多问题，例如：</p>\n<ol>\n<li>非线程安全 − java.util.Date 是非线程安全的，所有的日期类都是可变的，这是 Java 日期类最大的问题之一。</li>\n<li>设计很差 − Java 的日期 / 时间类的定义不一致。</li>\n<li>时区处理麻烦 − 日期类并不提供国际化，没有时区支持，因此 Java 引入了 java.util.Calendar 和 java.util.TimeZone 类，但他们同样存在上述所有的问题。</li>\n</ol>\n<p>在 Java8 中， 新的时间及⽇期 API 位于 java.time 包中，该包中有如下重要的类：</p>\n<ul>\n<li><code>Instant</code> ： 时间戳</li>\n<li><code>Duration</code> ： 持续时间，时间差</li>\n<li><code>LocalDate</code> ： 只包含⽇期，⽐如： 2021-08-24</li>\n<li><code>LocalTime</code> ： 只包含时间，比如： 16:37:10</li>\n<li><code>LocalDateTime</code> ： 包含⽇期和时间，比如：2021-08-24 16:37:10</li>\n<li><code>Period</code> ： 时间段</li>\n<li><code>ZoneOffset</code> ： 时区偏移量，⽐如：+8:00</li>\n<li><code>ZonedDateTime</code> ： 带时区的时间</li>\n<li><code>Clock</code> ： 时钟，比如获取⽬前美国纽约的时间</li>\n</ul>\n<p>新的 java.time 包涵盖了所有处理日期，时间，日期 / 时间，时区，时刻（instants），过程（during）与时钟（clock）的操作。</p>\n<p>一些简单的使用方式如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取当前时间</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">LocalDate</span> today <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> year <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> month <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getMonthValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> day <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getDayOfMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Year : %d Month : %d day : %d t %n\"</span><span class=\"token punctuation\">,</span> year<span class=\"token punctuation\">,</span> month<span class=\"token punctuation\">,</span> day<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 创建指定日期的时间</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">LocalDate</span> date <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2021</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">01</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 判断闰年</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">LocalDate</span> nowDate <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">boolean</span> leapYear <span class=\"token operator\">=</span> nowDate<span class=\"token punctuation\">.</span><span class=\"token function\">isLeapYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 计算两个时间之间相差的月数和天数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">Period</span> period <span class=\"token operator\">=</span> <span class=\"token class-name\">Period</span><span class=\"token punctuation\">.</span><span class=\"token function\">between</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"如何在东八区的计算机上获取美国时间\"><a class=\"anchor\" href=\"#如何在东八区的计算机上获取美国时间\">#</a> 如何在东八区的计算机上获取美国时间</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span> now <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ZoneId</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"America/Los_Angeles\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 区域 / 城市</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"yyyy和yyyy的区别\"><a class=\"anchor\" href=\"#yyyy和yyyy的区别\">#</a> yyyy 和 YYYY 的区别</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ParseException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ParseException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 小写 yyyy - 2020</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YYYY-MM-dd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 大写 YYYY - 2019</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> parten<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ParseException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">SimpleDateFormat</span> strDateFormat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span>parten<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> strDateFormat<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-12-24\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">Calendar</span> calendar <span class=\"token operator\">=</span> <span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        calendar<span class=\"token punctuation\">.</span><span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> calendar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>YEAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在 Intellij IDEA 中书写  <code>new SimpleDateFormat(&quot;YYYY-MM-dd&quot;);</code>  时，会进行如下提示：</p>\n<p>【日期格式化字符串 [YYYY-MM-dd] 使用错误，应注意使用小写‘y’表示当天所在的年，大写‘Y’代表 week in which year。】</p>\n</blockquote>\n<h3 id=\"编码方式\"><a class=\"anchor\" href=\"#编码方式\">#</a> 编码方式</h3>\n<h4 id=\"ascii\"><a class=\"anchor\" href=\"#ascii\">#</a> ASCII</h4>\n<p>ASCII（ American Standard Code for InformationInterchange， 美国信息交换标准代码） 是基于拉丁字母的⼀套电脑编码系统， 主要⽤于显⽰现代英语和其他西欧语⾔。</p>\n<p>它是现今最通⽤的单字节编码系统，并等同于国际标准 ISO/IEC646。但是 ASCII 码只有 256 个字符无法适应非英语语言体系的国家。</p>\n<h4 id=\"unicode\"><a class=\"anchor\" href=\"#unicode\">#</a> Unicode</h4>\n<p>Unicode 是计算机科学领域里的一项业界标准。它对世界上大部分的文字系统进行了整理、编码，使得计算机可以用更为简单的方式来呈现和处理文字。</p>\n<p>Unicode 涵盖的数据除了视觉上的字形、编码方法、标准的字符编码外，还包含了字符特性，如大小写字母。</p>\n<p>Unicode 可以表示中文。</p>\n<h4 id=\"unicode-与-utf-8\"><a class=\"anchor\" href=\"#unicode-与-utf-8\">#</a> Unicode 与 UTF-8</h4>\n<p>广义的 Unicode 是一个标准，定义了一个字符集以及一系列的编码规则，即 Unicode 字符集和 UTF-8、UTF-16、UTF-32 等等编码规则。</p>\n<p>Unicode 是字符集。UTF-8 是编码规则。</p>\n<p>Unicode 虽然统一了全世界字符的二进制编码，但没有规定如何存储。不同文字单个字符字节大小并不一致，如果规定统一的编码存储，字节长度较小的字符则会产生大量的内存浪费，因此出现了 Unicode 的多种存储方式。UTF-8（Unicode Tranformation Format）就是 Unicode 的一个使用方式，它使用可变长度字节来储存 Unicode 字符，这样就可以适应不同字节大小的文字存储。</p>\n<h4 id=\"gbk-gb2312-gb18030区别\"><a class=\"anchor\" href=\"#gbk-gb2312-gb18030区别\">#</a> GBK、GB2312、GB18030 区别</h4>\n<p>三者都是支持中文字符的编码方式，其中最常用的是 GBK。</p>\n<ul>\n<li>\n<p>GB2312（1980 年）</p>\n<p>16 位字符集。优点：适用于简体中文环境，属于中国国家标准，通行于大陆，新加坡等地也使用此编码；缺点：不兼容繁体中文，其汉字集合过少。</p>\n</li>\n<li>\n<p>GBK（1995 年）</p>\n<p>16 位字符集。优点：适用于简繁中文共存的环境，为简体 Windows 所使用，所有字符都可以一对一映射到 unicode2.0 上；缺点：不属于官方标准，和 big5 之间需要转换；很多搜索引擎都不能很好地支持 GBK 汉字。</p>\n</li>\n<li>\n<p>GB18030（2000 年）</p>\n<p>32 位字符集，同时收录了藏文、蒙文、维吾尔文等主要的少数民族文字。优点：可以收录所有你能想到的文字和符号，属于中国最新的国家标准；缺点：目前支持它的软件较少。</p>\n</li>\n</ul>\n<p>GBK 是一套国内通用的编码标准。</p>\n<h4 id=\"utf8-utf16-utf32-区别\"><a class=\"anchor\" href=\"#utf8-utf16-utf32-区别\">#</a> UTF8、UTF16、UTF32 区别</h4>\n<p>UTF 是英文 Unicode Transformation Format 的缩写，意为把 Unicode 字符转换为某种格式。UTF 系列编码方案均是由 Unicode 编码方案衍变而来，以适应不同的数据存储或传递，它们都可以完全表示 Unicode 标准中的所有字符。</p>\n<ul>\n<li>\n<p>UTF-8</p>\n<p>其中大部分汉字采用三个字节编码，少量不常用汉字采用四个字节编码。</p>\n</li>\n<li>\n<p>UTF-16</p>\n<p>其中大部分汉字采用两个字节编码，少量不常用汉字采用四个字节编码。</p>\n</li>\n<li>\n<p>UTF-32</p>\n<p>使用四个字节为每个字符编码，它占用空间通常会是其它编码的二到四倍。</p>\n</li>\n</ul>\n<h4 id=\"url-编解码\"><a class=\"anchor\" href=\"#url-编解码\">#</a> URL 编解码</h4>\n<p>网络标准 RFC 1738 做了硬性规定：只有字母和数字  <code>0-9a-zA-Z</code>  、一些特殊符号  <code>$-_.+!*'(),</code>  以及某些保留字，才可以不经过编码直接用于 URL;</p>\n<p>除此以外的字符是无法在 URL 中展示的，所以，遇到这种字符，如中文，就需要进行编码。所以，把带有特殊字符的 URL 转成可以显示的 URL 过程，称之为 URL 编码。反之，就是解码。</p>\n<p>URL 编码可以使用不同的方式，如 escape，URLEncode，encodeURIComponent。</p>\n<h4 id=\"big-endian和little-endian\"><a class=\"anchor\" href=\"#big-endian和little-endian\">#</a> BIG Endian 和 Little Endian</h4>\n<p>字节序（Endian），也就是字节的顺序，指的是多字节的数据在内存中的存放顺序。</p>\n<p>Big Endian 是指低地址端存放高位字节。Little Endian 是指低地址端存放低位字节。</p>\n<p>Java 采用 Big Endian 来存储数据，C/C++ 采用 Little Endian。在网络传输一般采用的网络字节序是 BIG-ENDIAN。</p>\n<p>因此当 Java 和 C 语言进行通讯时，C 语言端需要考虑到字节序的转换问题，而 Java 端则无需考虑。</p>\n<h4 id=\"如何解决乱码问题\"><a class=\"anchor\" href=\"#如何解决乱码问题\">#</a> 如何解决乱码问题</h4>\n<p><mark>乱码问题本质上都是由于字符串原本的编码格式与读取时解析用的编码格式不一致导致的。</mark></p>\n<p>造成乱码的原因就是因为使用了错误的字符编码去解码字节流，因此当我们在思考任何跟文本显示有关的问题时，需要明确当前使用的字符编码是什么。</p>\n<h3 id=\"语法糖\"><a class=\"anchor\" href=\"#语法糖\">#</a> 语法糖</h3>\n<p>语法糖（Syntactic Sugar），也称糖衣语法，是由英国计算机学家 Peter.J.Landin 发明的一个术语，指在计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。简而言之，语法糖让程序更加简洁，有更高的可读性。</p>\n<h4 id=\"解语法糖\"><a class=\"anchor\" href=\"#解语法糖\">#</a> 解语法糖</h4>\n<p>语法糖的存在主要是方便开发人员使用，但其实 Java 虚拟机并不支持这些语法糖。这些语法糖在编译阶段就会被还原成简单的基础语法结构，这个过程就是解语法糖。</p>\n<h4 id=\"语法糖-2\"><a class=\"anchor\" href=\"#语法糖-2\">#</a> 语法糖</h4>\n<ul>\n<li>\n<p>switch 支持 String 与枚举</p>\n<p>字符串的 switch 是通过  <code>equals()</code>  和  <code>hashCode()</code>  方法来实现的。而枚举则是通过其  <code>ordinal()</code>  方法实现的。</p>\n</li>\n<li>\n<p>泛型</p>\n</li>\n<li>\n<p>自动装箱与拆箱</p>\n<p>自动装箱就是 Java 自动将原始类型值转换成对应的对象，反之，则是拆箱。装箱过程是通过调用包装器的 valueOf 方法实现的，而拆箱过程是通过调用包装器的 xxxValue 方法实现的。</p>\n</li>\n<li>\n<p>方法变长参数</p>\n<p>可变参数是在 Java1.5 中引入的一个特性。它允许一个方法把任意数量的值作为参数。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> strs<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>可变参数在被使用的时候，他首先会创建一个数组，数组的长度就是调用该方法是传递的实参的个数，然后再把参数值全部放到这个数组当中，然后再把这个数组作为参数传递到被调用的方法中。</p>\n</li>\n<li>\n<p>枚举</p>\n<p>当我们使用  <code>enmu</code>  来定义一个枚举类型的时候，编译器会自动帮我们创建一个  <code>final</code>  类型的类继承  <code>Enum</code>  类，所以枚举类型不能被继承。</p>\n</li>\n<li>\n<p>内部类</p>\n</li>\n<li>\n<p>条件编译</p>\n<p>— 般情况下，程序中的每一行代码都要参加编译。但有时候出于对程序代码优化的考虑，希望只对其中一部分内容进行编译，此时就需要在程序中加上条件，让编译器只对满足条件的代码进行编译，将不满足条件的代码舍弃，这就是条件编译。</p>\n<p>Java 语法的条件编译，是通过判断条件为常量的 if 语句实现的。其原理也是 Java 语言的语法糖。根据 if 判断条件的真假，编译器直接把分支为 false 的代码块消除。通过该方式实现的条件编译，必须在方法体内实现，而无法在整个 Java 类的结构或者类的属性上进行条件编译。</p>\n</li>\n<li>\n<p>断言</p>\n<p>Java 在执行的时候默认是不启动断言检查的，如果要开启断言检查，则需要用开关  <code>-enableassertions</code>  或  <code>-ea</code>  来开启。其实断言的底层实现就是 if 语言，如果断言结果为 true，则什么都不做，程序继续执行，如果断言结果为 false，则程序抛出 AssertError 来打断程序的执行。</p>\n</li>\n<li>\n<p>数值字面量</p>\n<p>在 java 7 中，数值字面量，不管是整数还是浮点数，都允许在数字之间插入任意多个下划线。这些下划线不会对字面量的数值产生影响，目的就是方便阅读。在编译时，编译器会自动去掉下划线。</p>\n</li>\n<li>\n<p>for-each</p>\n<p>for-each 的实现原理其实就是使用了普通的 for 循环和迭代器。</p>\n</li>\n<li>\n<p>try-with-resources</p>\n</li>\n<li>\n<p>Lambda 表达式</p>\n</li>\n</ul>\n<blockquote>\n<p>扩展搜索： <code>语法盐</code>  、  <code>语法糖精</code></p>\n</blockquote>\n<h2 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h2>\n<blockquote>\n<p>参考声明：参考内容来源于网络，本文不保证参考链接的长期有效性，以及参考内容的原创性。</p>\n</blockquote>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2hvbGxpc2NodWFuZy5naXRlZS5pby90b2JldG9wamF2YWU=\">Java 工程师成神之路</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaG9sbGlzY2h1YW5nLmNvbQ==\">HollisChuang's Blog</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI3NDY4NTY0L2Fuc3dlci83NTc1MzcyMTQ=\">https://www.zhihu.com/question/27468564/answer/757537214</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYmVuamllcWlhbmcvY2F0ZWdvcnkvMTQyODExNC5odG1s\">https://www.cnblogs.com/benjieqiang/category/1428114.html</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaG9sbGlzY2h1YW5nLmNvbS9hcmNoaXZlcy8zNDMw\">https://www.hollischuang.com/archives/3430</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMjcxNzAyMDE=\">https://zhuanlan.zhihu.com/p/127170201</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIwMzY3NzM0\">https://www.zhihu.com/question/20367734</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZHVhbnh6L3AvMzUxMTY5NS5odG1s\">https://www.cnblogs.com/duanxz/p/3511695.html</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxODEyMDcyNQ==\">https://segmentfault.com/a/1190000018120725</span></li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "JAVA学习路线",
                "基础篇",
                "java"
            ]
        },
        {
            "id": "https://www.chinmoku.cc/computer-science/java-learning-path/2-intermediate/mybatis-tutorial/",
            "url": "https://www.chinmoku.cc/computer-science/java-learning-path/2-intermediate/mybatis-tutorial/",
            "title": "MyBatis 教程",
            "date_published": "2021-08-20T05:27:13.000Z",
            "content_html": "<h3 id=\"mybatis-简介\"><a class=\"anchor\" href=\"#mybatis-简介\">#</a> MyBatis 简介</h3>\n<blockquote>\n<p>MyBatis 的前身是 Apache 的开源项目 iBatis。MyBatis 几乎可以代替 JDBC，是一个支持定制化 SQL 查询，存储过程和高级映射的基于 Java 的优秀持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生 Map 使用简单的 XML 或注解，将接口和 Java 的 POJOs（Plain Old Java Objects，普通的 Java 对象）映射成数据库中的记录。</p>\n</blockquote>\n<p><strong>安装 MyBatis</strong></p>\n<p>下载 jar 包并置于 classpath 下，或使用 maven 导入：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>Mybatis 的功能架构</strong></p>\n<ol>\n<li>API 接口层：提供给外部使用的接口 API，开发人员通过这些本地 API 来操纵数据库。接口层一接收到调用请求就会调用数据处理层来完成具体的数据处理。</li>\n<li>数据处理层：负责具体的 SQL 查找、SQL 解析、SQL 执行和执行结果映射处理等。它主要的目的是根据调用的请求完成一次数据库操作。</li>\n<li>基础支撑层：负责最基础的功能支撑，包括连接管理、事务管理、配置加载和缓存处理，这些都是共用的东西，将他们抽取出来作为最基础的组件。为上层的数据处理层提供最基础的支撑。</li>\n</ol>\n<p><strong>MyBatis 的优缺点</strong></p>\n<p>优点：</p>\n<ul>\n<li>灵活：mybatis 不会对应用程序或者数据库的现有设计强加任何影响。 sql 写在 xml 里，便于统一管理和优化。通过 sql 基本上可以实现我们不使用数据访问框架可以实现的所有功能，或许更多。</li>\n<li>解除 sql 与程序代码的耦合：通过提供 DAL 层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql 和代码的分离，提高了可维护性。</li>\n<li>提供映射标签，支持对象与数据库的 orm 字段关系映射。</li>\n<li>提供对象关系映射标签，支持对象关系组建维护。</li>\n<li>提供 xml 标签，支持编写动态 sql。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>编写 SQL 语句时工作量很大，尤其是字段多、关联表多时，更是如此。</li>\n<li>SQL 语句依赖于数据库，导致数据库移植性差，不能更换数据库。</li>\n<li>框架还是比较简陋，功能尚有缺失，虽然简化了数据绑定代码，但是整个底层数据库查询实际还是要自己写的，工作量也比较大，而且不太容易适应快速数据库修改。</li>\n<li>二级缓存机制不佳。</li>\n</ul>\n<h3 id=\"hibernate-和-mybatis-对比\"><a class=\"anchor\" href=\"#hibernate-和-mybatis-对比\">#</a> Hibernate 和 MyBatis 对比</h3>\n<ol>\n<li>SQL 优化方面\n<ul>\n<li>Hibernate 不需要编写大量的 SQL，就可以完全映射，提供了日志、缓存、级联（级联比 MyBatis 强大）等特性，此外还提供 HQL（Hibernate Query Language）对 POJO 进行操作。但会多消耗性能。</li>\n<li>MyBatis 手动编写 SQL，支持动态 SQL、处理列表、动态生成表名、支持存储过程。工作量相对大些。</li>\n</ul>\n</li>\n<li>开发方面\n<ul>\n<li>MyBatis 是一个半自动映射的框架，因为 MyBatis 需要手动匹配 POJO、SQL 和映射关系。</li>\n<li>Hibernate 是一个全表映射的框架，只需提供 POJO 和映射关系即可。</li>\n</ul>\n</li>\n<li>Hibernate 的优势\n<ul>\n<li>Hibernate 的 DAO 层开发比 MyBatis 简单，Mybatis 需要维护 SQL 和结果映射。</li>\n<li>Hibernate 对对象的维护和缓存要比 MyBatis 好，对增删改查的对象的维护要方便。</li>\n<li>Hibernate 数据库移植性很好，MyBatis 的数据库移植性不好，不同的数据库需要写不同 SQL。</li>\n<li>Hibernate 有更好的二级缓存机制，可以使用第三方缓存。MyBatis 本身提供的缓存机制不佳。</li>\n</ul>\n</li>\n<li>Mybatis 的优势\n<ul>\n<li>MyBatis 可以进行更为细致的 SQL 优化，可以减少查询字段。</li>\n<li>MyBatis 容易掌握，而 Hibernate 门槛较高。</li>\n</ul>\n</li>\n</ol>\n<p>总的来说，MyBatis 是一个小巧、方便、高效、简单、直接、半自动化的持久层框架，Hibernate 是一个强大、方便、高效、复杂、间接、全自动化的持久层框架。所以对于性能要求不太苛刻的系统，比如管理系统、ERP 等推荐使用 Hibernate，而对于性能要求高、响应快、灵活的系统则推荐使用 MyBatis。</p>\n<h3 id=\"mybatis-工作原理\"><a class=\"anchor\" href=\"#mybatis-工作原理\">#</a> MyBatis 工作原理</h3>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/43ebf4f563f6b34480bc23d9b676c0611629098745.png\" alt=\"mybatis工作原理\" width=\"500px\" /></p>\n<ol>\n<li>读取 MyBatis 配置文件： <code>mybatis-config.xml</code>  为 MyBatis 的全局配置文件，配置了 MyBatis 的运行环境等信息，例如数据库连接信息。</li>\n<li>加载映射文件。映射文件即 SQL 映射文件，该文件中配置了操作数据库的 SQL 语句，需要在 MyBatis 配置文件 mybatis-config.xml 中加载。mybatis-config.xml 文件可以加载多个映射文件，每个文件对应数据库中的一张表。</li>\n<li>构造会话工厂：通过 MyBatis 的环境等配置信息构建会话工厂 SqlSessionFactory。</li>\n<li>创建会话对象：由会话工厂创建 SqlSession 对象，该对象中包含了执行 SQL 语句的所有方法。</li>\n<li>Executor 执行器：MyBatis 底层定义了一个 Executor 接口来操作数据库，它将根据 SqlSession 传递的参数动态地生成需要执行的 SQL 语句，同时负责查询缓存的维护。</li>\n<li>MappedStatement 对象：在 Executor 接口的执行方法中有一个 MappedStatement 类型的参数，该参数是对映射信息的封装，用于存储要映射的 SQL 语句的 id、参数等信息。</li>\n<li>输入参数映射：输入参数类型可以是 Map、List 等集合类型，也可以是基本数据类型和 POJO 类型。输入参数映射过程类似于 JDBC 对 preparedStatement 对象设置参数的过程。</li>\n<li>输出结果映射：输出结果类型可以是 Map、 List 等集合类型，也可以是基本数据类型和 POJO 类型。输出结果映射过程类似于 JDBC 对结果集的解析过程。</li>\n</ol>\n<h3 id=\"mybatis-核心组件\"><a class=\"anchor\" href=\"#mybatis-核心组件\">#</a> MyBatis 核心组件</h3>\n<p>MyBatis 的核心组件分为 4 个部分：</p>\n<ol>\n<li>SqlSessionFactoryBuilder（构造器）：它会根据配置或者代码来生成 SqlSessionFactory，采用的是分步构建的 Builder 模式。</li>\n<li>SqlSessionFactory（工厂接口）：依靠它来生成 SqlSession，使用的是工厂模式。</li>\n<li>SqlSession（会话）：一个既可以发送 SQL 执行返回结果，也可以获取 Mapper 的接口。在现有的技术中，一般我们会让其在业务逻辑代码中 “消失”，而使用的是 MyBatis 提供的 SQL Mapper 接口编程技术，它能提高代码的可读性和可维护性。</li>\n<li>SQL Mapper（映射器）:MyBatis 新设计存在的组件，它由一个 Java 接口和 XML 文件（或注解）构成，需要给出对应的 SQL 和映射规则。它负责发送 SQL 去执行，并返回结果。</li>\n</ol>\n<h3 id=\"sqlsessionfactory\"><a class=\"anchor\" href=\"#sqlsessionfactory\">#</a> SqlSessionFactory</h3>\n<p>MyBatis 提供构造器 SqlSessionFactoryBuilder ，采用的是 Builder 模式生产 SqlSessionFactory 。</p>\n<p>在 MyBatis 中，既可以通过读取配置的 XML 文件的形式生成 SqlSessionFactory，也可以通过 Java 代码的形式去生成 SqlSessionFactory。</p>\n<p>SqlSessionFactory 是一个接口，在 MyBatis 中它存在两个实现类：SqlSessionManager 和 DefaultSqlSessionFactory。一般而言，具体是由 DefaultSqlSessionFactory 去实现的，而 SqlSessionManager 使用在多线程的环境中，它的具体实现依靠 DefaultSqlSessionFactory 。</p>\n<p>每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为中心的，而 SqlSessionFactory 唯一的作用就是生产 MyBatis 的核心接口对象 SqlSession，所以它的责任是唯一的。</p>\n<h4 id=\"使用-xml-构建-sqlsessionfactory推荐\"><a class=\"anchor\" href=\"#使用-xml-构建-sqlsessionfactory推荐\">#</a> 使用 XML 构建 SqlSessionFactory（推荐）</h4>\n<p>配置示例（mybatis-config.xml）：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">configuration</span> <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//mybatis.org//DTD Config 3.0//EN\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token string\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAliases</span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- 别名 --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAliases</span> <span class=\"token attr-name\">alias</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.mybatis.po.User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>typeAliases</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 数据库环境 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environments</span> <span class=\"token attr-name\">default</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>development<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environment</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>development<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">&lt;!-- 使用 JDBC 的事务管理 --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transactionManager</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>JDBC<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dataSource</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>POOLED<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token comment\">&lt;!-- MySQL 数据库驱动 --></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driver<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.mysql.jdbc.Driver<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token comment\">&lt;!-- 连接数据库的 URL --></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1128<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dataSource</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environment</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environments</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 将 mapper 文件加入到配置文件中 --></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mappers</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">resource</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com/mybatis/mapper/UserMapper.xml<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mappers</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>生成 SqlSessionFactory.class</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">SqlSessionFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> resource <span class=\"token operator\">=</span> <span class=\"token string\">\"mybatis-config.xml\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">InputStream</span> is<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">InputStream</span> is <span class=\"token operator\">=</span> <span class=\"token class-name\">Resources</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"使用代码创建-sqlsessionfactory不推荐\"><a class=\"anchor\" href=\"#使用代码创建-sqlsessionfactory不推荐\">#</a> 使用代码创建 SqlSessionFactory（不推荐）</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 数据库连接池信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">PooledDataSource</span> dataSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PooledDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setDriver</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>dataSource<span class=\"token punctuation\">.</span>setPassword <span class=\"token punctuation\">(</span><span class=\"token string\">\"1128\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc:mysql://localhost:3306/mybatis\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setDefeultAutoCommit</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 采用 MyBatis 的 JDBC 事务方式</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">TransactionFactory</span> transactionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JdbcTransactionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">Environment</span> environment <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Environment</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"development\"</span><span class=\"token punctuation\">,</span> transactionFactory<span class=\"token punctuation\">,</span> dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 创建 Configuration 对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">Configuration</span> configuration <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">(</span>environment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 注册一个 MyBatis 上下文别名</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>configuration<span class=\"token punctuation\">.</span><span class=\"token function\">getTypeAliasRegistry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"role\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Role</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 加入一个映射器</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>configuration<span class=\"token punctuation\">.</span><span class=\"token function\">addMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RoleMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 使用 SqlSessionFactoryBuilder 构建 SqlSessionFactory</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token class-name\">SqlSessionFactory</span> <span class=\"token class-name\">SqlSessionFactory</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token class-name\">SqlSessionFactory</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"sqlsession\"><a class=\"anchor\" href=\"#sqlsession\">#</a> SqlSession</h3>\n<p>在 MyBatis 中， <code>SqlSession</code>  是其核心接口。在 MyBatis 中有两个实现类，DefaultSqlSession 和 SqlSessionManager。DefaultSqlSession 是单线程使用的，而 SqlSessionManager 在多线程环境下使用。SqlSession 的作用类似于一个 JDBC 中的 Connection 对象，代表着一个连接资源的启用。</p>\n<p>SqlSession 作用：</p>\n<ul>\n<li>获取 Mapper 接口。</li>\n<li>发送 SQL 给数据库。</li>\n<li>控制数据库事务。</li>\n</ul>\n<p>创建 SqlSession.class</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">SqlSession</span> sqlSession <span class=\"token operator\">=</span> <span class=\"token class-name\">SqlSessionFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>SqlSession 只是一个门面接口，它有很多方法，可以直接发送 SQL，而真正实施者是 Executor 。</p>\n</blockquote>\n<h4 id=\"sqlsession-事务控制\"><a class=\"anchor\" href=\"#sqlsession-事务控制\">#</a> SqlSession 事务控制</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义 SqlSession</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">SqlSession</span> sqlSession <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 打开 SqlSession 会话</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    sqlSession <span class=\"token operator\">=</span> <span class=\"token class-name\">SqlSessionFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// some code...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 提交事务</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 回滚事务</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 在 finally 语句中确保资源被顺利关闭</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sqlSession <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"mybatis-映射器\"><a class=\"anchor\" href=\"#mybatis-映射器\">#</a> MyBatis 映射器</h3>\n<p>映射器是 MyBatis 中最重要、最复杂的组件，它由一个接口和对应的 XML 文件（或注解）组成。它可以配置以下内容：</p>\n<ul>\n<li>描述映射规则。</li>\n<li>提供 SQL 语句，并可以配置 SQL 参数类型、返回类型、缓存刷新等信息。</li>\n<li>配置缓存。</li>\n<li>提供动态 SQL。</li>\n</ul>\n<p>映射器的主要作用就是将 SQL 查询到的结果映射为一个 POJO，或者将 POJO 的数据插入到数据库中，并定义一些关于缓存等的重要内容。</p>\n<h4 id=\"使用-xml-实现映射器\"><a class=\"anchor\" href=\"#使用-xml-实现映射器\">#</a> 使用 xml 实现映射器</h4>\n<p>用 XML 定义映射器分为两个部分：接口和 XML。</p>\n<p>编写映射接口  <code>RoleMapper.java</code> ：</p>\n<blockquote>\n<p>我们只需要编写接口类，mybatis 会利用动态代理帮我们生成了其实现类。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>mapper</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Role</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">RoleMapper</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Role</span> <span class=\"token function\">getRole</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用 xml 方式创建映射器  <code>RoleMapper.xml</code> ：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">mapper</span> <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span> <span class=\"token string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">&lt;!-- namespace 对应接口的全限定名 --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">namespace</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.mybatis.mapper.RoleMapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">&lt;!-- id 对应接口内的方法，parameterType 对应参数类型，resultType 对应返回值类型 --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getRole<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">parameterType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>long<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>role<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        SELECT id,role_name as roleName,note FROM role WHERE id = #&#123;id&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mapper</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>在  <code>mybatis-config.xml</code>  中配置映射关系：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">resource</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com/xfc/mapper/RoleMapper.xml<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><h4 id=\"使用注解实现映射器\"><a class=\"anchor\" href=\"#使用注解实现映射器\">#</a> 使用注解实现映射器</h4>\n<p>使用注解实现映射器较为简单，它只需要编写映射接口  <code>RoleMapper.java</code>  即可：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>mapper</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>annotations<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Select</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserMapper</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select id, user_name as userName, password from t_user where id= #&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Role</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但使用注解实现映射器处理较为复杂的 SQL 时，代码相对复杂，也难以使用动态 SQL，难以维护。</p>\n<h3 id=\"sqlsession和mapper接口执行sql\"><a class=\"anchor\" href=\"#sqlsession和mapper接口执行sql\">#</a> SqlSession 和 Mapper 接口执行 SQL</h3>\n<p>MyBatis 执行 SQL 的两种方式：SqlSession 和 Mapper 接口。</p>\n<h4 id=\"sqlsession-发送-sql\"><a class=\"anchor\" href=\"#sqlsession-发送-sql\">#</a> SqlSession 发送 SQL</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Role</span> role <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Role</span><span class=\"token punctuation\">)</span>sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.xfc.mapper.RoleMapper.getRole\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 当 mybatis 只有一个 id 为 “getRole”，可以简写如下，selectOne 用于查询返回一条数据</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// Role role = (Role)sqlSession.selectOne(\"getRole\", 1L);</span></pre></td></tr></table></figure><h4 id=\"mapper-接口发送-sql\"><a class=\"anchor\" href=\"#mapper-接口发送-sql\">#</a> Mapper 接口发送 SQL</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">RoleMapper</span> roleMapper <span class=\"token operator\">=</span> sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RoleMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Role</span> role <span class=\"token operator\">=</span> roleMapper<span class=\"token punctuation\">.</span><span class=\"token function\">getRole</span><span class=\"token punctuation\">(</span><span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>推荐使用 Mapper 接口发送 SQL，它可以消除 SqlSession 带来的功能性代码，提高可读性。</p>\n</blockquote>\n<h3 id=\"mybatis-核心组件的作用域及其生命周期\"><a class=\"anchor\" href=\"#mybatis-核心组件的作用域及其生命周期\">#</a> MyBatis 核心组件的作用域及其生命周期</h3>\n<ul>\n<li>\n<p>SqlSessionFactoryBuilder</p>\n<p>SqlSessionFactoryBuilder 的作用在于创建 SqlSessionFactory，创建成功后，SqlSessionFactoryBuilder 就失去了作用，所以它只能存在于创建 SqlSessionFactory 的方法中，而不要让其长期存在。因此 SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域（也就是局部方法变量）。</p>\n</li>\n<li>\n<p>SqlSessionFactory</p>\n<p>SqlSessionFactory 可以被认为是一个数据库连接池，它的作用是创建 SqlSession 接口对象。因为 MyBatis 的本质就是 Java 对数据库的操作，所以 SqlSessionFactory 的生命周期存在于整个 MyBatis 的应用之中，所以一旦创建了 SqlSessionFactory，就要长期保存它，直至不再使用 MyBatis 应用，所以可以认为 SqlSessionFactory 的生命周期就等同于 MyBatis 的应用周期。</p>\n<p>由于 SqlSessionFactory 是一个对数据库的连接池，所以它占据着数据库的连接资源。如果创建多个 SqlSessionFactory，那么就存在多个数据库连接池，这样不利于对数据库资源的控制，也会导致数据库连接资源被消耗光，出现系统宕机等情况，所以尽量避免发生这样的情况。因此在一般的应用中我们往往希望 SqlSessionFactory 作为一个单例，让它在应用中被共享。所以说 SqlSessionFactory 的最佳作用域是应用作用域。</p>\n</li>\n<li>\n<p>SqlSession</p>\n<p>SqlSession 应该存活在一个业务请求中，处理完整个请求后，应该关闭这条连接，让它归还给 SqlSessionFactory，否则数据库资源就很快被耗费精光，系统就会瘫痪，所以用 try...catch...finally... 语句来保证其正确关闭，所以 SqlSession 的最佳的作用域是请求或方法作用域。</p>\n</li>\n<li>\n<p>Mapper</p>\n<p>Mapper 是一个接口，它由 SqlSession 所创建，所以它的最大生命周期至多和 SqlSession 保持一致，尽管它很好用，但是由于 SqlSession 的关闭，它的数据库连接资源也会消失，所以它的生命周期应该小于等于 SqlSession 的生命周期。Mapper 代表的是一个请求中的业务处理，所以它应该在一个请求中，一旦处理完了相关的业务，就应该废弃它。</p>\n</li>\n</ul>\n<h3 id=\"mybatis-程序示例\"><a class=\"anchor\" href=\"#mybatis-程序示例\">#</a> MyBatis 程序示例</h3>\n<p><strong>准备</strong></p>\n<ol>\n<li>\n<p>创建数据库  <code>mybatis</code>  ，创建表  <code>user</code>  ：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token punctuation\">`</span><span class=\"token keyword\">user</span><span class=\"token punctuation\">`</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">`</span>uid<span class=\"token punctuation\">`</span> <span class=\"token keyword\">tinyint</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">`</span>uname<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">`</span>usex<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>uid<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>创建 maven 项目并配置  <code> pom.xml</code>  。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.xfc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>log4j<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>log4j<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.2.17<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api --></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.slf4j<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>slf4j-api<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.7.25<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>8.0.13<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.5.5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>配置 JDK 环境（假定已配置完成）。</p>\n</li>\n</ol>\n<p><strong>代码</strong></p>\n<p><code>MyUser.java</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>entity</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyUser</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> uid<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 主键</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> uname<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> usex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// setter and getter</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 为了方便查看结果，重写了 toString 方法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"User[uid=\"</span> <span class=\"token operator\">+</span> uid <span class=\"token operator\">+</span> <span class=\"token string\">\",uname=\"</span> <span class=\"token operator\">+</span> uname <span class=\"token operator\">+</span> <span class=\"token string\">\",usex=\"</span> <span class=\"token operator\">+</span> usex <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>UserMapper.java</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>mapper</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MyUser</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserMapper</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">MyUser</span> <span class=\"token function\">selectUserById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> uid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyUser</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">selectAllUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">addUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyUser</span> myUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">updateUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyUser</span> myUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">deleteUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> uid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>log4j.properties</code></p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Global logging configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token attr-name\">log4j.rootLogger</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">ERROR,stdout</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># MyBatis logging configuration...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token attr-name\">log4j.logger.com.mybatis</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">DEBUG</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># Console output...</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token attr-name\">log4j.appender.stdout</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">org.apache.log4j.ConsoleAppender</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token attr-name\">log4j.appender.stdout.layout</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">org.apache.log4j.PatternLayout</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token attr-name\">log4j.appender.stdout.layout.ConversionPattern</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">%5p [%t] - %m%n</span></pre></td></tr></table></figure><p><code>mybatis-config.xml</code></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">configuration</span> <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//mybatis.org//DTD Config 3.0//EN\"</span> <span class=\"token string\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>settings</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>logImpl<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>LOG4J<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>settings</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 配置 mybatis 运行环境 --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environments</span> <span class=\"token attr-name\">default</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>development<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environment</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>development<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">&lt;!-- 使用 JDBC 的事务管理 --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transactionManager</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>JDBC<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dataSource</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>POOLED<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token comment\">&lt;!-- MySQL 数据库驱动 --></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driver<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.mysql.cj.jdbc.Driver<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token comment\">&lt;!-- 连接数据库的 URL --></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbc:mysql://localhost:3306/mybatis?serverTimezone=Asia/Shanghai<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dataSource</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environment</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environments</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 将 mapper 文件加入到配置文件中 --></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mappers</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">resource</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com/xfc/mapper/UserMapper.xml<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mappers</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><code>UserMapper.xml</code></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">mapper</span> <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span> <span class=\"token string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">namespace</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.mapper.UserMapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 根据 uid 查询一个用户信息 --></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectUserById<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">parameterType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Integer<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.entity.MyUser<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        select * from user where uid = #&#123;uid&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 查询所有用户信息 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectAllUser<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.entity.MyUser<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        select * from user</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 添加一个用户，#&#123;uname&#125; 为 com.xfc.entity.MyUser 的属性值 --></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>insert</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>addUser<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">parameterType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.entity.MyUser<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        insert into user (uname, usex) values(#&#123;uname&#125;, #&#123;usex&#125;)</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>insert</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 修改一个用户 --></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>update</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>updateUser<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">parameterType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.entity.MyUser<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        update user set uname = #&#123;uname&#125;, usex = #&#123;usex&#125; where uid = #&#123;uid&#125;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>update</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 删除一个用户 --></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>delete</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>deleteUser<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">parameterType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Integer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        delete from user where uid = #&#123;uid&#125;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>delete</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mapper</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><code>MyBatisTest.java</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>test</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStream</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MyUser</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Resources</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SqlSession</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SqlSessionFactory</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SqlSessionFactoryBuilder</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBatisTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 读取配置文件 mybatis-config.xml</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token class-name\">InputStream</span> config <span class=\"token operator\">=</span> <span class=\"token class-name\">Resources</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mybatis-config.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">// 根据配置文件构建 SqlSessionFactory</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">SqlSessionFactory</span> ssf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// 通过 SqlSessionFactory 创建 SqlSession</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\">SqlSession</span> ss <span class=\"token operator\">=</span> ssf<span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">// SqlSession 执行映射文件中定义的 SQL，并返回映射结果</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>             * com.xfc.mapper.UserMapper.selectUserById 为 UserMapper.xml 中的命名空间 + select 的 id</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">// 查询一个用户</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">MyUser</span> mu <span class=\"token operator\">=</span> ss<span class=\"token punctuation\">.</span><span class=\"token function\">selectOne</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.xfc.mapper.UserMapper.selectUserById\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>mu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">// 添加一个用户</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token class-name\">MyUser</span> addmu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            addmu<span class=\"token punctuation\">.</span><span class=\"token function\">setUname</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"陈恒\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            addmu<span class=\"token punctuation\">.</span><span class=\"token function\">setUsex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"男\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            ss<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.xfc.mapper.UserMapper.addUser\"</span><span class=\"token punctuation\">,</span> addmu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token comment\">// 修改一个用户</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token class-name\">MyUser</span> updatemu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            updatemu<span class=\"token punctuation\">.</span><span class=\"token function\">setUid</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            updatemu<span class=\"token punctuation\">.</span><span class=\"token function\">setUname</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            updatemu<span class=\"token punctuation\">.</span><span class=\"token function\">setUsex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"女\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            ss<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.xfc.mapper.UserMapper.updateUser\"</span><span class=\"token punctuation\">,</span> updatemu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">// 删除一个用户</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            ss<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.xfc.mapper.UserMapper.deleteUser\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token comment\">// 查询所有用户</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyUser</span><span class=\"token punctuation\">></span></span> listMu <span class=\"token operator\">=</span> ss<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.xfc.mapper.UserMapper.selectAllUser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MyUser</span> myUser <span class=\"token operator\">:</span> listMu<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>myUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token comment\">// 提交事务</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            ss<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token comment\">// 关闭 SqlSession</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            ss<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token comment\">// TODO Auto-generated catch block</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"配置文件详解\"><a class=\"anchor\" href=\"#配置文件详解\">#</a> 配置文件详解</h3>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">configuration</span> <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//mybatis.org//DTD Config 3.0//EN\"</span> <span class=\"token string\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- 配置 --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span> <span class=\"token punctuation\">/></span></span><span class=\"token comment\">&lt;!-- 属性 --></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>settings</span> <span class=\"token punctuation\">/></span></span><span class=\"token comment\">&lt;!-- 设置 --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAliases</span> <span class=\"token punctuation\">/></span></span><span class=\"token comment\">&lt;!-- 类型命名 --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeHandlers</span> <span class=\"token punctuation\">/></span></span><span class=\"token comment\">&lt;!-- 类型处理器 --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>objectFactory</span> <span class=\"token punctuation\">/></span></span><span class=\"token comment\">&lt;!-- 对象工厂 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span> <span class=\"token punctuation\">/></span></span><span class=\"token comment\">&lt;!-- 插件 --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environments</span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- 配置环境 --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environment</span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- 环境变量 --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transactionManager</span> <span class=\"token punctuation\">/></span></span><span class=\"token comment\">&lt;!-- 事务管理器 --></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dataSource</span> <span class=\"token punctuation\">/></span></span><span class=\"token comment\">&lt;!-- 数据源 --></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environment</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environments</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>databaseIdProvider</span> <span class=\"token punctuation\">/></span></span><span class=\"token comment\">&lt;!-- 数据库厂商标识 --></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mappers</span> <span class=\"token punctuation\">/></span></span><span class=\"token comment\">&lt;!-- 映射器 --></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>注：MyBatis 配置项的顺序不能颠倒，如果颠倒了它们的顺序，那么在 MyBatis 启动阶段就会发生异常，导致程序无法运行。</p>\n</blockquote>\n<h3 id=\"mybatis-核心配置文件-properties\"><a class=\"anchor\" href=\"#mybatis-核心配置文件-properties\">#</a> MyBatis 核心配置文件 properties</h3>\n<p>properties 属性可以给系统配置一些运行参数，可以放在 XML 文件或者 properties 文件中，而不是放在 Java 编码中，这样的好处在于方便参数修改，而不会引起代码的重新编译。一般而言，MyBatis 提供了 3 种方式让我们使用 properties，它们是：</p>\n<ul>\n<li>property 子元素。</li>\n<li>properties 文件。</li>\n<li>程序代码传递。</li>\n</ul>\n<h4 id=\"property-子元素\"><a class=\"anchor\" href=\"#property-子元素\">#</a> property 子元素</h4>\n<p>如上一示例中，可以在  <code>mybatis-cofig.xml</code>  中，使用  <code>&lt;properties&gt;</code>  下的  <code>&lt;property&gt;</code>  标签定义数据库等参数。</p>\n<h4 id=\"properties-文件\"><a class=\"anchor\" href=\"#properties-文件\">#</a> properties 文件</h4>\n<p>也可以通过  <code>[jdbc].properties</code>  文件进行配置。</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token attr-name\">database.driver</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.mysql.jdbc.Driver</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token attr-name\">database.url</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">jdbc:mysql://localhost:3306/mybatis</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token attr-name\">database.username</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">root</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token attr-name\">database.password</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">password</span></pre></td></tr></table></figure><p>然后在  <code>mybatis-config.xml</code>  中引用该配置即可。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span> <span class=\"token attr-name\">resource</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbc.properties<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><p>此外，也可以按  <code>$&#123;database.username&#125;</code>  的方法引入 properties 文件的属性参数到 MyBatis 配置文件中。</p>\n<h4 id=\"使用程序传递方式传递参数\"><a class=\"anchor\" href=\"#使用程序传递方式传递参数\">#</a> 使用程序传递方式传递参数</h4>\n<p>在某些业务场景下，数据库密码需要进行加密，对于这种场景，可以选择使用程序传递方式传递参数。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> resource <span class=\"token operator\">=</span> <span class=\"token string\">\"mybatis-config.xml\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">InputStream</span> inputStream<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Inputstream</span> in <span class=\"token operator\">=</span> <span class=\"token class-name\">Resources</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Properties</span> props <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>props<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"database.username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"database.password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 解密用户和密码，并在属性中重置（假定 CodeUtils 为解密工具类）</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"database.username\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CodeUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>props<span class=\"token punctuation\">.</span>put <span class=\"token punctuation\">(</span><span class=\"token string\">\"database.password\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CodeUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>inputstream <span class=\"token operator\">=</span> <span class=\"token class-name\">Resources</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 使用程序传递的方式覆盖原有的 properties 属性参数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">SqlSessionFactory</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>inputstream<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"settings-属性配置\"><a class=\"anchor\" href=\"#settings-属性配置\">#</a> settings 属性配置</h3>\n<p>settings 配置项较多，可以在使用时再查阅文档。以下是一个全量配置样例：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>settings</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cacheEnabled<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lazyLoadingEnabled<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>multipleResultSetsEnabled<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>useColumnLabel<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>useGeneratedKeys<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>autoMappingBehavior<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>PARTIAL<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>autoMappingUnknownColumnBehavior<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>WARNING<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>defaultExecutorType<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SIMPLE<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>defaultStatementTimeout<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>25<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>defaultFetchSize<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>safeRowBoundsEnabled<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mapUnderscoreToCamelCase<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>localCacheScope<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SESSION<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbcTypeForNull<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>OTHER<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lazyLoadTriggerMethods<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>equals,clone,hashCode,toString<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>settings</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"typealiases别名配置\"><a class=\"anchor\" href=\"#typealiases别名配置\">#</a> typeAliases（别名）配置</h3>\n<p>在 MyBatis 中允许定义一个简写来代表这个类，这就是别名，别名分为系统定义别名和自定义别名。别名由类 TypeAliasRegistry（org.apache.ibatis.type.TypeAliasRegistry）去定义。</p>\n<h4 id=\"系统定义别名\"><a class=\"anchor\" href=\"#系统定义别名\">#</a> 系统定义别名</h4>\n<table>\n<thead>\n<tr>\n<th>别名</th>\n<th>Java 类型</th>\n<th>是否支持数组</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>_byte</td>\n<td>byte</td>\n<td>是</td>\n</tr>\n<tr>\n<td>_long</td>\n<td>long</td>\n<td>是</td>\n</tr>\n<tr>\n<td>_short</td>\n<td>short</td>\n<td>是</td>\n</tr>\n<tr>\n<td>_int</td>\n<td>int</td>\n<td>是</td>\n</tr>\n<tr>\n<td>_integer</td>\n<td>int</td>\n<td>是</td>\n</tr>\n<tr>\n<td>_double</td>\n<td>double</td>\n<td>是</td>\n</tr>\n<tr>\n<td>_float</td>\n<td>float</td>\n<td>是</td>\n</tr>\n<tr>\n<td>_boolean</td>\n<td>boolean</td>\n<td>是</td>\n</tr>\n<tr>\n<td>string</td>\n<td>String</td>\n<td>是</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>Byte</td>\n<td>是</td>\n</tr>\n<tr>\n<td>long</td>\n<td>Long</td>\n<td>是</td>\n</tr>\n<tr>\n<td>short</td>\n<td>Short</td>\n<td>是</td>\n</tr>\n<tr>\n<td>int</td>\n<td>Integer</td>\n<td>是</td>\n</tr>\n<tr>\n<td>integer</td>\n<td>Integer</td>\n<td>是</td>\n</tr>\n<tr>\n<td>double</td>\n<td>Double</td>\n<td>是</td>\n</tr>\n<tr>\n<td>float</td>\n<td>Float</td>\n<td>是</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>Boolean</td>\n<td>是</td>\n</tr>\n<tr>\n<td>date</td>\n<td>Date</td>\n<td>是</td>\n</tr>\n<tr>\n<td>decimal</td>\n<td>BigDecimal</td>\n<td>是</td>\n</tr>\n<tr>\n<td>bigdecimal</td>\n<td>BigDecimal</td>\n<td>是</td>\n</tr>\n<tr>\n<td>object</td>\n<td>Object</td>\n<td>是</td>\n</tr>\n<tr>\n<td>map</td>\n<td>Map</td>\n<td>否</td>\n</tr>\n<tr>\n<td>hashmap</td>\n<td>HashMap</td>\n<td>否</td>\n</tr>\n<tr>\n<td>list</td>\n<td>List</td>\n<td>否</td>\n</tr>\n<tr>\n<td>arraylist</td>\n<td>ArrayList</td>\n<td>否</td>\n</tr>\n<tr>\n<td>collection</td>\n<td>Collection</td>\n<td>否</td>\n</tr>\n<tr>\n<td>iterator</td>\n<td>Iterator</td>\n<td>否</td>\n</tr>\n<tr>\n<td>ResultSet</td>\n<td>ResultSet</td>\n<td>否</td>\n</tr>\n</tbody>\n</table>\n<p><strong>通过代码来实现注册别名</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">TypeAliasRegistry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"string\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"byte\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Byte</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"long\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//...... 省略部分内容</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"byte[]\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"long[]\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//...... 省略部分内容</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"map\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hashmap\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arraylist\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"collection\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Collection</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"iterator\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Iterator</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ResultSet\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResultSet</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>一般是通过 Configuration 获取 TypeAliasRegistry 类对象，而事实上 Configuration 对象也对一些常用的配置项配置了别名，如下所示。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 事务方式别名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>typeAliasRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JDBC\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">JdbcTransactionFactory</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>typeAliasRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MANAGED\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">ManagedTransactionFactory</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 数据源类型别名</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>typeAliasRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JNDI\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">JndiDataSourceFactory</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>typeAliasRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"POOLED\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">PooledDataSourceFactory</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>typeAliasRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UNPOOLED\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">UnpooledDataSourceFactory</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 缓存策略别名</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>typeAliasRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PERPETUAL\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">PerpetualCache</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>typeAliasRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FIFO\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">FifoCache</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>typeAliasRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LRU\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">LruCache</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> typeAliasRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SOFT\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SoftCache</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> typeAliasRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WEAK\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">WeakCache</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 数据库标识别名</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>typeAliasRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_VENDOR\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">VendorDatabaseIdProvider</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 语言驱动类别名</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>typeAliasRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"XML\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">XMLLanguageDriver</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>typeAliasRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RAW\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">RawLanguageDriver</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 日志类别名</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>typeAliasRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SLF4J\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Slf4jImpl</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>typeAliasRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"COMMONS_LOGGTNG\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">JakartmCommonsLogginglmpl</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>typeAliasRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LOG4J\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Log4jImpl</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>typeAliasRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LOG4J2\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Log4j2Impl</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>typeAliasRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JDK_LOGGING\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Jdk14LoggingImpl</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>typeAliasRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"STDOUT_LOGGING\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StdOutImpl</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>typeAliasRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NO_LOGGING\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">NoLoggingImpl</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 动态代理别名</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>typeAliasRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CGLIB\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">CglibProxyFactory</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>typeAliasRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">registerAlias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JAVASSIST\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">JavassistProxyFactory</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"自定义别名\"><a class=\"anchor\" href=\"#自定义别名\">#</a> 自定义别名</h4>\n<p>我们可以通过 TypeAliasRegistry 类的 registerAlias 方法注册，也可以采用配置文件或者扫描方式来自定义别名。</p>\n<p>使用配置文件定义别名：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAliases</span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- 别名 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAlias</span> <span class=\"token attr-name\">alias</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>role<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.mybatis.po.Role<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAlias</span> <span class=\"token attr-name\">alias</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.mybatis.po.User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>typeAliases</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>扫描方式配置别名：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAliases</span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- 别名 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">&lt;!--  MyBatis 将扫描这个包里面的类，将其第一个字母变为小写作为其别名 --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>package</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.entity<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>typeAliases</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>注解方式配置别名：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>entity</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Alias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//...... 省略部分内容</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"typehandler-类型转换器\"><a class=\"anchor\" href=\"#typehandler-类型转换器\">#</a> TypeHandler 类型转换器</h3>\n<p>在 typeHandler 中，分为 jdbcType 和 javaType，其中 jdbcType 用于定义数据库类型，而 javaType 用于定义 Java 类型，那么 typeHandler 的作用就是承担 jdbcType 和 javaType 之间的相互转换。</p>\n<p>在很多情况下我们并不需要去配置 typeHandler、jdbcType、javaType，因为 MyBatis 会探测应该使用什么类型的 typeHandler 进行处理，而对于那些需要使用自定义枚举的场景，或者数据库使用特殊数据类型的场景，可以使用自定义的 typeHandler 去处理类型之间的转换问题。</p>\n<p>在 MyBatis 中存在系统定义 typeHandler 和自定义 typeHandler。MyBatis 会根据 javaType 和数据库的 jdbcType 来决定采用哪个 typeHandler 处理这些转换规则。</p>\n<h4 id=\"系统定义的-typehandler\"><a class=\"anchor\" href=\"#系统定义的-typehandler\">#</a> 系统定义的 TypeHandler</h4>\n<p>MyBatis 内部定义了许多有用的 typeHandler ，但在大部分的情况下无须显式地声明 jdbcType 和 javaType，或者用 typeHandler 去指定对应的 typeHandler 来实现数据类型转换，因为 MyBatis 系统会自己探测。</p>\n<p>要实现 typeHandler 就需要去实现接口 typeHandler，或者继承 BaseTypeHandler 。</p>\n<h4 id=\"自定义-typehandler\"><a class=\"anchor\" href=\"#自定义-typehandler\">#</a> 自定义 TypeHandler</h4>\n<p><strong>配置 TypeHandler</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>test</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CallableStatement</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PreparedStatement</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResultSet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JdbcType</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TypeHandler</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>log4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Logger</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTypeHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TypeHandler</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyTypeHandler</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setParameter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PreparedStatement</span> ps<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> parameter<span class=\"token punctuation\">,</span> <span class=\"token class-name\">JdbcType</span> jdbcType<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"设置 string 参数【\"</span> <span class=\"token operator\">+</span> parameter <span class=\"token operator\">+</span> <span class=\"token string\">\"】\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        ps<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultSet</span> rs<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> columnName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span>columnName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取 string 参数 1 【\"</span> <span class=\"token operator\">+</span> result <span class=\"token operator\">+</span> <span class=\"token string\">\"】\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultSet</span> rs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> columnIndex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span>columnIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取string 参数 2【\"</span> <span class=\"token operator\">+</span> result <span class=\"token operator\">+</span> <span class=\"token string\">\"】\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CallableStatement</span> cs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> columnIndex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> cs<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span>columnIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取 string 参数 3 【\"</span> <span class=\"token operator\">+</span> result <span class=\"token operator\">+</span> <span class=\"token string\">\"】\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>启用 TypeHandler</strong></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeHandlers</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeHandler</span> <span class=\"token attr-name\">jdbcType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>VARCHAR<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">javaType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>string<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">handler</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.test.MyTypeHandler<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>typeHandlers</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>配置完成后系统才会读取自定义的 TypeHandler ，当 jdbcType 和 javaType 能与自定义 TypeHandler 对应时，它就会启动该 TypeHandler。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>findRoles2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">parameterType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>string<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultMap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>roleMapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    select id, role_name, note from t_role where note like concat ('%', #&#123;note, typeHandler=com.mybatis.test.MyTypeHandler&#125;,'%')</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>要么指定了与自定义 typeHandler 一致的 jdbcType 和 javaType，要么直接使用 typeHandler 指定具体的实现类。</p>\n</blockquote>\n<p>TypeHandler 也可以采用包扫描的形式：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeHandlertype</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>package</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.handler<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>typeHandlertype</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>但采用包扫描的形式时，需要在对应的 TypeHandler 中指定 jdbcType 与 javaType 的对应关系。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@MappedTypes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@MappedjdbcTypes</span><span class=\"token punctuation\">(</span>jdbcType<span class=\"token punctuation\">.</span>VARCHAR<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTypeHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TypeHandler</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//...... 省略部分内容</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"枚举-typehandler\"><a class=\"anchor\" href=\"#枚举-typehandler\">#</a> 枚举 TypeHandler</h4>\n<p>在绝大多数情况下，typeHandler 因为枚举而使用，MyBatis 已经定义了两个类作为枚举类型的支持，这两个类分别是：</p>\n<ul>\n<li>EnumOrdinalTypeHandler。</li>\n<li>EnumTypeHandler。</li>\n</ul>\n<h4 id=\"blobtypehandler-读取-blob-字段\"><a class=\"anchor\" href=\"#blobtypehandler-读取-blob-字段\">#</a> BlobTypeHandler 读取 Blob 字段</h4>\n<h3 id=\"objectfactory对象工厂\"><a class=\"anchor\" href=\"#objectfactory对象工厂\">#</a> ObjectFactory（对象工厂）</h3>\n<p>当创建结果集时，MyBatis 会使用一个对象工厂来完成创建这个结果集实例。在默认的情况下，MyBatis 会使用其定义的对象工厂 ——DefaultObjectFactory（org.apache.ibatis.reflection.factory.DefaultObjectFactory）来完成对应的工作。</p>\n<p>MyBatis 允许注册自定义的 ObjectFactory。如果自定义，则需要实现接口 org.apache.ibatis.reflection.factory.ObjectFactory，并给予配置。</p>\n<p><strong>自定义对象工厂</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>test</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Properties</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>reflection<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DefaultObjectFactory</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>log4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Logger</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyObjectFactory</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">DefaultObjectFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">4293520460481008255L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">Logger</span> log <span class=\"token operator\">=</span> <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyObjectFactory</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setProperties</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Properties</span> properties<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProperties</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始化参数：【\"</span> <span class=\"token operator\">+</span> properties<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"】\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 方法 2</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">T</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"创建对象：\"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"是否和上次创建的是同一个对象：【\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">==</span> result<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"】\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 方法 1</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> type<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> constructorArgTypes<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> constructorArgs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">T</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> constructorArgTypes<span class=\"token punctuation\">,</span> constructorArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"创建对象：\"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        temp <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isCollection</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">isCollection</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>objectFactory</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.factory.MyObjectFactory<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>prop1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>value1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>objectFactory</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>测试：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>test</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStream</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Resources</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SqlSession</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SqlSessionFactory</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SqlSessionFactoryBuilder</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>log4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Logger</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserMapper</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBatisTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Logger</span> log <span class=\"token operator\">=</span> <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyBatisTest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">InputStream</span> config <span class=\"token operator\">=</span> <span class=\"token class-name\">Resources</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mybatis-config.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">SqlSessionFactory</span> ssf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">SqlSession</span> ss <span class=\"token operator\">=</span> ssf<span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">UserMapper</span> userMapper <span class=\"token operator\">=</span> ss<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getUserName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2MuYmlhbmNoZW5nLm5ldC9teWJhdGlz\">http://c.biancheng.net/mybatis</span></li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "JAVA学习路线",
                "进阶篇",
                "java",
                "mybatis"
            ]
        },
        {
            "id": "https://www.chinmoku.cc/computer-science/java-learning-path/2-intermediate/spring-tutorial/",
            "url": "https://www.chinmoku.cc/computer-science/java-learning-path/2-intermediate/spring-tutorial/",
            "title": "Spring 教程",
            "date_published": "2021-08-17T01:19:24.000Z",
            "content_html": "<div class=\"note info\">\n<p>Spring 框架是 Java 开发必备的基础框架，也是每个 Java 开发者必须掌握的，同时，也是面试较为聚集的知识区域。要在 Java 领域更加深入，也必须拥有 Spring 基础，毕竟开发 Springboot、Springcloud 也都是基于 Spring 进行实现的。</p>\n</div>\n<h3 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h3>\n<p>Spring 最认同的技术是控制反转的 ** 依赖注入（DI）** 模式。控制反转（IoC）是一个通用的概念，它可以用许多不同的方式去表达，依赖注入仅仅是控制反转的一个具体的例子。依赖注入可以以向构造函数传递参数的方式发生，或者通过使用 setter 方法 post-construction。</p>\n<p>Spring 框架的一个关键组件是<ins>面向切面的程序设计（AOP）框架</ins>。一个程序中跨越多个点的功能被称为  <code>横切关注点</code> ，这些横切关注点在概念上独立于应用程序的业务逻辑。在 OOP 中模块化的关键单元是类，而在 AOP 中模块化的关键单元是切面。AOP 帮助你将横切关注点从它们所影响的对象中分离出来，然而依赖注入帮助你将你的应用程序对象从彼此中分离出来。Spring 框架的 AOP 模块提供了面向切面的程序设计实现，可以定义诸如方法拦截器和切入点等，从而使实现功能的代码彻底的解耦出来。</p>\n<h3 id=\"体系结构\"><a class=\"anchor\" href=\"#体系结构\">#</a> 体系结构</h3>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/5f7fb3df63f58ad789d0e7a8ef1574e31629890494.png\" alt=\"Spring框架结构\" /></p>\n<h4 id=\"核心容器\"><a class=\"anchor\" href=\"#核心容器\">#</a> 核心容器</h4>\n<p>核心容器由  <code>spring-core</code>  ， <code>spring-beans</code>  ，  <code>spring-context</code>  ，  <code>spring-context-support</code>  和  <code>spring-expression</code>  （SpEL，Spring 表达式语言，Spring Expression Language）等模块组成。</p>\n<ul>\n<li><span class=\"pink\">spring-core</span> 模块提供了框架的基本组成部分，包括 IoC 和依赖注入功能。</li>\n<li><span class=\"pink\">spring-beans</span> 模块提供 BeanFactory，工厂模式的微妙实现，它移除了编码式单例的需要，并且可以把配置和依赖从实际编码逻辑中解耦。</li>\n<li><span class=\"pink\">spring-context</span> 模块建立在由 core 和 beans 模块的基础上建立起来的，它以一种类似于 JNDI 注册的方式访问对象。Context 模块继承自 Bean 模块，并且添加了国际化（比如，使用资源束）、事件传播、资源加载和透明地创建上下文（比如，通过 Servelet 容器）等功能。Context 模块也支持 Java EE 的功能，比如 EJB、JMX 和远程调用等。 <strong>ApplicationContext</strong> 接口是 Context 模块的焦点。 <strong>spring-context-support</strong> 提供了对第三方库集成到 Spring 上下文的支持，比如缓存（EhCache, Guava, JCache）、邮件（JavaMail）、调度（CommonJ, Quartz）、模板引擎（FreeMarker, JasperReports, Velocity）等。</li>\n<li><span class=\"pink\">spring-expression</span> 模块提供了强大的表达式语言，用于在运行时查询和操作对象图，它支持 set 和 get 属性值、属性赋值、方法调用、访问数组集合及索引的内容、逻辑算术运算、命名变量、通过名字从 Spring IoC 容器检索对象，还支持列表的投影、选择以及聚合等。</li>\n</ul>\n<h4 id=\"数据访问集成\"><a class=\"anchor\" href=\"#数据访问集成\">#</a> 数据访问 / 集成</h4>\n<p>数据访问 / 集成层包括 JDBC，ORM，OXM，JMS 和事务处理模块。</p>\n<ul>\n<li><span class=\"pink\">JDBC</span> 模块提供了 JDBC 抽象层，它消除了冗长的 JDBC 编码和对数据库供应商特定错误代码的解析。</li>\n<li><span class=\"pink\">ORM</span> 模块提供了对流行的对象关系映射 API 的集成，包括 JPA、JDO 和 Hibernate 等。通过此模块可以让这些 ORM 框架和 spring 的其它功能整合，比如前面提及的事务管理。</li>\n<li><span class=\"pink\">OXM</span> （Object XML Mapping）模块提供了对 OXM 实现的支持，比如 JAXB、Castor、XML Beans、JiBX、XStream 等。</li>\n<li><span class=\"pink\">JMS</span> （Java Message Service）模块包含生产（produce）和消费（consume）消息的功能。从 Spring 4.1 开始，集成了 spring-messaging 模块。</li>\n<li><span class=\"pink\">事务模块</span>为实现特殊接口类及所有的 POJO 支持编程式和声明式事务管理。</li>\n</ul>\n<h4 id=\"web\"><a class=\"anchor\" href=\"#web\">#</a> Web</h4>\n<p>Web 层由 Web，Web-MVC，Web-Socket 和 Web-Portlet 组成。</p>\n<ul>\n<li><span class=\"pink\">Web 模块</span>提供面向 web 的基本功能和面向 web 的应用上下文，比如多部分（multipart）文件上传功能、使用 Servlet 监听器初始化 IoC 容器等。它还包括 HTTP 客户端以及 Spring 远程调用中与 web 相关的部分。</li>\n<li><span class=\"pink\">Web-MVC 模块</span>为 web 应用提供了模型视图控制（MVC）和 REST Web 服务的实现。Spring 的 MVC 框架可以使领域模型代码和 web 表单完全地分离，且可以与 Spring 框架的其它所有功能进行集成。</li>\n<li><span class=\"pink\">Web-Socket 模块</span>为 WebSocket-based 提供了支持，而且在 web 应用程序中提供了客户端和服务器端之间通信的两种方式。</li>\n<li><span class=\"pink\">Web-Portlet 模块</span>提供了用于 Portlet 环境的 MVC 实现，并反映了 spring-webmvc 模块的功能。</li>\n</ul>\n<h4 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h4>\n<ul>\n<li><span class=\"pink\">AOP 模块</span>提供了面向切面的编程实现，允许你定义方法拦截器和切入点对代码进行干净地解耦，从而使实现功能的代码彻底的解耦出来。使用源码级的元数据，可以用类似于.Net 属性的方式合并行为信息到代码中。</li>\n<li><span class=\"pink\">Aspects 模块</span>提供了与 AspectJ 的集成，是一个功能强大且成熟的面向切面编程（AOP）框架。</li>\n<li><span class=\"pink\">Instrumentation 模块</span>在一定的应用服务器中提供了类 instrumentation 的支持和类加载器的实现。</li>\n<li><span class=\"pink\">Messaging 模块</span>为 STOMP 提供了支持作为在应用程序中 WebSocket 子协议的使用。</li>\n<li><span class=\"pink\">测试模块</span>支持对具有 JUnit 或 TestNG 框架的 Spring 组件的测试。</li>\n</ul>\n<h3 id=\"hello-world\"><a class=\"anchor\" href=\"#hello-world\">#</a> Hello World</h3>\n<blockquote>\n<p>配置环境说明：</p>\n<p>本文相关示例环境为：JDK1.8，Tomcat，IDEA。后续示例均假定该环境已成功配置。</p>\n</blockquote>\n<ol>\n<li>\n<p>创建项目</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/09/3342c6b4f077d45d359d172c2b9d4d2c1631602499.png\" alt=\"创建maven项目\" /></p>\n<p>下一步，输入项目名  <code>spring-demo</code>  并完成。</p>\n</li>\n<li>\n<p>添加 Spring 依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-context<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.3.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>在 src 目录下创建包  <code>com.xfc</code>  及文件  <code>HelloWorld.java</code>  、  <code>MainApp.java</code>  。</p>\n<p><strong>HelloWorld.java</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your Message : \"</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>MainApp.java</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainApp</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 加载引用上下文环境</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Beans.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 获取 bean 实例</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">HelloWorld</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">)</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        obj<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>创建  <code>Beans.xml</code>  文件。</p>\n<p>在 main 目录下创建 resources 包，并新建 Beans.xml 文件。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 注册 bean 并设置属性值 --></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>helloWorld<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.HelloWorld<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>message<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Hello World!<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>测试</p>\n<p>运行  <code>MainApp.java</code>  &gt;  <code>main</code>  方法，得到如下结果：</p>\n<blockquote>\n<p>Your Message : Hello World!</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"ioc-容器控制反转\"><a class=\"anchor\" href=\"#ioc-容器控制反转\">#</a> IoC 容器（控制反转）</h3>\n<p>Spring 容器是 Spring 框架的核心。容器将创建对象，把它们连接在一起，配置它们，并管理他们的整个生命周期从创建到销毁。Spring 容器使用依赖注入（DI）来管理组成一个应用程序的组件。这些对象被称为 Spring Beans，Spring IoC 容器利用 Java 的 POJO 类和配置元数据来生成完全配置和可执行的系统或应用程序。</p>\n<p>IoC 容器具有依赖注入功能的容器，它可以创建对象，IoC 容器负责实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。</p>\n<p>Spring 提供了  <code>BeanFactory</code>  和  <code>ApplicationContext </code>  这两种不同类型的容器。</p>\n<p>ApplicationContext 容器包括 BeanFactory 容器的所有功能，所以通常建议超过 BeanFactory。BeanFactory 仍然可以用于轻量级的应用程序，如移动设备或基于 applet 的应用程序，其中它的数据量和速度是显著。</p>\n<h4 id=\"beanfactory-容器\"><a class=\"anchor\" href=\"#beanfactory-容器\">#</a> BeanFactory 容器</h4>\n<p>BeanFactory 容器主要的功能是为依赖注入（DI）提供支持。在 Spring 中，有大量对 BeanFactory 接口的实现。其中，最常被使用的是 <strong>XmlBeanFactory</strong> 类。这个容器从一个 XML 文件中读取配置元数据，由这些元数据来生成一个被配置化的系统或者应用。</p>\n<p>修改  <code>Hello World 示例</code>  中的  <code>MainApp</code>  类。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>xml<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">XmlBeanFactory</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassPathResource</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainApp</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">XmlBeanFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XmlBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Beans.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">HelloWorld</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">)</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        obj<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里使用了框架提供的 XmlBeanFactory () API 生成工厂 bean 以及利用 ClassPathResource () API 去加载在路径 CLASSPATH 下可用的 bean 配置文件。</p>\n<p><strong>测试</strong></p>\n<p>运行  <code>MainApp.java</code>  &gt;  <code>main</code>  方法，得到如下结果：</p>\n<blockquote>\n<p>Your Message : Hello World!</p>\n</blockquote>\n<h4 id=\"applicationcontext-容器\"><a class=\"anchor\" href=\"#applicationcontext-容器\">#</a> ApplicationContext 容器</h4>\n<p>ApplicationContext 是 BeanFactory 的子接口，也被成为 Spring 上下文。 和 BeanFactory 类似，它可以加载配置文件中定义的 bean，将所有的 bean 集中在一起，当有请求的时候分配 bean。 ApplicationContext 包含 BeanFactory 所有的功能，一般情况下，相对于 BeanFactory，ApplicationContext 会更加优秀。</p>\n<p>最常被使用的 ApplicationContext 接口实现：</p>\n<ul>\n<li>\n<p>FileSystemXmlApplicationContext</p>\n<p>该容器从 XML 文件中加载已被定义的 bean。在这里，你需要提供给构造器 XML 文件的完整路径。</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileSystemXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E:\\project\\spring-demo\\src\\Beans.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>ClassPathXmlApplicationContext</p>\n<p>该容器从 XML 文件中加载已被定义的 bean。在这里，你不需要提供 XML 文件的完整路径，只需正确配置 CLASSPATH 环境变量即可，因为，容器会从 CLASSPATH 中搜索 bean 配置文件。</p>\n</li>\n<li>\n<p>WebXmlApplicationContext</p>\n<p>该容器会在一个 web 应用程序的范围内加载在 XML 文件中已被定义的 bean。</p>\n</li>\n</ul>\n<h4 id=\"bean-定义\"><a class=\"anchor\" href=\"#bean-定义\">#</a> Bean 定义</h4>\n<p>被称作 bean 的对象是构成应用程序的支柱也是由 Spring IoC 容器管理的。bean 是一个被实例化，组装，并通过 Spring IoC 容器所管理的对象，这些 bean 是由用容器提供的配置元数据创建的。</p>\n<p><strong>Bean 与 Spring 容器的关系</strong></p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/09/c284c60bdeded685a40fe5ea11b0b1e61631606011.jpg\" alt=\"Bean与Spring容器\" /></p>\n<p><strong>Spring 配置元数据</strong></p>\n<p>Spring IoC 容器完全由实际编写的配置元数据的格式解耦。以下是将配置元数据注册到 Spring 容器的三种方式：</p>\n<ul>\n<li>基于 XML 的配置文件</li>\n<li>基于注解的配置</li>\n<li>基于 Java 的配置</li>\n</ul>\n<p>另外，在配置 bean 实例时，我们也可以指定延迟初始化，初始化方法和销毁方法。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- A bean definition with lazy init set on --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">lazy-init</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">&lt;!-- collaborators and configuration for this bean go here --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">&lt;!-- A bean definition with initialization method --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">init-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">&lt;!-- collaborators and configuration for this bean go here --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">&lt;!-- A bean definition with destruction method --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">destroy-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">&lt;!-- collaborators and configuration for this bean go here --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">&lt;!-- more bean definitions go here --></span></pre></td></tr></table></figure><h4 id=\"bean-作用域\"><a class=\"anchor\" href=\"#bean-作用域\">#</a> Bean 作用域</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">作用域</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">singleton</td>\n<td style=\"text-align:left\">在 spring IoC 容器仅存在一个 Bean 实例，Bean 以单例方式存在，默认值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">prototype</td>\n<td style=\"text-align:left\">每次从容器中调用 Bean 时，都返回一个新的实例，即每次调用 getBean () 时，相当于执行 newXxxBean ()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">request</td>\n<td style=\"text-align:left\">每次 HTTP 请求都会创建一个新的 Bean，该作用域仅适用于 WebApplicationContext 环境</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">session</td>\n<td style=\"text-align:left\">同一个 HTTP Session 共享一个 Bean，不同 Session 使用不同的 Bean，仅适用于 WebApplicationContext 环境</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">global-session</td>\n<td style=\"text-align:left\">一般用于 Portlet 应用环境，该运用域仅适用于 WebApplicationContext 环境</td>\n</tr>\n</tbody>\n</table>\n<p><strong>singleton 作用域</strong></p>\n<p>singleton 是默认的作用域，当一个 bean 的作用域为 Singleton，那么 Spring IoC 容器中只会存在一个共享的 bean 实例，并且所有对 bean 的请求，只要 id 与该 bean 定义相匹配，则只会返回 bean 的同一实例。</p>\n<p>Singleton 是单例类型，就是在创建起容器时就同时自动创建了一个 bean 的对象，不管你是否使用，他都存在了，每次获取到的对象都是同一个对象。</p>\n<p>配置示例：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- A bean definition with singleton scope --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scope</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>singleton<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">&lt;!-- collaborators and configuration for this bean go here --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>代码示例（略）</p>\n<h4 id=\"bean-生命周期\"><a class=\"anchor\" href=\"#bean-生命周期\">#</a> Bean 生命周期</h4>\n<p>对于 bean 的生命周期，我们可以通过  <code>init-method</code>  参数和  <code>destroy-method</code>  参数进行监听。并在对应实例中声明相应的方法。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>helloWorld<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.HelloWorld<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">init-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>init<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">destroy-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>destroy<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>message<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Hello World!<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// HelloWorld.java......</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>而对于多个 bean 实例，也可以进行统一配置：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token attr-name\">default-init-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>init<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">default-destroy-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>destroy<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token comment\">&lt;!-- collaborators and configuration for this bean go here --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"bean-后置处理器\"><a class=\"anchor\" href=\"#bean-后置处理器\">#</a> Bean 后置处理器</h4>\n<p>Bean 后置处理器允许在调用初始化方法前后对 Bean 进行额外的处理。</p>\n<p><strong>代码示例：</strong></p>\n<p>本示例需要的文件：HelloWorld.java、InitHelloWorld.java、Beans.xml、MainApp.java。</p>\n<p>修改 HelloWorld.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your Message : \"</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bean is going through init.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bean will destroy now.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>添加 InitHelloWorld.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BeansException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BeanPostProcessor</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InitHelloWorld</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BeanPostProcessor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 前置处理器</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessBeforeInitialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BeforeInitialization : \"</span> <span class=\"token operator\">+</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 后置处理器</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessAfterInitialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AfterInitialization : \"</span> <span class=\"token operator\">+</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改 Beans.xml</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 注册 bean--></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>helloWorld<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.HelloWorld<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">init-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>init<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">destroy-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>destroy<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>message<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Hello World!<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.InitHelloWorld<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>修改 MainApp.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AbstractApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainApp</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">AbstractApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Beans.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">HelloWorld</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">)</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        obj<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 关闭 hook：确保正常关闭且调用 destroy ()</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerShutdownHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>通过上述代码，我们知道了前后置处理器的调用方式。</p>\n<p>运行  <code>MainApp.java</code>  得到如下结果，我们可以观察到前后置处理器的调用时机：</p>\n<blockquote>\n<p>BeforeInitialization : helloWorld<br />\nBean is going through init.<br />\nAfterInitialization : helloWorld<br />\nYour Message : Hello World!<br />\nBean will destroy now.</p>\n</blockquote>\n<h4 id=\"bean-定义继承\"><a class=\"anchor\" href=\"#bean-定义继承\">#</a> Bean 定义继承</h4>\n<p>bean 定义可以包含很多的配置信息，包括构造函数的参数，属性值，容器的具体信息例如初始化方法，静态工厂方法名，等等。</p>\n<p>Spring Bean 定义的继承与 Java 类的继承无关，但是继承的概念是一样的。子 bean 的定义继承父定义的配置数据。子定义可以根据需要重写一些值，或者添加其他值。</p>\n<p><strong>代码示例：</strong></p>\n<p>本示例需要的文件：HelloWorld.java、HelloChina.java、Beans.xml、MainApp.java。</p>\n<p>修改 HelloWorld.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> message1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> message2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMessage1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message1 <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMessage2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message2 <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getMessage1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"World Message1 : \"</span> <span class=\"token operator\">+</span> message1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getMessage2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"World Message2 : \"</span> <span class=\"token operator\">+</span> message2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>添加 HelloChina.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloChina</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> message1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> message2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> message3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMessage1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message1 <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMessage2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message2 <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMessage3</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message3 <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getMessage1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"China Message1 : \"</span> <span class=\"token operator\">+</span> message1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getMessage2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"China Message2 : \"</span> <span class=\"token operator\">+</span> message2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getMessage3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"China Message3 : \"</span> <span class=\"token operator\">+</span> message3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改 Beans.xml</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>helloWorld<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.HelloWorld<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>message1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Hello World!<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>message2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Hello Second World!<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>helloChina<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.HelloChina<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">parent</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>helloWorld<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>message1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Hello China!<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>message3<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>你好，中国！<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>修改 MainApp.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainApp</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Beans.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">HelloWorld</span> objA <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">)</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        objA<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        objA<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">HelloChina</span> objB <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloChina</span><span class=\"token punctuation\">)</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloChina\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        objB<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        objB<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        objB<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行  <code>MainApp.java</code>  得到如下结果：</p>\n<blockquote>\n<p>World Message1 : Hello World!<br />\nWorld Message2 : Hello Second World!<br />\nChina Message1 : Hello China!<br />\nChina Message2 : Hello Second World!<br />\nChina Message3 : 你好，中国！</p>\n</blockquote>\n<p>我们可以观察到子 bean 继承了父 bean 中的 message2 的属性配置，而重写了 message1 和 message3 的属性配置。</p>\n<h3 id=\"依赖注入di\"><a class=\"anchor\" href=\"#依赖注入di\">#</a> 依赖注入（DI）</h3>\n<p>Spring 框架的核心功能之一就是通过依赖注入的方式来管理 Bean 之间的依赖关系。</p>\n<h4 id=\"基于构造函数的依赖注入\"><a class=\"anchor\" href=\"#基于构造函数的依赖注入\">#</a> 基于构造函数的依赖注入</h4>\n<p>当容器调用带有一组参数的类构造函数时，基于构造函数的 DI 就完成了，其中每个参数代表一个对其他类的依赖。</p>\n<p><strong>代码示例：</strong></p>\n<p>本示例需要的文件：Role.java、User.java、Beans.xml、MainApp.java。</p>\n<p>创建 Role.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Role</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getUserRole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inside getUserRole.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建 User.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Role</span> role<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Role</span> role<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inside Role constructor.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>role <span class=\"token operator\">=</span> role<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getUserRole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        role<span class=\"token punctuation\">.</span><span class=\"token function\">getUserRole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改 Beans.xml</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Definition for User bean --></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>role<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Definition for Role bean --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>role<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.Role<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>修改 MainApp.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainApp</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Beans.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">)</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">getUserRole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行  <code>MainApp.java</code>  得到如下结果：</p>\n<blockquote>\n<p>Inside User constructor.<br />\nInside getUserRole.</p>\n</blockquote>\n<p>通过上述代码及运行结果，我们观察在 Beans.xml 中，User 实例通过  <code>&lt;constructor-arg ref=&quot;role&quot;/&gt;</code>  方式注入了其依赖的 Role Bean 对象。因此，在 MainApp.java 中获取 User 实例时，即通过 User 类的构造函数获取到其依赖的 Role 实例，继而能够通过其依赖的实例执行  <code>getUserRole()</code>  方法。</p>\n<p>当构造函数存在多个参数时，为了避免歧义，构造函数的参数在 bean 定义中的顺序也应当尽量与参数位置保持一致。但如果存在多个相同数据类型、不同参数顺序的构造函数时，默认会调用匹配类型中的第一个构造函数，如果多个构造函数的数据类型相同而顺序和参数名不同，则可以在 bean 定义中指定 name 或 index 属性来指定匹配的构造函数（这里的 name 指向对应参数的 name）。</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> i<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Role</span> role<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"构造函数 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>role <span class=\"token operator\">=</span> role<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>i <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Role</span> role<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"构造函数 2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>role <span class=\"token operator\">=</span> role<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>j <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 通过构造函数 2 注入（与参数顺序无关） --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">&lt;!--&lt;constructor-arg type=\"java.lang.Integer\" value=\"77\" index=\"1\"/>--></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>java.lang.Integer<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>120<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>i<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>role<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>注：示例中的 type 属性用于显式指定构造函数的参数类型。</p>\n</blockquote>\n<h4 id=\"基于设值函数的依赖注入\"><a class=\"anchor\" href=\"#基于设值函数的依赖注入\">#</a> 基于设值函数的依赖注入</h4>\n<p>当容器调用一个无参的构造函数或一个无参的静态 factory 方法来初始化你的 bean 后，通过容器在你的 bean 上调用设值函数，基于设值函数的 DI 就完成了。</p>\n<p><strong>代码示例：</strong></p>\n<p>本示例需要的文件：Role.java、User.java、Beans.xml、MainApp.java。其中 Role.java、MainApp.java 文件与上一示例一致，此处不再重述。</p>\n<p>创建 Role.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Role</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getUserRole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inside getUserRole.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建 User.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Role</span> role<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// a setter method to inject the dependency.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRole</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Role</span> role<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inside setRole.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>role <span class=\"token operator\">=</span> role<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// a getter method to return spellChecker</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Role</span> <span class=\"token function\">getRole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> role<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getRoleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        role<span class=\"token punctuation\">.</span><span class=\"token function\">getRoleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改 Beans.xml</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Definition for User bean --></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>role<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>role<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Definition for Role bean --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>role<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.Role<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>运行  <code>MainApp.java</code>  得到如下结果：</p>\n<blockquote>\n<p>Inside setRole.<br />\nInside getRoleDescription.</p>\n</blockquote>\n<p>通过上述代码及运行结果，我们实现了通过 setRole 的方式向 User 实例中注入了其依赖的 Role 对象。</p>\n<p>构造函数与设值注入的唯一区别，在于基于构造函数注入中使用的是  <code>&lt;constructor-arg&gt;</code>  ，而在基于设值函数的注入中使用的是  <code>&lt;property&gt;</code>  。</p>\n<h4 id=\"注入内部-beans\"><a class=\"anchor\" href=\"#注入内部-beans\">#</a> 注入内部 Beans</h4>\n<p>inner beans 是在其他 bean 的范围内定义的 bean。</p>\n<p>修改  <code>基于设值函数的依赖注入</code>  演示代码中的  <code>Beans.xml</code>  文件：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Definition for User bean --></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>role<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>role<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.Role<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>同样能够实现对依赖对象的注入，这里这种方式被称为内部 bean 注入。</p>\n<h4 id=\"注入集合\"><a class=\"anchor\" href=\"#注入集合\">#</a> 注入集合</h4>\n<p>Spring 提供了四种类型的集合的配置元素：</p>\n<table>\n<thead>\n<tr>\n<th>元素</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&lt;list&gt;</td>\n<td>它有助于连线，如注入一列值，允许重复。</td>\n</tr>\n<tr>\n<td>&lt;set&gt;</td>\n<td>它有助于连线一组值，但不能重复。</td>\n</tr>\n<tr>\n<td>&lt;map&gt;</td>\n<td>它可以用来注入名称 - 值对的集合，其中名称和值可以是任何类型。</td>\n</tr>\n<tr>\n<td>&lt;props&gt;</td>\n<td>它可以用来注入名称 - 值对的集合，其中名称和值都是字符串类型。</td>\n</tr>\n</tbody>\n</table>\n<p>示例：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>addressList<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>list</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>INDIA<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>Pakistan<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>USA<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>USA<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>list</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>addressSet<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>set</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>INDIA<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>Pakistan<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>USA<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>USA<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>set</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>addressMap<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>map</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>entry</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>INDIA<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>entry</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Pakistan<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>entry</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>USA<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>entry</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>4<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>USA<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>map</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>addressProp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>props</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>prop</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>one<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>INDIA<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>prop</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>prop</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>two<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Pakistan<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>prop</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>prop</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>three<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>USA<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>prop</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>prop</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>four<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>USA<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>prop</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>props</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>如何注入 null 和空字符串：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>obj<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>null</span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"beans-自动装配\"><a class=\"anchor\" href=\"#beans-自动装配\">#</a> Beans 自动装配</h3>\n<p>Spring 容器可以在不使用  <code>&lt;constructor-arg&gt;</code>  和  <code>&lt;property&gt;</code>  元素的情况下 <strong>自动装配</strong> 相互协作的 bean 之间的关系。</p>\n<p>动装配模式可用于指示 Spring 容器为来使用自动装配进行依赖注入。你可以使用  <code>&lt;bean&gt;</code>  元素的 <strong>autowire</strong> 属性为一个 bean 定义指定自动装配模式。</p>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>no</td>\n<td>这是默认的设置，它意味着没有自动装配，你应该使用显式的 bean 引用来连线。你不用为了连线做特殊的事。在依赖注入章节你已经看到这个了。</td>\n</tr>\n<tr>\n<td>byName</td>\n<td>由属性名自动装配。Spring 容器看到在 XML 配置文件中 bean 的自动装配的属性设置为 byName。然后尝试匹配，并且将它的属性与在配置文件中被定义为相同名称的 beans 的属性进行连接。</td>\n</tr>\n<tr>\n<td>byType</td>\n<td>由属性数据类型自动装配。Spring 容器看到在 XML 配置文件中 bean 的自动装配的属性设置为 byType。然后如果它的<strong>类型</strong>匹配配置文件中的一个确切的 bean 名称，它将尝试匹配和连接属性的类型。如果存在不止一个这样的 bean，则一个致命的异常将会被抛出。</td>\n</tr>\n<tr>\n<td>constructor</td>\n<td>类似于 byType，但该类型适用于构造函数参数类型。如果在容器中没有一个构造函数参数类型的 bean，则一个致命错误将会发生。</td>\n</tr>\n<tr>\n<td>autodetect</td>\n<td>Spring 首先尝试通过 constructor 使用自动装配来连接，如果它不执行，Spring 尝试通过 byType 来自动装配。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>自动装配的局限性</strong></p>\n<ul>\n<li><strong>重写：</strong> 需用  <code>&lt;constructor-arg&gt;</code>  和  <code>&lt;property&gt;</code>  配置来定义依赖，意味着总要重写自动装配。</li>\n<li><strong>基本数据类型：</strong> 不能自动装配简单的属性，如基本数据类型，String 字符串，和类。</li>\n<li><strong>模糊特性：</strong> 自动装配不如显式装配精确，如果有可能，尽量使用显式装配。</li>\n</ul>\n<h4 id=\"自动装配-byname\"><a class=\"anchor\" href=\"#自动装配-byname\">#</a> 自动装配  <code>byName</code></h4>\n<p>Spring DI 配置中，我们可以指定  <code>autowire</code>  属性为 byName 来指定自动装配，而不需每一次都显示声明其依赖的注入对象。此选项启用基于 bean 名称的依赖项注入。在 Bean 中自动装配属性时，属性名称用于在配置文件中搜索匹配的 Bean 定义。如果找到这样的 bean，则将其注入属性。如果找不到，则会引发错误。</p>\n<p><strong>代码示例：</strong></p>\n<p>本示例需要的文件：Role.java、User.java、Beans.xml、MainApp.java，其中 Role.java、MainApp.java 文件与上一示例一致，此处不再重述。</p>\n<p>修改 User.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Role</span> role<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRole</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Role</span> role<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inside setRole.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>role <span class=\"token operator\">=</span> role<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Role</span> <span class=\"token function\">getRole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> role<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getRoleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        role<span class=\"token punctuation\">.</span><span class=\"token function\">getRoleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改  <code>Beans.xml</code></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Definition for textEditor bean --></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.User<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">autowire</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>byName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Generic User<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Definition for Role bean --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>role<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.Role<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>运行  <code>MainApp.java</code>  得到如下结果：</p>\n<blockquote>\n<p>Inside setRole.<br />\nInside getRoleDescription.</p>\n</blockquote>\n<p>通过上述代码及运行结果，我们发现添加  <code>autowire=&quot;byName&quot;</code>  后，  <code>User</code>  依赖的  <code>Role</code>  实例在未经过显示声明的情况下仍被自动注入到 Spring 容器中。此时，程序在装配  <code>User</code>  时，检测到  <code>private Role role;</code>  属性，并自动根据  <code>role</code>  名称查找配置文件，并完成自动注入。</p>\n<h4 id=\"自动装配-bytype\"><a class=\"anchor\" href=\"#自动装配-bytype\">#</a> 自动装配  <code>byType</code></h4>\n<p>Spring 容器也可以指定  <code>autowire</code>  属性为  <code>byType</code>  来指定自动装配，若指定的  <code>type</code>  与配置文件中 beans 名称中的一个匹配，则它将尝试匹配和连接它的属性。此选项支持基于 bean 类型的依赖项注入。在  <code>Bean</code>  中自动装配属性时，属性的类类型用于在配置文件中搜索匹配的  <code>bean</code>  定义。如果找到这样的  <code>bean</code>  ，就在属性中注入它。如果找不到，则会引发错误。</p>\n<p><strong>代码示例：</strong></p>\n<p>本示例需要的文件：Role.java、User.java、Beans.xml、MainApp.java，其中 Role.java、User.java、MainApp.java 文件与上一示例一致，此处不再重述。</p>\n<p>修改 Beans.xml</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Definition for textEditor bean --></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.User<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">autowire</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>byType<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Generic User<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Definition for Role bean --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>role<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.Role<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>运行  <code>MainApp.java</code>  得到如下结果：</p>\n<blockquote>\n<p>Inside setRole.<br />\nInside getRoleDescription.</p>\n</blockquote>\n<p>通过上述代码及运行结果，我们发现添加  <code>autowire=&quot;byType&quot;</code>  后，  <code>User</code>  依赖的  <code>Role</code>  实例在未经过显示声明的情况下仍被自动注入到 Spring 容器中。此时，程序在装配  <code>User</code>  时，检测到  <code>private Role role;</code>  属性，并自动根据  <code>Role</code>  类型查找配置文件，并完成自动注入。</p>\n<h4 id=\"由构造函数自动装配\"><a class=\"anchor\" href=\"#由构造函数自动装配\">#</a> 由构造函数自动装配</h4>\n<p>这种模式与 <em>byType</em> 非常相似，但它应用于构造器参数。</p>\n<p><strong>代码示例：</strong></p>\n<p>本示例需要的文件：Role.java、User.java、Beans.xml、MainApp.java，其中 Role.java、MainApp.java 文件与上一示例一致，此处不再重述。</p>\n<p>修改 User.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Role</span> role<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Role</span> role<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>role <span class=\"token operator\">=</span> role<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getRoleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Current User: \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        role<span class=\"token punctuation\">.</span><span class=\"token function\">getRoleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改 Beans.xml</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Definition for User bean --></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.User<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">autowire</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>constructor<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xfc_exclave<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Definition for Role bean --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>role<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.Role<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>运行  <code>MainApp.java</code>  得到如下结果：</p>\n<blockquote>\n<p>Current User: xfc_exclave<br />\nInside getRoleDescription.</p>\n</blockquote>\n<p>通过上述代码及运行结果，我们发现添加  <code>autowire=&quot;constructor&quot;</code>  后，  <code>User</code>  依赖的  <code>Role</code>  实例在未经过显示声明的情况下仍被自动注入到 Spring 容器中。此时，程序在装配  <code>User</code>  时，通过构造函数检测到  <code>Role role</code>  参数，并自动根据该参数完成自动注入。</p>\n<h3 id=\"基于注解的配置\"><a class=\"anchor\" href=\"#基于注解的配置\">#</a> 基于注解的配置</h3>\n<p>从 Spring 2.5 开始就可以使用 <strong>注解</strong> 来配置依赖注入，而不是采用 XML 来描述一个 bean 连线。注解连线在默认情况下在 Spring 容器中不打开。因此，在可以使用基于注解的连线之前，我们需要在 Spring 配置文件中启用。</p>\n<p>如果你想在 Spring 应用程序中使用的任何注解，可以考虑到下面的配置文件。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>context</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/context<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    http://www.springframework.org/schema/context</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    http://www.springframework.org/schema/context/spring-context-3.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>annotation-config</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">&lt;!-- bean definitions go here --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>相关注解</strong></p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>注解 &amp; 描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td><strong>@Required</strong> 应用于 bean 属性的 setter 方法。</td>\n</tr>\n<tr>\n<td>2</td>\n<td><strong>@Autowired</strong> 可应用于 bean 属性的 setter 方法，非 setter 方法，构造函数和属性。</td>\n</tr>\n<tr>\n<td>3</td>\n<td><strong>@Qualifier</strong> 通过指定确切的将被连线的 bean，@Autowired 和 @Qualifier 注解可以用来删除混乱。</td>\n</tr>\n<tr>\n<td>4</td>\n<td><strong>JSR-250</strong> 其中包括了 @Resource，@PostConstruct 和 @PreDestroy 注解。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"required\"><a class=\"anchor\" href=\"#required\">#</a> @Required</h4>\n<p><strong>@Required</strong> 注解应用于 bean 属性的 setter 方法，它表明受影响的 bean 属性在配置时必须放在 XML 配置文件中，否则容器就会抛出一个 BeanInitializationException 异常。</p>\n<p><strong>代码示例：</strong></p>\n<p>本示例需要的文件：Product.java、Beans.xml、MainApp.java。</p>\n<p>新建 Product.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Required</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Product</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Required</span><span class=\"token comment\">// 新版本显示此注解过时，暂时忽略</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@Required</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改 Beans.xml</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>context</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/context<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    http://www.springframework.org/schema/context</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    http://www.springframework.org/schema/context/spring-context-3.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>annotation-config</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Definition for product bean --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>product<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.Product<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toothbrush<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">&lt;!--&lt;property name=\"count\" value=\"4\"/>--></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>注：新版本使用 @Required 并配置上述配置文件时，代码编辑阶段即会提示错误。</p>\n</blockquote>\n<p>修改 MainApp.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainApp</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Beans.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Product</span> product <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">)</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"product\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name : \"</span> <span class=\"token operator\">+</span> product<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Count : \"</span> <span class=\"token operator\">+</span> product<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行  <code>MainApp.java</code>  ，若 @Required 注解未过时，将抛出  <code>BeanInitializationException</code>  异常并输出如下信息：</p>\n<blockquote>\n<p>Property 'count' is required for bean 'product'</p>\n</blockquote>\n<p>若 @Required 注解已过时，将得到如下结果：</p>\n<blockquote>\n<p>Name : toothbrush<br />\nCount : null</p>\n</blockquote>\n<p>通过上述代码及运行结果，我们得出结论： <code>@Required</code>  注解作用于 bean 属性的 setter 方法，且要求其对应的属性必须被注入到 bean 实例中。但对于较新版本而言，  <code>@Required</code>  被标记为过时注解且不会生效，未被注入的属性将会被填充该类型对应的默认值。</p>\n<h4 id=\"autowired\"><a class=\"anchor\" href=\"#autowired\">#</a> @Autowired</h4>\n<p><strong>@Autowired</strong> 注解对在哪里和如何完成自动连接提供了更多的细微的控制。</p>\n<ul>\n<li>\n<p>Setter 方法中的 @Autowired</p>\n<p><strong>代码示例：</strong></p>\n<p>本示例需要的文件：Role.java、User.java、Beans.xml、MainApp.java。</p>\n<p>Role.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Role</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> description<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> description<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setDescription</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> description<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>description <span class=\"token operator\">=</span> description<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getRoleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"role description: \"</span> <span class=\"token operator\">+</span> description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改 User.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Role</span> role<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Role</span> <span class=\"token function\">getRole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> role<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRole</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Role</span> role<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>role <span class=\"token operator\">=</span> role<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getRoleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        role<span class=\"token punctuation\">.</span><span class=\"token function\">getRoleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改 Beans.xml</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>context</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/context<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    http://www.springframework.org/schema/context</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    http://www.springframework.org/schema/context/spring-context-3.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>annotation-config</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Definition for user bean --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Definition for role bean --></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>role<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.Role<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>this role is for admin<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>修改 MainApp.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainApp</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Beans.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">)</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">getRoleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行  <code>MainApp.java</code>  得到如下结果：</p>\n<blockquote>\n<p>role description: this role is for admin</p>\n</blockquote>\n<p><code>User</code>  所依赖的  <code>Role</code>  对象通过  <code>setRole()</code>  方法上的  <code>@Autowired</code>  注解被自动注入到其 role 属性中。</p>\n</li>\n<li>\n<p>属性中的 @Autowired</p>\n<p>修改上一示例代码中的 User.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Role</span> role<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getRoleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        role<span class=\"token punctuation\">.</span><span class=\"token function\">getRoleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>再次运行  <code>MainApp.java</code>  仍得到相同返回结果。此时，  <code>User</code>  所依赖的  <code>Role</code>  对象通过其对应属性上的  <code>@Autowired</code>  注解实现了依赖注入。</p>\n</li>\n<li>\n<p>构造函数中的 @Autowired</p>\n<p>再一次修改 User.java 文件。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Role</span> role<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span><span class=\"token comment\">// 可以省略</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Role</span> role<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>role <span class=\"token operator\">=</span> role<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getRoleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        role<span class=\"token punctuation\">.</span><span class=\"token function\">getRoleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>仍旧得到相同结果，此时  <code>User</code>  通过构造函数上的 @Autowired 注解实现了依赖注入。</p>\n</li>\n<li>\n<p>@Autowired 的（required=false）选项</p>\n<p>默认情况下，@Autowired 注释意味着依赖是必须的，它类似于 @Required 注释，可以通过 @Autowired 的 <strong>（required=false）</strong> 选项关闭默认行为（此项不再进行代码演示）。</p>\n</li>\n</ul>\n<h4 id=\"qualifier\"><a class=\"anchor\" href=\"#qualifier\">#</a> @Qualifier</h4>\n<p>当需要向 Spring 容器中注入多个同类型 bean 时，可以通过 @Qualifier 指定实例对象与注入配置之间的连线关系。</p>\n<p><strong>代码示例：</strong></p>\n<p>本示例需要的文件：Role.java、User.java、Beans.xml、MainApp.java，其中 Role.java、MainApp.java 文件与上一示例一致，此处不再重述。</p>\n<p>修改 User.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Qualifier</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"role1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Role</span> admin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"role2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Role</span> customer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getRoleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        admin<span class=\"token punctuation\">.</span><span class=\"token function\">getRoleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        customer<span class=\"token punctuation\">.</span><span class=\"token function\">getRoleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改 Beans.xml</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>context</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/context<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    http://www.springframework.org/schema/context</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    http://www.springframework.org/schema/context/spring-context-3.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>annotation-config</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>role1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.Role<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>this role is for admin<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>role2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.Role<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>this role is for customer<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>运行  <code>MainApp.java</code>  得到如下结果：</p>\n<blockquote>\n<p>role description: this role is for admin<br />\nrole description: this role is for customer</p>\n</blockquote>\n<h4 id=\"jsr-250-注释\"><a class=\"anchor\" href=\"#jsr-250-注释\">#</a> JSR-250 注释</h4>\n<p>Spring 还使用基于 JSR-250 注释，它包括 @PostConstruct， @PreDestroy 和 @Resource 注释。</p>\n<p><strong>@PostConstruct</strong> 和 <strong>@PreDestroy</strong> 注解分别对应配置文件中的  <code>init-method</code>  和  <code>destroy-method</code>  参数。</p>\n<p>修改上一示例代码中的 User.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Qualifier</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PostConstruct</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PreDestroy</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"role1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Role</span> admin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"role2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Role</span> customer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getRoleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        admin<span class=\"token punctuation\">.</span><span class=\"token function\">getRoleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        customer<span class=\"token punctuation\">.</span><span class=\"token function\">getRoleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@PostConstruct</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------------- Bean init ----------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@PreDestroy</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------- Bean destroy --------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改 MainApp.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AbstractApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainApp</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">AbstractApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Beans.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">)</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">getRoleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        context<span class=\"token punctuation\">.</span><span class=\"token function\">registerShutdownHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行  <code>MainApp.java</code>  得到如下结果：</p>\n<blockquote>\n<p>--------------- Bean init ----------------<br />\nrole description: this role is for admin<br />\nrole description: this role is for customer<br />\n-------------- Bean destroy --------------</p>\n</blockquote>\n<p><strong>@Resource</strong> 注解指定 name 属性，改属性会以一个 bean 名称的形式被注入，它遵循  <code>by-name</code>  自动连接语义。该注解作用于对象的属性或 setter 方法。</p>\n<p>再次修改 User.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Resource</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"role1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Role</span> role<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getRoleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        role<span class=\"token punctuation\">.</span><span class=\"token function\">getRoleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>或者修改为：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Resource</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Role</span> role<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"role1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRole</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Role</span> role<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>role <span class=\"token operator\">=</span> role<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getRoleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        role<span class=\"token punctuation\">.</span><span class=\"token function\">getRoleDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行  <code>MainApp.java</code>  得到如下结果：</p>\n<blockquote>\n<p>role description: this role is for admin</p>\n</blockquote>\n<h4 id=\"基于-java-的配置\"><a class=\"anchor\" href=\"#基于-java-的配置\">#</a> 基于 Java 的配置</h4>\n<p>此前已经完成了基于  <code>xml</code>  的方式配置 Spring bean 。但 Spring 也提供了基于 java 配置 Spring bean 的方法。</p>\n<p><strong>@Configuration 和 @Bean 注解</strong></p>\n<p>带有 <strong>@Configuration</strong> 的注解类表示这个类可以使用 Spring IoC 容器作为 bean 定义的来源。<strong>@Bean</strong> 注解告诉 Spring，一个带有 @Bean 的注解方法将返回一个对象，该对象应该被注册为在 Spring 应用程序上下文中的 bean。</p>\n<p><strong>代码示例：</strong></p>\n<p>本示例需要的文件：Product.java、BeanConfig.java、Beans.xml、MainApp.java，其中 Beans.xml 文件与上一示例一致，此处不再重述。</p>\n<p>修改 Product.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Product</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Product</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建 BeanConfig.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BeanConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Product</span> <span class=\"token function\">product</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Product</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"washing machine\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改 MainApp.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainApp</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Product</span> product <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">)</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"product\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"product: \"</span> <span class=\"token operator\">+</span> product<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count: \"</span> <span class=\"token operator\">+</span> product<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行  <code>MainApp.java</code>  ，得到如下结果：</p>\n<blockquote>\n<p>product: washing machine<br />\ncount: 3</p>\n</blockquote>\n<p>对于使用  <code>@Configuration</code>  中注入多个实例，只需配置多个  <code>@Bean</code>  即可。</p>\n<p><strong>@Import 注解</strong></p>\n<p><strong>@import</strong> 注解允许从另一个配置类中加载 @Bean 定义。</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConfigA</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigA</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 从 ConfigA 中加载 Bean</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConfigB</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>生命周期回调</strong></p>\n<p>与 Spring 在 xml 中指定初始化和销毁方法一样，@Bean 注解也支持指定任意的初始化和销毁的回调方法，其语法如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>initMethod <span class=\"token operator\">=</span> <span class=\"token string\">\"init\"</span><span class=\"token punctuation\">,</span> destroyMethod <span class=\"token operator\">=</span> <span class=\"token string\">\"destroy\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>指定 Bean 的范围：</p>\n<p>@Bean 默认范围是单实例，但我们可以重写带有 @Scope 注解的该方法。示例如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prototype\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token class-name\">Foo</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"事件处理\"><a class=\"anchor\" href=\"#事件处理\">#</a> 事件处理</h4>\n<p>Spring 的核心是 <strong>ApplicationContext</strong>，它负责管理 beans 的完整生命周期。</p>\n<p>通过 ApplicationEvent 类和 ApplicationListener 接口来提供在 ApplicationContext 中处理事件。如果一个 bean 实现 ApplicationListener，那么每次 ApplicationEvent 被发布到 ApplicationContext 上，那个 bean 会被通知。</p>\n<p>Spring 提供了以下的标准事件：</p>\n<table>\n<thead>\n<tr>\n<th>Spring 内置事件</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ContextRefreshedEvent</td>\n<td>ApplicationContext 被初始化或刷新时，该事件被触发。这也可以在 ConfigurableApplicationContext 接口中使用 refresh () 方法来触发。</td>\n</tr>\n<tr>\n<td>ContextStartedEvent</td>\n<td>当使用 ConfigurableApplicationContext 接口中的 start () 方法启动 ApplicationContext 时，该事件被触发。</td>\n</tr>\n<tr>\n<td>ContextStoppedEvent</td>\n<td>当使用 ConfigurableApplicationContext 接口中的 stop () 方法停止 ApplicationContext 时，该事件被触发。</td>\n</tr>\n<tr>\n<td>ContextClosedEvent</td>\n<td>当使用 ConfigurableApplicationContext 接口中的 close () 方法关闭 ApplicationContext 时，该事件被触发。一个已关闭的上下文到达生命周期末端；它不能被刷新或重启。</td>\n</tr>\n<tr>\n<td>RequestHandledEvent</td>\n<td>是一个 web-specific 事件，告诉所有 bean HTTP 请求已经被服务。</td>\n</tr>\n</tbody>\n</table>\n<p>在设计应用程序时应当注意，由于 Spring 的事件处理是单线程的，一个事件被发布，直到所有的接收者都处理完这个消息之前，该进程会被阻塞，流程不会继续。</p>\n<p><strong>监听上下文事件</strong></p>\n<p>为了监听上下文事件，一个 bean 应该实现 ApplicationListener 接口的 <strong>onApplicationEvent()</strong> 方法。</p>\n<p><strong>代码示例：</strong></p>\n<p>本示例需要的文件：Product.java、StartEventHandler.java、StopEventHandler.java、BeanConfig.java、MainApp.java。</p>\n<p>修改 Product.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Product</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Product</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>新建 StartEventHandler.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationListener</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ContextStartedEvent</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StartEventHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ContextStartedEvent</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onApplicationEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ContextStartedEvent</span> contextStartedEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ContextStartedEvent Received\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>新建 StopEventHandler.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationListener</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ContextStoppedEvent</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StopEventHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ContextStoppedEvent</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onApplicationEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ContextStoppedEvent</span> contextStoppedEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ContextStoppedEvent Received\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改 BeanConfig.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BeanConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Product</span> <span class=\"token function\">product</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Product</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"washing machine\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">StartEventHandler</span> <span class=\"token function\">startEventHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StartEventHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">StopEventHandler</span> <span class=\"token function\">stopEventHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StopEventHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改 MainApp.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConfigurableApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainApp</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">ConfigurableApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Product</span> product <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">)</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"product\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name : \"</span> <span class=\"token operator\">+</span> product<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Count : \"</span> <span class=\"token operator\">+</span> product<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当然，也可以通过 xml 方式配置对应的 bean。</p>\n<p>运行  <code>MainApp.java</code>  ，得到如下结果：</p>\n<blockquote>\n<p>ContextStartedEvent Received<br />\nName : washing machine<br />\nCount : 3<br />\nContextStoppedEvent Received</p>\n</blockquote>\n<h4 id=\"自定义事件\"><a class=\"anchor\" href=\"#自定义事件\">#</a> 自定义事件</h4>\n<p><strong>代码示例：</strong></p>\n<p>本示例需要的文件：CustomEvent.java、CustomEventHandler.java、CustomEventPublisher.java、MainApp.java。</p>\n<p>新建 CustomEvent.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationEvent</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomEvent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ApplicationEvent</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CustomEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> source<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"My Custom Event\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>新建 CustomEventHandler.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationListener</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomEventHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CustomEvent</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onApplicationEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CustomEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>新建 CustomEventPublisher.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationEventPublisher</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationEventPublisherAware</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomEventPublisher</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationEventPublisherAware</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ApplicationEventPublisher</span> publisher<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setApplicationEventPublisher</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationEventPublisher</span> publisher<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>publisher <span class=\"token operator\">=</span> publisher<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">publish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">CustomEvent</span> ce <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        publisher<span class=\"token punctuation\">.</span><span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span>ce<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>注：CustomEventPublisher 也可以直接实现  <code>Aware</code>  接口，然后通过构造函数或  <code>@Autowired</code>  注入 ApplicationEventPublisher 依赖。</p>\n</blockquote>\n<p>修改 MainApp.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConfigurableApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainApp</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">ConfigurableApplicationContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">CustomEventPublisher</span> cvp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CustomEventPublisher</span><span class=\"token punctuation\">)</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"customEventPublisher\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        cvp<span class=\"token punctuation\">.</span><span class=\"token function\">publish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行  <code>MainApp.java</code>  ，得到如下结果：</p>\n<blockquote>\n<p>My Custom Event</p>\n</blockquote>\n<h3 id=\"spring-框架的-aop\"><a class=\"anchor\" href=\"#spring-框架的-aop\">#</a> Spring 框架的 AOP</h3>\n<p>面向切面的编程需要把程序逻辑分解成不同的部分称为所谓的关注点。跨一个应用程序的多个点的功能被称为 <strong>横切关注点</strong> ，这些横切关注点在概念上独立于应用程序的业务逻辑。</p>\n<p>Spring AOP 模块提供拦截器来拦截一个应用程序，例如，当执行一个方法时，你可以在方法执行之前或之后添加额外的功能。</p>\n<p><strong>AOP 术语</strong></p>\n<table>\n<thead>\n<tr>\n<th>术语</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Aspect</td>\n<td>一个模块具有一组提供横切需求的 APIs。例如，一个日志模块为了记录日志将被 AOP 切面调用。应用程序可以拥有任意数量的切面，这取决于需求。</td>\n</tr>\n<tr>\n<td>Join point</td>\n<td>在你的应用程序中它代表一个点，你可以在插件 AOP 切面。你也能说，它是在实际的应用程序中，其中一个操作将使用 Spring AOP 框架。</td>\n</tr>\n<tr>\n<td>Advice</td>\n<td>这是实际行动之前或之后执行的方法。这是在程序执行期间通过 Spring AOP 框架实际被调用的代码。</td>\n</tr>\n<tr>\n<td>Pointcut</td>\n<td>这是一组一个或多个连接点，通知应该被执行。你可以使用表达式或模式指定切入点正如我们将在 AOP 的例子中看到的。</td>\n</tr>\n<tr>\n<td>Introduction</td>\n<td>引用允许你添加新方法或属性到现有的类中。</td>\n</tr>\n<tr>\n<td>Target object</td>\n<td>被一个或者多个方面所通知的对象，这个对象永远是一个被代理对象。也称为被通知对象。</td>\n</tr>\n<tr>\n<td>Weaving</td>\n<td>Weaving 把切面连接到其它的应用程序类型或者对象上，并创建一个被通知的对象。这些可以在编译时，类加载时和运行时完成。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>通知的类型</strong></p>\n<ul>\n<li>前置通知：在一个方法执行之前，执行通知。</li>\n<li>后置通知：在一个方法执行之后，不考虑其结果，执行通知。</li>\n<li>返回后通知：在一个方法执行之后，只有在方法成功完成时，才能执行通知。</li>\n<li>抛出异常后通知：在一个方法执行之后，只有在方法退出抛出异常时，才能执行通知。</li>\n<li>环绕通知：在建议方法调用之前和之后，执行通知。</li>\n</ul>\n<p><strong>实现自定义切面</strong></p>\n<p>Spring 支持 @AspectJ annotation style 的方法和基于模式的方法来实现自定义切面。</p>\n<ul>\n<li>XML Schema based 使用常规类以及基于配置的 XML 来实现。</li>\n<li>@AspectJ based 引用一种声明切面的风格作为带有 Java 5 注释的常规 Java 类注释。</li>\n</ul>\n<h4 id=\"基于-aop-的-xml架构\"><a class=\"anchor\" href=\"#基于-aop-的-xml架构\">#</a> 基于 AOP 的 XML 架构</h4>\n<p><strong>配置示例：</strong></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>config</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>aspect</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myAspect<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>aBean<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>pointcut</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>businessService<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token attr-name\">expression</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>execution(* com.xfc.service.*.*(..))<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">&lt;!-- a before advice definition --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>before</span> <span class=\"token attr-name\">pointcut-ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>businessService<span class=\"token punctuation\">\"</span></span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>doRequiredTask<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\">&lt;!-- an after advice definition --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>after</span> <span class=\"token attr-name\">pointcut-ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>businessService<span class=\"token punctuation\">\"</span></span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>doRequiredTask<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">&lt;!-- an after-returning advice definition --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token comment\">&lt;!--The doRequiredTask method must have parameter named retVal --></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>after-returning</span> <span class=\"token attr-name\">pointcut-ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>businessService<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         <span class=\"token attr-name\">returning</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>retVal<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>doRequiredTask<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token comment\">&lt;!-- an after-throwing advice definition --></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token comment\">&lt;!--The doRequiredTask method must have parameter named ex --></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>after-throwing</span> <span class=\"token attr-name\">pointcut-ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>businessService<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>         <span class=\"token attr-name\">throwing</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ex<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>doRequiredTask<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token comment\">&lt;!-- an around advice definition --></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>around</span> <span class=\"token attr-name\">pointcut-ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>businessService<span class=\"token punctuation\">\"</span></span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>doRequiredTask<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   ...</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">aop:</span>aspect</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">aop:</span>config</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>aBean<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>...</pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>代码示例：</strong></p>\n<blockquote>\n<p>此前的代码示例已演示了较多内容，为了避免混淆，我们可以选择删除以前的文件或创建一个新的项目后，再继续后续代码演示。</p>\n</blockquote>\n<p>本示例需要的文件：<strong>aspectjrt.jar</strong>、<strong>aspectjweaver.jar</strong>、Logging.java、Book.java、Beans.xml、MainApp.java。</p>\n<p>下载 <strong>aspectjrt.jar</strong>、<strong>aspectjweaver.jar</strong> 并添加到项目 lib 中。</p>\n<p>这些文件你可以前往 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tdm5yZXBvc2l0b3J5LmNvbS8=\">https://mvnrepository.com/</span> 或其他网站下载。</p>\n<p>新建 Logging.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Logging</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeAdvice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Going to setup book profile.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterAdvice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Book profile has been setup.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterReturningAdvice</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> retVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Returning:\"</span> <span class=\"token operator\">+</span> retVal<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">AfterThrowingAdvice</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalArgumentException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"There has been an exception: \"</span> <span class=\"token operator\">+</span> ex<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>新建 Book.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Count : \"</span> <span class=\"token operator\">+</span> count <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name : \"</span> <span class=\"token operator\">+</span> name <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printThrowException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exception raised\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改 Beans.xml</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>aop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/aop<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    http://www.springframework.org/schema/aop</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>config</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>aspect</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>log<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>logging<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>pointcut</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectAll<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">expression</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>execution(* com.xfc.*.*(..))<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>before</span> <span class=\"token attr-name\">pointcut-ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectAll<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>beforeAdvice<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>after</span> <span class=\"token attr-name\">pointcut-ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectAll<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>afterAdvice<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>after-returning</span> <span class=\"token attr-name\">pointcut-ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectAll<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">returning</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>retVal<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>afterReturningAdvice<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>after-throwing</span> <span class=\"token attr-name\">pointcut-ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectAll<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">throwing</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ex<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>AfterThrowingAdvice<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">aop:</span>aspect</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">aop:</span>config</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Definition for book bean --></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>book<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.Book<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Effective Java<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>count<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>11<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Definition for logging aspect --></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>logging<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.Logging<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>修改 MainApp.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainApp</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Beans.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Book</span> book <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">)</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        book<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        book<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        book<span class=\"token punctuation\">.</span><span class=\"token function\">printThrowException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行  <code>MainApp.java</code>  ，得到如下结果：</p>\n<blockquote>\n<p>Going to setup book profile.<br />\nCount : 11<br />\nBook profile has been setup.<br />\nReturning:11<br />\nGoing to setup book profile.<br />\nName : Effective Java<br />\nBook profile has been setup.<br />\nReturning:Effective Java<br />\nGoing to setup book profile.<br />\nException raised<br />\nBook profile has been setup.<br />\nThere has been an exception: java.lang.IllegalArgumentException</p>\n<p>Exception in thread &quot;main&quot; java.lang.IllegalArgumentException<br />\nat com.xfc.Book.printThrowException(Book.java:27)<br />\n......</p>\n</blockquote>\n<h4 id=\"基于-aop-的-aspectj\"><a class=\"anchor\" href=\"#基于-aop-的-aspectj\">#</a> 基于 AOP 的 @AspectJ</h4>\n<p>@AspectJ 作为通过 Java 5 注解注释的普通的 Java 类，它指的是声明 aspects 的一种风格。通过配置  <code>&lt;aop:aspectj-autoproxy/&gt;</code>  后可以配置  <code>@AspectJ</code>  。</p>\n<p><strong>代码示例：</strong></p>\n<p>本示例需要的文件：Logging.java、Book.java、Beans.xml、MainApp.java，其中 Book.java、MainApp.java 文件与上一示例一致，此处不再重述。</p>\n<p>修改 Logging.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Logging</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.xfc.*.*(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"selectAll()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeAdvice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Going to setup book profile.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@After</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"selectAll()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterAdvice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Book profile has been setup.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@AfterReturning</span><span class=\"token punctuation\">(</span>pointcut <span class=\"token operator\">=</span> <span class=\"token string\">\"selectAll()\"</span><span class=\"token punctuation\">,</span> returning <span class=\"token operator\">=</span> <span class=\"token string\">\"retVal\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterReturningAdvice</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> retVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Returning:\"</span> <span class=\"token operator\">+</span> retVal<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token annotation punctuation\">@AfterThrowing</span><span class=\"token punctuation\">(</span>pointcut <span class=\"token operator\">=</span> <span class=\"token string\">\"selectAll()\"</span><span class=\"token punctuation\">,</span> throwing <span class=\"token operator\">=</span> <span class=\"token string\">\"ex\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">AfterThrowingAdvice</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalArgumentException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"There has been an exception: \"</span> <span class=\"token operator\">+</span> ex<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改 Beans.xml</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>aop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/aop<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    http://www.springframework.org/schema/aop</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>aspectj-autoproxy</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Definition for book bean --></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>book<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.Book<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Effective Java<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>count<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>11<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Definition for logging aspect --></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>logging<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.Logging<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>运行  <code>MainApp.java</code>  ，得到如下结果：</p>\n<blockquote>\n<p>Going to setup book profile.<br />\nCount : 11<br />\nBook profile has been setup.<br />\nReturning:11<br />\nGoing to setup book profile.<br />\nName : Effective Java<br />\nBook profile has been setup.<br />\nReturning:Effective Java<br />\nGoing to setup book profile.<br />\nException raised<br />\nBook profile has been setup.<br />\nThere has been an exception: java.lang.IllegalArgumentException</p>\n<p>Exception in thread &quot;main&quot; java.lang.IllegalArgumentException<br />\nat com.xfc.Book.printThrowException(Book.java:27)<br />\n......</p>\n</blockquote>\n<h3 id=\"spring-jdbc-框架\"><a class=\"anchor\" href=\"#spring-jdbc-框架\">#</a> Spring JDBC 框架</h3>\n<p>使用 Spring JDBC 框架进行数据库连接，它会负责所有的底层细节，从开始打开连接，准备和执行 SQL 语句，处理异常，处理事务，到最后关闭连接。</p>\n<p>Spring JDBC 提供了几种方法和数据库中相应的不同的类与接口，如 JdbcTemplate。</p>\n<p><strong>JdbcTemplate 类</strong></p>\n<p>JdbcTemplate 类执行 SQL 查询、更新语句和存储过程调用，执行迭代结果集和提取返回参数值。它也捕获 JDBC 异常并转换它们到  <code>org.springframework.dao</code>  包中定义的通用类、更多的信息、异常层次结构。JdbcTemplate 类的实例是<em>线程安全</em>配置的。</p>\n<h4 id=\"jdbc-示例\"><a class=\"anchor\" href=\"#jdbc-示例\">#</a> JDBC 示例</h4>\n<blockquote>\n<p>注：与数据库相关的代码片段或演示，均优先选用 MySQL 为例。</p>\n</blockquote>\n<p>创建数据库  <code>spring-demo</code>  并创建表  <code>book</code>  。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token punctuation\">`</span>book<span class=\"token punctuation\">`</span>  <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">`</span>count<span class=\"token punctuation\">`</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>代码示例：</strong></p>\n<p>本示例需要的文件：<strong>mysql-connector-java.jar</strong>、Book.java、BookDao.java、BookJDBCTemplate.java、BookMapper.java、Beans.xml、MainApp.java。</p>\n<p>修改 Book.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>添加 BookDao.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">Book</span> <span class=\"token function\">getBook</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">listBooks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>添加 BookJDBCTemplate.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JdbcTemplate</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookJDBCTemplate</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">JdbcTemplate</span> jdbcTemplateObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataSource <span class=\"token operator\">=</span> dataSource<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>jdbcTemplateObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JdbcTemplate</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"insert into Book (name, count) values (?, ?)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        jdbcTemplateObject<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Created Record Name = \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\" Count = \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span> <span class=\"token function\">getBook</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"select * from Book where id = ?\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">Book</span> book <span class=\"token operator\">=</span> jdbcTemplateObject<span class=\"token punctuation\">.</span><span class=\"token function\">queryForObject</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>id<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BookMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> book<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">listBooks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"select * from Book\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">List</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span> books <span class=\"token operator\">=</span> jdbcTemplateObject<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BookMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">return</span> books<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"delete from Book where id = ?\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        jdbcTemplateObject<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Deleted Record with ID = \"</span> <span class=\"token operator\">+</span> id <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"update Book set count = ? where id = ?\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        jdbcTemplateObject<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Updated Record with ID = \"</span> <span class=\"token operator\">+</span> id <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>添加 BookMapper.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RowMapper</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResultSet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * 数据映射配置</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookMapper</span>  <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RowMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span> <span class=\"token function\">mapRow</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultSet</span> rs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Book</span> book <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        book<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        book<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        book<span class=\"token punctuation\">.</span><span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> book<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改 Beans.xml</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Initialization for data source --></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driverClassName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.mysql.cj.jdbc.Driver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbc:mysql://localhost:3306/spring-demo?serverTimezone=Asia/Shanghai<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Definition for bookJDBCTemplate bean --></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookJDBCTemplate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.BookJDBCTemplate<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span>  <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>修改 MainApp.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainApp</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Beans.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">BookJDBCTemplate</span> bookJDBCTemplate <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BookJDBCTemplate</span><span class=\"token punctuation\">)</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bookJDBCTemplate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 1. 添加数据</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        bookJDBCTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"脂砚斋重评石头记\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        bookJDBCTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"泥淖之子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        bookJDBCTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"中国文学作品选注\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 2. 查询列表</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//        List&lt;Book> books = bookJDBCTemplate.listBooks();</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//        for (Book record : books) &#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//            System.out.print(\"ID : \" + record.getId() );</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">//            System.out.print(\", Name : \" + record.getName() );</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//            System.out.println(\", Count : \" + record.getCount());</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//        &#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 3. 修改数据</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">//        bookJDBCTemplate.update(2, 20);</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 4. 查询单条</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">//        Book book = bookJDBCTemplate.getBook(2);</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">//        System.out.println(\"ID : \" + book.getId() + \", Name : \" + book.getName() + \", Count : \" + book.getCount());</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 5. 删除数据</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">//        bookJDBCTemplate.delete(1);</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">//        bookJDBCTemplate.delete(2);</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">//        bookJDBCTemplate.delete(3);</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>依次取消  <code>MainApp.java</code>  中各部分的注释并运行，并配合观察数据库表中的数据。</p>\n<p>当然，此处 JDBC 示例相对较为简单，对于较为复杂的业务，可以根据需求进行相应的扩展。</p>\n<h4 id=\"sql-的存储过程\"><a class=\"anchor\" href=\"#sql-的存储过程\">#</a> SQL 的存储过程</h4>\n<p><code>SimpleJdbcCall</code>  类可以被用于调用一个包含 IN 和 OUT 参数的存储过程。</p>\n<p><span class=\"label danger\">❗️TODO</span> 暂无示例代码</p>\n<h3 id=\"spring-事务管理\"><a class=\"anchor\" href=\"#spring-事务管理\">#</a> Spring 事务管理</h3>\n<p><strong>事务管理</strong></p>\n<p>一个数据库事务是一个被视为单一的工作单元的操作序列。这些操作应该要么完整地执行，要么完全不执行。事务管理是一个重要组成部分，RDBMS 面向企业应用程序，以确保数据完整性和一致性。事务的概念可以描述为具有以下四个关键属性说成是 <strong>ACID</strong>：</p>\n<ul>\n<li><ins>原子性</ins>：事务应该当作一个单独单元的操作，这意味着整个序列操作要么是成功，要么是失败的。</li>\n<li><ins>一致性</ins>：这表示数据库的引用完整性的一致性，表中唯一的主键等。</li>\n<li><ins>隔离性</ins>：可能同时处理很多有相同的数据集的事务，每个事务应该与其他事务隔离，以防止数据损坏。</li>\n<li><ins>持久性</ins>：一个事务一旦完成全部操作后，这个事务的结果必须是永久性的，不能因系统故障而从数据库中删除。</li>\n</ul>\n<p>Spring 框架在不同的底层事务管理 APIs 的顶部提供了一个抽象层。Spring 的事务支持旨在通过添加事务能力到 POJOs 来提供给 EJB 事务一个选择方案。Spring 支持编程式和声明式事务管理。EJBs 需要一个应用程序服务器，但 Spring 事务管理可以在不需要应用程序服务器的情况下实现。</p>\n<p><strong>局部事物 vs. 全局事务</strong></p>\n<p>局部事务是特定于一个单一的事务资源，如一个 JDBC 连接，而全局事务可以跨多个事务资源事务，如在一个分布式系统中的事务。</p>\n<p>局部事务管理在一个集中的计算环境中是有用的，该计算环境中应用程序组件和资源位于一个单位点，而事务管理只涉及到一个运行在一个单一机器中的本地数据管理器。局部事务更容易实现。</p>\n<p>全局事务管理需要在分布式计算环境中，所有的资源都分布在多个系统中。在这种情况下事务管理需要同时在局部和全局范围内进行。分布式或全局事务跨多个系统执行，它的执行需要全局事务管理系统和所有相关系统的局部数据管理人员之间的协调。</p>\n<p><strong>编程式 vs. 声明式</strong></p>\n<p>Spring 支持两种类型的事务管理:</p>\n<ul>\n<li>编程式事务管理：这意味着你在编程的帮助下有管理事务。这给了你极大的灵活性，但却很难维护。</li>\n<li>声明式事务管理 ：这意味着你从业务代码中分离事务管理。你仅仅使用注释或 XML 配置来管理事务。</li>\n</ul>\n<p>声明式事务管理比编程式事务管理更可取，尽管它不如编程式事务管理灵活，但它允许你通过代码控制事务。但作为一种横切关注点，声明式事务管理可以使用 AOP 方法进行模块化。Spring 支持使用 Spring AOP 框架的声明式事务管理。</p>\n<p><strong>Spring 事务抽象</strong></p>\n<p><ins class=\"wavy\">Spring 事务管理的五大属性：隔离级别、传播行为、是否只读、事务超时、回滚规则。</ins></p>\n<p>Spring 事务抽象的关键是由  <code>org.springframework.transaction.PlatformTransactionManager</code>  接口定义。</p>\n<p>事务隔离级别和传播类型，均在  <code>TransactionDefinition</code>  中定义了相关常量。</p>\n<p>事务隔离级别：</p>\n<ol>\n<li>\n<p>ISOLATION_DEFAULT</p>\n<p>这是默认的隔离级别。</p>\n</li>\n<li>\n<p>ISOLATION_READ_COMMITTED</p>\n<p>表明能够阻止误读；可以发生不可重复读和虚读。</p>\n</li>\n<li>\n<p>ISOLATION_READ_UNCOMMITTED</p>\n<p>表明可以发生误读、不可重复读和虚读。</p>\n</li>\n<li>\n<p>ISOLATION_REPEATABLE_READ</p>\n<p>表明能够阻止误读和不可重复读；可以发生虚读。</p>\n</li>\n<li>\n<p>ISOLATION_SERIALIZABLE</p>\n<p>表明能够阻止误读、不可重复读和虚读。</p>\n</li>\n</ol>\n<p>事务传播类型：</p>\n<ol>\n<li>\n<p>PROPAGATION_MANDATORY</p>\n<p>支持当前事务；如果不存在当前事务，则抛出一个异常。</p>\n</li>\n<li>\n<p>PROPAGATION_NESTED</p>\n<p>如果存在当前事务，则在一个嵌套的事务中执行。</p>\n</li>\n<li>\n<p>PROPAGATION_NEVER</p>\n<p>不支持当前事务；如果存在当前事务，则抛出一个异常。</p>\n</li>\n<li>\n<p>PROPAGATION_NOT_SUPPORTED</p>\n<p>不支持当前事务；而总是执行非事务性。</p>\n</li>\n<li>\n<p>PROPAGATION_REQUIRED</p>\n<p>支持当前事务；如果不存在事务，则创建一个新的事务。</p>\n</li>\n<li>\n<p>PROPAGATION_REQUIRES_NEW</p>\n<p>创建一个新事务，如果存在一个事务，则把当前事务挂起。</p>\n</li>\n<li>\n<p>PROPAGATION_SUPPORTS</p>\n<p>支持当前事务；如果不存在，则执行非事务性。</p>\n</li>\n<li>\n<p>TIMEOUT_DEFAULT</p>\n<p>使用默认超时的底层事务系统，或者如果不支持超时则没有。</p>\n</li>\n</ol>\n<h4 id=\"编程式事务管理\"><a class=\"anchor\" href=\"#编程式事务管理\">#</a> 编程式事务管理</h4>\n<p>Spring 提供两种方式的编程式事务管理，分别是：使用 TransactionTemplate 和直接使用 PlatformTransactionManager。</p>\n<p>保持上一示例的数据库  <code>spring-demo</code>  表  <code>book</code>  并添加新表  <code>edition</code>  。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token punctuation\">`</span>edition<span class=\"token punctuation\">`</span>  <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">`</span>bid<span class=\"token punctuation\">`</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">`</span>edition<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">`</span>press<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>代码示例：</strong></p>\n<p>本示例需要的文件： BookEdition.java、BookDao.java、BookEditionMapper.java、BookJDBCTemplate.java、Beans.xml、MainApp.java。</p>\n<p>新建 BookEdition.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookEdition</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> bid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> edition<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> press<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// setter and getter...</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改 BookDao.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PlatformTransactionManager</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setTransactionManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PlatformTransactionManager</span> transactionManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> count<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> edition<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> press<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BookEdition</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">listBooks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>新建 BookEditionMapper.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RowMapper</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResultSet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookEditionMapper</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RowMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BookEdition</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BookEdition</span> <span class=\"token function\">mapRow</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultSet</span> rs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> rowNum<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">BookEdition</span> bookEdition <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BookEdition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        bookEdition<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        bookEdition<span class=\"token punctuation\">.</span><span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        bookEdition<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        bookEdition<span class=\"token punctuation\">.</span><span class=\"token function\">setBid</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        bookEdition<span class=\"token punctuation\">.</span><span class=\"token function\">setEdition</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"edition\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        bookEdition<span class=\"token punctuation\">.</span><span class=\"token function\">setPress</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"press\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> bookEdition<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改 BookJDBCTemplate.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataAccessException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JdbcTemplate</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PlatformTransactionManager</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TransactionDefinition</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TransactionStatus</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DefaultTransactionDefinition</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookJDBCTemplate</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">JdbcTemplate</span> jdbcTemplateObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PlatformTransactionManager</span> transactionManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataSource <span class=\"token operator\">=</span> dataSource<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>jdbcTemplateObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JdbcTemplate</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setTransactionManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PlatformTransactionManager</span> transactionManager<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transactionManager <span class=\"token operator\">=</span> transactionManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> count<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> edition<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> press<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">TransactionDefinition</span> def <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultTransactionDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 记录事务状态</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">TransactionStatus</span> status <span class=\"token operator\">=</span> transactionManager<span class=\"token punctuation\">.</span><span class=\"token function\">getTransaction</span><span class=\"token punctuation\">(</span>def<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\">// 保存 Book</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token class-name\">String</span> sql1 <span class=\"token operator\">=</span> <span class=\"token string\">\"insert into Book (name, count) values (?, ?)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            jdbcTemplateObject<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>sql1<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">// 获取 Book 表中最新的 ID</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token class-name\">String</span> sql2 <span class=\"token operator\">=</span> <span class=\"token string\">\"select max(id) from Book\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">int</span> bid <span class=\"token operator\">=</span> jdbcTemplateObject<span class=\"token punctuation\">.</span><span class=\"token function\">queryForObject</span><span class=\"token punctuation\">(</span>sql2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token comment\">// 保存 Edition</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token class-name\">String</span> sql3 <span class=\"token operator\">=</span> <span class=\"token string\">\"insert into Edition(bid, edition, press) values (?, ?, ?)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            jdbcTemplateObject<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>sql3<span class=\"token punctuation\">,</span> bid<span class=\"token punctuation\">,</span> edition<span class=\"token punctuation\">,</span> press<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Created Name = \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\", Count = \"</span> <span class=\"token operator\">+</span> count <span class=\"token operator\">+</span> <span class=\"token string\">\", Edition = \"</span> <span class=\"token operator\">+</span> edition <span class=\"token operator\">+</span> <span class=\"token string\">\", Press = \"</span> <span class=\"token operator\">+</span> press<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token comment\">// 为了方便测试，可以在提交之前编写可预期的异常代码，例如：</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token comment\">// System.out.println(1 / 0);</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token comment\">// 并在 catch 块中捕获 ArithmeticException</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token comment\">// 提交事务状态</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            transactionManager<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DataAccessException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error in creating record, rolling back\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            transactionManager<span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BookEdition</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">listBooks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"select * from Book, Edition where Book.id = Edition.bid\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BookEdition</span><span class=\"token punctuation\">></span></span> bookEdition <span class=\"token operator\">=</span> jdbcTemplateObject<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BookEditionMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">return</span> bookEdition<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改 Beans.xml</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Initialization for data source --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driverClassName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.mysql.cj.jdbc.Driver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbc:mysql://localhost:3306/spring-demo?serverTimezone=Asia/Shanghai<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Initialization for TransactionManager --></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>transactionManager<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Definition for bookJDBCTemplate bean --></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookJDBCTemplate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.BookJDBCTemplate<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>transactionManager<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>transactionManager<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>修改 MainApp.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainApp</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Beans.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">BookJDBCTemplate</span> bookJDBCTemplate <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BookJDBCTemplate</span><span class=\"token punctuation\">)</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bookJDBCTemplate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        bookJDBCTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"脂砚斋重评石头记\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2017年10月第1版\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"天津古籍出版社\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        bookJDBCTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"泥淖之子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2018.2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"广西人民出版社\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        bookJDBCTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"中国文学作品选注\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2017年6月北京第1版\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"中华书局\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BookEdition</span><span class=\"token punctuation\">></span></span> bookEdition <span class=\"token operator\">=</span> bookJDBCTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">listBooks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BookEdition</span> <span class=\"token keyword\">record</span> <span class=\"token operator\">:</span> bookEdition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ID : \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">record</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", Name : \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">record</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", Edition : \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">record</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEdition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", Press : \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">record</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", Count : \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">record</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在  <code>BookJDBCTemplate.create()</code>  方法体中进行异常回滚测试，解除  <code>System.out.println(1 / 0);</code>  代码注释，抛出并捕获 ArithmeticException 异常。运行  <code>MainApp.java</code>  得到如下结果：</p>\n<blockquote>\n<p>Created Name = 脂砚斋重评石头记，Count = 11, Edition = 2017 年 10 月第 1 版，Press = 天津古籍出版社<br />\n Error in creating record, rolling back<br />\nException in thread &quot;main&quot; java.lang.ArithmeticException: / by zero<br />\nat com.xfc.BookJDBCTemplate.create(BookJDBCTemplate.java:46)<br />\nat com.xfc.MainApp.main(MainApp.java:13)</p>\n</blockquote>\n<p>我们即可观察到事务实现回滚。</p>\n<p>恢复代码，再次运行  <code>MainApp.java</code>  得到如下结果：</p>\n<blockquote>\n<p>Created Name = 脂砚斋重评石头记，Count = 11, Edition = 2017 年 10 月第 1 版，Press = 天津古籍出版社<br />\n Created Name = 泥淖之子，Count = 2, Edition = 2018.2, Press = 广西人民出版社<br />\n Created Name = 中国文学作品选注，Count = 15, Edition = 2017 年 6 月北京第 1 版，Press = 中华书局<br />\n ID : 1, Name : 脂砚斋重评石头记，Edition : 2017 年 10 月第 1 版，Press : 天津古籍出版社，Count : 11<br />\nID : 2, Name : 泥淖之子，Edition : 2018.2, Press : 广西人民出版社，Count : 2<br />\nID : 3, Name : 中国文学作品选注，Edition : 2017 年 6 月北京第 1 版，Press : 中华书局，Count : 15</p>\n</blockquote>\n<h4 id=\"声明式事务管理\"><a class=\"anchor\" href=\"#声明式事务管理\">#</a> 声明式事务管理</h4>\n<p>声明式事务管理方法允许你在配置的帮助下而不是源代码硬编程来管理事务。这意味着你可以将事务管理从事务代码中隔离出来。你可以只使用注解或基于配置的 XML 来管理事务，bean 配置会指定事务型方法。</p>\n<p><strong>代码示例：</strong></p>\n<p>本示例需要的文件：BookEdition.java、BookDao.java、BookEditionMapper.java、BookJDBCTemplate.java、Beans.xml、MainApp.java，其中 BookEdition.java、BookEditionMapper.java 文件与上一示例一致，此处不再重述。</p>\n<p>修改 BookDao.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> count<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> edition<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> press<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BookEdition</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">listBooks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改 BookJDBCTemplate.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataAccessException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JdbcTemplate</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookJDBCTemplate</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BookDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">JdbcTemplate</span> jdbcTemplateObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>jdbcTemplateObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JdbcTemplate</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> count<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> edition<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> press<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// 保存 Book</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">String</span> sql1 <span class=\"token operator\">=</span> <span class=\"token string\">\"insert into Book (name, count) values (?, ?)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            jdbcTemplateObject<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>sql1<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">// 获取 Book 表中最新的 ID</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token class-name\">String</span> sql2 <span class=\"token operator\">=</span> <span class=\"token string\">\"select max(id) from Book\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">int</span> bid <span class=\"token operator\">=</span> jdbcTemplateObject<span class=\"token punctuation\">.</span><span class=\"token function\">queryForObject</span><span class=\"token punctuation\">(</span>sql2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">// 保存 Edition</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token class-name\">String</span> sql3 <span class=\"token operator\">=</span> <span class=\"token string\">\"insert into Edition(bid, edition, press) values (?, ?, ?)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            jdbcTemplateObject<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>sql3<span class=\"token punctuation\">,</span> bid<span class=\"token punctuation\">,</span> edition<span class=\"token punctuation\">,</span> press<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Created Name = \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\", Count = \"</span> <span class=\"token operator\">+</span> count <span class=\"token operator\">+</span> <span class=\"token string\">\", Edition = \"</span> <span class=\"token operator\">+</span> edition <span class=\"token operator\">+</span> <span class=\"token string\">\", Press = \"</span> <span class=\"token operator\">+</span> press<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 测试异常</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"simulate Error condition\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DataAccessException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error in creating record, rolling back\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BookEdition</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">listBooks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"select * from Book, Edition where Book.id = Edition.bid\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BookEdition</span><span class=\"token punctuation\">></span></span> bookEdition <span class=\"token operator\">=</span> jdbcTemplateObject<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BookEditionMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">return</span> bookEdition<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改 Beans.xml</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>tx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/tx<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>aop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/aop<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Initialization for data source --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driverClassName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.mysql.cj.jdbc.Driver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbc:mysql://localhost:3306/spring-demo?serverTimezone=Asia/Shanghai<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">tx:</span>advice</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>txAdvice<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">transaction-manager</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>transactionManager<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">tx:</span>attributes</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">tx:</span>method</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>create<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">tx:</span>attributes</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">tx:</span>advice</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>config</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>pointcut</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>createOperation<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">expression</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>execution(* com.xfc.BookJDBCTemplate.create(..))<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>advisor</span> <span class=\"token attr-name\">advice-ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>txAdvice<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">pointcut-ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>createOperation<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">aop:</span>config</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Initialization for TransactionManager --></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>transactionManager<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Definition for bookJDBCTemplate bean --></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookJDBCTemplate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.BookJDBCTemplate<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>修改 MainApp.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainApp</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Beans.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">BookDao</span> bookJDBCTemplate <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BookDao</span><span class=\"token punctuation\">)</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bookJDBCTemplate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        bookJDBCTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"脂砚斋重评石头记\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2017年10月第1版\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"天津古籍出版社\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        bookJDBCTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"泥淖之子\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2018.2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"广西人民出版社\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        bookJDBCTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"中国文学作品选注\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2017年6月北京第1版\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"中华书局\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BookEdition</span><span class=\"token punctuation\">></span></span> bookEdition <span class=\"token operator\">=</span> bookJDBCTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">listBooks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BookEdition</span> <span class=\"token keyword\">record</span> <span class=\"token operator\">:</span> bookEdition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ID : \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">record</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", Name : \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">record</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", Edition : \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">record</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEdition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", Press : \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">record</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", Count : \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">record</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>为了便于观察效果，推荐先清除数据库旧有数据。</p>\n</blockquote>\n<p>运行  <code>MainApp.java</code>  得到如下结果：</p>\n<blockquote>\n<p>Created Name = 脂砚斋重评石头记，Count = 11, Edition = 2017 年 10 月第 1 版，Press = 天津古籍出版社<br />\n Exception in thread &quot;main&quot; java.lang.RuntimeException: simulate Error condition</p>\n</blockquote>\n<p>观察数据库，得知当执行异常时，错误数据并未被添加到数据库，实现了事务回滚。</p>\n<p>去除  <code>BookJDBCTemplate.create()</code>  方法体中的异常代码片段，再次运行得到如下结果：</p>\n<blockquote>\n<p>Created Name = 脂砚斋重评石头记，Count = 11, Edition = 2017 年 10 月第 1 版，Press = 天津古籍出版社<br />\n Created Name = 泥淖之子，Count = 2, Edition = 2018.2, Press = 广西人民出版社<br />\n Created Name = 中国文学作品选注，Count = 15, Edition = 2017 年 6 月北京第 1 版，Press = 中华书局<br />\n ID : 1, Name : 脂砚斋重评石头记，Edition : 2017 年 10 月第 1 版，Press : 天津古籍出版社，Count : 11<br />\nID : 2, Name : 泥淖之子，Edition : 2018.2, Press : 广西人民出版社，Count : 2<br />\nID : 3, Name : 中国文学作品选注，Edition : 2017 年 6 月北京第 1 版，Press : 中华书局，Count : 15</p>\n</blockquote>\n<h3 id=\"spring-web-mvc-框架\"><a class=\"anchor\" href=\"#spring-web-mvc-框架\">#</a> Spring Web MVC 框架</h3>\n<blockquote>\n<p>注：此部分内容日常开发中应用较多，部分常规的内容不作详细说明。</p>\n</blockquote>\n<p>Spring web MVC 框架提供了  <code>模型-视图-控制</code>  的体系结构和可以用来开发灵活、松散耦合的 web 应用程序的组件。MVC 模式导致了应用程序的不同方面（输入逻辑、业务逻辑和 UI 逻辑）的分离，同时提供了在这些元素之间的松散耦合。</p>\n<ul>\n<li><strong>模型</strong> 封装了应用程序数据，并且通常它们由 POJO 组成。</li>\n<li><strong>视图</strong> 主要用于呈现模型数据，并且通常它生成客户端的浏览器可以解释的 HTML 输出。</li>\n<li><strong>控制器</strong> 主要用于处理用户请求，并且构建合适的模型并将其传递到视图呈现。</li>\n</ul>\n<p><strong>DispatcherServlet</strong></p>\n<p>Spring Web 模型 - 视图 - 控制（MVC）框架是围绕  <code>DispatcherServlet</code>  设计的，DispatcherServlet 用来处理所有的 HTTP 请求和响应。</p>\n<p>DispatcherServlet 工作流程图：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/10/9912aa04c831878f6be303df9eb3c64c1633529103.png\" alt=\"dispatcherservlet\" /></p>\n<h4 id=\"hello-world-例子\"><a class=\"anchor\" href=\"#hello-world-例子\">#</a> Hello World 例子</h4>\n<p><strong>准备</strong></p>\n<p>创建新的动态 web 项目：File --&gt; New --&gt; Project --&gt; Java Enterprise --&gt; 勾选 Web Application。</p>\n<p>在 WEB-INF 目录下创建 jsp、lib 文件夹。将此此前用到的 spring 相关的 jar 导入到 lib 目录，并添加到 libaraies 。</p>\n<p>在 WEB-INF 文件夹下创建 hello-servlet.xml（文件名遵循  <code>[servlet-name]-servlet.xml</code>  ）。</p>\n<p>在 src 目录下创建包 com.xfc，并在包路径下创建 HelloController.java。</p>\n<p>配置 web 容器，以下示例使用 tomcat 作为 web 容器。</p>\n<p><strong>代码示例：</strong></p>\n<p>hello-servlet.xml</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>context</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/context<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>component-scan</span> <span class=\"token attr-name\">base-package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>prefix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/WEB-INF/jsp/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>suffix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.jsp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>web.xml</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>web-app</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>WebApp_ID<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2.4<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://java.sun.com/xml/ns/j2ee<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>display-name</span><span class=\"token punctuation\">></span></span>spring-mvc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>display-name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>hello<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-class</span><span class=\"token punctuation\">></span></span>org.springframework.web.servlet.DispatcherServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-class</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>load-on-startup</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>load-on-startup</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-mapping</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>hello<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">></span></span>/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-mapping</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>web-app</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>index.jsp</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;%@ page contentType=\"text/html; charset=UTF-8\" %></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Hello World<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>$&#123;message&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>HelloController.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>ui<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ModelMap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">printHello</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ModelMap</span> model<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        model<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello Spring MVC Framework!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"index\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>启动项目并在浏览器访问  <code>http://localhost:8080/hello</code>  ：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/10/6a9f692d0369304731cf0eca011ff3131633529112.png\" alt=\"shituxiaoguo\" /></p>\n<h4 id=\"spring-mvc-表单处理例子\"><a class=\"anchor\" href=\"#spring-mvc-表单处理例子\">#</a> Spring MVC 表单处理例子</h4>\n<p><strong>代码示例：</strong></p>\n<p>基于上一示例。</p>\n<p>新建 Book.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// setter and getter...</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>新建 BookController.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>ui<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ModelMap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ModelAttribute</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ModelAndView</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/book\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ModelAndView</span> <span class=\"token function\">student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ModelAndView</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"command\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/addBook\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">addStudent</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@ModelAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SpringWeb\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ModelMap</span> model<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        model<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        model<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count\"</span><span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        model<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"result\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>新建 book.jsp</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\" %></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Spring MVC Form Handling<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>Student Information<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">form:</span>form</span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>POST<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/addBook<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">form:</span>label</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Name<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">form:</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">form:</span>input</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">form:</span>label</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>count<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Count<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">form:</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">form:</span>input</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>count<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">form:</span>label</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>id<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">form:</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">form:</span>input</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">colspan</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">form:</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>新建 result.jsp</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\" %></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Spring MVC Form Handling<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>Submitted Book Information<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>Name<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>$&#123;name&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>Count<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>$&#123;count&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>ID<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>$&#123;id&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>启动项目并在浏览器访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwL2Jvb2s=\">http://localhost:8080/book</span></p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/10/b708c5dfd6fbf947ae8869e8c861d0ea1633529119.png\" alt=\"bookformweb\" /></p>\n<p>填写表单后 submit ：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/10/40adf36f19f3a77fb302b54b067af4561633529124.png\" alt=\"booksubmitresult\" /></p>\n<h4 id=\"spring-页面重定向例子\"><a class=\"anchor\" href=\"#spring-页面重定向例子\">#</a> Spring 页面重定向例子</h4>\n<p><strong>代码示例：</strong></p>\n<p>基于上一示例。</p>\n<p>新建 WebController.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WebController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/index\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"index\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/redirect\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"redirect:finalPage\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/finalPage\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">finalPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"final\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改 index.jsp</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\" %></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Spring Page Redirection<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>Spring Page Redirection<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Click below button to redirect the result to new page<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">form:</span>form</span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>GET<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/redirect<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Redirect Page<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">form:</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>新建 final.jsp</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\" %></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Spring Page Redirection<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>Redirected Page<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>启动项目并在浏览器访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwL2luZGV4\">http://localhost:8080/index</span></p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/10/9e062b7779bb3b9163b14653d807eb931633529130.png\" alt=\"redirect_index\" /></p>\n<p>点击 Redirect Page 按钮：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/10/39fd7896da49a5bf1608a4d7851cb8f81633529134.png\" alt=\"redirect_final\" /></p>\n<h4 id=\"spring-静态页面例子\"><a class=\"anchor\" href=\"#spring-静态页面例子\">#</a> Spring 静态页面例子</h4>\n<p><strong>代码示例：</strong></p>\n<p>基于上一示例。</p>\n<p>修改 WebController.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WebController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/index\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"index\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/staticPage\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"redirect:/pages/final.html\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改 hello-servlet.xml</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>context</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/context<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>mvc</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/mvc<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>component-scan</span> <span class=\"token attr-name\">base-package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>prefix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/WEB-INF/jsp/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>suffix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.jsp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 映射静态文件 --></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">mvc:</span>resources</span> <span class=\"token attr-name\">mapping</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/pages/**<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">location</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/WEB-INF/pages/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">mvc:</span>annotation-driven</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>在 WEB-INF 下创建 pages/final.html 文件。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Spring Static Page<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>A simple HTML page<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>修改 index.jsp</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\"%></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Spring Landing Page<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>Spring Landing Pag<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Click below button to get a simple HTML page<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">form:</span>form</span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>GET<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/staticPage<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Get HTML Page<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">form:</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>启动项目并在浏览器访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwL2luZGV4\">http://localhost:8080/index</span></p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/10/7ce682e04a66f3f399e255208fddd2c01633529155.png\" alt=\"static_index\" /></p>\n<p>点击 Get HTML Page 按钮：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/10/0fcc791bfad4da499c0352ebd5ddb5991633529160.png\" alt=\"static_final\" /></p>\n<h4 id=\"spring-异常处理例子\"><a class=\"anchor\" href=\"#spring-异常处理例子\">#</a> Spring 异常处理例子</h4>\n<p><strong>代码示例：</strong></p>\n<p>基于上一示例。</p>\n<p>创建 error.jsp</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Spring Error Page<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>An error occured, please contact webmaster.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>创建 ExceptionPage.jsp</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;%@taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\" %></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Spring MVC Exception Handling<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>Spring MVC Exception Handling<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span>$&#123;exception.exceptionMsg&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>创建 SpringException.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> exceptionMsg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SpringException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> exceptionMsg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>exceptionMsg <span class=\"token operator\">=</span> exceptionMsg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getExceptionMsg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>exceptionMsg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setExceptionMsg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> exceptionMsg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>exceptionMsg <span class=\"token operator\">=</span> exceptionMsg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改 hello-servlet.xml</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>context</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/context<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>mvc</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/mvc<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>component-scan</span> <span class=\"token attr-name\">base-package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>prefix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/WEB-INF/jsp/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>suffix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.jsp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 映射静态文件 --></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">mvc:</span>resources</span> <span class=\"token attr-name\">mapping</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/pages/**<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">location</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/WEB-INF/pages/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">mvc:</span>annotation-driven</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 异常处理 --></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>exceptionMappings<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>props</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>prop</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xfc.SpringException<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>ExceptionPage<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>prop</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>props</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>defaultErrorView<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>error<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>修改 BookController.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xfc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>ui<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ModelMap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExceptionHandler</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ModelAttribute</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ModelAndView</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/book\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ModelAndView</span> <span class=\"token function\">student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ModelAndView</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"command\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/addBook\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">SpringException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">addStudent</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@ModelAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SpringWeb\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ModelMap</span> model<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpringException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Given name is too short\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            model<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpringException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Given count is too low\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            model<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count\"</span><span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        model<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"result\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>启动项目并在浏览器访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwL2Jvb2s=\">http://localhost:8080/book</span></p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/10/c68fd4a5d45a78f129c2a1f89f7de8d51633529168.png\" alt=\"biaodance\" /></p>\n<p>填写表单并 Submit：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/10/db9b3eef24fef4ad2be597e830b631071633529171.png\" alt=\"exception_page\" /></p>\n<h4 id=\"spring-使用-log4j-记录日志\"><a class=\"anchor\" href=\"#spring-使用-log4j-记录日志\">#</a> Spring 使用 Log4J 记录日志</h4>\n<p><span class=\"label danger\">❗️TODO</span> 待完善</p>\n<h3 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudzNjc2Nob29sLmNuL3drc3ByaW5n\">https://www.w3cschool.cn/wkspring</span></li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "JAVA学习路线",
                "进阶篇",
                "java",
                "Spring"
            ]
        },
        {
            "id": "https://www.chinmoku.cc/computer-science/java-learning-path/5-framework/docker-tutorial/",
            "url": "https://www.chinmoku.cc/computer-science/java-learning-path/5-framework/docker-tutorial/",
            "title": "给，你要的 Docker 详细教程",
            "date_published": "2021-08-10T13:40:36.000Z",
            "content_html": "<div class=\"note info\">\n<p>Docker 是一个用于开发、发布和运行应用程序的开放平台，它能够使您将引用程序与基础设施分离开来，以实现快速交付。使用 Docker，您可以使用与管理您的应用程序相同的方式管理您的基础设施。通过利用 Docker 快速发布、测试及部署代码的方法，您可以显著地减少编写代码和在生产环境中运行代码之间的延迟。</p>\n</div>\n<h3 id=\"docker-概述\"><a class=\"anchor\" href=\"#docker-概述\">#</a> Docker 概述</h3>\n<h4 id=\"docker-平台\"><a class=\"anchor\" href=\"#docker-平台\">#</a> Docker 平台</h4>\n<p>Docker 提供了在一个被称之为  <code>容器</code>  的松散隔离的环境中进行打包和运行程序的能力。这种隔离性和安全性使您能够在同一台给定的主机上同时运行多个容器。所有的容器都是轻量级的，并且包含了应用程序运行所需要的一切，因此您不需要再依赖于当前主机所安装的内容。</p>\n<h4 id=\"docker-可以做什么\"><a class=\"anchor\" href=\"#docker-可以做什么\">#</a> Docker 可以做什么</h4>\n<ol>\n<li>\n<p>快速、一致的交付应用程序。</p>\n<p>Docker 适合持续集成和持续交付（CI/CD）工作流。</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/34056f83461b2667fefe304d915170211628335468.png\" alt=\"DevOps能力环\" /></p>\n<blockquote>\n<p>关于  <code>CI/CD</code>  ：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmVkaGF0LmNvbS96aC90b3BpY3MvZGV2b3BzL3doYXQtaXMtY2ktY2Q=\">https://www.redhat.com/zh/topics/devops/what-is-ci-cd</span></p>\n<p>关于  <code>DevOps</code>  ：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9kZXZvcHMvMjYxMzAyOQ==\">https://baike.baidu.com/item/devops/2613029</span></p>\n</blockquote>\n</li>\n<li>\n<p>响应式部署和扩展。</p>\n<p>Docker 基于容器的平台允许高度可移植的工作负载。Docker 容器可以在开发人员的本地笔记本电脑、数据中心的物理或虚拟机、云提供商或混合环境中运行。</p>\n<p>Docker 的可移植性和轻量级特性还使动态管理工作负载、根据业务需求几乎实时地扩展或拆除应用程序和服务变得容易。</p>\n</li>\n<li>\n<p>在相同的硬件环境上运行更多工作负载。</p>\n<p>Docker 非常适合高密度环境以及需要以更少资源完成更多任务的中小型部署。</p>\n</li>\n</ol>\n<blockquote>\n<p>Docker 理念是将应用及依赖包打包到一个可移植的容器中，可发布到任意 Linux 发行版 Docker 引擎上。使用沙箱机制运行程序，程序之间相互隔离。</p>\n</blockquote>\n<h4 id=\"docker-体系结构\"><a class=\"anchor\" href=\"#docker-体系结构\">#</a> Docker 体系结构</h4>\n<p>Docker 使用  <code>客户端 - 服务器</code>  的架构模式， Docker 客户端与 Docker 守护进程进行对话，后者负责构建、运行和分发 Docker 容器的繁重工作。它们既可以在同一系统上运行，也可以远程建立连接。客户端和守护进程之间使用  <code>REST API</code>  、 UNIX 套接字或网络接口进行通信。 Docker 体系结构如下图所示：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/b595b80b1dc39db2af4ffd6f0e8e8f551628335478.svg+xml\" alt=\"Docker体系结构示意图\" /></p>\n<h5 id=\"docker-守护进程\"><a class=\"anchor\" href=\"#docker-守护进程\">#</a> Docker 守护进程</h5>\n<p>Docker 守护进程（  <code>dockerd</code>  ）侦听 Docker API 的请求并管理 Docker 对象，如镜像、容器、网络和卷。守护进程还可以与其他守护进程进行通信以管理 Docker 服务。</p>\n<h5 id=\"docker-客户端\"><a class=\"anchor\" href=\"#docker-客户端\">#</a> Docker 客户端</h5>\n<p>Docker 客户端 (  <code>docker</code>  ) 是许多 Docker 用户与 Docker 进行交互的主要方式。当用户发起  <code>docker run</code>  等命令时，客户端会使用  <code>Docker API</code>  将这些命令发送到 dockerd 并执行。一个 Docker 客户端可以与多个 dockerd 进行通信。</p>\n<h5 id=\"docker-注册表\"><a class=\"anchor\" href=\"#docker-注册表\">#</a> Docker 注册表</h5>\n<p>Docker Hub 是 Docker 镜像的公共注册中心， Docker 默认配置是从 Docker Hub 上查找镜像，您也可以根据需要配置自己的私有注册表。</p>\n<p>当使用  <code>docker pull</code>  或  <code>docker run</code>  命令时，您所需要的镜像将从配置的注册表中提取。当使用  <code>dcoker push</code>  命令时，您的镜像会被推送到您配置的注册表中。</p>\n<blockquote>\n<p>Docker 注册表工作原理与 Git 相似。</p>\n</blockquote>\n<h5 id=\"docker-对象\"><a class=\"anchor\" href=\"#docker-对象\">#</a> Docker 对象</h5>\n<ol>\n<li>\n<p>镜像（ <code>Image</code> ）</p>\n<p>镜像是用于创建 Docker 容器指令的 <strong>只读模板</strong> 。通常，一个镜像会基于另一个镜像，例如，您可以构建一个基于 ubuntu 镜像的镜像，并安装 Apache Web 服务器和您的引用程序，以及您的应用程序所需要的相关环境和配置详细信息。</p>\n<p>在构建自己的镜像时，您需要使用简单的语法创建一个  <code>Dockerfile</code>  ，用于定义创建和运行镜像所需要的步骤。Dockerfile 中的每条指令都会在镜像中创建一个层（ <code>layer</code> ）。当对镜像进行重建时，只会重建被更改的层，而非所有。这种虚拟化技术及其模式，使得镜像轻量而小巧且易于部署。</p>\n</li>\n<li>\n<p>容器（ <code>Container</code> ）</p>\n<p>容器是镜像的可运行实例。您可以使用 Docker API 或  <code>CLI</code>  进行创建、启动、停止、移动或删除容器。也可以将容器连接到一个或多个网络，以为其附加存储，甚至可以根据当前的状态创建新的镜像。</p>\n<p>默认情况下，一个容器与其他容器，及其自身所在的主机是相对隔离的。</p>\n<p>命令示例：docker run</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 使用 docker 运行一个 ubuntu 容器，以交互的方式添加到本地命令行会话，并运行 /bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker run -i -t ubuntu /bin/bash</pre></td></tr></table></figure><p>运行该命令时，将发生以下情况：</p>\n<ol>\n<li>\n<p>如果当前主机本地没有该镜像， Docker 会从配置的注册表中进行提取，这一步骤等同于  <code>docker pull ubuntu</code>  。</p>\n</li>\n<li>\n<p>Docker 会创建一个新的容器，这一步骤等同于  <code>docker container create</code>  。</p>\n</li>\n<li>\n<p>Docker 为容器分配一个读写文件系统，作为它的最后一层。这允许正在运行的容器在其本地文件系统中创建或修改文件和目录。</p>\n</li>\n<li>\n<p>Docker 创建一个网络接口来将容器连接到默认网络，其中包括为容器分配 IP 地址。默认情况下，容器可以使用主机的网络连接连接到外部网络。</p>\n</li>\n<li>\n<p>Docker 启动容器并执行  <code>/bin/bash</code>  。由于容器以交互方式运行并附加到您的终端（由于  <code>-i</code>  和  <code>-t</code>  标志），您可以在输出记录到终端时使用键盘提供输入。</p>\n<blockquote>\n<p>docker 中必须保持至少一个进程运行，否则容器会自动退出。这里在启动时指定启动了  <code>/bin/bash</code>  进程。</p>\n</blockquote>\n</li>\n<li>\n<p>当输入  <code>exit</code>  以终止  <code>/bin/bash</code>  命令时，容器会停止，但不会被移除。您可以重新启动或删除它。</p>\n</li>\n</ol>\n</li>\n<li>\n<p>仓库（ <code>Repository</code> ）</p>\n<p>Docker 仓库与代码仓库类似，所不同的是它用于集中存放镜像。Docker 仓库存放于 Docker 注册表中，通常情况下，注册表中会有多个仓库，而仓库中则存放一类镜像，每个镜像利用 tag 进行区分，比如 Ubuntu 仓库中存放有多个版本的 Ubuntu 镜像。</p>\n</li>\n</ol>\n<h4 id=\"底层技术支持\"><a class=\"anchor\" href=\"#底层技术支持\">#</a> 底层技术支持</h4>\n<p>Docker 是使用  <code>Golang</code>  编写的，并利用 Liunx 内核的几个特征来提供其功能， Docker 使用一种被称为  <code>namespaces</code>  的技术来提供隔离的工作空间，这种工作空间即被称为容器。当运行一个容器时， Docker 会为该容器创建一组命名空间。</p>\n<p>这些命名空间提供了一层隔离。容器的每个方面都在单独的命名空间中运行，并且其访问权限仅限于该命名空间。</p>\n<h3 id=\"docker-安装\"><a class=\"anchor\" href=\"#docker-安装\">#</a> Docker 安装</h3>\n<blockquote>\n<p>警告：切勿在没有配置 Docker YUM 源的情况下直接使用 yum 命令安装 Docker 。</p>\n</blockquote>\n<h4 id=\"系统要求\"><a class=\"anchor\" href=\"#系统要求\">#</a> 系统要求</h4>\n<p>Docker 支持 64 位版本 CentOS 7/8，并且要求内核版本不低于 3.10。 CentOS 7 满足最低内核的要求，但由于内核版本比较低，部分功能（如  <code>overlay2</code>  存储层驱动）无法使用，并且部分功能可能不太稳定。</p>\n<blockquote>\n<p>查看 CentOS 版本：  <code>cat /etc/redhat-release</code>  或  <code>cat /etc/os-release</code></p>\n</blockquote>\n<h4 id=\"卸载旧版本\"><a class=\"anchor\" href=\"#卸载旧版本\">#</a> 卸载旧版本</h4>\n<p>旧版本的 Docker 称为 docker 或者  <code>docker-engine</code> ，如果安装了这些，请卸载它们以及相关的依赖项：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre><span class=\"token function\">sudo</span> yum remove docker <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre>            docker-client <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre>            docker-client-latest <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre>            docker-common <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre>            docker-latest <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"\"></td><td><pre>            docker-latest-logrotate <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre>            docker-logrotate <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"\"></td><td><pre>            docker-engine</pre></td></tr></table></figure><h4 id=\"使用-yum-安装\"><a class=\"anchor\" href=\"#使用-yum-安装\">#</a> 使用 yum 安装</h4>\n<p>执行以下命令安装依赖包：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> -y yum-utils</pre></td></tr></table></figure><p>执行以下命令设置  <code>yum</code>  软件源：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 阿里镜像源（国内推荐）</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre><span class=\"token function\">sudo</span> yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># Docker 官方镜像源</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span></pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 测试版本 Docker</span></pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># sudo yum-config-manager --enable docker-ce-test</span></pre></td></tr></table></figure><h4 id=\"安装-docker\"><a class=\"anchor\" href=\"#安装-docker\">#</a> 安装 Docker</h4>\n<p>更新  <code>yum</code>  软件源缓存，并安装  <code>docker-ce</code>  。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 更新 yum 软件包索引</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>yum makecache fast</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># docker-ce 指的是社区版</span></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> docker-ce docker-ce-cli containerd.io</pre></td></tr></table></figure><blockquote>\n<p>注：使用阿里云服务器的在这里可能会有些坑。</p>\n</blockquote>\n<h4 id=\"启动-docker\"><a class=\"anchor\" href=\"#启动-docker\">#</a> 启动 Docker</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 设置 docker 开机启动</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre><span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> docker</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre><span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> containerd</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 启动 docker</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre><span class=\"token function\">sudo</span> systemctl start docker</pre></td></tr></table></figure><p>如需禁用开机启动</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre><span class=\"token function\">sudo</span> systemctl disable docker</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre><span class=\"token function\">sudo</span> systemctl disable containerd</pre></td></tr></table></figure><h4 id=\"建立-docker-用户组\"><a class=\"anchor\" href=\"#建立-docker-用户组\">#</a> 建立 Docker 用户组</h4>\n<p>默认情况下，  <code>docker</code>  命令会使用  <code>Unix</code>  套接字与 Docker 引擎通讯。而只有  <code>root</code>  用户和  <code>docker</code>  组的用户才可以访问 Docker 引擎的 Unix socket 。出于安全考虑，一般 Linux 系统上不会直接使用  <code>root</code>  用户。因此，更好地做法是将需要使用  <code>docker</code>  的用户加入  <code>docker</code>  用户组。</p>\n<p>建立  <code>docker</code>  组：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">groupadd</span> docker</pre></td></tr></table></figure><p>将当前用户加入  <code>docker</code>  组：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">usermod</span> -aG docker <span class=\"token environment constant\">$USER</span></pre></td></tr></table></figure><h4 id=\"测试-docker-安装\"><a class=\"anchor\" href=\"#测试-docker-安装\">#</a> 测试 Docker 安装</h4>\n<ol>\n<li>\n<p>启动服务</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre><span class=\"token function\">service</span> docker start</pre></td></tr></table></figure></li>\n<li>\n<p>查看 docker 版本</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker version</pre></td></tr></table></figure></li>\n<li>\n<p>拉取测试镜像</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker run --rm hello-world <span class=\"token comment\"># --rm 启动成功后就删掉</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre>Unable to <span class=\"token function\">find</span> image <span class=\"token string\">'hello-world:latest'</span> locally</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre>latest: Pulling from library/hello-world</pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre>b8dfde127a29: Pull complete </pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"\"></td><td><pre>Digest: sha256:df5f5184104426b65967e016ff2ac0bfcd44ad7899ca3bbcf8e44e4461491a9e</pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre>Status: Downloaded newer image <span class=\"token keyword\">for</span> hello-world:latest</pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"\"></td><td><pre>Hello from Docker<span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"10\"></td><td data-command=\"\"></td><td><pre>This message shows that your installation appears to be working correctly.</pre></td></tr><tr><td data-num=\"11\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td data-command=\"\"></td><td><pre>To generate this message, Docker took the following steps:</pre></td></tr><tr><td data-num=\"13\"></td><td data-command=\"\"></td><td><pre> <span class=\"token number\">1</span>. The Docker client contacted the Docker daemon.</pre></td></tr><tr><td data-num=\"14\"></td><td data-command=\"\"></td><td><pre> <span class=\"token number\">2</span>. The Docker daemon pulled the <span class=\"token string\">\"hello-world\"</span> image from the Docker Hub.</pre></td></tr><tr><td data-num=\"15\"></td><td data-command=\"\"></td><td><pre>    <span class=\"token punctuation\">(</span>amd64<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td data-command=\"\"></td><td><pre> <span class=\"token number\">3</span>. The Docker daemon created a new container from that image <span class=\"token function\">which</span> runs the</pre></td></tr><tr><td data-num=\"17\"></td><td data-command=\"\"></td><td><pre>    executable that produces the output you are currently reading.</pre></td></tr><tr><td data-num=\"18\"></td><td data-command=\"\"></td><td><pre> <span class=\"token number\">4</span>. The Docker daemon streamed that output to the Docker client, <span class=\"token function\">which</span> sent it</pre></td></tr><tr><td data-num=\"19\"></td><td data-command=\"\"></td><td><pre>    to your terminal.</pre></td></tr><tr><td data-num=\"20\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td data-command=\"\"></td><td><pre>To try something <span class=\"token function\">more</span> ambitious, you can run an Ubuntu container with:</pre></td></tr><tr><td data-num=\"22\"></td><td data-command=\"\"></td><td><pre> $ docker run -it ubuntu <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"23\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td data-command=\"\"></td><td><pre>Share images, automate workflows, and <span class=\"token function\">more</span> with a <span class=\"token function\">free</span> Docker ID:</pre></td></tr><tr><td data-num=\"25\"></td><td data-command=\"\"></td><td><pre> https://hub.docker.com/</pre></td></tr><tr><td data-num=\"26\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td data-command=\"\"></td><td><pre>For <span class=\"token function\">more</span> examples and ideas, visit:</pre></td></tr><tr><td data-num=\"28\"></td><td data-command=\"\"></td><td><pre> https://docs.docker.com/get-started/</pre></td></tr></table></figure><p>如果正常输出如上信息，则表示 docker 已安装成功。</p>\n<blockquote>\n<p>使用 docker 命令获取镜像时，默认会先从本地进行查找，如果本地不存在，则会从配置的镜像源中下载。</p>\n</blockquote>\n</li>\n<li>\n<p>查看本地镜像</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker images</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre>REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre>hello-world   latest    d1165f221234   <span class=\"token number\">5</span> months ago   <span class=\"token number\">13</span>.3kB</pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"配置镜像加速\"><a class=\"anchor\" href=\"#配置镜像加速\">#</a> 配置镜像加速</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 创建并打开 daemon.json 文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre><span class=\"token function\">vi</span> /etc/docker/daemon.json</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 写入内容</span></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token string\">\"registry-mirrors\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"您的镜像地址\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 保存退出</span></pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 重启</span></pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre><span class=\"token function\">sudo</span> systemctl daemon-reload</pre></td></tr><tr><td data-num=\"10\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 重启 docker</span></pre></td></tr><tr><td data-num=\"11\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre><span class=\"token function\">sudo</span> systemctl restart docker</pre></td></tr></table></figure><p>如何获取自己的镜像地址？</p>\n<ol>\n<li>阿里云\n<ul>\n<li>登录阿里云控制台。</li>\n<li>搜索并进入  <code>容器镜像服务</code>  。</li>\n<li>找到  <code>镜像工具</code>  /  <code>镜像加速器</code>  即可获取到唯一的镜像地址。</li>\n</ul>\n</li>\n<li>华为云\n<ul>\n<li>登录华为云控制台。</li>\n<li>搜索并进入  <code>容器镜像服务</code>  。</li>\n<li>找到  <code>镜像资源</code>  /  <code>镜像中心</code>  并添加  <code>镜像加速器</code>  即可获取到唯一的镜像地址。</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>获取其余服务器商提供的镜像加速器方式均相似。</p>\n</blockquote>\n<h3 id=\"卸载-docker\"><a class=\"anchor\" href=\"#卸载-docker\">#</a> 卸载 Docker</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 卸载依赖</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre><span class=\"token function\">sudo</span> yum remove docker-ce docker-ce-cli containerd.io</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 删除目录</span></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">rm</span> -rf /var/lib/docker</pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">rm</span> -rf /var/lib/containerd</pre></td></tr></table></figure><h3 id=\"docker-启动流程及原理\"><a class=\"anchor\" href=\"#docker-启动流程及原理\">#</a> Docker 启动流程及原理</h3>\n<h4 id=\"docker-启动流程\"><a class=\"anchor\" href=\"#docker-启动流程\">#</a> Docker 启动流程</h4>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/8a14ba52293bd7cdbf600968ea481e551628602757.png\" alt=\"Docker启动流程图\" /></p>\n<h4 id=\"docker-vs-虚拟机\"><a class=\"anchor\" href=\"#docker-vs-虚拟机\">#</a> Docker VS 虚拟机</h4>\n<p>Docker 有着比虚拟机更少的抽象层，且 Docker 容器在 Linux 本机上运行，它与其他容器共享主机的内核，因此在新建一个容器时， Docker 并不需要像虚拟机一样重新加载一个操作系统的内核，避免了很多引导操作。</p>\n<p>而虚拟机（VM）则是运行一个完整的 “Guest 操作系统”，通过虚拟机监控程序对主机资源进行虚拟访问。一般来说，虚拟机除了应用程序逻辑所消耗的开销之外，还会产生很多开销。</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/e781c900e152e279625ea9056b299f661628512294.png\" alt=\"Docker VS 虚拟机\" /></p>\n<h3 id=\"docker-常用命令\"><a class=\"anchor\" href=\"#docker-常用命令\">#</a> Docker 常用命令</h3>\n<h4 id=\"帮助命令\"><a class=\"anchor\" href=\"#帮助命令\">#</a> 帮助命令</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 显示 docker 版本信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>$ docker version</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 显示 docker 详细信息</span></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>$ docker info</pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 查看 docker 状态</span></pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>$ docker stats</pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 帮助命令</span></pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>$ docker xxx --help</pre></td></tr></table></figure><p><img data-src=\"https://img.xfc-exclave.com/2021/08/681651c6f99d3f25184a775dc8ee56bb1628602735.jpeg\" alt=\"Docker命令图表\" /></p>\n<blockquote>\n<p>Docker 命令行参考文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vcmVmZXJlbmNl\">https://docs.docker.com/reference</span></p>\n</blockquote>\n<h4 id=\"镜像命令\"><a class=\"anchor\" href=\"#镜像命令\">#</a> 镜像命令</h4>\n<ol>\n<li>\n<p>docker images</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker images <span class=\"token comment\"># 查看镜像</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre>REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre>hello-world   latest    d1165f221234   <span class=\"token number\">5</span> months ago   <span class=\"token number\">13</span>.3kB</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># REPOSITORY: 镜像的仓库源</span></pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># TAG: 镜像的标签</span></pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># IMAGE ID: 镜像 ID</span></pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># CREATED: 创建时间</span></pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># SIZE: 镜像大小</span></pre></td></tr><tr><td data-num=\"10\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker images -a <span class=\"token comment\"># -all 列出所有镜像</span></pre></td></tr><tr><td data-num=\"12\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker images -q <span class=\"token comment\"># -quiet 仅列出镜像的 ID</span></pre></td></tr><tr><td data-num=\"13\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker images -aq <span class=\"token comment\"># 组合使用</span></pre></td></tr></table></figure></li>\n<li>\n<p>docker search</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker search mysql <span class=\"token comment\"># 搜索 mysql 镜像</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker search mysql --filter<span class=\"token operator\">=</span>STARS<span class=\"token operator\">=</span><span class=\"token number\">3000</span> <span class=\"token comment\"># 过滤：过滤 STARS 大于 3000 的 mysql 镜像</span></pre></td></tr></table></figure></li>\n<li>\n<p>docker pull</p>\n<blockquote>\n<p>docker 镜像既可使用命令拉取，也可以前往 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=\">Docker Hub</span> 进行下载。</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker pull mysql <span class=\"token comment\"># 拉取 mysql 镜像</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre>Using default tag: latest <span class=\"token comment\"># 不指定 tag 时默认下载最新版本</span></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre>latest: Pulling from library/mysql</pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre>45b42c59be33: Pull complete <span class=\"token comment\"># 分层下载（分层下载会复用已下载的 layer，即已存在的 layer 不会重复下载）</span></pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"\"></td><td><pre>b4f790bd91da: Pull complete </pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre>325ae51788e9: Pull complete </pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"\"></td><td><pre>adcb9439d751: Pull complete </pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"\"></td><td><pre>174c7fe16c78: Pull complete </pre></td></tr><tr><td data-num=\"10\"></td><td data-command=\"\"></td><td><pre>698058ef136c: Pull complete </pre></td></tr><tr><td data-num=\"11\"></td><td data-command=\"\"></td><td><pre>4690143a669e: Pull complete </pre></td></tr><tr><td data-num=\"12\"></td><td data-command=\"\"></td><td><pre>f7599a246fd6: Pull complete </pre></td></tr><tr><td data-num=\"13\"></td><td data-command=\"\"></td><td><pre>35a55bf0c196: Pull complete </pre></td></tr><tr><td data-num=\"14\"></td><td data-command=\"\"></td><td><pre>790ac54f4c47: Pull complete </pre></td></tr><tr><td data-num=\"15\"></td><td data-command=\"\"></td><td><pre>b0ddd5d1b543: Pull complete </pre></td></tr><tr><td data-num=\"16\"></td><td data-command=\"\"></td><td><pre>1aefd67cb33d: Pull complete </pre></td></tr><tr><td data-num=\"17\"></td><td data-command=\"\"></td><td><pre>Digest: sha256:03306a1f248727ec979f61424c5fb5150e2c5fd2436f2561c5259b1258d6063c <span class=\"token comment\"># 签名，用于防伪</span></pre></td></tr><tr><td data-num=\"18\"></td><td data-command=\"\"></td><td><pre>Status: Downloaded newer image <span class=\"token keyword\">for</span> mysql:latest</pre></td></tr><tr><td data-num=\"19\"></td><td data-command=\"\"></td><td><pre>docker.io/library/mysql:latest <span class=\"token comment\"># 真实地址</span></pre></td></tr><tr><td data-num=\"20\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># docker pull mysql</span></pre></td></tr><tr><td data-num=\"21\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 等价于</span></pre></td></tr><tr><td data-num=\"22\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># docker pull docker.io/library/mysql:latest</span></pre></td></tr><tr><td data-num=\"23\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker pull mysql:5.7 <span class=\"token comment\"># 指定版本拉取镜像</span></pre></td></tr></table></figure></li>\n<li>\n<p>docker rmi</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker rmi -f d1165f221234 <span class=\"token comment\"># docker remove image: 删除指定的镜像</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker rmi -f d1165f221234 8457e9155715 <span class=\"token comment\"># 删除多个镜像</span></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker rmi -f <span class=\"token variable\"><span class=\"token variable\">$(</span>docker images -aq<span class=\"token variable\">)</span></span> <span class=\"token comment\"># 删除所有（递归删除）</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"容器命令\"><a class=\"anchor\" href=\"#容器命令\">#</a> 容器命令</h4>\n<p>拉取一个测试镜像。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker pull centos</pre></td></tr></table></figure><ol>\n<li>\n<p>创建并启动容器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker run <span class=\"token punctuation\">[</span>可选参数<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>image<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 新建并启动容器</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker run -it centos /bin/bash <span class=\"token comment\"># 启动并以交互的方式进入容器</span></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 后台以端口 80 启动 centos，并命名为 centos01，并映射到外部端口 3344</span></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker run -d --name centos01 -p <span class=\"token number\">3344</span>:80</pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 进入容器</span></pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker run -it centos /bin/bash</pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"[root@01939a1ac7cd /] $\"></td><td><pre><span class=\"token punctuation\">[</span>root@01939a1ac7cd /<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"\"></td><td><pre>bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</pre></td></tr></table></figure></li>\n<li>\n<p>退出容器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre><span class=\"token builtin class-name\">exit</span> <span class=\"token comment\"># 退出容器（停止并退出）</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># ctrl + P + Q 退出容器（退出但容器不停止）</span></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker run -it centos /bin/bash</pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"[root@286b1fb8e21d /]# [root@xxxxxxxx /]#\"></td><td><pre>docker <span class=\"token function\">ps</span></pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"\"></td><td><pre>CONTAINER ID   IMAGE     COMMAND       CREATED              STATUS</pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre>286b1fb8e21d   centos    <span class=\"token string\">\"/bin/bash\"</span>   About a minute ago   Up About a minute</pre></td></tr></table></figure></li>\n<li>\n<p>查看运行的容器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker <span class=\"token function\">ps</span> <span class=\"token comment\"># 查看正在运行的容器</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker <span class=\"token function\">ps</span> -a <span class=\"token comment\"># 查看所有运行的容器（包括曾经运行过的）</span></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker <span class=\"token function\">ps</span> -n<span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token comment\"># 显示运行过的 2 个容器</span></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker <span class=\"token function\">ps</span> -aq <span class=\"token comment\"># 显示当前正在运行的容器 ID</span></pre></td></tr></table></figure></li>\n<li>\n<p>删除容器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker <span class=\"token function\">rm</span> <span class=\"token punctuation\">[</span>容器ID<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 移除指定的容器（不能移除正在运行的容器）</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker <span class=\"token function\">rm</span> -f <span class=\"token variable\"><span class=\"token variable\">$(</span>docker <span class=\"token function\">ps</span> -aq<span class=\"token variable\">)</span></span> <span class=\"token comment\"># 移除所有的容器（-f 可删除正在运行的容器）</span></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker <span class=\"token function\">ps</span> -a -q<span class=\"token operator\">|</span><span class=\"token function\">xargs</span> docker <span class=\"token function\">rm</span> <span class=\"token comment\"># 移除所有的容器</span></pre></td></tr></table></figure></li>\n<li>\n<p>启动和停止容器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker start <span class=\"token punctuation\">[</span>容器ID<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 启动容器</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker restart <span class=\"token punctuation\">[</span>容器ID<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 重启容器</span></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker stop <span class=\"token punctuation\">[</span>容器ID<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 停止容器</span></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker <span class=\"token function\">kill</span> <span class=\"token punctuation\">[</span>容器ID<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 强制停止容器</span></pre></td></tr></table></figure></li>\n<li>\n<p>后台启动</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker run -d centos <span class=\"token comment\"># 后台启动 centos</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 注：docker 必须保证至少一个运行的进程，否则会自动停止</span></pre></td></tr></table></figure></li>\n<li>\n<p>查看日志</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker logs -tf --tail <span class=\"token number\">10</span> 8b1c31f83ff8 <span class=\"token comment\"># 查看 10 条日志</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># -tf 显示时间戳（格式化显示）</span></pre></td></tr></table></figure></li>\n<li>\n<p>查看容器内部的进程</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker <span class=\"token function\">top</span> 8b1c31f83ff8 <span class=\"token comment\"># 查看指定容器内部运行的进程</span></pre></td></tr></table></figure></li>\n<li>\n<p>查看镜像的元数据</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker inspect 8b1c31f83ff8 <span class=\"token comment\"># 查看指定容器的所有信息</span></pre></td></tr></table></figure></li>\n<li>\n<p>进入当前正在运行的容器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker <span class=\"token builtin class-name\">exec</span> -it 8b1c31f83ff8 /bin/bash <span class=\"token comment\"># 进入指定的容器并启动命令行（进入后开启一个新的终端）</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker attach 8b1c31f83ff8 <span class=\"token comment\"># 进入指定容器（不会启动新的进程）</span></pre></td></tr></table></figure></li>\n<li>\n<p>从容器内拷贝文件到主机</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker <span class=\"token function\">cp</span> <span class=\"token punctuation\">[</span>容器ID<span class=\"token punctuation\">]</span>:<span class=\"token punctuation\">[</span>路径<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>路径<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 将容器内指定路径的文件拷贝到主机</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker <span class=\"token function\">cp</span> 8b1c31f83ff8:/home/test.java /home <span class=\"token comment\"># 将容器内的 /home/test.java 文件拷贝到主机 /home 目录下</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"可视化工具-portainer\"><a class=\"anchor\" href=\"#可视化工具-portainer\">#</a> 可视化工具 Portainer</h4>\n<blockquote>\n<p>Portainer 官方网站：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucG9ydGFpbmVyLmlv\">https://www.portainer.io</span></p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker run -d -p <span class=\"token number\">8088</span>:9000 -v /root/portainer:/data -v /var/run/docker.sock:/var/run/docker.sock --name dev-portainer portainer/portainer</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 查看是否启动成功</span></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre><span class=\"token function\">curl</span> localhost:8088</pre></td></tr></table></figure><p>此时从外部浏览器访问该主机的对应端口，可以看到如下界面：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/a8ad2462956f5a99deeb70cfca98e0ff1628602584.png\" alt=\"Portainer初始页面\" /></p>\n<p>完善信息后创建用户后即可登录。</p>\n<blockquote>\n<p>注：如果是云服务器，需要确认在安全组规则中是否开放对应的端口。这里不推荐使用可视化工具，如有兴趣，登录成功后自行探索。</p>\n</blockquote>\n<h3 id=\"docker-镜像详解\"><a class=\"anchor\" href=\"#docker-镜像详解\">#</a> Docker 镜像详解</h3>\n<h4 id=\"镜像和容器\"><a class=\"anchor\" href=\"#镜像和容器\">#</a> 镜像和容器</h4>\n<p>镜像由多个层组成，每层叠加之后，从外部看来就如一个独立的对象。镜像内部是一个精简的操作系统（OS），同时还包含应用运行所必须的文件和依赖包。因为容器的设计初衷就是快速和小巧，所以镜像通常都比较小。</p>\n<p>镜像就像停止运行的容器（类），但实际上，它可以停止某个容器的运行，并从中创建新的镜像。在该前提下，镜像可以理解为一种构建时（build-time）结构，而容器可以理解为一种运行时（run-time）结构，如下图所示。</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/ae6291c5590378207dc3680076fc89f61628601022.gif\" alt=\"镜像和容器间的关系\" /></p>\n<p>我们通常使用  <code>docker container run</code>  和  <code>docker service create</code>  命令从某个镜像启动一个或多个容器，一旦容器从镜像启动后，二者之间就变成了互相依赖的关系，并且在镜像上启动的容器全部停止之前，镜像是无法被删除的。尝试删除镜像而不停止或销毁使用它的容器，会导致出错。</p>\n<h4 id=\"docker-镜像加载原理\"><a class=\"anchor\" href=\"#docker-镜像加载原理\">#</a> Docker 镜像加载原理</h4>\n<h5 id=\"unionfs联合文件系统\"><a class=\"anchor\" href=\"#unionfs联合文件系统\">#</a> UnionFS（联合文件系统）</h5>\n<p>UnionFS（联合文件系统）： UnionFS 是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下（unite several directories into a single virtual filesystem）。 UnionFS 是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。<br />\n<strong>特性：</strong> 一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p>\n<h5 id=\"docker-镜像加载原理-2\"><a class=\"anchor\" href=\"#docker-镜像加载原理-2\">#</a> Docker 镜像加载原理</h5>\n<p>Docker 的镜像实际上是由一层一层的文件系统组成的，这种层级的文件系统（UFS）主要包含  <code>bootleader</code>  和  <code>kernel</code>  ， bootleader 主要是引导加载 kernel ， Linux 刚启动会加载 bootfs 文件系统，在 Docker 镜像的最底层是 bootfs 。这一层与我们典型的 Linux/Unix 系统是一样的，包含 boot 加载器和内核。当 boot 加载完成之后，整个内核就都在内存中了，此时内存的使用权已由 bootfs 转交给内核，此时系统也会卸载 bootfs 。</p>\n<p>roofts（root file system）就是各种不同的操作系统发行版，比如 Ubuntu 、 Centos 等。</p>\n<p>对于个精简的 OS ， rootfs 可以很小，只需要包合最基本的命令，工具和程序库就可以了，因为底层直接用宿主机的内核，自己只需要提供 rootfs 就可以了。</p>\n<p>由此可见对于不同的 Linux 发行版， boots 基本是一致的， rootfs 会有差別，因此不同的发行版可以公用 bootfs 。</p>\n<h5 id=\"镜像的分层结构\"><a class=\"anchor\" href=\"#镜像的分层结构\">#</a> 镜像的分层结构</h5>\n<p>Docker 支持通过扩展现有镜像，创建新的镜像。</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/c4c69be4310118b7eda353256d3c5a221628601033.jpeg\" alt=\"层级文件系统图示\" /></p>\n<p>事实上，所有的 Docker 镜像都起始于一个基础的镜像层，当进行修改或增加新的内容时，就会在当前镜像层之上创建新的镜像层。</p>\n<p>Docker 镜像采用这种分层结构的好处在于共享资源，多个镜像都从相同的基础层镜像创建而来， Docker 主机则只需要在磁盘上保存一份基础层镜像，同时内存中也只加载一份基础层镜像，就可以为所有容器提供服务了。</p>\n<blockquote>\n<p>Docker 通过存储引擎（新版本采用快照机制）的方式来实现镜像层堆栈，并保证多镜像层对外展示为统一的文件系统。</p>\n</blockquote>\n<p>Docker 的镜像都是只读的，而容器层则是可写的。当容器启动时，一个新的可写层被加载到镜像的顶部，它被称为容器层，在容器层之下，都是叫镜像层。</p>\n<p>当我们对容器进行添加、删除或修改等操作时，其实所作用的是通过  <code>run</code>  命令启动后生成的一个新的容器层。</p>\n<h5 id=\"提交镜像\"><a class=\"anchor\" href=\"#提交镜像\">#</a> 提交镜像</h5>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 将一个容器提交为新的镜像</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker commit -m <span class=\"token string\">'镜像描述'</span> -a <span class=\"token string\">'作者'</span> <span class=\"token punctuation\">[</span>容器ID<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>镜像名<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><blockquote>\n<p>docker 原理与 git 相似，也可以简单理解为：原镜像 + 自己的文件 = 新的镜像</p>\n</blockquote>\n<h3 id=\"容器数据卷\"><a class=\"anchor\" href=\"#容器数据卷\">#</a> 容器数据卷</h3>\n<p><code>数据卷</code>  是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p>\n<ul>\n<li>数据卷可以在容器之间共享和重用。</li>\n<li>对数据卷的修改会立马生效。</li>\n<li>对数据卷的更新，不会影响镜像。</li>\n<li>数据卷默认会一直存在，即使容器被删除。</li>\n</ul>\n<p>容器目录的挂载：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker run -it -v <span class=\"token punctuation\">[</span>宿主机目录<span class=\"token punctuation\">]</span>:<span class=\"token punctuation\">[</span>容器目录<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 使用 -v 参数实现挂载</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker run -it -v /home/ceshi:/home centos /bin/bash <span class=\"token comment\"># 将主机的 /home/ceshi 目录与容器内的目录 /home 进行挂载，挂载成功后，两个目录之间会自动进行双向同步。</span></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 指定多个 -v [宿主机目录]:[容器目录]，即可挂载多个目录。</span></pre></td></tr></table></figure><blockquote>\n<p>数据卷的使用，类似于 Linux 下对目录或文件进行 mount ，镜像中的被指定为挂载点的目录中的文件会复制到数据卷中（仅数据卷为空时会复制）。</p>\n</blockquote>\n<h4 id=\"具名挂载与匿名挂载\"><a class=\"anchor\" href=\"#具名挂载与匿名挂载\">#</a> 具名挂载与匿名挂载</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 匿名挂载，即没有指定容器内挂载目录对应的外部路径和名字</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker run -d -P --name nginx01 -v /etc/nginx nginx <span class=\"token comment\"># 使用随机端口启动 nginx，并将目录 /etc/nginx 匿名挂载。</span></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker volume <span class=\"token function\">ls</span> <span class=\"token comment\"># 查看所有数据卷信息</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 具名挂载，即没有指定容器内挂载目录对应的外部路径，但指定了数据卷名字</span></pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker run -d -P --name nginx02 -v nginx-test:/etc/nginx nginx</pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 使用 docker inspect 查看容器详情，可以看到卷挂载路径信息。</span></pre></td></tr></table></figure><p>具名和匿名挂载会将数据卷挂载到  <code>/var/lib/docker/volumes/xxx/_data</code>  目录中。</p>\n<blockquote>\n<p>匿名挂载不易识别，不建议使用。</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker run -d -P --name nginx01 -v /etc/nginx:ro nginx <span class=\"token comment\"># ro -> 只读，只能通过书主机操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker run -d -P --name nginx01 -v /etc/nginx:rw nginx <span class=\"token comment\"># rw -> 读写，默认值。</span></pre></td></tr></table></figure><h4 id=\"数据卷容器\"><a class=\"anchor\" href=\"#数据卷容器\">#</a> 数据卷容器</h4>\n<p>多个容器之间也可以通过  <code>--volunes-from</code>  挂载实现容器间数据共享。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker run -it --name docker02 --volunes-from docker01 exclave/centos</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 启动镜像 exclave/centos 并命名为 docker02，且挂载到 docker01</span></pre></td></tr></table></figure><blockquote>\n<p>容器之间配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用位置。</p>\n<p>但如果容器挂载到了本地文件系统，移除所有容器，本地信息也不会丢失。</p>\n</blockquote>\n<h3 id=\"dockerfile\"><a class=\"anchor\" href=\"#dockerfile\">#</a> DockerFile</h3>\n<h4 id=\"dockerfile-构建示例\"><a class=\"anchor\" href=\"#dockerfile-构建示例\">#</a> DockerFile 构建示例</h4>\n<p><code>Dockerfile</code>  是一个文本文件，其内包含了一条条的指令（Instruction），每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。</p>\n<p>添加数据卷除了直接通过命令进行挂载外，还可以通过 dockerFile 进行添加，操作方式如下：</p>\n<ol>\n<li>\n<p>创建一个 dockerfile 文件（名字可以随意），并在该文件中写入脚本。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FROM centos</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>VOLUME <span class=\"token punctuation\">[</span><span class=\"token string\">\"volume01\"</span>, <span class=\"token string\">\"volume02\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>CMD <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"--------------success--------------\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>CMD /bin/bash</pre></td></tr></table></figure><blockquote>\n<p>FROM: 用于指定基础镜像，定制的镜像都是基于 FROM 的镜像。</p>\n</blockquote>\n</li>\n<li>\n<p>构建镜像</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># docker build -f [脚本路径]:[镜像标签] .</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker build -f dockerfile:v3 <span class=\"token builtin class-name\">.</span></pre></td></tr></table></figure><blockquote>\n<p>注意：命令结尾有一个  <code>.</code>  ，代表着本次执行的上下文路径。</p>\n</blockquote>\n</li>\n<li>\n<p>启动构建成功后的镜像</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker run -it <span class=\"token punctuation\">[</span>镜像ID<span class=\"token punctuation\">]</span> /bin/bash</pre></td></tr></table></figure><p>启动成功后，根目录下会生成脚本中指定的挂载目录（匿名挂载）。</p>\n</li>\n</ol>\n<h4 id=\"dockerfile-构建说明\"><a class=\"anchor\" href=\"#dockerfile-构建说明\">#</a> DockerFile 构建说明</h4>\n<ul>\n<li>每个保留关键字都必须是大写。</li>\n<li>执行顺序从上至下。</li>\n<li><code>#</code>  表示注解。</li>\n<li>每一个指令都会创建提交一个新的镜像层。</li>\n</ul>\n<h4 id=\"dockerfile-指令\"><a class=\"anchor\" href=\"#dockerfile-指令\">#</a> DockerFile 指令</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FROM      <span class=\"token comment\"># 基础镜像</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>MAINTAINER  <span class=\"token comment\"># 镜像作者：姓名 + 邮箱</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>RUN       <span class=\"token comment\"># 镜像构建时需要运行的命令</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ADD       <span class=\"token comment\"># 步骤</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>WORKDIR    <span class=\"token comment\"># 镜像的工作目录</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>VOLUME     <span class=\"token comment\"># 挂载目录</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>EXPOSE     <span class=\"token comment\"># 指定暴露的端口</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>CMD       <span class=\"token comment\"># 指定容器启动时要运行的命令（只有最后一个会生效，可被替代）</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ENTRYPOINT  <span class=\"token comment\"># 与 CMD 相似，但可以追加命令</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>ONBUILD    <span class=\"token comment\"># （触发指令）</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>COPY      <span class=\"token comment\"># 类似 ADD，将文件拷贝到镜像中</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>ENV       <span class=\"token comment\"># 构建时设置环境变量</span></pre></td></tr></table></figure><blockquote>\n<p>docker history [镜像 ID] 可以查看镜像的构建过程。</p>\n<p>DockerFile 的官方命名文件为  <code>Dockerfile</code>  ，编译时不指定  <code>-f</code>  参数则会自动读取该文件。</p>\n</blockquote>\n<h4 id=\"dockerfile-步骤总结\"><a class=\"anchor\" href=\"#dockerfile-步骤总结\">#</a> DockerFile 步骤总结</h4>\n<ol>\n<li>编写一个 dockerfile 文件。</li>\n<li>docker build 构建称为一个镜像。</li>\n<li>docker run 运行镜像。</li>\n<li>docker push 发布镜像（DockerHub、阿里云镜像仓库）</li>\n</ol>\n<h4 id=\"制作-tomcat-镜像\"><a class=\"anchor\" href=\"#制作-tomcat-镜像\">#</a> 制作 Tomcat 镜像</h4>\n<ol>\n<li>\n<p>准备目录及镜像文件。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /usr</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@xxx usr] $\"></td><td><pre><span class=\"token function\">mkdir</span> soft</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root@xxx usr] $\"></td><td><pre><span class=\"token builtin class-name\">cd</span> soft</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[root@xxx soft] $\"></td><td><pre><span class=\"token function\">wget</span> https://mirrors.cnnic.cn/apache/tomcat/tomcat-9/v9.0.52/src/apache-tomcat-9.0.52-src.tar.gz</pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"[root@xxx soft] $\"></td><td><pre><span class=\"token function\">wget</span> https://download.oracle.com/otn/java/jdk/8u301-b09/d3c52aa6bfa54d3ca74e617f18309292/jdk-8u301-linux-x64.tar.gz</pre></td></tr></table></figure></li>\n<li>\n<p>创建并编辑  <code>Dockerfile</code>  文件。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx soft] $\"></td><td><pre><span class=\"token function\">vim</span> Dockerfile</pre></td></tr></table></figure><p>写入如下内容（可根据实际情况调整）：</p>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> centos</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">MAINTAINER</span> Chinmoku&lt;xfc_exclave@163.com></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">ADD</span> jdk-8u301-linux-x64.tar.gz /usr/soft/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">ADD</span> apache-tomcat-9.0.52-src.tar.gz /usr/soft/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">RUN</span> yum -y install vim</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">ENV</span> MYPATH /usr/soft</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> <span class=\"token variable\">$MYPATH</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">ENV</span> JAVA_HOME /usr/soft/jdk1.8.0_301</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">ENV</span> CLASSPATH <span class=\"token variable\">$JAVA_HOME</span>/lib/dt.jar:<span class=\"token variable\">$JAVA_HOME</span>/lib/tools.jar</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">ENV</span> CATALINA_HOME /usr/soft/apache-tomcat-9.0.52-src</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">ENV</span> CATALINA_BASH /usr/soft/apache-tomcat-9.0.52-src</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">ENV</span> PATH <span class=\"token variable\">$PATH</span>:<span class=\"token variable\">$JAVA_HOME</span>/bin;<span class=\"token variable\">$CATALINA_HOME</span>/lib;<span class=\"token variable\">$CATALINA_BASH</span>/bin</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">EXPOSE</span> 8080</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">CMD</span> mkdir /usr/soft/apache-tomcat-9.0.52-src/logs &amp;&amp; chmod -R 777 /usr/soft/apache-tomcat-9.0.52-src/bin/*.sh &amp;&amp; /usr/soft/apache-tomcat-9.0.52-src/bin/startup.sh &amp;&amp; tail -F /usr/soft/apache-tomcat-9.0.52-src/bin/logs/catalina.out</span></pre></td></tr></table></figure></li>\n<li>\n<p>构建镜像。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx soft] $\"></td><td><pre>docker build -t mytomcat <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@xxx soft] $\"></td><td><pre>docker images</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre>REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre>mytomcat     latest    93a17796c1b6   <span class=\"token number\">2</span> minutes ago   309MB</pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre>centos       latest    300e315adb2f   <span class=\"token number\">8</span> months ago    209MB</pre></td></tr></table></figure></li>\n<li>\n<p>启动容器。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx soft] $\"></td><td><pre>docker run -d -p <span class=\"token number\">9090</span>:8080 --name ChinmokuTomcat -v /home/Chinmoku/build/tomcat/test/:/usr/local/apache-tomcat-9.0.52-src/webapps/test -v /home/Chinmoku/build/tomcat/tomcatlogs/:/usr/local/apache-tomcat-9.0.52-src/logs mytomcat</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre>d7cd19e650dd71c21d293199578acd80407d04c27ff132648cddc57ff2327d99</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[root@xxx soft] $\"></td><td><pre>docker <span class=\"token function\">ps</span> <span class=\"token comment\"># 查看容器是否存在该容器</span></pre></td></tr></table></figure><p>如果容器列表中不存在，则通过查看容器日志进行问题排查：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx soft] $\"></td><td><pre>docker <span class=\"token function\">ps</span> -a <span class=\"token comment\"># 查看容器历史记录</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@xxx soft] $\"></td><td><pre>docker logs -tf --tail <span class=\"token number\">20</span> d7cd19e650dd7 <span class=\"token comment\"># 查看 20 条日志信息</span></pre></td></tr></table></figure><p>通过日志信息，分析容器启动失败或自动停止的原因（一般是 Dockerfile 文件编写错误或文件权限等问题引起的），在排查问题的过程中，您也许会反复用到以下命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx soft] $\"></td><td><pre>docker <span class=\"token function\">ps</span> -a</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@xxx soft] $\"></td><td><pre>docker logs -tf --tail <span class=\"token number\">20</span> xxx <span class=\"token comment\"># 查看日志</span></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root@xxx soft] $\"></td><td><pre>docker <span class=\"token function\">rm</span> xxx</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[root@xxx soft] $\"></td><td><pre>docker rmi -f <span class=\"token variable\"><span class=\"token variable\">$(</span>docker images -aq<span class=\"token variable\">)</span></span> <span class=\"token comment\"># 移除所有镜像</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"[root@xxx soft] $\"></td><td><pre>docker inspect xxx</pre></td></tr></table></figure></li>\n<li>\n<p>启动成功后，进入容器。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx soft] $\"></td><td><pre>docker <span class=\"token builtin class-name\">exec</span> -it d7cd19e650dd7 /bin/bash</pre></td></tr></table></figure><blockquote>\n<p>由于当前容器已存在其他活跃进程，这里使用  <code>CTRL + P + Q</code>  或  <code>exit</code>  均可退出容器。</p>\n<p>另外，在云服务器环境下，外部网络访问时，需要注意配置安全组规则。</p>\n</blockquote>\n</li>\n<li>\n<p>部署测试文件。</p>\n<p>在  <code>/webapps/test</code>  的挂载目录下创建测试文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx soft] $\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /home/Chinmoku/build/tomcat/test</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@xxx test] $\"></td><td><pre><span class=\"token function\">mkdir</span> WEB-INF</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root@xxx test] $\"></td><td><pre><span class=\"token builtin class-name\">cd</span> WEB-INF</pre></td></tr></table></figure><p>创建并编辑  <code>web.xml</code>  文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx WEB-INF] $\"></td><td><pre><span class=\"token function\">vim</span> web.xml</pre></td></tr></table></figure><p>写入如下内容：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>web-app</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://java.sun.com/xml/ns/javaee<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>web</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>WebApp_ID<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2.5<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>display-name</span><span class=\"token punctuation\">></span></span>docker-tomcat<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>display-name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>welcome-file-list</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>welcome-file</span><span class=\"token punctuation\">></span></span>index.html<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>welcome-file</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>welcome-file-list</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>web-app</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>创建并编辑  <code>index.html</code>  文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx WEB-INF] $\"></td><td><pre><span class=\"token function\">vim</span> index.html</pre></td></tr></table></figure><p>写入如下内容：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>docker:::tomcat<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>Docker built tomcat successful!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>外部浏览器访问。</p>\n</li>\n</ol>\n<h4 id=\"镜像发布\"><a class=\"anchor\" href=\"#镜像发布\">#</a> 镜像发布</h4>\n<details><summary>发布到 Docker Hub</summary><div>\n<ol>\n<li>\n<p>Docker Hub 注册账号。</p>\n</li>\n<li>\n<p>登录。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker login -u <span class=\"token punctuation\">[</span>用户名<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre>Password: ******</pre></td></tr></table></figure></li>\n<li>\n<p>提交。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker push <span class=\"token punctuation\">[</span>仓库名<span class=\"token punctuation\">]</span>/<span class=\"token punctuation\">[</span>镜像名<span class=\"token punctuation\">]</span>:<span class=\"token punctuation\">[</span>版本标签<span class=\"token punctuation\">]</span></pre></td></tr></table></figure></li>\n</ol>\n</div></details>\n<details><summary>发布到阿里云</summary><div>\n<p>参考阿里云文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZWxwLmFsaXl1bi5jb20vZG9jdW1lbnRfZGV0YWlsLzE0MzMzNi5odG1s\">https://help.aliyun.com/document_detail/143336.html</span></p>\n</div></details>\n<h3 id=\"docker-流程总结\"><a class=\"anchor\" href=\"#docker-流程总结\">#</a> Docker 流程总结</h3>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/fe3d92358148e397a84020f11c15d5011628612250.png\" alt=\"Docker流程图\" /></p>\n<h3 id=\"docker-网络\"><a class=\"anchor\" href=\"#docker-网络\">#</a> Docker 网络</h3>\n<p>容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过  <code>-P</code>  或  <code>-p</code>  参数来指定端口映射。</p>\n<p>当使用  <code>-P</code>  标记时，Docker 会随机映射一个端口到内部容器开放的网络端口。</p>\n<p><code>-p</code>  则可以指定要映射的端口，并且，在一个指定端口上只可以绑定一个容器。</p>\n<h4 id=\"docker0\"><a class=\"anchor\" href=\"#docker0\">#</a> Docker0</h4>\n<p>宿主机每启动一个 Docker 容器，就会给容器分配一个 IP 。宿主机只要安装了 docker ，就会安装一个 docker0 网卡进行桥接，这种技术被称为  <code>evth-pair</code>  技术。</p>\n<blockquote>\n<p>veth-pair 是成对出现的虚拟设备接口，它们一端连着协议栈，一端彼此相连，正因为有这个特性，它常常充当着一个桥梁，连接着各种虚拟网络设备，以此构建复杂的虚拟网络结构。</p>\n</blockquote>\n<h5 id=\"docker-的网络模式\"><a class=\"anchor\" href=\"#docker-的网络模式\">#</a> Docker 的网络模式</h5>\n<p>执行如下命令，可查看当前主机 docker 环境的网络模式信息：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker network <span class=\"token function\">ls</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre>NETWORK ID     NAME      DRIVER    SCOPE</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre>0b517709dd56   bridge    bridge    <span class=\"token builtin class-name\">local</span></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre>e49e96b5ebf4   <span class=\"token function\">host</span>      <span class=\"token function\">host</span>      <span class=\"token builtin class-name\">local</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre>963d10eff9fe   none      null      <span class=\"token builtin class-name\">local</span></pre></td></tr></table></figure><blockquote>\n<p>Docker 网桥是宿主机虚拟出来的，并不是真实存在的网络设备，外部网络是无法寻址到的，这也意味着外部网络无法通过直接 Container-IP 访问到容器。如果容器希望外部访问能够访问到，可以通过映射容器端口到宿主主机（端口映射），即 docker run 创建容器时候通过 -p 或 -P 参数来启用，访问容器的时候就通过 [宿主机 IP]:[容器端口] 访问容器。</p>\n</blockquote>\n<ol>\n<li>\n<p>host 模式</p>\n<p>配置方式：  <code>-network=host</code></p>\n<p>如果启动容器的时候使用 host 模式，那么这个容器将不会获得一个独立的 Network Namespace ，而是和宿主机共用一个 Network Namespace 。容器将不会虚拟出自己的网卡，配置自己的 IP 等，而是使用宿主机的 IP 和端口。但是，容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的。</p>\n<p>host 模式最大的优势在于网络性能比较好，但是 docker host 上已经使用的端口就不能再用了，因此网络的隔离性不好。</p>\n</li>\n<li>\n<p>container 模式</p>\n<p>配置方式：  <code>–net=container:[NAME/ID]</code></p>\n<p>这个模式指定新创建的容器和已经存在的一个容器共享一个 Network Namespace ，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。</p>\n</li>\n<li>\n<p>none 模式</p>\n<p>配置方式：  <code>–net=none</code></p>\n<p>使用 none 模式时， Docker 容器拥有自己的 Network Namespace ，但是，并不为 Docker 容器进行任何网络配置。也就是说，这个 Docker 容器没有网卡、IP、路由等信息。需要我们自己为 Docker 容器添加网卡、配置 IP 等。</p>\n<p>这种类型的网络没有办法联网，封闭的网络能很好的保证容器的安全性。</p>\n</li>\n<li>\n<p>bridge 模式</p>\n<p>配置方式：  <code>  –net=bridge</code>  （docker 默认）</p>\n<p>当 Docker 进程启动时，会在主机上创建一个名为 docker0 的虚拟网桥，此主机上启动的 Docker 容器会连接到这个虚拟网桥上。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。</p>\n<p>从 docker0 子网中分配一个 IP 给容器使用，并设置 docker0 的 IP 地址为容器的默认网关。在主机上创建一对虚拟网卡 veth-pair 设备，Docker 将 veth-pair 设备的一端放在新创建的容器中，并命名为 eth0 （容器的网卡），另一端放在主机中，以 vethxxx 这样类似的名字命名，并将这个网络设备加入到 docker0 网桥中。可以通过  <code>brctl show</code>  命令查看。</p>\n<blockquote>\n<p>使用  <code>brctl show</code>  命令需要先安装工具包：  <code>sudo yum install -y bridge-utils</code>  。</p>\n</blockquote>\n<p>bridge 模式是 docker 的默认网络模式，不写  <code>--net</code>  参数，就是 bridge 模式。使用  <code>docker run -p</code>  时， docker 实际是在 iptables 做了 DNAT 规则，实现端口转发功能。可以使用  <code>iptables -t nat -vnL</code>  查看。</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/bdbc4f6e310e8f0dc45dd214999934311629190192.png\" alt=\"Docker网络桥接\" /></p>\n</li>\n</ol>\n<h4 id=\"容器互联-link\"><a class=\"anchor\" href=\"#容器互联-link\">#</a> 容器互联：--link</h4>\n<p>在不同的 docker 容器之间，通过如下方式使用  <code>ping</code>  命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker <span class=\"token builtin class-name\">exec</span> -it tomcat02 <span class=\"token function\">ping</span> tomcat01 <span class=\"token comment\"># default</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 假定 tomcat01 和 tomcat02 在启动时均未指定 --link 参数</span></pre></td></tr></table></figure><p>这时，两个容器之间是无法 ping 通的。</p>\n<p>但当容器启动时，可以指定  <code>--link</code>  参数，即可实现不同容器之间通过容器名进行互联，示例如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 运行一个 tomcat03 容器并连接到 tomcat02</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker run -d -P --name tomcat03 --link tomcat02 tomcat</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 再次执行 ping 命令</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker <span class=\"token builtin class-name\">exec</span> -it tomcat03 <span class=\"token function\">ping</span> tomcat02 <span class=\"token comment\"># success</span></pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker <span class=\"token builtin class-name\">exec</span> -it tomcat02 <span class=\"token function\">ping</span> tomcat03 <span class=\"token comment\"># default</span></pre></td></tr></table></figure><p>通过示例，可以看出使用  <code>--link</code>  参数可以<strong>单向</strong>打通容器之间的网络。</p>\n<p>实际上，  <code>--link</code>  参数的本质就是在  <code>/etc/hosts</code>  文件中添加映射。</p>\n<blockquote>\n<p>现在 docker 已经不再推荐使用 --link 来进行容器之间的互联，而是推荐使用自定义网络。</p>\n</blockquote>\n<h4 id=\"容器互联自定义网络\"><a class=\"anchor\" href=\"#容器互联自定义网络\">#</a> 容器互联：自定义网络</h4>\n<p>通过  <code>docker network create</code>  命令即可创建自定义网络。</p>\n<p>当使用  <code>docker run</code>  命令启动容器时，其实该命令默认指定了  <code>--network bridge</code>  参数，该参数即表示所启动的容器将使用名为  <code>bridge</code>  的网络，  <code>bridge</code>  是 docker0 默认的网络名称，因此，在创建自定义网络的名称应当避开这个名字。</p>\n<p>在创建一个自定义网络时，需要注意的是， subnet 子网是必须配置，并加上掩码； driver 默认即为 bridge 模式，值不值定都行。 gateway 是配置网关，必填。示例如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker network create --driver bridge --subnet <span class=\"token number\">192.168</span>.0.0/16 --gateway <span class=\"token number\">192.168</span>.0.1 mynet</pre></td></tr></table></figure><p>在这条命令中，我们指定了网段为 192.168.0.0 ，掩码为 16 位（即拥有 255*255 个可用 IP，24 位则只有 255 个可用 IP），指定的网关为 192.168.0.1 ，自定义的网络名称为 mynet 。</p>\n<p>查看自定义网络创建是否成功：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker network <span class=\"token function\">ls</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre>NETWORK ID     NAME      DRIVER    SCOPE</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre>0b517709dd56   bridge    bridge    <span class=\"token builtin class-name\">local</span></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre>e49e96b5ebf4   <span class=\"token function\">host</span>      <span class=\"token function\">host</span>      <span class=\"token builtin class-name\">local</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre>0df835de9886   mynet     bridge    <span class=\"token builtin class-name\">local</span></pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"\"></td><td><pre>963d10eff9fe   none      null      <span class=\"token builtin class-name\">local</span></pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker network inspect mynet <span class=\"token comment\"># 查看自定义网络信息</span></pre></td></tr></table></figure><p>使用自定义网络创建容器：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker run -d -P --name tomcat-net-01 --net mynet tomcat</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker run -d -P --name tomcat-net-02 --net mynet tomcat</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker <span class=\"token builtin class-name\">exec</span> tomcat-net-02 <span class=\"token function\">ping</span> tomcat-net-01 <span class=\"token comment\"># success</span></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker <span class=\"token builtin class-name\">exec</span> tomcat-net-01 <span class=\"token function\">ping</span> tomcat-net-02 <span class=\"token comment\"># success</span></pre></td></tr></table></figure><p><strong>网络连通</strong></p>\n<p>通过上面的操作，基于自定义网络创建的容器之间，已经实现网络互联，但自定义网络与 docker0 默认网络之间仍旧无法联通，我们可以通过如下方式，将 docker0 默认的网络添加到自定义的网络中。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker run -d -P --name tomcat-01 tomcat <span class=\"token comment\"># -network bridge</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker <span class=\"token builtin class-name\">exec</span> tomcat-01 <span class=\"token function\">ping</span> tomcat-net-01 <span class=\"token comment\"># fault</span></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker network connect tomcat01 mynet <span class=\"token comment\"># connect tomcat01 to mynet</span></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[root@xxx ~] $\"></td><td><pre>docker <span class=\"token builtin class-name\">exec</span> tomcat-01 <span class=\"token function\">ping</span> tomcat-net-01 <span class=\"token comment\"># success</span></pre></td></tr></table></figure><h4 id=\"redis-集群部署\"><a class=\"anchor\" href=\"#redis-集群部署\">#</a> Redis 集群部署</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker search redis</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker pull redis</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">mkdir</span> redis-cluster-d</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">cd</span> redis-cluster-d</pre></td></tr></table></figure><p><span class=\"label danger\">❗️TODO</span> 待完善</p>\n<h4 id=\"springboot-微服务打包-docker\"><a class=\"anchor\" href=\"#springboot-微服务打包-docker\">#</a> Springboot 微服务打包 Docker</h4>\n<p><span class=\"label danger\">❗️TODO</span> 待完善</p>\n<h3 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20=\">https://docs.docker.com</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMW9nNHkxcTdNNA==\">https://www.bilibili.com/video/BV1og4y1q7M4</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly95ZWFzeS5naXRib29rLmlvL2RvY2tlcl9wcmFjdGljZS9pbnN0YWxsL2NlbnRvcw==\">https://yeasy.gitbook.io/docker_practice/install/centos</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8yMmE3MDMyYmI3YmQ=\">https://www.jianshu.com/p/22a7032bb7bd</span></li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "JAVA学习路线",
                "架构篇",
                "Linux",
                "Docker"
            ]
        },
        {
            "id": "https://www.chinmoku.cc/computer-science/others/blog-without-server/",
            "url": "https://www.chinmoku.cc/computer-science/others/blog-without-server/",
            "title": "Hexo - 技术小白搭建个人博客",
            "date_published": "2021-08-04T14:01:24.000Z",
            "content_html": "<p>注：本文和技术能力无关，纯粹傻瓜式操作。</p>\n<h3 id=\"效果预览\"><a class=\"anchor\" href=\"#效果预览\">#</a> 效果预览</h3>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/62fc03675523a44c16a9d1ce64363d881628085451.png\" alt=\"博客首页效果预览\" /></p>\n<p>这里就直接放我自己的博客效果了，只截了个首页的图，当然，您也可以在我的博客中自行访问试试，欢迎来访。</p>\n<p>我的博客地址：</p>\n<ol>\n<li><a href=\"https://www.chinmoku.cc\">https://www.chinmoku.cc</a></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly94ZmMtZXhjbGF2ZS5naXRodWIuaW8=\">https://xfc-exclave.github.io</span></li>\n</ol>\n<p>当然，通过本文，你最终搭建出来的博客未必和我一模一样，毕竟各人审美和喜好有所不同。</p>\n<h3 id=\"进与退\"><a class=\"anchor\" href=\"#进与退\">#</a> 进与退</h3>\n<p>在正式安装博客之前，我们先做如下假设：</p>\n<ol>\n<li>\n<p>您不希望支付任何费用购买一系列产品，如服务器、数据库、域名、SSL 证书、对象存储等。</p>\n</li>\n<li>\n<p>您手上并未拥有任何一台服务器环境 —— 无论 windows 还是  <code>linux</code>  操作系统。</p>\n</li>\n<li>\n<p>您希望您的博客花样多、适应性强。</p>\n</li>\n<li>\n<p>您不希望隔三差五被黑客骚扰。</p>\n</li>\n<li>\n<p>您甚至不具备任何技术知识，如果您属于这种情况，后文出现任何  <code>技术小白</code>  （中性词）的关键词时，都请务必多加留意。</p>\n<blockquote>\n<p>注：本文将  <code>技术小白</code>  定义为较极端的情况，如非计算机相关专业学生、文员、教师、翻译、公务员、摄影师、诗人、作家等。本文考虑到技术小白，是由于我个人身边有不少从事各行各业的朋友，他们之中有不少人也有搭建博客的需要。</p>\n<p>也是为了照顾到技术小白，本文会尽可能讲得详细些，有些地方难免啰嗦，请见谅。</p>\n<p>另外，技术小白们，你们不需要在意和纠结那些看不懂的名词，严格跟着本文的步骤走就行了。如果实在走不通，你也可以尝试联系我。</p>\n</blockquote>\n</li>\n</ol>\n<p>劝退分界线：</p>\n<hr />\n<p>在上面的假设中，我已经决定尽量保持最真诚的态度来写这篇  <code>教程文</code>  了，如果仍旧觉得困难重重、不敢迈进的话，那就此别过了。</p>\n<p>另外，搭建这个博客你可能 1h 就能搞定，也可能要耗费你整整一天，请做好心理准备。</p>\n<p>那下面，我们就正式开始啦！</p>\n<h3 id=\"前置环境\"><a class=\"anchor\" href=\"#前置环境\">#</a> 前置环境</h3>\n<p>您需要具备如下环境：</p>\n<blockquote>\n<p>如您已满足相应的环境，请自行跳过对应安装小节部分。技术小白的话就不用检验了，因为您肯定一个都没有安装过！</p>\n</blockquote>\n<ol>\n<li>\n<p>安装  <code>Git</code></p>\n<p>检验方法： 命令行执行  <code>git --version</code>  ，出现对应版本号，即您已安装该环境。</p>\n</li>\n<li>\n<p>安装  <code>Node.js</code></p>\n<p>检验方法： 命令行执行  <code>node -v</code>  ，出现对应版本号，即您已安装该环境。</p>\n</li>\n<li>\n<p>安装  <code>npm</code></p>\n<p>检验方法： 命令行执行  <code>npm -v</code>  ，出现对应版本号，即您已安装该环境。</p>\n</li>\n</ol>\n<h4 id=\"git-安装\"><a class=\"anchor\" href=\"#git-安装\">#</a> Git 安装</h4>\n<h4 id=\"node-安装\"><a class=\"anchor\" href=\"#node-安装\">#</a> Node 安装</h4>\n<h4 id=\"npm-安装\"><a class=\"anchor\" href=\"#npm-安装\">#</a> npm 安装</h4>\n<h3 id=\"正式搭建\"><a class=\"anchor\" href=\"#正式搭建\">#</a> 正式搭建</h3>\n<ol>\n<li>\n<p>创建文件夹</p>\n<p>正式搭建博客的第一步，是创建一个专用于存放博客项目及其相关内容的文件夹，如果是技术小白，请尽可能与我保持一致。</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/ce0d8728e298eaa9f4743a37cd33fb7a1628085462.png\" alt=\"创建博客安装文件夹\" /></p>\n<p>进入  <code>/myblog/hexo</code>  目录并在地址栏中输入  <code>cmd</code>  ，然后按下回车进入小黑框。</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/2d6037a13a68e662a0f30f6200a676471628085471.png\" alt=\"快捷进入命令行\" /></p>\n</li>\n<li>\n<p>安装  <code>hexo</code>  基础框架</p>\n<p>输入或复制如下命令并粘贴到弹出的小黑框中执行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo</pre></td></tr></table></figure><blockquote>\n<p>提示：在小黑框中鼠标右键点击，即可快速粘贴。</p>\n<p>小黑框如果停滞不动，可以尝试在小黑窗口内单击鼠标右键，这是一个小坑。</p>\n</blockquote>\n</li>\n<li>\n<p>初始化  <code>hexo</code>  框架</p>\n<p>输入或复制如下命令并粘贴到弹出的小黑框中执行：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/83a1aabb0261c220258b592f18d6be4d1628085500.png\" alt=\"Hexo初始化命令截图\" /></p>\n</li>\n<li>\n<p>目录结构</p>\n<p>初始化完成后，即可在  <code>E:\\myblog\\hexo</code>  文件夹内看到如下目录结构：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/0b4ee0093b32f24d17aabe4de06fd1ac1628085507.png\" alt=\"Hexo目录结构\" /></p>\n<p>这里的目录结构需要稍微注意下，后续配置时会用到：</p>\n<ul>\n<li>scaffolds：主要存放 hexo 的一些内置页面。</li>\n<li>source：主要存放用户的博客文章。</li>\n<li>themes：主要存放个性化主题。</li>\n<li><code>_config.yml</code>  ：这是 hexo 的主配置文件，在后续配置时会经常用到它。</li>\n</ul>\n</li>\n<li>\n<p>启动博客</p>\n<p>在  <code>/myblog/hexo</code>  目录的地址栏中输入  <code>cmd</code>  ，然后按下回车进入小黑框，再次进入命令行。</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/fb79589cf9bca9faf390dd7ead8cd7131628085515.png\" alt=\"快捷进入命令行\" /></p>\n<p>在命令行中依次输入如下命令，并回车执行：</p>\n<p>安装所需要的依赖：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span></pre></td></tr></table></figure><p>编译生成静态页面：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo g</pre></td></tr></table></figure><p>启动本地服务：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo s</pre></td></tr></table></figure><p><img data-src=\"https://img.xfc-exclave.com/2021/08/2c792aa755696067ec4584ef20a9451a1628085521.png\" alt=\"Hexo启动命令截图\" /></p>\n<p>注：上图多了一条  <code>hexo d</code>  命令，当前暂时用不到，后续才会使用。</p>\n<p>最终出现  <code>Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</code>  时，即表示启动成功，此时按  <code>Ctrl+C</code>  或点击关闭，博客都将关闭。</p>\n</li>\n<li>\n<p>访问博客</p>\n<p>此时在浏览器输入地址 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo0MDAw\">http://localhost:4000</span> 进行访问，您将看到如下界面：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/0e5eb6c38e29a84cc3f0306a8ed7287d1628085540.png\" alt=\"Hexo默认主题截图\" /></p>\n</li>\n</ol>\n<p>到这里我们的博客就已经搭建成功，总算有一个能够看得见的博客页面了！</p>\n<p>但这还不够，我们还面临着如下诸多问题：</p>\n<ol>\n<li>默认的博客页面满足不了自己的审美需要。</li>\n<li>我自己是能访问到，但地址发给朋友，朋友却访问不到。</li>\n<li>把小黑框一关掉，博客就访问不到了。</li>\n<li>没有找到写文章的地方。</li>\n<li>还有些别人博客都有的更加高级的功能，比如搜索、评论等。</li>\n</ol>\n<p>对于这些问题，我们在后续部分将陆续进行解决。</p>\n<h3 id=\"主题配置\"><a class=\"anchor\" href=\"#主题配置\">#</a> 主题配置</h3>\n<p>博客搭建成功后，默认的博客页面效果不符合自己的个性要求，想要让自己的博客更加美观，在这里我们就需要对博客的主题进行配置。</p>\n<p><code>hexo</code>  的主题库有三百多个主题，我们可以选择自己喜欢的主题下载配置。</p>\n<h4 id=\"主题下载\"><a class=\"anchor\" href=\"#主题下载\">#</a> 主题下载</h4>\n<p>主题库地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3RoZW1lcw==\">https://hexo.io/themes</span></p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/5a7e4cc8c6d70cf6baa4d35f43dfdc1c1628085550.png\" alt=\"Hexo主题库\" /></p>\n<p>这里的主题简直不要太多，文艺、骚气、二次元，基本能满足各种不同层次不同种类的审美需要。</p>\n<p>这里作为教程演示，我选择使用一个比较漂亮的二次元主题  <code>hexo-theme-shoka</code>  作为演示，您可以根据自己喜好进行下载。</p>\n<blockquote>\n<p>关于当前演示主题的效果，你可以将本文往下翻一翻，有主题配置成功后的首页截图。</p>\n</blockquote>\n<p>找到您喜欢的主题，进入其对应的 github 下载页，按照下图的方式找到地址并复制。</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/3ef0bbe92ee4ca1beb0d9f57a59987f21628085565.png\" alt=\"Hexo主题地址下载示例\" /></p>\n<p>进入您的博客目录中的主题文件夹，如  <code>E:\\myblog\\hexo\\themes</code>  ，如前文的方式进入小黑框，大概操作步骤如下图所示：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/614b1b93c20078742e08c59da681fa201628085571.png\" alt=\"Hexo主题下载图示\" /></p>\n<p>到这里，主题就已经下载好了。当然，在上图中如果你克隆失败了，你也可以选择直接  <code>Download ZIP</code>  ，然后解压到图中的目录位置。</p>\n<p>将下载好的主题文件夹  <code>hexo-theme-shoka</code>  重命名为  <code>shoka</code>  。</p>\n<blockquote>\n<p>注意：下载主题后，对于不同主题，可能各自都会有一些针对性的操作或配置，但如需要特别的配置，在  <code>github</code>  对应的下载页都会有相应的说明。另外，有许多主题都是需要安装一些插件，才能实现博客的某些功能和效果的。</p>\n</blockquote>\n<h4 id=\"主题插件安装\"><a class=\"anchor\" href=\"#主题插件安装\">#</a> 主题插件安装</h4>\n<p>不同主题可能需要安装的插件不同，也可能有的主题不需要安装任何插件，这个需要以主题下载页的说明为准。对于当前演示的主题  <code>hexo-theme-shoka</code>  而言，它需要安装如下插件（这在 github 都有说明）：</p>\n<ul>\n<li>hexo-renderer-multi-markdown-it</li>\n<li>hexo-autoprefixer</li>\n<li>hexo-algoliasearch</li>\n<li>hexo-symbols-count-time</li>\n<li>hexo-feed</li>\n</ul>\n<p>那么，到了这里，我们就来安装这个主题所需要的所有插件。</p>\n<p>首先，进入  <code>E:\\myblog\\hexo</code>  目录，并从该目录输入  <code>cmd</code>  进入命令行（前文已经重复多次，相信您已经知道如何进入命令行了，后面就不再重复截图了）。</p>\n<p>在命令行中输入  <code>npm install + 插件名称</code>  ，然后回车执行。</p>\n<p>命令示例：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-renderer-multi-markdown-it</pre></td></tr></table></figure><p>按照这样的方式，依次拼接  <code>npm install + 插件名称</code>  命令并执行，安装完该主题所需要的所有插件即可。</p>\n<h4 id=\"主题启用\"><a class=\"anchor\" href=\"#主题启用\">#</a> 主题启用</h4>\n<p>主题及其所需要的插件都安装好了，但此时并未启用该主题。要启用该主题，您需要找到  <code>E:\\myblog\\hexo\\_config.yml</code>  文件并打开。</p>\n<p>在该文件中您可以找到如下这样一行代码：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> landscape</pre></td></tr></table></figure><p>这行代码表示当前配置的主题为  <code>landscape</code>  ，而在我们的主题目录  <code>E:\\myblog\\hexo\\theme</code>  里，正好可以看到一个名为  <code>landscape</code>  的文件夹，因此我们要更换主题，就只需要将这里的配置修改为我们下载好的主题文件夹名称即可，即将这行代码改成下面这样既可：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> shoka</pre></td></tr></table></figure><p>这样就已经指定好了我们需要编译的主题，接下来就需要重新启动博客。如果先前启动还没关闭，需要先关闭后才能重启（总之，关闭所有小黑框就是了）。</p>\n<p>关于启动如何博客，在上文  <code>正式搭建 -&gt; 启动博客</code>  小节中其实已经提过一遍了，这里再来一次，启动和编译博客您还会经常用到，自然是越熟悉越好了。</p>\n<p>进入  <code>E:\\myblog\\hexo</code>  目录，并从该目录输入  <code>cmd</code>  进入命令行。</p>\n<p>执行命令编译博客：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo g</pre></td></tr></table></figure><blockquote>\n<p>在执行  <code>hexo g</code>  命令的过程中，也许会出现一些问题，比如我们当前演示的主题在执行时，就抛出异常，这是不可预期的，出现异常时，可以根据该异常在网上搜索答案，肯定有其他人也遇到过并且还顺利解决了。（不同主题编译时可能出现的异常不一定一样，所以没有统一的解决方法）</p>\n</blockquote>\n<p>我这里在编译  <code>hexo-theme-shoka</code>  主题时，出现了如下异常：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Function yaml.safeLoad is removed <span class=\"token keyword\">in</span> js-yaml <span class=\"token number\">4</span>. Use yaml.load instead, <span class=\"token function\">which</span> is now safe by default</pre></td></tr></table></figure><p>这是因为  <code>yaml.safeLoad</code>  方法已经被弃用，需要用  <code>yaml.load</code>  来代替。</p>\n<p>由此，我们的解决方法就是：找到  <code>E:\\myblog\\hexo\\themes\\shoka\\scripts\\generaters\\config.js</code>  并用记事本打开进行编辑。找到  <code>yaml.safeLoad</code>  并修改为  <code>yaml.load</code>  （大概在 41 行左右），保存关闭，然后重新执行  <code>hexo g</code>  命令进行编译。</p>\n<p>编译成功后，再执行启动博客服务的命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo s</pre></td></tr></table></figure><p>该命令执行成功后，我们重新访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo0MDAw\">http://localhost:4000</span> ，我们就能看到我们刚才启用的新的主题页面了，这里截个新鲜的图：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/23642d74fd22191aa9b63c34ac0da88f1628085577.png\" alt=\"主题配置成功-预览\" /></p>\n<p>是不是一瞬间颜值蹭蹭蹭地往上涨，老夫的少女心一瞬间又苏醒了！</p>\n<p>当然，这才是最简单的一键化配置，不同主题更详细的配置方法，在它们各自的 github 下载页都会进行说明的。</p>\n<p>需要  <code>hexo-theme-shoka</code>  主题的详细配置，请前往：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYw==\">https://shoka.lostyu.me/computer-science/note/theme-shoka-doc</span></p>\n<p>这里仅仅作为演示，更加详细的配置因人而异，这里就不再扩展了，自行摸索。</p>\n<blockquote>\n<p>技术小白们自行摸索也许会碰见一些困难，而且自行摸索也很费时，不过到了这一步，就算不进行额外的个性化配置，保底配置已经是 OK 的了，因为不同主题不一样，无法在这里一一说明，所以技术小白们只能先委屈一下了，当然，身边有懂点相关技术的，可以请他们帮帮忙。</p>\n</blockquote>\n<h4 id=\"资源推荐\"><a class=\"anchor\" href=\"#资源推荐\">#</a> 资源推荐</h4>\n<p>相信您在配置博客主题的时候，很有可能需要一些高质量的壁纸作为网站海报，我在这里也收藏了一批高质量的壁纸网站。</p>\n<p>欢迎访问： <span class=\"exturl\" data-url=\"aHR0cHM6Ly94ZmMtZXhjbGF2ZS5naXRodWIuaW8vMjAyMS8wOC8wMy9yZXNvdXJjZS93YWxscGFwZXJfc2l0ZQ==\">高清壁纸网站推荐</span></p>\n<h3 id=\"插件配置\"><a class=\"anchor\" href=\"#插件配置\">#</a> 插件配置</h3>\n<h3 id=\"线上环境\"><a class=\"anchor\" href=\"#线上环境\">#</a> 线上环境</h3>\n<h3 id=\"写作与发布\"><a class=\"anchor\" href=\"#写作与发布\">#</a> 写作与发布</h3>\n<h3 id=\"结语\"><a class=\"anchor\" href=\"#结语\">#</a> 结语</h3>\n<p>至此，一个精美的个人博客就搭建好了，您的任何才会都将不会被辜负，您可以在自己的小小天地里记录下您的学习工作心得、生活情感经历、文字或图像作品，乃至于通过相互「友链」认识更多有趣的人，相信它一定会给您的生活带来精彩。</p>\n<p>如果创建成功后想要添加些「友链」，不妨考虑把我的小站加上，我的小站信息如下：</p>\n<blockquote>\n<p>网站名称：见山云木</p>\n<p>网站地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueGZjLWV4Y2xhdmUuY29t\">https://www.xfc-exclave.com</span></p>\n<p>LOGO 地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueGZjLWV4Y2xhdmUuY29tL2F2YXRhcg==\">https://www.xfc-exclave.com/avatar</span></p>\n<p>介绍：红尘三十里，远不见你，你不见山</p>\n</blockquote>\n<p>致谢！</p>\n",
            "tags": [
                "建站周边知识",
                "建站",
                "博客"
            ]
        },
        {
            "id": "https://www.chinmoku.cc/computer-science/java-learning-path/3-advanced/elasticsearch-tutorial/",
            "url": "https://www.chinmoku.cc/computer-science/java-learning-path/3-advanced/elasticsearch-tutorial/",
            "title": "Elasticsearch 教程",
            "date_published": "2021-08-04T04:44:27.000Z",
            "content_html": "<div class=\"note info\">\n<p>Elasticsearch 是一个基于  <code>Lucene</code>  的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于 RESTful web 接口。Elasticsearch 是用 Java 语言开发的，并作为 Apache 许可条款下的开放源码发布，是一种流行的企业级搜索引擎。Elasticsearch 用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。官方客户端在 Java、.NET（C#）、PHP、Python、Apache Groovy、Ruby 和许多其他语言中都是可用的。根据 DB-Engines 的排名显示，Elasticsearch 是最受欢迎的企业搜索引擎，其次是 Apache Solr，也是基于 Lucene。</p>\n<p>quote from <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9lbGFzdGljc2VhcmNo\">百度百科_ElasticSearch</span></p>\n</div>\n<h3 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h3>\n<p>概念简介：</p>\n<ul>\n<li><code>ELK</code>  、  <code>Elastic Static</code>  、  <code>ELK Stack</code>  ？</li>\n</ul>\n<p>可以直接看 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9jbi93aGF0LWlzL2Vsay1zdGFjaw==\">官网介绍</span> （耗时 2 分钟），既形象，又有趣味。</p>\n<p>可以总结为：  <code>ELK Stack</code>  =  <code>ElasticSearch</code>  +  <code>Logstash</code>  +  <code>Kibana</code>  +  <code>Beats</code>  。</p>\n<ul>\n<li>\n<p>Elastic Stack 的组成</p>\n<p><img data-src=\"https://www.elastic.co/guide/en/beats/libbeat/current/images/beats-platform.png\" alt=\"ELKStackComponents\" /></p>\n</li>\n</ul>\n<h4 id=\"elasticsearch\"><a class=\"anchor\" href=\"#elasticsearch\">#</a> ElasticSearch</h4>\n<p>Elasticsearch 基于 java，是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful 风格接口，多数据源，自动搜索负载等。</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/03/869da061ab1d536d4692dde49e0e813c1627921578.jpg\" alt=\"elasticsearch官网图标\" /></p>\n<p>ElasticSearch 是 Elastic Stack 的核心，同时 Elasticsearch 是一个分布式、RESTful 风格的搜索和数据分析引擎，能够解决不断涌现出的各种用例。作为 Elastic Stack 的核心，它集中存储您的数据，帮助您发现意料之中以及意料之外的情况。</p>\n<h4 id=\"logstash\"><a class=\"anchor\" href=\"#logstash\">#</a> Logstash</h4>\n<p>Logstash 基于 java，是一个开源的用于收集，分析和存储日志的工具。</p>\n<h4 id=\"kibana\"><a class=\"anchor\" href=\"#kibana\">#</a> Kibana</h4>\n<p>Kibana 基于 nodejs，也是一个开源和免费的工具，Kibana 可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以汇总、分析和搜索重要数据日志。</p>\n<h4 id=\"beats\"><a class=\"anchor\" href=\"#beats\">#</a> Beats</h4>\n<p>Beats 是 elastic 公司开源的一款采集系统监控数据的代理，是在被监控服务器上以客户端形式运行的数据收集器的统称，可以直接把数据发送给 Elasticsearch 或者通过 Logstash 发送给 Elasticsearch ，然后进行后续的数据分析活动。 Beats 由如下组成：</p>\n<ul>\n<li>Packetbeat：是一个网络数据包分析器，用于监控、收集网络流量信息，Packetbeat 嗅探服务器之间的流量，解析应用层协议，并关联到消息的处理，其支 持 ICMP (v4 and v6)、DNS、HTTP、Mysql、PostgreSQL、Redis、MongoDB、Memcache 等协议；</li>\n<li>Filebeat：用于监控、收集服务器日志文件，其已取代 logstash forwarder；</li>\n<li>Metricbeat：可定期获取外部系统的监控指标信息，其可以监控、收集 Apache、HAProxy、MongoDB MySQL、Nginx、PostgreSQL、Redis、System、Zookeeper 等服务；</li>\n</ul>\n<blockquote>\n<p>Beats 和 Logstash 其实都可以进行数据的采集，但是目前主流的是使用 Beats 进行数据采集，然后使用 Logstash 进行数据的分割处理等，早期没有 Beats 的时候，使用的就是 Logstash 进行数据的采集。</p>\n</blockquote>\n<h3 id=\"安装与运行\"><a class=\"anchor\" href=\"#安装与运行\">#</a> 安装与运行</h3>\n<blockquote>\n<p>本文以 window 安装环境为例，linux 环境安装请另行探索。需配置 java 1.8+ 环境。</p>\n</blockquote>\n<h4 id=\"elasticsearch-下载安装\"><a class=\"anchor\" href=\"#elasticsearch-下载安装\">#</a> ElasticSearch 下载安装</h4>\n<ol>\n<li>\n<p>根据环境选择下载安装包。</p>\n<p>下载地址： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9jbi9kb3dubG9hZHMvZWxhc3RpY3NlYXJjaA==\">https://www.elastic.co/cn/downloads/elasticsearch</span></p>\n</li>\n<li>\n<p>解压。</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/02/9fe70889177651c41d2a824f40a5568c1627905563.png\" alt=\"image-20210802195912694\" /></p>\n<p>目录结构说明：</p>\n<ul>\n<li>bin --- 用于存放 ES 启动等脚本文件。</li>\n<li>config --- ES 相关配置文件。</li>\n<li>data --- 存放 ES 当前节点的分片数据，可以直接拷贝到其他节点进行使用。（上图暂未运行，则不存在该文件夹）</li>\n<li>log --- ES 运行日志。</li>\n<li>plugins --- 存放常用的插件，如需添加额外的插件，也可以放在这个目录下。</li>\n</ul>\n</li>\n<li>\n<p>启动及访问。</p>\n<p>双击执行  <code>~\\elasticsearch-7.13.4\\bin\\elasticsearch.bat</code>  文件。</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/02/2bf7776f8ac7c65780db9af81cae23a71627905915.png\" alt=\"ES启动成功截图\" /></p>\n<p>此处启动成功，并提示  <code>Active license is now [BASIC]; Security is disabled</code>  ，这里是指当前 ES 集群环境未开启 Security ，即没有设置账号密码登录 elasticsearch 服务。（此处可以先忽略）</p>\n<p>ES 会默认启动两个端口：</p>\n<ul>\n<li>\n<p>9200：http 协议端口，用于集群之间的通信。</p>\n</li>\n<li>\n<p>9300：tcp 通信端口。</p>\n</li>\n</ul>\n<p>浏览器访问 <span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAw\">http://127.0.0.1:9200</span> 得到类似如下信息：（同时会在 ES 解压目录下生成 data 文件夹）</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"name\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"DESKTOP-6F723A6\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"cluster_name\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"elasticsearch\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"cluster_uuid\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"aNleIQnmT_eexKfsuqJ9Og\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"version\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token property\">\"number\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"7.13.4\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token property\">\"build_flavor\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"default\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token property\">\"build_type\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"zip\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token property\">\"build_hash\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"c5f60e894ca0c61cdbae4f5a686d9f08bcefc942\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token property\">\"build_date\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"2021-07-14T18:33:36.673943207Z\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token property\">\"build_snapshot\"</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token property\">\"lucene_version\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"8.8.2\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token property\">\"minimum_wire_compatibility_version\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"6.8.0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token property\">\"minimum_index_compatibility_version\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"6.0.0-beta1\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token property\">\"tagline\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"You Know, for Search\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>可能出现的问题。</p>\n<p>kibana 访问时报错：</p>\n<blockquote>\n<p>high disk watermark [90%] exceeded on...</p>\n</blockquote>\n<p>磁盘空间达到 90% 时，es 会将节点上面的索引标为只读，导致不能写入数据。</p>\n<p>解决方法：</p>\n<ol>\n<li>\n<p>调整磁盘空间比例（使用百分比或 gb）</p>\n<p>config/elasticsearch.yml</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">cluster.routing.allocation.disk.watermark.low</span><span class=\"token punctuation\">:</span> 30g</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">cluster.routing.allocation.disk.watermark.high</span><span class=\"token punctuation\">:</span> 20gb</pre></td></tr></table></figure></li>\n<li>\n<p>关闭阀值设置</p>\n<p>config/elasticsearch.yml</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">cluster.routing.allocation.disk.threshold_enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n<h4 id=\"elasticsearch-head\"><a class=\"anchor\" href=\"#elasticsearch-head\">#</a> Elasticsearch-head</h4>\n<p><code>elasticsearch-head</code>  是一个用于浏览 ElasticSearch 集群并与其进行交互的 Web 项目。</p>\n<ol>\n<li>\n<p>下载。</p>\n<p>下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21vYnovZWxhc3RpY3NlYXJjaC1oZWFk\">https://github.com/mobz/elasticsearch-head</span></p>\n</li>\n<li>\n<p>启动。</p>\n<p>分别执行如下命令：</p>\n<pre><code>npm insatall\nnpm run start\n</code></pre>\n</li>\n<li>\n<p>访问。</p>\n<p>注：需要先在 Elasticsearch 服务中配置跨域策略，否则会因为跨域而连接不上。打开  <code>~\\elasticsearch-7.13.4\\config\\elasticsearch.yml</code>  并添加如下配置后重启即可：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">http.cors.enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">http.cors.allow-origin</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"*\"</span></pre></td></tr></table></figure><p>在浏览器中访问：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MTAw\">http://127.0.0.1:9100</span> 并连接，连接成功后视图如下：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/03/9d6a0e064ce82a54c39b651df60e63d31627921269.png\" alt=\"Elasticsearch-head连接成功截图\" /></p>\n<p>注：以上截图显示了部分数据，是  <code>kibana</code>  连接时自动生成的，如还未连接则查询为空。</p>\n</li>\n<li>\n<p>健康值说明。</p>\n<ul>\n<li>绿色：最健康的状态，代表所有的分片包括备份都可用。</li>\n<li>黄色：基本的分片可用，但是备份不可用（也可能是没有备份）。</li>\n<li>红色：部分的分片可用，表明分片有一部分损坏。此时执行查询部分数据仍然可以查到，遇到这种情况，还是赶快解决比较好。</li>\n<li>灰色：未连接到服务。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"kibana-下载安装\"><a class=\"anchor\" href=\"#kibana-下载安装\">#</a> Kibana 下载安装</h4>\n<p>Kibana 是一个免费且开放的用户界面，能够让您对 Elasticsearch 数据进行可视化，并让您在 Elastic Stack 中进行导航。您可以进行各种操作，从跟踪查询负载，到理解请求如何流经您的整个应用，都能轻松完成。</p>\n<blockquote>\n<p>注意：尽量保持 kibana 版本与 elasticsearch 版本一直。</p>\n</blockquote>\n<ol>\n<li>\n<p>根据环境选择下载安装包。</p>\n<p>下载地址： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9jbi9kb3dubG9hZHMva2liYW5h\">https://www.elastic.co/cn/downloads/kibana</span></p>\n</li>\n<li>\n<p>配置。</p>\n<p>打开并编辑  <code>~\\kibana-7.13.4\\config\\kibana.yml</code>  文件：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server.host</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"127.0.0.1\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">elasticsearch.hosts</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"http://127.0.0.1:9200\"</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p><img data-src=\"https://img.xfc-exclave.com/2021/08/02/0c66082debf06d1c4c37dd08f69dd1a01627906644.png\" alt=\"kibana修改配置示例\" /></p>\n</li>\n<li>\n<p>启动及访问。</p>\n<p>双击执行  <code>~\\kibana-7.13.4\\bin\\kibana.bat</code>  文件（需要先启动 elasticsearch）。</p>\n<p>出现  <code>http server running at http://127.0.0.1:5601</code>  即表示启动成功。</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/02/06947ba1f8889d8082edf7b1e85f83f01627906845.png\" alt=\"kibana启动成功截图\" /></p>\n<p>在浏览器中访问：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo1NjAx\">http://127.0.0.1:5601</span> 视图如下：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/02/c46c6c979d5bdd3126f8f9efa3eaf7991627907052.jpg\" alt=\"Kibana视图界面\" /></p>\n</li>\n<li>\n<p>可能出现的问题。</p>\n<p>启动警告：</p>\n<blockquote>\n<p>Session cookies will be transmitted over insecure connections. This is not recommended.</p>\n<p>Generating a random key for xpack.security.encryptionKey. To prevent sessions from being invalidated on restart, please set xpack.security.encryptionKey in kibana.yml</p>\n</blockquote>\n<p>可尝试在文件中添加如下配置信息：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">xpack.encryptedSavedObjects.encryptionKey</span><span class=\"token punctuation\">:</span> encryptedSavedObjects12345678909876543210</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">xpack.security.encryptionKey</span><span class=\"token punctuation\">:</span> encryptionKeysecurity12345678909876543210</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">xpack.reporting.encryptionKey</span><span class=\"token punctuation\">:</span> encryptionKeyreporting12345678909876543210</pre></td></tr></table></figure></li>\n</ol>\n<p>注：ES 图形化插件除了 kibana 外，还有  <code>ElasticSearch Head</code>  、  <code>elasticsearch-sql</code>  等，但视图风格有点老。elasticsearch、logstash、kibana 合称  <code>ELK</code>  。</p>\n<h4 id=\"logstash-下载安装\"><a class=\"anchor\" href=\"#logstash-下载安装\">#</a> Logstash 下载安装</h4>\n<blockquote>\n<p>注意：尽量保持 logstash 版本与 elasticsearch 版本一直。</p>\n</blockquote>\n<ol>\n<li>\n<p>根据环境选择下载安装包。</p>\n<p>下载地址： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9jbi9kb3dubG9hZHMvbG9nc3Rhc2g=\">https://www.elastic.co/cn/downloads/logstash</span></p>\n</li>\n<li>\n<p>配置启动。</p>\n<p>在  <code>logstash-7.13.4\\bin</code>  目录下执行如下命令：</p>\n<blockquote>\n<p>logstash -e &quot;input { stdin {} } output { stdout {} }&quot;</p>\n</blockquote>\n<p>当出现  <code>Piplines running...</code>   时，输入任意字符串进行测试，如下图：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/02/44098fd1f0b61645509fd9ee65bb78231627908323.png\" alt=\"Logstash启动测试示例\" /></p>\n</li>\n</ol>\n<h3 id=\"es-相关概念\"><a class=\"anchor\" href=\"#es-相关概念\">#</a> ES 相关概念</h3>\n<blockquote>\n<p>Elasticsearch 是面向文档（document oriented）的，这意味着它可以存储整个对象或文档（document）。然而它不仅仅是存储，还会索引（index）每个文档的内容使之可以被搜索。在 Elasticsearch 中，你可以对文档（而非成行成列的数据）进行索引、搜索、排序、过滤。</p>\n</blockquote>\n<p>Elasticsearch 与传统关系型数据库关系映射如下：</p>\n<table>\n<thead>\n<tr>\n<th>Relational DB</th>\n<th>Elasticsearch</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Databases</td>\n<td>Indices</td>\n<td></td>\n</tr>\n<tr>\n<td>Tables</td>\n<td>Types</td>\n<td></td>\n</tr>\n<tr>\n<td>Rows</td>\n<td>Documents</td>\n<td></td>\n</tr>\n<tr>\n<td>Columns</td>\n<td>Fields</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"核心概念\"><a class=\"anchor\" href=\"#核心概念\">#</a> 核心概念</h4>\n<ul>\n<li>\n<p>_index（索引）</p>\n<p>一个索引就是一个拥有几分相似特征的文档的集合。比如说，你可以有一个客户数据的索引，另一个产品目录的索引，还有一个订单数据的索引。一个索引由一个名字来标识（必须全部是小写字母的），并且当我们要对对应于这个索引中的文档进行索引、搜索、更新和删除的时候，都要使用到这个名字。在一个集群中，可以定义任意多的索引。（可类比 mysql 中的数据库进行理解）</p>\n</li>\n<li>\n<p>_type（类型）</p>\n<p>在一个索引中，你可以定义一种或多种类型。一个类型是你的索引的一个逻辑上的分类 / 分区，其语义完全由你来定。通常，会为具有一组共同字段的文档定义一个类型。比如说，我们假设你运营一个博客平台并且将你所有的数据存储到一个索引中。在这个索引中，你可以为用户数据定义一个类型，为博客数据定义另一个类型，当然，也可以为评论数据定义另一个类型。（可类比 mysql 中的表进行理解）</p>\n</li>\n<li>\n<p>field（字段）</p>\n<p>相当于是数据表的字段，对文档数据根据不同属性进行的分类标识 。</p>\n</li>\n<li>\n<p>mapping（映射）</p>\n<p>mapping 是处理数据的方式和规则方面做一些限制，如某个字段的数据类型、默认值、分析器、是否被索引等等，这些都是映射里面可以设置的，其它就是处理 es 里面数据的一些使用规则设置也叫做映射，按着最优规则处理数据对性能提高很大，因此才需要建立映射，并且需要思考如何建立映射才能对性能更好。（相当于 mysql 中的创建表的过程，设置主键外键等等）</p>\n</li>\n<li>\n<p>document（文档）</p>\n<p>一个文档是一个可被索引的基础信息单元。比如，你可以拥有某一个客户的文档，某一个产品的一个文档，当然，也可以拥有某个订单的一个文档。文档以 JSON（Javascript Object Notation）格式来表示，而 JSON 是一个到处存在的互联网数据交互格式。在一个 index/type 里面，你可以存储任意多的文档。注意，尽管一个文档，物理上存在于一个索引之中，文档必须被索引 / 赋予一个索引的 type。（ 插入索引库以文档为单位，类比与数据库中的一行数据）</p>\n</li>\n<li>\n<p>cluster（集群）</p>\n<p>一个集群就是由一个或多个节点组织在一起，它们共同持有整个的数据，并一起提供索引和搜索功能。一个集群由 一个唯一的名字标识，这个名字默认就是 elasticsearch。这个名字是重要的，因为一个节点只能通过指定某个集群的名字，来加入这个集群。</p>\n</li>\n<li>\n<p>node（节点）</p>\n<p>一个节点是集群中的一个服务器，作为集群的一部分，它存储数据，参与集群的索引和搜索功能。和集群类似，一 个节点也是由一个名字来标识的，默认情况下，这个名字是一个随机的漫威漫画角色的名字，这个名字会在启动的 时候赋予节点。这个名字对于管理工作来说挺重要的，因为在这个管理过程中，你会去确定网络中的哪些服务器对 应于 Elasticsearch 集群中的哪些节点。</p>\n<p>一个节点可以通过配置集群名称的方式来加入一个指定的集群。默认情况下，每个节点都会被安排加入到一个叫 做 elasticsearch 的集群中，这意味着，如果你在你的网络中启动了若干个节点，并假定它们能够相互发现彼此，它们将会自动地形成并加入到一个叫做 elasticsearch 的集群中。</p>\n<p>在一个集群里，只要你想，可以拥有任意多个节点。而且，如果当前你的网络中没有运行任何 Elasticsearch 节点， 这时启动一个节点，会默认创建并加入一个叫做 elasticsearch 的集群。</p>\n</li>\n<li>\n<p>shards &amp; replicas</p>\n<p>一个索引可以存储超出单个结点硬件限制的大量数据。比如，一个具有 10 亿文档的索引占据 1TB 的磁盘空间，而任一节点都没有这样大的磁盘空间；或者单个节点处理搜索请求，响应太慢。为了解决这个问题，Elasticsearch 提供了将索引划分成多份的能力，这些份就叫做分片。当你创建一个索引的时候，你可以指定你想要的分片的数量。每个分片本身也是一个功能完善并且独立的 “索引”，这个 “索引” 可以被放置到集群中的任何节点上。分片很重要，主要有两方面的原因：</p>\n<ol>\n<li>允许你水平分割 / 扩展你的内容容量。</li>\n<li>允许你在分片（潜在地，位于多个节点上）之上进行分布式的、并行的操作，进而提高性能 / 吞吐量。</li>\n</ol>\n<p>至于一个分片怎样分布，它的文档怎样聚合回搜索请求，是完全由 Elasticsearch 管理的，对于作为用户的你来说，这些都是透明的。</p>\n<p>在一个网络 / 云的环境里，失败随时都可能发生，在某个分片 / 节点不知怎么的就处于离线状态，或者由于任何原因消失了，这种情况下，有一个故障转移机制是非常有用并且是强烈推荐的。为此目的，Elasticsearch 允许你创建分片的一份或多份拷贝，这些拷贝叫做复制分片，或者直接叫复制。</p>\n<p>复制之所以重要，有两个主要原因： 在分片 / 节点失败的情况下，提供了高可用性。因为这个原因，注意到复制分片从不与原 / 主要（original/primary）分片置于同一节点上是非常重要的。扩展你的搜索量 / 吞吐量，因为搜索可以在所有的复制上并行运行。总之，每个索引可以被分成多个分片。一个索引也可以被复制 0 次（意思是没有复制）或多次。一旦复制了，每个索引就有了主分片（作为复制源的原来的分片）和复制分片（主分片的拷贝）之别。分片和复制的数量可以在索引创建的时候指定。在索引创建之后，你可以在任何时候动态地改变复制的数量，但是你事后不能改变分片的数量。</p>\n<p>默认情况下，Elasticsearch 中的每个索引被分片 5 个主分片和 1 个复制，这意味着，如果你的集群中至少有两个节点，你的索引将会有 5 个主分片和另外 5 个复制分片（1 个完全拷贝），这样的话每个索引总共就有 10 个分片。</p>\n</li>\n</ul>\n<h3 id=\"restful-api\"><a class=\"anchor\" href=\"#restful-api\">#</a> RESTful API</h3>\n<p>在 Lucene 中，创建索引是需要定义字段名称以及字段类型的，在 Elasticsearch 中提供了非结构化的索引，就是不需要创建索引结构，即可写入数据到索引中，实际上在 Elasticsearch 底层会进行结构化操作，此操作对用户是透明的。</p>\n<blockquote>\n<p>推荐使用 Postman 作为接口调用工具。在调用下面的接口前，请先自行添加一些测试数据。</p>\n</blockquote>\n<ol>\n<li>\n<p>创建索引</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// PUT http://127.0.0.1:9200/test_index（命名随意）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token property\">\"settings\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token property\">\"index\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token property\">\"number_of_shards\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 分片数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token property\">\"number_of_replicas\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0\"</span> <span class=\"token comment\">// 副本数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>删除索引</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// DELETE http://127.0.0.1:9200/test_index</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token property\">\"acknowledged\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注：删除操作不会立即被删除，而是被标记为删除。</p>\n</li>\n<li>\n<p>插入数据</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// POST http://127.0.0.1:9200/test_index/user/1001</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1001</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">\"sex\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"男\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>响应信息如下：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// response info:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"_index\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"test_index\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"_type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1001\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">\"_version\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">\"result\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"created\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">\"_shards\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token property\">\"total\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token property\">\"successful\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token property\">\"failed\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token property\">\"_seq_no\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token property\">\"_primary_term\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在  <code>elasticsearch-head</code>  可查看到如下信息：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/02/92b84a62def5cdf4c178ae4c4352750f1627913704.png\" alt=\"elasticsearch-head查询到索引详情\" /></p>\n<p>在插入数据时，如果不再 URI 中指定 ID ，ES 会自动生成一个唯一的 ID 标识。</p>\n</li>\n<li>\n<p>更新数据</p>\n<p>在 Elasticsearch 中，文档数据是不能修改的，但是可以通过覆盖的方式进行更新。</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// PUT http://127.0.0.1:9200/test_index/user/1001</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1001</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"张珊\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">\"sex\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"女\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>通过这种方式更新数据，默认是全量更新，即移除旧有数据，所有数据都以新的请求数据为准，未传入字段则为空。</p>\n<p>局部更新方式如下：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// POST http://127.0.0.1:9200/test_index/user/1001/_update</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"doc\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"张珊\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注：局部参数需要用  <code>doc</code>  进行包装。</p>\n</li>\n<li>\n<p>搜索数据</p>\n<ul>\n<li>\n<p>查询单条数据：</p>\n<p>GET <span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3Rlc3RfaW5kZXgvdXNlci8xMDAx\">http://127.0.0.1:9200/test_index/user/1001</span></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"_index\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"test_index\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"_type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1001\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"_version\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">\"_seq_no\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">\"_primary_term\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">\"found\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token property\">\"_source\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1001</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"张珊\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token property\">\"sex\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"女\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>查询全部数据：（默认返回 10 条）</p>\n<p>GET <span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3Rlc3RfaW5kZXgvdXNlci9fc2VhcmNo\">http://127.0.0.1:9200/test_index/user/_search</span></p>\n</li>\n<li>\n<p>关键字搜索数据</p>\n<p>GET <span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3Rlc3RfaW5kZXgvdXNlci9fc2VhcmNoP3E9YWdlOjIw\">http://127.0.0.1:9200/test_index/user/_search?q=age:20</span></p>\n</li>\n</ul>\n</li>\n<li>\n<p>DSL 搜索</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// POST http://127.0.0.1:9200/test_index/user/_search</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token property\">\"match\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>过滤查询：（过滤小于 20 岁的女性）</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// POST http://127.0.0.1:9200/test_index/user/_search</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token property\">\"bool\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token property\">\"filter\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token property\">\"range\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                        <span class=\"token property\">\"lt\"</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token property\">\"must\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token property\">\"match\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    <span class=\"token property\">\"sex\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"女\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>全文搜索：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// POST http://127.0.0.1:9200/test_index/user/_search</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token property\">\"match\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"张三 张珊\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>高亮显示</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// POST http://127.0.0.1:9200/test_index/user/_search</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token property\">\"match\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"张三 张珊\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">\"highlight\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token property\">\"fields\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>聚合</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// POST http://127.0.0.1:9200/test_index/user/_search</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"aggs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token property\">\"all_interests\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token property\">\"terms\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token property\">\"field\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"age\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>判断数据是否存在</p>\n<p>HEAD <span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3Rlc3RfaW5kZXgvdXNlci8xMDAx\">http://127.0.0.1:9200/test_index/user/1001</span></p>\n<p>存在则返回 200，不存在则返回 404。</p>\n</li>\n<li>\n<p>批量查询</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// POST http://127.0.0.1:9200/test_index/user/_mget</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"ids\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"1001\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abcd\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如对应 ID 不存在，查询结果不会受 404 影响。</p>\n</li>\n<li>\n<p>分词查询</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// POST http://127.0.0.1:9200/test_index/user/_analyze</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"analyzer\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ik_max_word\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"text\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"IK中文分词器\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>分词器后续有单独讲解。</p>\n</li>\n</ol>\n<p>通过上述 RESTful API 示例，我们已经基本熟悉了如何通过接口对 ES 数据进行操作。更多的操作没有强行记住的必要，也并不是本文的重点，这里也就不赘述了，需要用到时，再搜索相关方法即可。本文省略部分主要包括如下内容：</p>\n<ul>\n<li>\n<p>批量查询</p>\n</li>\n<li>\n<p>_bulk 操作</p>\n</li>\n<li>\n<p>分页</p>\n</li>\n<li>\n<p>映射：类型自动匹配</p>\n</li>\n<li>\n<p>结构化查询：</p>\n<ul>\n<li>term / terms</li>\n<li>range</li>\n<li>exists</li>\n<li>match：标准查询</li>\n<li>bool： must / must_not / should</li>\n</ul>\n</li>\n<li>\n<p>过滤查询</p>\n<p>查询和过滤的对比。</p>\n<p>做精确匹配搜索时，最好用过滤语句，因为过滤语句可以缓存数据。</p>\n</li>\n</ul>\n<h3 id=\"中文分词器\"><a class=\"anchor\" href=\"#中文分词器\">#</a> 中文分词器</h3>\n<p>elasticsearch 默认使用标准分词器，对于中文的支持并不友好，可以选择安装  <code>IK</code>  或  <code>smartcn</code>  等中文分词器（这里以 IK 为例）。</p>\n<h4 id=\"下载安装\"><a class=\"anchor\" href=\"#下载安装\">#</a> 下载安装</h4>\n<ol>\n<li>\n<p>下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21lZGNsL2VsYXN0aWNzZWFyY2gtYW5hbHlzaXMtaWsvcmVsZWFzZXM=\">https://github.com/medcl/elasticsearch-analysis-ik/releases</span></p>\n<p>需注意选择与 elasticsearch 相匹配的分词器版本。</p>\n</li>\n<li>\n<p>解压，将解压后的 elasticsearch 文件夹拷贝到 elasticsearch-5.6.8\\plugins 下，并重命名文件夹为 analysis-ik （其他名字也可以，目的是不要重名）</p>\n</li>\n<li>\n<p>重新启动 ElasticSearch，即可加载 IK 分词器。</p>\n<p>如若启动报错，可通过  <code>~\\elasticsearch-7.6.2\\logs\\elasticsearch.log</code>  文件进行排查。</p>\n</li>\n</ol>\n<h4 id=\"分词测试\"><a class=\"anchor\" href=\"#分词测试\">#</a> 分词测试</h4>\n<p>启动  <code>elasticsearch.bat</code>  ，使用  <code>Postman</code>  进行如下测试：</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/03/d990eb191c77f8d70be66d51b9f51f3f1627921629.jpg\" alt=\"IK分词器测试\" /></p>\n<p>测试结果：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"tokens\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"token\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"es\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"start_offset\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"end_offset\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"ENGLISH\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"position\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"token\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"中文\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"start_offset\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"end_offset\"</span><span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"CN_WORD\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"position\"</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"token\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"分词器\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"start_offset\"</span><span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"end_offset\"</span><span class=\"token operator\">:</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"CN_WORD\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"position\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"token\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"分词\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"start_offset\"</span><span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"end_offset\"</span><span class=\"token operator\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"CN_WORD\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"position\"</span><span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"token\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"器\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"start_offset\"</span><span class=\"token operator\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"end_offset\"</span><span class=\"token operator\">:</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"CN_CHAR\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"position\"</span><span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"token\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"测试\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"start_offset\"</span><span class=\"token operator\">:</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"end_offset\"</span><span class=\"token operator\">:</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"CN_WORD\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"position\"</span><span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"全文搜索\"><a class=\"anchor\" href=\"#全文搜索\">#</a> 全文搜索</h3>\n<p>全文搜索包括两个最重要的方面：</p>\n<ol>\n<li>\n<p>相关性（Relevance）</p>\n<p>它是评价查询与其结果间的相关程度，并根据这种相关程度对结果进行排名的一种能力，这种计算方式可以是 TF/IDF 方法、地理位置临近、模糊相似，或其他某些算法。</p>\n</li>\n<li>\n<p>分词（Analysis）</p>\n<p>它是将文本块转换为有区别的、规范化的 token 的一个过程，目的是为了创建倒排索引以及查询倒排索引。</p>\n</li>\n</ol>\n<p>使用 IK 分词器创建索引示例：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"settings\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token property\">\"number_of_shards\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"6\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token property\">\"number_of_replicas\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 全索引指定分词器  </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token property\">\"analysis\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token property\">\"analyzer\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token property\">\"ik\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    <span class=\"token property\">\"tokenizer\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ik_max_word\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token property\">\"mappings\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token property\">\"novel\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token property\">\"properties\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"long\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token property\">\"store\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    <span class=\"token property\">\"store\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token property\">\"analyzer\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"ik_smart\"</span><span class=\"token comment\">// 指定字段分词器</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token property\">\"store\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token property\">\"store\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>ik_max_word ：会将文本做最细粒度的拆分，会穷尽各种可能的组合。</li>\n<li>ik_smart ：会做最粗粒度的拆分，比如会将 “中华人民共和国国歌” 拆分为 “中华人民共和国，国歌”。</li>\n</ul>\n<h4 id=\"单词查询\"><a class=\"anchor\" href=\"#单词查询\">#</a> 单词查询</h4>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// POST http://127.0.0.1:9200/novel/archive/_search</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token property\">\"match\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"中国\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">\"highlight\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token property\">\"fields\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"多词查询\"><a class=\"anchor\" href=\"#多词查询\">#</a> 多词查询</h4>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// POST http://127.0.0.1:9200/novel/archive/_search</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token property\">\"match\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"中国 疫情\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token comment\">// 匹配度需要根据实际使用进行调整</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token comment\">// \"minimun_should_match\": \"80%\", // 匹配度，比例越大，匹配越严格</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token property\">\"opeartor\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"and\"</span> <span class=\"token comment\">// 默认为 or</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token property\">\"highlight\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token property\">\"fields\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"组合查询\"><a class=\"anchor\" href=\"#组合查询\">#</a> 组合查询</h4>\n<p>有点绕，根据使用场景再进行详细的研究即可，此处略去。</p>\n<p>但此处有个 <strong>权重</strong> 的概念，需要稍加留意。</p>\n<h3 id=\"elasticsearch-集群\"><a class=\"anchor\" href=\"#elasticsearch-集群\">#</a> Elasticsearch 集群</h3>\n<h4 id=\"集群节点\"><a class=\"anchor\" href=\"#集群节点\">#</a> 集群节点</h4>\n<p>Elasticsearch 的集群是由多个节点组成的，通过  <code>cluster.name</code>  设置集群名称，并且勇于区分其他的集群，每个节点通过  <code>node.name</code>  指定节点的名称。</p>\n<p>在 Elasticsearch 中，节点的类型主要有 4 种：</p>\n<ul>\n<li>master 节点\n<ul>\n<li>配置文件中  <code>node.master</code>  属性为 true （默认为 true），就有资格被选为 master 节点。</li>\n<li>master 节点用于控制整个集群的操作。比如创建或删除索引，管理其他非 master 节点等。</li>\n</ul>\n</li>\n<li>data 节点\n<ul>\n<li>配置文件中  <code>node.data</code>  属性为 true （默认为 true），就有资格被设置成 data 节点。</li>\n<li>data 节点主要用于执行数据相关的操作。比如文档的 CRUD 。</li>\n</ul>\n</li>\n<li>客户端节点\n<ul>\n<li>配置文件中  <code>node.master</code>  属性和  <code>node.data</code>  属性均为 false 。</li>\n<li>该节点不能作为 master  节点，也不能作为 data 节点。</li>\n<li>可以作为客户端节点，用于响应用户的请求，把请求转发到其他节点。</li>\n</ul>\n</li>\n<li>部落节点\n<ul>\n<li>当一个节点配置  <code>tribe.*</code>  的时候，它是一个特殊的客户端，它可以连接多个集群，在所有连接的集群上执行搜索和其他操作。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"集群搭建\"><a class=\"anchor\" href=\"#集群搭建\">#</a> 集群搭建</h4>\n<h3 id=\"java-客户端\"><a class=\"anchor\" href=\"#java-客户端\">#</a> Java 客户端</h3>\n<p>在 Elasticsearch 中，为 java 提供了两种客户端，一种时 REST 风格的客户端，另一种是 Java API 的客户端。</p>\n<p><strong>准备工作：</strong></p>\n<ol>\n<li>创建测试项目</li>\n<li>添加 pom 依赖</li>\n</ol>\n<h4 id=\"rest-客户端\"><a class=\"anchor\" href=\"#rest-客户端\">#</a> REST 客户端</h4>\n<p>Elasticsearch 又提供了两种 REST 客户端，一种时低级客户端，一种时高级客户端。</p>\n<ul>\n<li>\n<p>Java Low Level REST Client</p>\n<p>官方提供的低级客户端。该客户端通过 http 来连接 Elasticsearch 集群。用户在使用该客户端时需要将请求数据手动拼接陈 Elasticsearch 所需 JSON 格式进行发送，收到响应时同样也需要将返回的 JSON 数据手动封装成对象。虽然麻烦，不过该客户端兼容所有的 Elasticsearch 版本。</p>\n</li>\n<li>\n<p>Java High Level REST Client</p>\n<p>官方提供的高级客户端。该客户端基于低级客户端实现，它提供了很多辩解的 API 来解决低级客户端需要手动转换数据格式的问题。</p>\n</li>\n</ul>\n<h4 id=\"低级客户端\"><a class=\"anchor\" href=\"#低级客户端\">#</a> 低级客户端</h4>\n<h4 id=\"高级客户端\"><a class=\"anchor\" href=\"#高级客户端\">#</a> 高级客户端</h4>\n<h3 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWlKNDExYzdBeg==\">https://www.bilibili.com/video/BV1iJ411c7Az</span></li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "JAVA学习路线",
                "扩展篇",
                "java",
                "ELK",
                "搜索"
            ]
        },
        {
            "id": "https://www.chinmoku.cc/computer-science/resource/wallpaper_site/",
            "url": "https://www.chinmoku.cc/computer-science/resource/wallpaper_site/",
            "title": "高清壁纸网站推荐",
            "date_published": "2021-08-03T13:38:41.000Z",
            "content_html": "<h3 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h3>\n<p>因为在写博客和文章的过程中，经常使用图片作为封面，所以就专门收集整理了一些比较优质的图片资源网站。</p>\n<h3 id=\"高清壁纸网站\"><a class=\"anchor\" href=\"#高清壁纸网站\">#</a> 高清壁纸网站</h3>\n<h4 id=\"极简壁纸推荐\"><a class=\"anchor\" href=\"#极简壁纸推荐\">#</a> 极简壁纸（推荐）</h4>\n<p>网址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iei56enptaC5jbi9pbmRleA==\">https://bz.zzzmh.cn/index</span></p>\n<p>特点：站点很简单，多是二次元壁纸，不需要登录即可下载，分辨率基本是 2K 往上，而且网站和图片都很干净。</p>\n<p>缺点：种类相对较少。</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/03/bc464392aaba04fa9a34bab85577a6f81627991797.png\" alt=\"网站截图：极简壁纸\" /></p>\n<h4 id=\"wallpapercave\"><a class=\"anchor\" href=\"#wallpapercave\">#</a> WallpaperCave</h4>\n<p>网址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93YWxscGFwZXJjYXZlLmNvbQ==\">https://wallpapercave.com</span></p>\n<p>特点：图片种类相当多，各种各样的分辨率都有。</p>\n<p>缺点：-</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/03/a18ac86c6fc14d5cd706f948818f49721627992962.png\" alt=\"网站截图：WallpaperCave\" /></p>\n<h4 id=\"cgwallpapers\"><a class=\"anchor\" href=\"#cgwallpapers\">#</a> CGWALLPAPERS</h4>\n<p>网址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2d3YWxscGFwZXJzLmNvbQ==\">https://www.cgwallpapers.com</span></p>\n<p>特点：游戏壁纸居多。</p>\n<p>缺点：网站内多是带水印的缩略图，获取原图需要跳转来源网站（基本上是游戏网站），探索成本相对较大。</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/03/f92590a441d032c296353a471f26e1181627993984.png\" alt=\"网站截图：CGWALLPAPERS\" /></p>\n<h4 id=\"h128壁纸\"><a class=\"anchor\" href=\"#h128壁纸\">#</a> H128 壁纸</h4>\n<p>网址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaDEyOC5jb20=\">https://www.h128.com</span></p>\n<p>特点：瀑布流显示。</p>\n<p>缺点：部分图片趣味有点低（国内现状，但重在筛选），另外，需要注册账号才能下载。</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/03/3790f0f9475081426a95212b4ede478f1627997715.png\" alt=\"网站截图：H128壁纸\" /></p>\n<h4 id=\"magdeleine\"><a class=\"anchor\" href=\"#magdeleine\">#</a> Magdeleine</h4>\n<p>网址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYWdkZWxlaW5lLmNvL2Jyb3dzZQ==\">https://magdeleine.co/browse</span></p>\n<p>特点：多是文艺偏向的图片，即滤镜的感觉比较重。</p>\n<p>缺点：多是文艺偏向的图片，即滤镜的感觉比较重。</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/03/f5f84bdec85fbcaf4b53b19e3a52023b1627997727.png\" alt=\"网站截图：Magdeleine\" /></p>\n<h4 id=\"unsplash\"><a class=\"anchor\" href=\"#unsplash\">#</a> Unsplash</h4>\n<p>网址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly91bnNwbGFzaC5jb20=\">https://unsplash.com</span></p>\n<p>特点：多欧美风的图片。</p>\n<p>缺点：-</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/03/a3fffaf39d9df99f8b7274ee7c9f3d6d1627997732.png\" alt=\"网站截图：Unsplash\" /></p>\n<h4 id=\"wallroom\"><a class=\"anchor\" href=\"#wallroom\">#</a> Wallroom</h4>\n<p>网址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93YWxscm9vbS5pbw==\">https://wallroom.io</span></p>\n<p>特点：-</p>\n<p>缺点：-</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/03/98dd0b40044bee252c0a66d2f9a6903d1627997756.png\" alt=\"网站截图：Wallroom\" /></p>\n<h4 id=\"wallheaven\"><a class=\"anchor\" href=\"#wallheaven\">#</a> wallheaven</h4>\n<p>特点：-</p>\n<p>缺点：-</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/03/91adcc416791b1234d9adbcc879f62181627997773.png\" alt=\"网站截图：Wallheaven\" /></p>\n<h4 id=\"彼岸图网\"><a class=\"anchor\" href=\"#彼岸图网\">#</a> 彼岸图网</h4>\n<p>特点：-</p>\n<p>缺点：需要登录，每天仅供一张壁纸下载（网站公告已说明）。</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/03/9a19ee6b7a2018b94583da1185583b011627997792.png\" alt=\"网站截图：彼岸图网\" /></p>\n<h4 id=\"netnr\"><a class=\"anchor\" href=\"#netnr\">#</a> Netnr</h4>\n<p>网址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcy5uZXRuci5jb20vd2FsbHBhcGVy\">https://ss.netnr.com/wallpaper</span></p>\n<p>特点：其实是一个工具集网站，页面干净。</p>\n<p>缺点：索引稍有点不方便。</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/03/53efa1817a6b15ed4ab47013b90497ef1627997820.png\" alt=\"网站截图：Netnr\" /></p>\n<h4 id=\"千叶网\"><a class=\"anchor\" href=\"#千叶网\">#</a> 千叶网</h4>\n<p>网址：<span class=\"exturl\" data-url=\"aHR0cDovL3FpYW55ZTg4LmNvbQ==\">http://qianye88.com</span></p>\n<p>特点：-</p>\n<p>缺点：需要登录，非 https 协议。</p>\n<p><img data-src=\"https://img.xfc-exclave.com/2021/08/03/aa0723ff48c533f858765cbdeaa462c31627997835.png\" alt=\"网站截图：千叶网\" /></p>\n",
            "tags": [
                "资源收集",
                "资源",
                "推荐"
            ]
        }
    ]
}